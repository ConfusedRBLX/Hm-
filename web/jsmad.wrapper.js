// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  assert(STATICTOP < TOTAL_MEMORY, 'not enough memory for static allocation - increase TOTAL_MEMORY');
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    err('warning: addFunction(): You should provide a wasm function signature string as a second argument. This is not necessary for asm.js and asm2wasm, but is required for the LLVM wasm backend, so it is recommended for full portability.');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 71456;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_wrapper_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });


/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,5,128,15,128,10,0,27,128,30,0,20,0,17,128,51,128,54,0,60,0,57,128,40,0,45,128,39,128,34,0,99,128,102,0,108,0,105,128,120,0,125,128,119,128,114,0,80,0,85,128,95,128,90,0,75,128,78,0,68,0,65,128,195,128,198,0,204,0,201,128,216,0,221,128,215,128,210,0,240,0,245,128,255,128,250,0,235,128,238,0,228,0,225,128,160,0,165,128,175,128,170,0,187,128,190,0,180,0,177,128,147,128,150,0,156,0,153,128,136,0,141,128,135,128,130,0,131,129,134,1,140,1,137,129,152,1,157,129,151,129,146,1,176,1,181,129,191,129,186,1,171,129,174,1,164,1,161,129,224,1,229,129,239,129,234,1,251,129,254,1,244,1,241,129,211,129,214,1,220,1,217,129,200,1,205,129,199,129,194,1,64,1,69,129,79,129,74,1,91,129,94,1,84,1,81,129,115,129,118,1,124,1,121,129,104,1,109,129,103,129,98,1,35,129,38,1,44,1,41,129,56,1,61,129,55,129,50,1,16,1,21,129,31,129,26,1,11,129,14,1,4,1,1,129,3,131,6,3,12,3,9,131,24,3,29,131,23,131,18,3,48,3,53,131,63,131,58,3,43,131,46,3,36,3,33,131,96,3,101,131,111,131,106,3,123,131,126,3,116,3,113,131,83,131,86,3,92,3,89,131,72,3,77,131,71,131,66,3,192,3,197,131,207,131,202,3,219,131,222,3,212,3,209,131,243,131,246,3,252,3,249,131,232,3,237,131,231,131,226,3,163,131,166,3,172,3,169,131,184,3,189,131,183,131,178,3,144,3,149,131,159,131,154,3,139,131,142,3,132,3,129,131,128,2,133,130,143,130,138,2,155,130,158,2,148,2,145,130,179,130,182,2,188,2,185,130,168,2,173,130,167,130,162,2,227,130,230,2,236,2,233,130,248,2,253,130,247,130,242,2,208,2,213,130,223,130,218,2,203,130,206,2,196,2,193,130,67,130,70,2,76,2,73,130,88,2,93,130,87,130,82,2,112,2,117,130,127,130,122,2,107,130,110,2,100,2,97,130,32,2,37,130,47,130,42,2,59,130,62,2,52,2,49,130,19,130,22,2,28,2,25,130,8,2,13,130,7,130,2,2,0,0,0,0,0,125,0,0,0,250,0,0,0,119,1,0,0,244,1,0,0,113,2,0,0,238,2,0,0,107,3,0,0,232,3,0,0,101,4,0,0,226,4,0,0,95,5,0,0,220,5,0,0,89,6,0,0,214,6,0,0,0,0,0,0,125,0,0,128,187,0,0,192,218,0,0,0,250,0,0,128,56,1,0,0,119,1,0,128,181,1,0,0,244,1,0,0,113,2,0,0,238,2,0,0,107,3,0,0,232,3,0,0,226,4,0,0,220,5,0,0,0,0,0,0,125,0,0,64,156,0,0,128,187,0,0,192,218,0,0,0,250,0,0,128,56,1,0,0,119,1,0,128,181,1,0,0,244,1,0,0,113,2,0,0,238,2,0,0,107,3,0,0,232,3,0,0,226,4,0,0,0,0,0,0,125,0,0,128,187,0,0,192,218,0,0,0,250,0,0,128,56,1,0,0,119,1,0,128,181,1,0,0,244,1,0,128,50,2,0,0,113,2,0,128,175,2,0,0,238,2,0,0,107,3,0,0,232,3,0,0,0,0,0,64,31,0,0,128,62,0,0,192,93,0,0,0,125,0,0,64,156,0,0,128,187,0,0,192,218,0,0,0,250,0,0,128,56,1,0,0,119,1,0,128,181,1,0,0,244,1,0,128,50,2,0,0,113,2,0,0,0,0,0,0,0,0,0,227,255,255,255,213,0,0,0,53,254,255,255,245,7,0,0,223,235,255,255,174,25,0,0,143,109,255,255,30,37,1,0,113,146,0,0,174,25,0,0,33,20,0,0,245,7,0,0,203,1,0,0,213,0,0,0,29,0,0,0,0,0,0,0,227,255,255,255,213,0,0,0,53,254,255,255,245,7,0,0,223,235,255,255,174,25,0,0,143,109,255,255,30,37,1,0,113,146,0,0,174,25,0,0,33,20,0,0,245,7,0,0,203,1,0,0,213,0,0,0,29,0,0,0,255,255,255,255,225,255,255,255,218,0,0,0,249,253,255,255,208,7,0,0,115,234,255,255,71,23,0,0,88,102,255,255,240,36,1,0,56,139,0,0,222,27,0,0,180,18,0,0,15,8,0,0,145,1,0,0,208,0,0,0,26,0,0,0,255,255,255,255,225,255,255,255,218,0,0,0,249,253,255,255,208,7,0,0,115,234,255,255,71,23,0,0,88,102,255,255,240,36,1,0,56,139,0,0,222,27,0,0,180,18,0,0,15,8,0,0,145,1,0,0,208,0,0,0,26,0,0,0,255,255,255,255,221,255,255,255,222,0,0,0,187,253,255,255,160,7,0,0,9,233,255,255,168,20,0,0,40,95,255,255,104,36,1,0,255,131,0,0,216,29,0,0,73,17,0,0,32,8,0,0,91,1,0,0,202,0,0,0,24,0,0,0,255,255,255,255,221,255,255,255,222,0,0,0,187,253,255,255,160,7,0,0,9,233,255,255,168,20,0,0,40,95,255,255,104,36,1,0,255,131,0,0,216,29,0,0,73,17,0,0,32,8,0,0,91,1,0,0,202,0,0,0,24,0,0,0,255,255,255,255,218,255,255,255,225,0,0,0,123,253,255,255,101,7,0,0,163,231,255,255,209,17,0,0,2,88,255,255,134,35,1,0,203,124,0,0,156,31,0,0,223,15,0,0,39,8,0,0,38,1,0,0,196,0,0,0,21,0,0,0,255,255,255,255,218,255,255,255,225,0,0,0,123,253,255,255,101,7,0,0,163,231,255,255,209,17,0,0,2,88,255,255,134,35,1,0,203,124,0,0,156,31,0,0,223,15,0,0,39,8,0,0,38,1,0,0,196,0,0,0,21,0,0,0,255,255,255,255,215,255,255,255,227,0,0,0,57,253,255,255,30,7,0,0,67,230,255,255,192,14,0,0,235,80,255,255,73,34,1,0,160,117,0,0,44,33,0,0,121,14,0,0,37,8,0,0,244,0,0,0,190,0,0,0,19,0,0,0,255,255,255,255,215,255,255,255,227,0,0,0,57,253,255,255,30,7,0,0,67,230,255,255,192,14,0,0,235,80,255,255,73,34,1,0,160,117,0,0,44,33,0,0,121,14,0,0,37,8,0,0,244,0,0,0,190,0,0,0,19,0,0,0,255,255,255,255,211,255,255,255,228,0,0,0,245,252,255,255,203,6,0,0,233,228,255,255,119,11,0,0,231,73,255,255,180,32,1,0,129,110,0,0,136,34,0,0,23,13,0,0,27,8,0,0,197,0,0,0,183,0,0,0,17,0,0,0,255,255,255,255,211,255,255,255,228,0,0,0,245,252,255,255,203,6,0,0,233,228,255,255,119,11,0,0,231,73,255,255,180,32,1,0,129,110,0,0,136,34,0,0,23,13,0,0,27,8,0,0,197,0,0,0,183,0,0,0,17,0,0,0,255,255,255,255,207,255,255,255,228,0,0,0,176,252,255,255,108,6,0,0,153,227,255,255,245,7,0,0,250,66,255,255,199,30,1,0,114,103,0,0,179,35,0,0,188,11,0,0,9,8,0,0,153,0,0,0,176,0,0,0,16,0,0,0,255,255,255,255,207,255,255,255,228,0,0,0,176,252,255,255,108,6,0,0,153,227,255,255,245,7,0,0,250,66,255,255,199,30,1,0,114,103,0,0,179,35,0,0,188,11,0,0,9,8,0,0,153,0,0,0,176,0,0,0,16,0,0,0,254,255,255,255,203,255,255,255,227,0,0,0,105,252,255,255,255,5,0,0,83,226,255,255,58,4,0,0,39,60,255,255,131,28,1,0,118,96,0,0,173,36,0,0,103,10,0,0,240,7,0,0,111,0,0,0,169,0,0,0,14,0,0,0,254,255,255,255,203,255,255,255,227,0,0,0,105,252,255,255,255,5,0,0,83,226,255,255,58,4,0,0,39,60,255,255,131,28,1,0,118,96,0,0,173,36,0,0,103,10,0,0,240,7,0,0,111,0,0,0,169,0,0,0,14,0,0,0,254,255,255,255,198,255,255,255,224,0,0,0,33,252,255,255,134,5,0,0,26,225,255,255,70,0,0,0,115,53,255,255,233,25,1,0,145,89,0,0,120,37,0,0,26,9,0,0,209,7,0,0,72,0,0,0,161,0,0,0,13,0,0,0,254,255,255,255,198,255,255,255,224,0,0,0,33,252,255,255,134,5,0,0,26,225,255,255,70,0,0,0,115,53,255,255,233,25,1,0,145,89,0,0,120,37,0,0,26,9,0,0,209,7,0,0,72,0,0,0,161,0,0,0,13,0,0,0,254,255,255,255,193,255,255,255,221,0,0,0,216,251,255,255,0,5,0,0,239,223,255,255,26,252,255,255,226,46,255,255,252,22,1,0,197,82,0,0,22,38,0,0,214,7,0,0,170,7,0,0,36,0,0,0,154,0,0,0,11,0,0,0,254,255,255,255,193,255,255,255,221,0,0,0,216,251,255,255,0,5,0,0,239,223,255,255,26,252,255,255,226,46,255,255,252,22,1,0,197,82,0,0,22,38,0,0,214,7,0,0,170,7,0,0,36,0,0,0,154,0,0,0,11,0,0,0,254,255,255,255,188,255,255,255,215,0,0,0,143,251,255,255,107,4,0,0,213,222,255,255,182,247,255,255,118,40,255,255,190,19,1,0,22,76,0,0,135,38,0,0,156,6,0,0,127,7,0,0,2,0,0,0,147,0,0,0,10,0,0,0,254,255,255,255,188,255,255,255,215,0,0,0,143,251,255,255,107,4,0,0,213,222,255,255,182,247,255,255,118,40,255,255,190,19,1,0,22,76,0,0,135,38,0,0,156,6,0,0,127,7,0,0,2,0,0,0,147,0,0,0,10,0,0,0,253,255,255,255,183,255,255,255,208,0,0,0,70,251,255,255,202,3,0,0,205,221,255,255,28,243,255,255,54,34,255,255,47,16,1,0,135,69,0,0,207,38,0,0,108,5,0,0,78,7,0,0,227,255,255,255,139,0,0,0,9,0,0,0,253,255,255,255,183,255,255,255,208,0,0,0,70,251,255,255,202,3,0,0,205,221,255,255,28,243,255,255,54,34,255,255,47,16,1,0,135,69,0,0,207,38,0,0,108,5,0,0,78,7,0,0,227,255,255,255,139,0,0,0,9,0,0,0,253,255,255,255,177,255,255,255,200,0,0,0,253,250,255,255,26,3,0,0,218,220,255,255,75,238,255,255,35,28,255,255,84,12,1,0,27,63,0,0,238,38,0,0,71,4,0,0,25,7,0,0,199,255,255,255,132,0,0,0,8,0,0,0,253,255,255,255,177,255,255,255,200,0,0,0,253,250,255,255,26,3,0,0,218,220,255,255,75,238,255,255,35,28,255,255,84,12,1,0,27,63,0,0,238,38,0,0,71,4,0,0,25,7,0,0,199,255,255,255,132,0,0,0,8,0,0,0,252,255,255,255,171,255,255,255,189,0,0,0,180,250,255,255,93,2,0,0,253,219,255,255,70,233,255,255,66,22,255,255,45,8,1,0,212,56,0,0,231,38,0,0,46,3,0,0,223,6,0,0,173,255,255,255,125,0,0,0,7,0,0,0,252,255,255,255,171,255,255,255,189,0,0,0,180,250,255,255,93,2,0,0,253,219,255,255,70,233,255,255,66,22,255,255,45,8,1,0,212,56,0,0,231,38,0,0,46,3,0,0,223,6,0,0,173,255,255,255,125,0,0,0,7,0,0,0,252,255,255,255,165,255,255,255,177,0,0,0,108,250,255,255,146,1,0,0,56,219,255,255,14,228,255,255,151,16,255,255,190,3,1,0,180,50,0,0,188,38,0,0,33,2,0,0,162,6,0,0,150,255,255,255,117,0,0,0,7,0,0,0,252,255,255,255,165,255,255,255,177,0,0,0,108,250,255,255,146,1,0,0,56,219,255,255,14,228,255,255,151,16,255,255,190,3,1,0,180,50,0,0,188,38,0,0,33,2,0,0,162,6,0,0,150,255,255,255,117,0,0,0,7,0,0,0,251,255,255,255,159,255,255,255,163,0,0,0,38,250,255,255,185,0,0,0,143,218,255,255,164,222,255,255,36,11,255,255,10,255,0,0,191,44,0,0,110,38,0,0,32,1,0,0,98,6,0,0,129,255,255,255,111,0,0,0,6,0,0,0,251,255,255,255,159,255,255,255,163,0,0,0,38,250,255,255,185,0,0,0,143,218,255,255,164,222,255,255,36,11,255,255,10,255,0,0,191,44,0,0,110,38,0,0,32,1,0,0,98,6,0,0,129,255,255,255,111,0,0,0,6,0,0,0,251,255,255,255,152,255,255,255,146,0,0,0,225,249,255,255,211,255,255,255,1,218,255,255,9,217,255,255,237,5,255,255,19,250,0,0,247,38,0,0,255,37,0,0,45,0,0,0,31,6,0,0,110,255,255,255,104,0,0,0,5,0,0,0,251,255,255,255,152,255,255,255,146,0,0,0,225,249,255,255,211,255,255,255,1,218,255,255,9,217,255,255,237,5,255,255,19,250,0,0,247,38,0,0,255,37,0,0,45,0,0,0,31,6,0,0,110,255,255,255,104,0,0,0,5,0,0,0,85,85,85,21,146,36,73,18,17,17,17,17,8,33,132,16,16,4,65,16,129,64,32,16,16,16,16,16,2,4,8,16,0,1,4,16,64,0,2,16,16,0,1,16,4,128,0,16,1,64,0,16,0,32,0,16,0,0,0,0,0,0,0,0,0,0,0,32,165,254,101,25,250,162,40,20,0,0,0,16,83,255,178,12,125,81,20,10,0,0,0,8,169,127,89,6,190,40,10,5,0,0,0,4,213,191,44,3,95,20,133,2,0,0,0,2,234,95,150,1,48,138,66,1,0,0,0,1,245,47,203,0,24,69,161,0,0,0,128,0,251,151,101,0,140,162,80,0,0,0,64,0,253,203,50,0,70,81,40,0,0,0,32,0,255,101,25,0,163,40,20,0,0,0,16,0,255,178,12,0,81,20,10,0,0,0,8,0,128,89,6,0,41,10,5,0,0,0,4,0,192,44,3,0,20,133,2,0,0,0,2,0,96,150,1,0,138,66,1,0,0,0,1,0,48,203,0,0,69,161,0,0,0,128,0,0,152,101,0,0,163,80,0,0,0,64,0,0,204,50,0,0,81,40,0,0,0,32,0,0,102,25,0,0,41,20,0,0,0,16,0,0,179,12,0,0,20,10,0,0,0,8,0,0,89,6,0,0,10,5,0,0,0,4,0,0,45,3,0,0,133,2,0,0,0,2,0,0,150,1,0,0,67,1,0,0,0,0,0,0,27,0,0,0,7,7,7,6,6,6,6,6,6,6,6,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,30,0,0,0,7,7,7,6,6,6,6,6,6,6,6,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,8,0,0,0,5,5,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,5,5,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,4,4,4,4,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,3,0,3,0,3,0,3,0,1,0,4,0,2,0,4,0,3,0,4,0,4,0,4,0,5,0,0,1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,16,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,0,1,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,0,0,0,0,0,0,3,0,2,5,85,85,85,21,0,0,0,8,5,0,3,7,154,153,153,25,0,0,0,8,7,0,0,3,146,36,73,18,0,0,0,4,9,0,4,10,28,199,113,28,0,0,0,8,15,0,0,4,17,17,17,17,0,0,0,2,31,0,0,5,8,33,132,16,0,0,0,1,63,0,0,6,16,4,65,16,0,0,128,0,127,0,0,7,129,64,32,16,0,0,64,0,255,0,0,8,16,16,16,16,0,0,32,0,255,1,0,9,2,4,8,16,0,0,16,0,255,3,0,10,0,1,4,16,0,0,8,0,255,7,0,11,64,0,2,16,0,0,4,0,255,15,0,12,16,0,1,16,0,0,2,0,255,31,0,13,4,128,0,16,0,0,1,0,255,63,0,14,1,64,0,16,0,128,0,0,255,127,0,15,0,32,0,16,0,64,0,0,255,255,0,16,0,16,0,16,0,32,0,0,0,0,0,0,16,145,0,0,48,145,0,0,96,145,0,0,144,145,0,0,176,145,0,0,224,145,0,0,16,146,0,0,48,146,0,0,96,146,0,0,144,146,0,0,176,146,0,0,224,146,0,0,16,147,0,0,48,147,0,0,96,147,0,0,16,147,0,0,144,147,0,0,192,147,0,0,16,147,0,0,144,147,0,0,192,147,0,0,16,147,0,0,144,147,0,0,192,147,0,0,240,147,0,0,16,148,0,0,64,148,0,0,0,0,0,0,6,5,5,5,9,9,9,9,6,9,9,9,6,5,7,3,9,9,12,6,6,9,12,6,11,10,0,0,18,18,0,0,15,18,0,0,7,7,7,0,12,12,12,0,6,15,12,0,6,6,6,3,12,9,9,6,6,12,9,6,8,8,5,0,15,12,9,0,6,18,9,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,3,3,0,1,1,1,2,1,3,2,1,2,2,2,3,3,1,3,2,3,3,4,2,4,3,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,3,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,190,40,10,29,205,165,83,36,169,127,89,38,117,98,70,44,114,140,115,45,129,252,177,46,0,0,0,52,215,32,174,52,148,214,98,53,150,174,29,54,244,71,222,54,122,79,164,55,101,190,55,60,36,200,159,60,190,40,10,61,245,198,118,61,11,140,229,61,97,99,86,62,46,58,201,62,62,255,61,63,188,162,180,63,5,139,22,68,205,165,83,68,106,155,145,68,251,101,208,68,0,0,16,69,81,100,80,69,21,142,145,69,187,120,211,69,243,31,22,70,169,127,89,70,0,148,157,70,76,89,226,70,17,204,39,71,252,232,109,71,227,172,180,71,191,20,252,71,215,14,34,76,117,98,70,76,231,3,107,76,232,241,143,76,63,43,181,76,192,174,218,76,73,123,0,77,198,143,38,77,42,235,76,77,114,140,115,77,165,114,154,77,211,156,193,77,18,10,233,77,130,185,16,78,72,170,56,78,145,219,96,78,144,76,137,78,129,252,177,78,161,234,218,78,54,22,4,79,139,126,45,79,239,34,87,79,184,2,129,79,62,29,171,79,224,113,213,79,0,0,0,84,129,99,21,84,42,227,42,84,177,126,64,84,207,53,86,84,62,8,108,84,187,245,129,84,3,254,151,84,215,32,174,84,246,93,196,84,36,181,218,84,36,38,241,84,188,176,7,85,177,84,30,85,203,17,53,85,212,231,75,85,148,214,98,85,216,221,121,85,108,253,144,85,28,53,168,85,184,132,191,85,14,236,214,85,239,106,238,85,43,1,6,86,150,174,29,86,2,115,53,86,67,78,77,86,45,64,101,86,150,72,125,86,83,103,149,86,61,156,173,86,43,231,197,86,244,71,222,86,115,190,246,86,128,74,15,87,247,235,39,87,178,162,64,87,141,110,89,87,100,79,114,87,20,69,139,87,122,79,164,87,117,110,189,87,226,161,214,87,161,233,239,87,201,162,4,92,202,90,17,92,196,28,30,92,167,232,42,92,101,190,55,92,238,157,68,92,51,135,81,92,38,122,94,92,185,118,107,92,220,124,120,92,131,140,133,92,159,165,146,92,36,200,159,92,2,244,172,92,46,41,186,92,154,103,199,92,58,175,212,92,0,0,226,92,224,89,239,92,206,188,252,92,190,40,10,93,164,157,23,93,115,27,37,93,32,162,50,93,160,49,64,93,231,201,77,93,233,106,91,93,156,20,105,93,245,198,118,93,233,129,132,93,109,69,146,93,118,17,160,93,250,229,173,93,239,194,187,93,74,168,201,93,1,150,215,93,11,140,229,93,93,138,243,93,238,144,1,94,179,159,15,94,165,182,29,94,184,213,43,94,228,252,57,94,31,44,72,94,97,99,86,94,160,162,100,94,212,233,114,94,243,56,129,94,245,143,143,94,209,238,157,94,127,85,172,94,246,195,186,94,46,58,201,94,31,184,215,94,192,61,230,94,9,203,244,94,243,95,3,95,117,252,17,95,135,160,32,95,34,76,47,95,62,255,61,95,211,185,76,95,219,123,91,95,76,69,106,95,32,22,121,95,80,238,135,95,212,205,150,95,165,180,165,95,188,162,180,95,18,152,195,95,160,148,210,95,95,152,225,95,72,163,240,95,84,181,255,95,63,103,7,100,94,247,14,100,5,139,22,100,48,34,30,100,221,188,37,100,7,91,45,100,173,252,52,100,201,161,60,100,90,74,68,100,93,246,75,100,205,165,83,100,169,88,91,100,237,14,99,100,150,200,106,100,162,133,114,100,12,70,122,100,211,9,130,100,244,208,137,100,106,155,145,100,53,105,153,100,80,58,161,100,186,14,169,100,110,230,176,100,108,193,184,100,175,159,192,100,53,129,200,100,251,101,208,100,255,77,216,100,62,57,224,100,182,39,232,100,99,25,240,100,68,14,248,100,85,6,0,101,149,1,8,101,0,0,16,101,148,1,24,101,79,6,32,101,45,14,40,101,46,25,48,101,78,39,56,101,138,56,64,101,226,76,72,101,81,100,80,101,213,126,88,101,110,156,96,101,23,189,104,101,207,224,112,101,147,7,121,101,98,49,129,101,57,94,137,101,21,142,145,101,244,192,153,101,213,246,161,101,181,47,170,101,146,107,178,101,105,170,186,101,57,236,194,101,0,49,203,101,187,120,211,101,104,195,219,101,5,17,228,101,144,97,236,101,7,181,244,101,104,11,253,101,177,100,5,102,224,192,13,102,243,31,22,102,232,129,30,102,188,230,38,102,111,78,47,102,253,184,55,102,102,38,64,102,167,150,72,102,190,9,81,102,169,127,89,102,103,248,97,102,245,115,106,102,82,242,114,102,124,115,123,102,113,247,131,102,47,126,140,102,181,7,149,102,0,148,157,102,15,35,166,102,224,180,174,102,113,73,183,102,192,224,191,102,204,122,200,102,148,23,209,102,20,183,217,102,76,89,226,102,58,254,234,102,220,165,243,102,48,80,252,102,53,253,4,103,234,172,13,103,75,95,22,103,89,20,31,103,17,204,39,103,113,134,48,103,120,67,57,103,37,3,66,103,117,197,74,103,103,138,83,103,250,81,92,103,44,28,101,103,252,232,109,103,103,184,118,103,109,138,127,103,11,95,136,103,65,54,145,103,12,16,154,103,108,236,162,103,95,203,171,103,227,172,180,103,246,144,189,103,152,119,198,103,199,96,207,103,129,76,216,103,197,58,225,103,146,43,234,103,230,30,243,103,191,20,252,103,142,134,2,108,255,3,7,108,176,130,11,108,161,2,16,108,209,131,20,108,64,6,25,108,237,137,29,108,215,14,34,108,254,148,38,108,96,28,43,108,254,164,47,108,215,46,52,108,233,185,56,108,53,70,61,108,185,211,65,108,117,98,70,108,105,242,74,108,147,131,79,108,243,21,84,108,137,169,88,108,83,62,93,108,81,212,97,108,131,107,102,108,231,3,107,108,126,157,111,108,71,56,116,108,64,212,120,108,106,113,125,108,195,15,130,108,76,175,134,108,3,80,139,108,232,241,143,108,251,148,148,108,58,57,153,108,165,222,157,108,60,133,162,108,254,44,167,108,234,213,171,108,0,128,176,108,63,43,181,108,167,215,185,108,55,133,190,108,238,51,195,108,204,227,199,108,209,148,204,108,251,70,209,108,75,250,213,108,192,174,218,108,88,100,223,108,20,27,228,108,243,210,232,108,245,139,237,108,24,70,242,108,93,1,247,108,195,189,251,108,73,123,0,109,239,57,5,109,180,249,9,109,152,186,14,109,154,124,19,109,186,63,24,109,247,3,29,109,80,201,33,109,198,143,38,109,87,87,43,109,3,32,48,109,202,233,52,109,171,180,57,109,166,128,62,109,185,77,67,109,229,27,72,109,42,235,76,109,133,187,81,109,248,140,86,109,129,95,91,109,33,51,96,109,214,7,101,109,160,221,105,109,127,180,110,109,114,140,115,109,120,101,120,109,146,63,125,109,191,26,130,109,253,246,134,109,78,212,139,109,176,178,144,109,34,146,149,109,165,114,154,109,56,84,159,109,218,54,164,109,140,26,169,109,76,255,173,109,26,229,178,109,245,203,183,109,222,179,188,109,211,156,193,109,213,134,198,109,226,113,203,109,251,93,208,109,31,75,213,109,77,57,218,109,133,40,223,109,199,24,228,109,18,10,233,109,102,252,237,109,194,239,242,109,38,228,247,109,146,217,252,109,4,208,1,110,125,199,6,110,253,191,11,110,130,185,16,110,12,180,21,110,156,175,26,110,47,172,31,110,199,169,36,110,99,168,41,110,2,168,46,110,163,168,51,110,72,170,56,110,238,172,61,110,150,176,66,110,63,181,71,110,233,186,76,110,147,193,81,110,61,201,86,110,231,209,91,110,145,219,96,110,57,230,101,110,223,241,106,110,132,254,111,110,38,12,117,110,198,26,122,110,98,42,127,110,251,58,132,110,144,76,137,110,33,95,142,110,174,114,147,110,53,135,152,110,183,156,157,110,51,179,162,110,169,202,167,110,24,227,172,110,129,252,177,110,226,22,183,110,59,50,188,110,141,78,193,110,214,107,198,110,23,138,203,110,78,169,208,110,124,201,213,110,161,234,218,110,187,12,224,110,202,47,229,110,207,83,234,110,200,120,239,110,182,158,244,110,151,197,249,110,109,237,254,110,54,22,4,111,242,63,9,111,160,106,14,111,65,150,19,111,211,194,24,111,88,240,29,111,205,30,35,111,52,78,40,111,139,126,45,111,210,175,50,111,9,226,55,111,48,21,61,111,70,73,66,111,75,126,71,111,62,180,76,111,32,235,81,111,239,34,87,111,172,91,92,111,87,149,97,111,238,207,102,111,114,11,108,111,226,71,113,111,62,133,118,111,133,195,123,111,184,2,129,111,214,66,134,111,222,131,139,111,209,197,144,111,174,8,150,111,116,76,155,111,36,145,160,111,189,214,165,111,62,29,171,111,168,100,176,111,251,172,181,111,53,246,186,111,86,64,192,111,95,139,197,111,78,215,202,111,36,36,208,111,224,113,213,111,131,192,218,111,10,16,224,111,120,96,229,111,202,177,234,111,1,4,240,111,29,87,245,111,28,171,250,111,0,0,0,116,227,170,2,116,56,86,5,116,255,1,8,116,55,174,10,116,224,90,13,116,250,7,16,116,134,181,18,116,129,99,21,116,238,17,24,116,203,192,26,116,24,112,29,116,213,31,32,116,3,208,34,116,160,128,37,116,173,49,40,116,42,227,42,116,22,149,45,116,114,71,48,116,61,250,50,116,118,173,53,116,31,97,56,116,54,21,59,116,188,201,61,116,177,126,64,116,20,52,67,116,229,233,69,116,36,160,72,116,209,86,75,116,236,13,78,116,117,197,80,116,107,125,83,116,207,53,86,116,159,238,88,116,221,167,91,116,136,97,94,116,160,27,97,116,37,214,99,116,22,145,102,116,116,76,105,116,62,8,108,116,116,196,110,116,22,129,113,116,37,62,116,116,159,251,118,116,132,185,121,116,214,119,124,116,147,54,127,116,187,245,129,116,78,181,132,116,76,117,135,116,182,53,138,116,138,246,140,116,200,183,143,116,114,121,146,116,133,59,149,116,3,254,151,116,235,192,154,116,62,132,157,116,250,71,160,116,32,12,163,116,175,208,165,116,168,149,168,116,11,91,171,116,215,32,174,116,12,231,176,116,170,173,179,116,177,116,182,116,33,60,185,116,250,3,188,116,59,204,190,116,228,148,193,116,246,93,196,116,113,39,199,116,83,241,201,116,157,187,204,116,79,134,207,116,105,81,210,116,235,28,213,116,212,232,215,116,36,181,218,116,220,129,221,116,251,78,224,116,129,28,227,116,110,234,229,116,194,184,232,116,124,135,235,116,157,86,238,116,36,38,241,116,18,246,243,116,102,198,246,116,33,151,249,116,65,104,252,116,199,57,255,116,179,11,2,117,5,222,4,117,188,176,7,117,216,131,10,117,91,87,13,117,66,43,16,117,142,255,18,117,64,212,21,117,86,169,24,117,209,126,27,117,177,84,30,117,245,42,33,117,158,1,36,117,171,216,38,117,29,176,41,117,242,135,44,117,44,96,47,117,202,56,50,117,203,17,53,117,48,235,55,117,249,196,58,117,37,159,61,117,181,121,64,117,168,84,67,117,254,47,70,117,183,11,73,117,212,231,75,117,83,196,78,117,52,161,81,117,121,126,84,117,32,92,87,117,42,58,90,117,150,24,93,117,100,247,95,117,148,214,98,117,39,182,101,117,27,150,104,117,113,118,107,117,41,87,110,117,67,56,113,117,190,25,116,117,154,251,118,117,216,221,121,117,119,192,124,117,120,163,127,117,217,134,130,117,155,106,133,117,190,78,136,117,66,51,139,117,39,24,142,117,108,253,144,117,17,227,147,117,23,201,150,117,125,175,153,117,67,150,156,117,106,125,159,117,240,100,162,117,214,76,165,117,28,53,168,117,194,29,171,117,199,6,174,117,43,240,176,117,240,217,179,117,19,196,182,117,149,174,185,117,119,153,188,117,184,132,191,117,87,112,194,117,86,92,197,117,179,72,200,117,110,53,203,117,137,34,206,117,1,16,209,117,216,253,211,117,14,236,214,117,161,218,217,117,147,201,220,117,226,184,223,117,144,168,226,117,155,152,229,117,4,137,232,117,203,121,235,117,239,106,238,117,112,92,241,117,79,78,244,117,139,64,247,117,36,51,250,117,27,38,253,117,110,25,0,118,30,13,3,118,43,1,6,118,149,245,8,118,92,234,11,118,127,223,14,118,254,212,17,118,218,202,20,118,18,193,23,118,166,183,26,118,150,174,29,118,227,165,32,118,139,157,35,118,143,149,38,118,239,141,41,118,170,134,44,118,193,127,47,118,52,121,50,118,2,115,53,118,43,109,56,118,176,103,59,118,144,98,62,118,203,93,65,118,96,89,68,118,81,85,71,118,156,81,74,118,67,78,77,118,68,75,80,118,159,72,83,118,85,70,86,118,101,68,89,118,208,66,92,118,149,65,95,118,180,64,98,118,45,64,101,118,0,64,104,118,45,64,107,118,179,64,110,118,148,65,113,118,206,66,116,118,98,68,119,118,79,70,122,118,150,72,125,118,54,75,128,118,47,78,131,118,129,81,134,118,44,85,137,118,49,89,140,118,142,93,143,118,69,98,146,118,83,103,149,118,187,108,152,118,123,114,155,118,148,120,158,118,5,127,161,118,207,133,164,118,241,140,167,118,107,148,170,118,61,156,173,118,104,164,176,118,234,172,179,118,196,181,182,118,246,190,185,118,128,200,188,118,97,210,191,118,154,220,194,118,43,231,197,118,19,242,200,118,82,253,203,118,233,8,207,118,215,20,210,118,28,33,213,118,184,45,216,118,170,58,219,118,244,71,222,118,149,85,225,118,141,99,228,118,219,113,231,118,127,128,234,118,123,143,237,118,204,158,240,118,117,174,243,118,115,190,246,118,200,206,249,118,114,223,252,118,115,240,255,118,202,1,3,119,119,19,6,119,122,37,9,119,210,55,12,119,128,74,15,119,132,93,18,119,222,112,21,119,141,132,24,119,145,152,27,119,235,172,30,119,154,193,33,119,158,214,36,119,247,235,39,119,166,1,43,119,169,23,46,119,1,46,49,119,174,68,52,119,176,91,55,119,7,115,58,119,178,138,61,119,178,162,64,119,6,187,67,119,175,211,70,119,172,236,73,119,254,5,77,119,163,31,80,119,157,57,83,119,235,83,86,119,141,110,89,119,131,137,92,119,204,164,95,119,106,192,98,119,91,220,101,119,160,248,104,119,56,21,108,119,36,50,111,119,100,79,114,119,247,108,117,119,221,138,120,119,22,169,123,119,163,199,126,119,131,230,129,119,181,5,133,119,59,37,136,119,20,69,139,119,63,101,142,119,190,133,145,119,143,166,148,119,178,199,151,119,41,233,154,119,241,10,158,119,12,45,161,119,122,79,164,119,58,114,167,119,76,149,170,119,176,184,173,119,103,220,176,119,111,0,180,119,202,36,183,119,118,73,186,119,117,110,189,119,197,147,192,119,103,185,195,119,90,223,198,119,159,5,202,119,54,44,205,119,30,83,208,119,87,122,211,119,226,161,214,119,190,201,217,119,236,241,220,119,106,26,224,119,58,67,227,119,90,108,230,119,204,149,233,119,142,191,236,119,161,233,239,119,5,20,243,119,186,62,246,119,192,105,249,119,22,149,252,119,188,192,255,119,89,118,1,124,125,12,3,124,201,162,4,124,61,57,6,124,217,207,7,124,157,102,9,124,137,253,10,124,158,148,12,124,218,43,14,124,62,195,15,124,202,90,17,124,126,242,18,124,90,138,20,124,93,34,22,124,137,186,23,124,220,82,25,124,87,235,26,124,250,131,28,124,196,28,30,124,182,181,31,124,208,78,33,124,17,232,34,124,121,129,36,124,10,27,38,124,194,180,39,124,161,78,41,124,167,232,42,124,214,130,44,124,43,29,46,124,168,183,47,124,76,82,49,124,23,237,50,124,10,136,52,124,36,35,54,124,101,190,55,124,205,89,57,124,93,245,58,124,19,145,60,124,241,44,62,124,246,200,63,124,34,101,65,124,116,1,67,124,238,157,68,124,143,58,70,124,86,215,71,124,69,116,73,124,90,17,75,124,150,174,76,124,249,75,78,124,131,233,79,124,51,135,81,124,10,37,83,124,8,195,84,124,45,97,86,124,120,255,87,124,234,157,89,124,130,60,91,124,65,219,92,124,38,122,94,124,50,25,96,124,100,184,97,124,189,87,99,124,60,247,100,124,226,150,102,124,174,54,104,124,160,214,105,124,185,118,107,124,247,22,109,124,92,183,110,124,232,87,112,124,153,248,113,124,113,153,115,124,111,58,117,124,146,219,118,124,220,124,120,124,76,30,122,124,226,191,123,124,158,97,125,124,128,3,127,124,136,165,128,124,182,71,130,124,10,234,131,124,131,140,133,124,34,47,135,124,232,209,136,124,211,116,138,124,227,23,140,124,26,187,141,124,118,94,143,124,248,1,145,124,159,165,146,124,108,73,148,124,95,237,149,124,119,145,151,124,181,53,153,124,25,218,154,124,161,126,156,124,80,35,158,124,36,200,159,124,29,109,161,124,59,18,163,124,127,183,164,124,232,92,166,124,119,2,168,124,43,168,169,124,4,78,171,124,2,244,172,124,38,154,174,124,110,64,176,124,220,230,177,124,111,141,179,124,39,52,181,124,5,219,182,124,7,130,184,124,46,41,186,124,122,208,187,124,236,119,189,124,130,31,191,124,61,199,192,124,29,111,194,124,34,23,196,124,76,191,197,124,154,103,199,124,13,16,201,124,166,184,202,124,99,97,204,124,68,10,206,124,75,179,207,124,118,92,209,124,197,5,211,124,58,175,212,124,210,88,214,124,144,2,216,124,114,172,217,124,121,86,219,124,164,0,221,124,243,170,222,124,103,85,224,124,0,0,226,124,189,170,227,124,158,85,229,124,163,0,231,124,205,171,232,124,28,87,234,124,142,2,236,124,37,174,237,124,224,89,239,124,191,5,241,124,195,177,242,124,234,93,244,124,54,10,246,124,166,182,247,124,58,99,249,124,242,15,251,124,206,188,252,124,206,105,254,124,243,22,0,125,59,196,1,125,167,113,3,125,55,31,5,125,235,204,6,125,194,122,8,125,190,40,10,125,222,214,11,125,33,133,13,125,136,51,15,125,19,226,16,125,194,144,18,125,148,63,20,125,138,238,21,125,164,157,23,125,225,76,25,125,66,252,26,125,199,171,28,125,111,91,30,125,58,11,32,125,42,187,33,125,61,107,35,125,115,27,37,125,205,203,38,125,74,124,40,125,234,44,42,125,174,221,43,125,150,142,45,125,161,63,47,125,207,240,48,125,32,162,50,125,149,83,52,125,45,5,54,125,232,182,55,125,198,104,57,125,200,26,59,125,237,204,60,125,53,127,62,125,160,49,64,125,46,228,65,125,223,150,67,125,180,73,69,125,171,252,70,125,198,175,72,125,3,99,74,125,99,22,76,125,231,201,77,125,141,125,79,125,86,49,81,125,66,229,82,125,81,153,84,125,131,77,86,125,216,1,88,125,79,182,89,125,233,106,91,125,166,31,93,125,134,212,94,125,136,137,96,125,173,62,98,125,245,243,99,125,96,169,101,125,237,94,103,125,156,20,105,125,111,202,106,125,100,128,108,125,123,54,110,125,181,236,111,125,17,163,113,125,144,89,115,125,50,16,117,125,245,198,118,125,220,125,120,125,228,52,122,125,15,236,123,125,93,163,125,125,204,90,127,125,94,18,129,125,18,202,130,125,233,129,132,125,226,57,134,125,253,241,135,125,58,170,137,125,154,98,139,125,27,27,141,125,191,211,142,125,133,140,144,125,109,69,146,125,119,254,147,125,163,183,149,125,241,112,151,125,97,42,153,125,243,227,154,125,168,157,156,125,126,87,158,125,118,17,160,125,144,203,161,125,204,133,163,125,42,64,165,125,169,250,166,125,75,181,168,125,14,112,170,125,243,42,172,125,250,229,173,125,35,161,175,125,109,92,177,125,217,23,179,125,103,211,180,125,22,143,182,125,231,74,184,125,218,6,186,125,239,194,187,125,37,127,189,125,124,59,191,125,245,247,192,125,144,180,194,125,76,113,196,125,42,46,198,125,41,235,199,125,74,168,201,125,140,101,203,125,239,34,205,125,116,224,206,125,27,158,208,125,226,91,210,125,203,25,212,125,213,215,213,125,1,150,215,125,78,84,217,125,188,18,219,125,76,209,220,125,252,143,222,125,206,78,224,125,193,13,226,125,213,204,227,125,11,140,229,125,97,75,231,125,217,10,233,125,114,202,234,125,43,138,236,125,6,74,238,125,2,10,240,125,31,202,241,125,93,138,243,125,188,74,245,125,60,11,247,125,220,203,248,125,158,140,250,125,129,77,252,125,132,14,254,125,168,207,255,125,238,144,1,126,84,82,3,126,218,19,5,126,130,213,6,126,74,151,8,126,52,89,10,126,61,27,12,126,104,221,13,126,179,159,15,126,31,98,17,126,172,36,19,126,89,231,20,126,39,170,22,126,22,109,24,126,37,48,26,126,84,243,27,126,165,182,29,126,21,122,31,126,167,61,33,126,88,1,35,126,42,197,36,126,29,137,38,126,48,77,40,126,100,17,42,126,184,213,43,126,44,154,45,126,193,94,47,126,118,35,49,126,75,232,50,126,65,173,52,126,87,114,54,126,141,55,56,126,228,252,57,126,91,194,59,126,242,135,61,126,169,77,63,126,128,19,65,126,120,217,66,126,143,159,68,126,199,101,70,126,31,44,72,126,151,242,73,126,47,185,75,126,232,127,77,126,192,70,79,126,184,13,81,126,208,212,82,126,9,156,84,126,97,99,86,126,217,42,88,126,113,242,89,126,41,186,91,126,1,130,93,126,249,73,95,126,17,18,97,126,73,218,98,126,160,162,100,126,23,107,102,126,174,51,104,126,101,252,105,126,60,197,107,126,50,142,109,126,72,87,111,126,126,32,113,126,212,233,114,126,73,179,116,126,222,124,118,126,146,70,120,126,102,16,122,126,90,218,123,126,109,164,125,126,160,110,127,126,243,56,129,126,101,3,131,126,246,205,132,126,168,152,134,126,120,99,136,126,104,46,138,126,120,249,139,126,167,196,141,126,245,143,143,126,99,91,145,126,240,38,147,126,156,242,148,126,104,190,150,126,84,138,152,126,94,86,154,126,136,34,156,126,209,238,157,126,58,187,159,126,193,135,161,126,104,84,163,126,47,33,165,126,20,238,166,126,24,187,168,126,60,136,170,126,127,85,172,126,225,34,174,126,98,240,175,126,3,190,177,126,194,139,179,126,161,89,181,126,158,39,183,126,187,245,184,126,246,195,186,126,81,146,188,126,203,96,190,126,99,47,192,126,27,254,193,126,241,204,195,126,231,155,197,126,251,106,199,126,46,58,201,126,129,9,203,126,242,216,204,126,129,168,206,126,48,120,208,126,254,71,210,126,234,23,212,126,245,231,213,126,31,184,215,126,104,136,217,126,207,88,219,126,85,41,221,126,250,249,222,126,190,202,224,126,160,155,226,126,161,108,228,126,192,61,230,126,254,14,232,126,91,224,233,126,214,177,235,126,112,131,237,126,41,85,239,126,0,39,241,126,245,248,242,126,9,203,244,126,60,157,246,126,141,111,248,126,253,65,250,126,139,20,252,126,55,231,253,126,2,186,255,126,235,140,1,127,243,95,3,127,25,51,5,127,93,6,7,127,192,217,8,127,65,173,10,127,225,128,12,127,159,84,14,127,123,40,16,127,117,252,17,127,141,208,19,127,196,164,21,127,25,121,23,127,140,77,25,127,30,34,27,127,206,246,28,127,155,203,30,127,135,160,32,127,145,117,34,127,185,74,36,127,0,32,38,127,100,245,39,127,231,202,41,127,135,160,43,127,70,118,45,127,34,76,47,127,29,34,49,127,53,248,50,127,108,206,52,127,193,164,54,127,51,123,56,127,196,81,58,127,114,40,60,127,62,255,61,127,40,214,63,127,48,173,65,127,86,132,67,127,154,91,69,127,252,50,71,127,123,10,73,127,24,226,74,127,211,185,76,127,172,145,78,127,163,105,80,127,183,65,82,127,233,25,84,127,57,242,85,127,167,202,87,127,50,163,89,127,219,123,91,127,161,84,93,127,133,45,95,127,135,6,97,127,166,223,98,127,227,184,100,127,62,146,102,127,182,107,104,127,76,69,106,127,255,30,108,127,208,248,109,127,190,210,111,127,202,172,113,127,243,134,115,127,58,97,117,127,158,59,119,127,32,22,121,127,191,240,122,127,124,203,124,127,86,166,126,127,77,129,128,127,98,92,130,127,148,55,132,127,227,18,134,127,80,238,135,127,218,201,137,127,129,165,139,127,70,129,141,127,40,93,143,127,39,57,145,127,67,21,147,127,125,241,148,127,212,205,150,127,72,170,152,127,217,134,154,127,136,99,156,127,83,64,158,127,60,29,160,127,66,250,161,127,101,215,163,127,165,180,165,127,2,146,167,127,125,111,169,127,20,77,171,127,200,42,173,127,154,8,175,127,136,230,176,127,148,196,178,127,188,162,180,127,2,129,182,127,100,95,184,127,228,61,186,127,128,28,188,127,57,251,189,127,15,218,191,127,2,185,193,127,18,152,195,127,63,119,197,127,137,86,199,127,239,53,201,127,115,21,203,127,19,245,204,127,208,212,206,127,170,180,208,127,160,148,210,127,179,116,212,127,228,84,214,127,48,53,216,127,154,21,218,127,32,246,219,127,195,214,221,127,131,183,223,127,95,152,225,127,88,121,227,127,110,90,229,127,160,59,231,127,239,28,233,127,90,254,234,127,226,223,236,127,135,193,238,127,72,163,240,127,38,133,242,127,32,103,244,127,55,73,246,127,106,43,248,127,186,13,250,127,38,240,251,127,175,210,253,127,84,181,255,127,11,204,0,132,122,189,1,132,247,174,2,132,131,160,3,132,28,146,4,132,196,131,5,132,122,117,6,132,63,103,7,132,17,89,8,132,241,74,9,132,224,60,10,132,221,46,11,132,232,32,12,132,1,19,13,132,41,5,14,132,94,247,14,132,161,233,15,132,243,219,16,132,83,206,17,132,193,192,18,132,61,179,19,132,199,165,20,132,95,152,21,132,5,139,22,132,185,125,23,132,124,112,24,132,76,99,25,132,42,86,26,132,23,73,27,132,17,60,28,132,26,47,29,132,48,34,30,132,85,21,31,132,136,8,32,132,200,251,32,132,23,239,33,132,115,226,34,132,222,213,35,132,86,201,36,132,221,188,37,132,113,176,38,132,20,164,39,132,196,151,40,132,131,139,41,132,79,127,42,132,41,115,43,132,17,103,44,132,7,91,45,132,11,79,46,132,29,67,47,132,61,55,48,132,107,43,49,132,166,31,50,132,240,19,51,132,71,8,52,132,173,252,52,132,32,241,53,132,161,229,54,132,47,218,55,132,204,206,56,132,119,195,57,132,47,184,58,132,245,172,59,132,201,161,60,132,171,150,61,132,155,139,62,132,152,128,63,132,163,117,64,132,188,106,65,132,227,95,66,132,24,85,67,132,90,74,68,132,171,63,69,132,8,53,70,132,116,42,71,132,238,31,72,132,117,21,73,132,10,11,74,132,172,0,75,132,93,246,75,132,27,236,76,132,231,225,77,132,192,215,78,132,168,205,79,132,156,195,80,132,159,185,81,132,175,175,82,132,205,165,83,132,249,155,84,132,50,146,85,132,121,136,86,132,206,126,87,132,48,117,88,132,160,107,89,132,30,98,90,132,169,88,91,132,66,79,92,132,233,69,93,132,157,60,94,132,94,51,95,132,46,42,96,132,11,33,97,132,245,23,98,132,237,14,99,132,243,5,100,132,6,253,100,132,39,244,101,132,85,235,102,132,145,226,103,132,219,217,104,132,50,209,105,132,150,200,106,132,9,192,107,132,136,183,108,132,21,175,109,132,176,166,110,132,88,158,111,132,14,150,112,132,209,141,113,132,162,133,114,132,128,125,115,132,108,117,116,132,101,109,117,132,107,101,118,132,127,93,119,132,161,85,120,132,208,77,121,132,12,70,122,132,86,62,123,132,174,54,124,132,18,47,125,132,132,39,126,132,4,32,127,132,145,24,128,132,43,17,129,132,211,9,130,132,136,2,131,132,75,251,131,132,27,244,132,132,248,236,133,132,227,229,134,132,219,222,135,132,225,215,136,132,244,208,137,132,20,202,138,132,65,195,139,132,124,188,140,132,196,181,141,132,26,175,142,132,125,168,143,132,237,161,144,132,106,155,145,132,245,148,146,132,141,142,147,132,51,136,148,132,229,129,149,132,165,123,150,132,115,117,151,132,77,111,152,132,53,105,153,132,42,99,154,132,44,93,155,132,60,87,156,132,89,81,157,132,131,75,158,132,186,69,159,132,254,63,160,132,80,58,161,132,175,52,162,132,27,47,163,132,149,41,164,132,27,36,165,132,175,30,166,132,80,25,167,132,254,19,168,132,186,14,169,132,130,9,170,132,88,4,171,132,59,255,171,132,43,250,172,132,40,245,173,132,50,240,174,132,74,235,175,132,110,230,176,132,160,225,177,132,223,220,178,132,43,216,179,132,132,211,180,132,234,206,181,132,94,202,182,132,222,197,183,132,108,193,184,132,6,189,185,132,174,184,186,132,99,180,187,132,36,176,188,132,243,171,189,132,207,167,190,132,184,163,191,132,175,159,192,132,178,155,193,132,194,151,194,132,223,147,195,132,9,144,196,132,65,140,197,132,133,136,198,132,214,132,199,132,53,129,200,132,160,125,201,132,24,122,202,132,158,118,203,132,48,115,204,132,207,111,205,132,123,108,206,132,53,105,207,132,251,101,208,132,206,98,209,132,174,95,210,132,155,92,211,132,149,89,212,132,156,86,213,132,176,83,214,132,209,80,215,132,255,77,216,132,58,75,217,132,129,72,218,132,214,69,219,132,55,67,220,132,166,64,221,132,33,62,222,132,169,59,223,132,62,57,224,132,224,54,225,132,143,52,226,132,75,50,227,132,19,48,228,132,233,45,229,132,203,43,230,132,186,41,231,132,182,39,232,132,191,37,233,132,212,35,234,132,247,33,235,132,38,32,236,132,98,30,237,132,171,28,238,132,1,27,239,132,99,25,240,132,211,23,241,132,79,22,242,132,216,20,243,132,109,19,244,132,16,18,245,132,191,16,246,132,123,15,247,132,68,14,248,132,25,13,249,132,252,11,250,132,235,10,251,132,231,9,252,132,239,8,253,132,5,8,254,132,39,7,255,132,85,6,0,133,145,5,1,133,217,4,2,133,46,4,3,133,143,3,4,133,254,2,5,133,121,2,6,133,0,2,7,133,149,1,8,133,54,1,9,133,227,0,10,133,158,0,11,133,101,0,12,133,57,0,13,133,25,0,14,133,6,0,15,133,0,0,16,133,6,0,17,133,25,0,18,133,57,0,19,133,101,0,20,133,158,0,21,133,227,0,22,133,53,1,23,133,148,1,24,133,255,1,25,133,119,2,26,133,252,2,27,133,141,3,28,133,42,4,29,133,212,4,30,133,139,5,31,133,79,6,32,133,31,7,33,133,251,7,34,133,228,8,35,133,218,9,36,133,220,10,37,133,234,11,38,133,6,13,39,133,45,14,40,133,98,15,41,133,163,16,42,133,240,17,43,133,74,19,44,133,176,20,45,133,35,22,46,133,162,23,47,133,46,25,48,133,198,26,49,133,107,28,50,133,28,30,51,133,218,31,52,133,164,33,53,133,123,35,54,133,94,37,55,133,78,39,56,133,74,41,57,133,82,43,58,133,103,45,59,133,137,47,60,133,182,49,61,133,241,51,62,133,55,54,63,133,138,56,64,133,234,58,65,133,86,61,66,133,206,63,67,133,83,66,68,133,228,68,69,133,129,71,70,133,43,74,71,133,226,76,72,133,164,79,73,133,115,82,74,133,78,85,75,133,54,88,76,133,42,91,77,133,43,94,78,133,56,97,79,133,81,100,80,133,118,103,81,133,168,106,82,133,230,109,83,133,49,113,84,133,135,116,85,133,234,119,86,133,90,123,87,133,213,126,88,133,94,130,89,133,242,133,90,133,146,137,91,133,63,141,92,133,249,144,93,133,190,148,94,133,144,152,95,133,110,156,96,133,88,160,97,133,79,164,98,133,81,168,99,133,96,172,100,133,124,176,101,133,163,180,102,133,215,184,103,133,23,189,104,133,99,193,105,133,188,197,106,133,32,202,107,133,145,206,108,133,14,211,109,133,152,215,110,133,45,220,111,133,207,224,112,133,125,229,113,133,55,234,114,133,253,238,115,133,208,243,116,133,174,248,117,133,153,253,118,133,144,2,120,133,147,7,121,133,163,12,122,133,190,17,123,133,230,22,124,133,26,28,125,133,89,33,126,133,166,38,127,133,254,43,128,133,98,49,129,133,210,54,130,133,79,60,131,133,216,65,132,133,108,71,133,133,13,77,134,133,186,82,135,133,115,88,136,133,57,94,137,133,10,100,138,133,231,105,139,133,209,111,140,133,198,117,141,133,200,123,142,133,213,129,143,133,239,135,144,133,21,142,145,133,71,148,146,133,132,154,147,133,206,160,148,133,36,167,149,133,134,173,150,133,244,179,151,133,110,186,152,133,244,192,153,133,134,199,154,133,37,206,155,133,207,212,156,133,133,219,157,133,71,226,158,133,21,233,159,133,239,239,160,133,213,246,161,133,199,253,162,133,197,4,164,133,207,11,165,133,229,18,166,133,7,26,167,133,53,33,168,133,111,40,169,133,181,47,170,133,7,55,171,133,101,62,172,133,206,69,173,133,68,77,174,133,198,84,175,133,83,92,176,133,237,99,177,133,146,107,178,133,67,115,179,133,0,123,180,133,201,130,181,133,158,138,182,133,127,146,183,133,108,154,184,133,101,162,185,133,105,170,186,133,122,178,187,133,150,186,188,133,190,194,189,133,242,202,190,133,50,211,191,133,126,219,192,133,214,227,193,133,57,236,194,133,169,244,195,133,36,253,196,133,171,5,198,133,62,14,199,133,221,22,200,133,135,31,201,133,62,40,202,133,0,49,203,133,206,57,204,133,168,66,205,133,141,75,206,133,127,84,207,133,124,93,208,133,133,102,209,133,154,111,210,133,187,120,211,133,231,129,212,133,31,139,213,133,99,148,214,133,179,157,215,133,15,167,216,133,118,176,217,133,233,185,218,133,104,195,219,133,242,204,220,133,137,214,221,133,43,224,222,133,216,233,223,133,146,243,224,133,87,253,225,133,40,7,227,133,5,17,228,133,237,26,229,133,225,36,230,133,225,46,231,133,237,56,232,133,4,67,233,133,39,77,234,133,86,87,235,133,144,97,236,133,214,107,237,133,40,118,238,133,133,128,239,133,238,138,240,133,99,149,241,133,227,159,242,133,111,170,243,133,7,181,244,133,171,191,245,133,90,202,246,133,20,213,247,133,219,223,248,133,173,234,249,133,138,245,250,133,115,0,252,133,104,11,253,133,105,22,254,133,117,33,255,133,141,44,0,134,176,55,1,134,223,66,2,134,25,78,3,134,95,89,4,134,177,100,5,134,15,112,6,134,119,123,7,134,236,134,8,134,108,146,9,134,248,157,10,134,143,169,11,134,50,181,12,134,224,192,13,134,154,204,14,134,96,216,15,134,49,228,16,134,13,240,17,134,245,251,18,134,233,7,20,134,232,19,21,134,243,31,22,134,9,44,23,134,43,56,24,134,88,68,25,134,145,80,26,134,213,92,27,134,37,105,28,134,129,117,29,134,232,129,30,134,90,142,31,134,216,154,32,134,97,167,33,134,246,179,34,134,150,192,35,134,66,205,36,134,249,217,37,134,188,230,38,134,138,243,39,134,100,0,41,134,73,13,42,134,58,26,43,134,54,39,44,134,61,52,45,134,80,65,46,134,111,78,47,134,153,91,48,134,206,104,49,134,15,118,50,134,91,131,51,134,178,144,52,134,21,158,53,134,131,171,54,134,253,184,55,134,130,198,56,134,19,212,57,134,175,225,58,134,86,239,59,134,9,253,60,134,199,10,62,134,145,24,63,134,102,38,64,134,70,52,65,134,50,66,66,134,41,80,67,134,43,94,68,134,57,108,69,134,82,122,70,134,119,136,71,134,167,150,72,134,226,164,73,134,40,179,74,134,122,193,75,134,216,207,76,134,64,222,77,134,180,236,78,134,51,251,79,134,190,9,81,134,84,24,82,134,245,38,83,134,161,53,84,134,89,68,85,134,28,83,86,134,234,97,87,134,196,112,88,134,169,127,89,134,153,142,90,134,149,157,91,134,156,172,92,134,174,187,93,134,203,202,94,134,244,217,95,134,40,233,96,134,103,248,97,134,177,7,99,134,7,23,100,134,104,38,101,134,212,53,102,134,76,69,103,134,206,84,104,134,92,100,105,134,245,115,106,134,154,131,107,134,73,147,108,134,4,163,109,134,202,178,110,134,155,194,111,134,120,210,112,134,95,226,113,134,82,242,114,134,80,2,116,134,90,18,117,134,110,34,118,134,142,50,119,134,185,66,120,134,239,82,121,134,48,99,122,134,124,115,123,134,212,131,124,134,54,148,125,134,164,164,126,134,29,181,127,134,162,197,128,134,49,214,129,134,203,230,130,134,113,247,131,134,34,8,133,134,222,24,134,134,165,41,135,134,119,58,136,134,85,75,137,134,61,92,138,134,49,109,139,134,47,126,140,134,57,143,141,134,78,160,142,134,110,177,143,134,153,194,144,134,207,211,145,134,17,229,146,134,93,246,147,134,181,7,149,134,23,25,150,134,133,42,151,134,254,59,152,134,130,77,153,134,17,95,154,134,171,112,155,134,80,130,156,134,0,148,157,134,187,165,158,134,129,183,159,134,83,201,160,134,47,219,161,134,22,237,162,134,9,255,163,134,6,17,165,134,15,35,166,134,34,53,167,134,65,71,168,134,106,89,169,134,159,107,170,134,223,125,171,134,41,144,172,134,127,162,173,134,224,180,174,134,75,199,175,134,194,217,176,134,67,236,177,134,208,254,178,134,104,17,180,134,10,36,181,134,184,54,182,134,113,73,183,134,52,92,184,134,3,111,185,134,220,129,186,134,193,148,187,134,176,167,188,134,170,186,189,134,176,205,190,134,192,224,191,134,219,243,192,134,2,7,194,134,51,26,195,134,111,45,196,134,182,64,197,134,8,84,198,134,101,103,199,134,204,122,200,134,63,142,201,134,189,161,202,134,69,181,203,134,217,200,204,134,119,220,205,134,32,240,206,134,212,3,208,134,148,23,209,134,94,43,210,134,50,63,211,134,18,83,212,134,253,102,213,134,242,122,214,134,243,142,215,134,254,162,216,134,20,183,217,134,53,203,218,134,97,223,219,134,152,243,220,134,217,7,222,134,38,28,223,134,125,48,224,134,223,68,225,134,76,89,226,134,196,109,227,134,70,130,228,134,212,150,229,134,108,171,230,134,15,192,231,134,189,212,232,134,118,233,233,134,58,254,234,134,8,19,236,134,226,39,237,134,198,60,238,134,180,81,239,134,174,102,240,134,179,123,241,134,194,144,242,134,220,165,243,134,1,187,244,134,48,208,245,134,107,229,246,134,176,250,247,134,0,16,249,134,90,37,250,134,192,58,251,134,48,80,252,134,171,101,253,134,49,123,254,134,194,144,255,134,93,166,0,135,3,188,1,135,180,209,2,135,111,231,3,135,53,253,4,135,6,19,6,135,226,40,7,135,201,62,8,135,186,84,9,135,182,106,10,135,188,128,11,135,206,150,12,135,234,172,13,135,16,195,14,135,66,217,15,135,126,239,16,135,197,5,18,135,23,28,19,135,115,50,20,135,218,72,21,135,75,95,22,135,200,117,23,135,79,140,24,135,224,162,25,135,125,185,26,135,36,208,27,135,214,230,28,135,146,253,29,135,89,20,31,135,43,43,32,135,7,66,33,135,238,88,34,135,224,111,35,135,220,134,36,135,227,157,37,135,244,180,38,135,17,204,39,135,56,227,40,135,105,250,41,135,165,17,43,135,236,40,44,135,61,64,45,135,153,87,46,135,0,111,47,135,113,134,48,135,237,157,49,135,115,181,50,135,4,205,51,135,160,228,52,135,70,252,53,135,247,19,55,135,178,43,56,135,120,67,57,135,73,91,58,135,36,115,59,135,10,139,60,135,250,162,61,135,245,186,62,135,250,210,63,135,10,235,64,135,37,3,66,135,74,27,67,135,122,51,68,135,180,75,69,135,248,99,70,135,72,124,71,135,162,148,72,135,6,173,73,135,117,197,74,135,238,221,75,135,114,246,76,135,1,15,78,135,154,39,79,135,62,64,80,135,236,88,81,135,164,113,82,135,103,138,83,135,53,163,84,135,13,188,85,135,240,212,86,135,221,237,87,135,213,6,89,135,215,31,90,135,227,56,91,135,250,81,92,135,28,107,93,135,72,132,94,135,127,157,95,135,192,182,96,135,11,208,97,135,97,233,98,135,193,2,100,135,44,28,101,135,162,53,102,135,34,79,103,135,172,104,104,135,64,130,105,135,224,155,106,135,137,181,107,135,61,207,108,135,252,232,109,135,197,2,111,135,152,28,112,135,118,54,113,135,94,80,114,135,81,106,115,135,78,132,116,135,85,158,117,135,103,184,118,135,131,210,119,135,170,236,120,135,219,6,122,135,23,33,123,135,93,59,124,135,173,85,125,135,8,112,126,135,109,138,127,135,220,164,128,135,86,191,129,135,218,217,130,135,105,244,131,135,2,15,133,135,165,41,134,135,83,68,135,135,11,95,136,135,206,121,137,135,154,148,138,135,114,175,139,135,83,202,140,135,63,229,141,135,53,0,143,135,54,27,144,135,65,54,145,135,86,81,146,135,118,108,147,135,160,135,148,135,212,162,149,135,19,190,150,135,92,217,151,135,175,244,152,135,12,16,154,135,116,43,155,135,231,70,156,135,99,98,157,135,234,125,158,135,123,153,159,135,22,181,160,135,188,208,161,135,108,236,162,135,39,8,164,135,235,35,165,135,186,63,166,135,147,91,167,135,119,119,168,135,100,147,169,135,92,175,170,135,95,203,171,135,107,231,172,135,130,3,174,135,163,31,175,135,207,59,176,135,4,88,177,135,68,116,178,135,142,144,179,135,227,172,180,135,65,201,181,135,170,229,182,135,29,2,184,135,155,30,185,135,34,59,186,135,180,87,187,135,80,116,188,135,246,144,189,135,167,173,190,135,97,202,191,135,38,231,192,135,245,3,194,135,207,32,195,135,178,61,196,135,160,90,197,135,152,119,198,135,154,148,199,135,167,177,200,135,189,206,201,135,222,235,202,135,9,9,204,135,62,38,205,135,125,67,206,135,199,96,207,135,27,126,208,135,121,155,209,135,225,184,210,135,83,214,211,135,207,243,212,135,86,17,214,135,230,46,215,135,129,76,216,135,38,106,217,135,213,135,218,135,143,165,219,135,82,195,220,135,32,225,221,135,247,254,222,135,217,28,224,135,197,58,225,135,188,88,226,135,188,118,227,135,198,148,228,135,219,178,229,135,249,208,230,135,34,239,231,135,85,13,233,135,146,43,234,135,217,73,235,135,42,104,236,135,134,134,237,135,235,164,238,135,91,195,239,135,212,225,240,135,88,0,242,135,230,30,243,135,126,61,244,135,32,92,245,135,204,122,246,135,130,153,247,135,66,184,248,135,12,215,249,135,225,245,250,135,191,20,252,135,168,51,253,135,154,82,254,135,151,113,255,135,79,72,0,140,215,215,0,140,100,103,1,140,247,246,1,140,142,134,2,140,43,22,3,140,204,165,3,140,115,53,4,140,30,197,4,140,207,84,5,140,132,228,5,140,63,116,6,140,255,3,7,140,195,147,7,140,141,35,8,140,91,179,8,140,47,67,9,140,8,211,9,140,229,98,10,140,200,242,10,140,176,130,11,140,156,18,12,140,142,162,12,140,132,50,13,140,128,194,13,140,129,82,14,140,134,226,14,140,145,114,15,140,161,2,16,140,181,146,16,140,207,34,17,140,237,178,17,140,17,67,18,140,57,211,18,140,103,99,19,140,153,243,19,140,209,131,20,140,13,20,21,140,79,164,21,140,149,52,22,140,225,196,22,140,49,85,23,140,134,229,23,140,225,117,24,140,64,6,25,140,164,150,25,140,13,39,26,140,123,183,26,140,239,71,27,140,103,216,27,140,228,104,28,140,102,249,28,140,237,137,29,140,121,26,30,140,10,171,30,140,159,59,31,140,58,204,31,140,218,92,32,140,127,237,32,140,40,126,33,140,215,14,34,140,138,159,34,140,67,48,35,140,0,193,35,140,195,81,36,140,138,226,36,140,86,115,37,140,40,4,38,140,254,148,38,140,217,37,39,140,185,182,39,140,158,71,40,140,136,216,40,140,118,105,41,140,106,250,41,140,99,139,42,140,96,28,43,140,99,173,43,140,106,62,44,140,119,207,44,140,136,96,45,140,158,241,45,140,185,130,46,140,217,19,47,140,254,164,47,140,40,54,48,140,87,199,48,140,139,88,49,140,195,233,49,140,1,123,50,140,67,12,51,140,138,157,51,140,215,46,52,140,40,192,52,140,126,81,53,140,217,226,53,140,57,116,54,140,158,5,55,140,7,151,55,140,118,40,56,140,233,185,56,140,97,75,57,140,223,220,57,140,97,110,58,140,232,255,58,140,116,145,59,140,5,35,60,140,154,180,60,140,53,70,61,140,212,215,61,140,121,105,62,140,34,251,62,140,208,140,63,140,131,30,64,140,59,176,64,140,247,65,65,140,185,211,65,140,128,101,66,140,75,247,66,140,27,137,67,140,240,26,68,140,202,172,68,140,169,62,69,140,141,208,69,140,117,98,70,140,99,244,70,140,85,134,71,140,76,24,72,140,72,170,72,140,73,60,73,140,79,206,73,140,89,96,74,140,105,242,74,140,125,132,75,140,150,22,76,140,180,168,76,140,215,58,77,140,255,204,77,140,43,95,78,140,93,241,78,140,147,131,79,140,206,21,80,140,14,168,80,140,83,58,81,140,156,204,81,140,235,94,82,140,62,241,82,140,150,131,83,140,243,21,84,140,85,168,84,140,187,58,85,140,39,205,85,140,151,95,86,140,12,242,86,140,134,132,87,140,5,23,88,140,137,169,88,140,17,60,89,140,158,206,89,140,48,97,90,140,199,243,90,140,99,134,91,140,3,25,92,140,169,171,92,140,83,62,93,140,2,209,93,140,182,99,94,140,110,246,94,140,43,137,95,140,238,27,96,140,181,174,96,140,128,65,97,140,81,212,97,140,39,103,98,140,1,250,98,140,224,140,99,140,196,31,100,140,172,178,100,140,154,69,101,140,140,216,101,140,131,107,102,140,127,254,102,140,127,145,103,140,133,36,104,140,143,183,104,140,158,74,105,140,178,221,105,140,202,112,106,140,231,3,107,140,10,151,107,140,49,42,108,140,92,189,108,140,141,80,109,140,194,227,109,140,252,118,110,140,59,10,111,140,126,157,111,140,199,48,112,140,20,196,112,140,102,87,113,140,188,234,113,140,24,126,114,140,120,17,115,140,221,164,115,140,71,56,116,140,181,203,116,140,41,95,117,140,161,242,117,140,29,134,118,140,159,25,119,140,37,173,119,140,176,64,120,140,64,212,120,140,213,103,121,140,110,251,121,140,12,143,122,140,175,34,123,140,87,182,123,140,3,74,124,140,180,221,124,140,106,113,125,140,36,5,126,140,228,152,126,140,168,44,127,140,113,192,127,140,62,84,128,140,17,232,128,140,232,123,129,140,195,15,130,140,164,163,130,140,137,55,131,140,115,203,131,140,98,95,132,140,85,243,132,140,77,135,133,140,74,27,134,140,76,175,134,140,82,67,135,140,93,215,135,140,109,107,136,140,130,255,136,140,155,147,137,140,185,39,138,140,220,187,138,140,3,80,139,140,47,228,139,140,96,120,140,140,150,12,141,140,208,160,141,140,15,53,142,140,83,201,142,140,155,93,143,140,232,241,143,140,58,134,144,140,145,26,145,140,236,174,145,140,76,67,146,140,176,215,146,140,26,108,147,140,136,0,148,140,251,148,148,140,114,41,149,140,238,189,149,140,111,82,150,140,245,230,150,140,127,123,151,140,14,16,152,140,161,164,152,140,58,57,153,140,215,205,153,140,120,98,154,140,31,247,154,140,202,139,155,140,122,32,156,140,46,181,156,140,231,73,157,140,165,222,157,140,103,115,158,140,47,8,159,140,250,156,159,140,203,49,160,140,160,198,160,140,122,91,161,140,89,240,161,140,60,133,162,140,36,26,163,140,16,175,163,140,1,68,164,140,247,216,164,140,242,109,165,140,241,2,166,140,245,151,166,140,254,44,167,140,11,194,167,140,29,87,168,140,51,236,168,140,78,129,169,140,110,22,170,140,147,171,170,140,188,64,171,140,234,213,171,140,28,107,172,140,83,0,173,140,143,149,173,140,208,42,174,140,21,192,174,140,94,85,175,140,173,234,175,140,0,128,176,140,87,21,177,140,180,170,177,140,21,64,178,140,122,213,178,140,228,106,179,140,83,0,180,140,199,149,180,140,63,43,181,140,188,192,181,140,61,86,182,140,195,235,182,140,78,129,183,140,221,22,184,140,113,172,184,140,10,66,185,140,167,215,185,140,73,109,186,140,239,2,187,140,154,152,187,140,74,46,188,140,254,195,188,140,183,89,189,140,116,239,189,140,55,133,190,140,253,26,191,140,201,176,191,140,153,70,192,140,109,220,192,140,71,114,193,140,36,8,194,140,7,158,194,140,238,51,195,140,218,201,195,140,202,95,196,140,191,245,196,140,184,139,197,140,182,33,198,140,185,183,198,140,192,77,199,140,204,227,199,140,221,121,200,140,242,15,201,140,12,166,201,140,42,60,202,140,77,210,202,140,116,104,203,140,160,254,203,140,209,148,204,140,6,43,205,140,64,193,205,140,127,87,206,140,194,237,206,140,9,132,207,140,85,26,208,140,166,176,208,140,251,70,209,140,85,221,209,140,180,115,210,140,23,10,211,140,127,160,211,140,235,54,212,140,92,205,212,140,209,99,213,140,75,250,213,140,202,144,214,140,77,39,215,140,213,189,215,140,97,84,216,140,242,234,216,140,135,129,217,140,33,24,218,140,192,174,218,140,99,69,219,140,10,220,219,140,183,114,220,140,103,9,221,140,29,160,221,140,215,54,222,140,149,205,222,140,88,100,223,140,32,251,223,140,236,145,224,140,188,40,225,140,146,191,225,140,107,86,226,140,74,237,226,140,45,132,227,140,20,27,228,140,0,178,228,140,241,72,229,140,230,223,229,140,223,118,230,140,222,13,231,140,224,164,231,140,231,59,232,140,243,210,232,140,4,106,233,140,24,1,234,140,50,152,234,140,80,47,235,140,114,198,235,140,153,93,236,140,197,244,236,140,245,139,237,140,41,35,238,140,99,186,238,140,160,81,239,140,226,232,239,140,41,128,240,140,116,23,241,140,196,174,241,140,24,70,242,140,113,221,242,140,207,116,243,140,48,12,244,140,151,163,244,140,2,59,245,140,113,210,245,140,229,105,246,140,93,1,247,140,218,152,247,140,92,48,248,140,226,199,248,140,108,95,249,140,251,246,249,140,143,142,250,140,39,38,251,140,195,189,251,140,100,85,252,140,10,237,252,140,180,132,253,140,98,28,254,140,21,180,254,140,205,75,255,140,137,227,255,140,73,123,0,141,14,19,1,141,216,170,1,141,166,66,2,141,120,218,2,141,79,114,3,141,43,10,4,141,11,162,4,141,239,57,5,141,216,209,5,141,197,105,6,141,183,1,7,141,174,153,7,141,169,49,8,141,168,201,8,141,172,97,9,141,180,249,9,141,193,145,10,141,210,41,11,141,232,193,11,141,2,90,12,141,33,242,12,141,68,138,13,141,108,34,14,141,152,186,14,141,201,82,15,141,254,234,15,141,55,131,16,141,117,27,17,141,184,179,17,141,255,75,18,141,74,228,18,141,154,124,19,141,238,20,20,141,71,173,20,141,165,69,21,141,6,222,21,141,109,118,22,141,215,14,23,141,70,167,23,141,186,63,24,141,50,216,24,141,174,112,25,141,47,9,26,141,181,161,26,141,63,58,27,141,205,210,27,141,96,107,28,141,247,3,29,141,146,156,29,141,50,53,30,141,215,205,30,141,128,102,31,141,45,255,31,141,223,151,32,141,149,48,33,141,80,201,33,141,15,98,34,141,211,250,34,141,155,147,35,141,104,44,36,141,56,197,36,141,14,94,37,141,232,246,37,141,198,143,38,141,169,40,39,141,144,193,39,141,123,90,40,141,107,243,40,141,95,140,41,141,88,37,42,141,85,190,42,141,87,87,43,141,93,240,43,141,104,137,44,141,119,34,45,141,138,187,45,141,162,84,46,141,190,237,46,141,222,134,47,141,3,32,48,141,45,185,48,141,91,82,49,141,141,235,49,141,196,132,50,141,255,29,51,141,62,183,51,141,130,80,52,141,202,233,52,141,23,131,53,141,104,28,54,141,190,181,54,141,23,79,55,141,118,232,55,141,217,129,56,141,64,27,57,141,171,180,57,141,27,78,58,141,143,231,58,141,8,129,59,141,133,26,60,141,7,180,60,141,141,77,61,141,23,231,61,141,166,128,62,141,57,26,63,141,208,179,63,141,108,77,64,141,12,231,64,141,177,128,65,141,90,26,66,141,7,180,66,141,185,77,67,141,111,231,67,141,42,129,68,141,233,26,69,141,172,180,69,141,116,78,70,141,64,232,70,141,17,130,71,141,229,27,72,141,191,181,72,141,156,79,73,141,126,233,73,141,100,131,74,141,79,29,75,141,62,183,75,141,50,81,76,141,42,235,76,141,38,133,77,141,38,31,78,141,43,185,78,141,52,83,79,141,66,237,79,141,84,135,80,141,107,33,81,141,133,187,81,141,164,85,82,141,200,239,82,141,240,137,83,141,28,36,84,141,76,190,84,141,129,88,85,141,186,242,85,141,248,140,86,141,58,39,87,141,128,193,87,141,203,91,88,141,26,246,88,141,109,144,89,141,197,42,90,141,33,197,90,141,129,95,91,141,230,249,91,141,79,148,92,141,189,46,93,141,46,201,93,141,165,99,94,141,31,254,94,141,158,152,95,141,33,51,96,141,168,205,96,141,52,104,97,141,196,2,98,141,89,157,98,141,242,55,99,141,143,210,99,141,48,109,100,141,214,7,101,141,128,162,101,141,47,61,102,141,225,215,102,141,152,114,103,141,84,13,104,141,20,168,104,141,216,66,105,141,160,221,105,141,109,120,106,141,62,19,107,141,19,174,107,141,237,72,108,141,203,227,108,141,173,126,109,141,148,25,110,141,127,180,110,141,110,79,111,141,98,234,111,141,90,133,112,141,86,32,113,141,86,187,113,141,91,86,114,141,100,241,114,141,114,140,115,141,132,39,116,141,154,194,116,141,180,93,117,141,211,248,117,141,246,147,118,141,29,47,119,141,73,202,119,141,120,101,120,141,173,0,121,141,229,155,121,141,34,55,122,141,99,210,122,141,168,109,123,141,242,8,124,141,64,164,124,141,146,63,125,141,233,218,125,141,68,118,126,141,163,17,127,141,6,173,127,141,110,72,128,141,218,227,128,141,74,127,129,141,191,26,130,141,56,182,130,141,181,81,131,141,54,237,131,141,188,136,132,141,70,36,133,141,212,191,133,141,103,91,134,141,253,246,134,141,152,146,135,141,56,46,136,141,220,201,136,141,131,101,137,141,48,1,138,141,224,156,138,141,149,56,139,141,78,212,139,141,11,112,140,141,205,11,141,141,147,167,141,141,93,67,142,141,43,223,142,141,254,122,143,141,213,22,144,141,176,178,144,141,143,78,145,141,115,234,145,141,91,134,146,141,71,34,147,141,55,190,147,141,44,90,148,141,37,246,148,141,34,146,149,141,36,46,150,141,42,202,150,141,52,102,151,141,66,2,152,141,84,158,152,141,107,58,153,141,134,214,153,141,165,114,154,141,201,14,155,141,241,170,155,141,29,71,156,141,77,227,156,141,129,127,157,141,186,27,158,141,247,183,158,141,56,84,159,141,126,240,159,141,199,140,160,141,21,41,161,141,103,197,161,141,190,97,162,141,24,254,162,141,119,154,163,141,218,54,164,141,66,211,164,141,173,111,165,141,29,12,166,141,145,168,166,141,10,69,167,141,134,225,167,141,7,126,168,141,140,26,169,141,21,183,169,141,162,83,170,141,52,240,170,141,202,140,171,141,100,41,172,141,2,198,172,141,165,98,173,141,76,255,173,141,247,155,174,141,166,56,175,141,89,213,175,141,17,114,176,141,205,14,177,141,141,171,177,141,81,72,178,141,26,229,178,141,230,129,179,141,183,30,180,141,140,187,180,141,102,88,181,141,67,245,181,141,37,146,182,141,11,47,183,141,245,203,183,141,227,104,184,141,214,5,185,141,205,162,185,141,200,63,186,141,199,220,186,141,202,121,187,141,210,22,188,141,222,179,188,141,238,80,189,141,2,238,189,141,26,139,190,141,55,40,191,141,88,197,191,141,125,98,192,141,166,255,192,141,211,156,193,141,5,58,194,141,58,215,194,141,116,116,195,141,178,17,196,141,245,174,196,141,59,76,197,141,134,233,197,141,213,134,198,141,40,36,199,141,127,193,199,141,218,94,200,141,58,252,200,141,158,153,201,141,6,55,202,141,114,212,202,141,226,113,203,141,87,15,204,141,207,172,204,141,76,74,205,141,205,231,205,141,82,133,206,141,220,34,207,141,105,192,207,141,251,93,208,141,145,251,208,141,43,153,209,141,201,54,210,141,108,212,210,141,18,114,211,141,189,15,212,141,108,173,212,141,31,75,213,141,214,232,213,141,145,134,214,141,81,36,215,141,21,194,215,141,220,95,216,141,168,253,216,141,121,155,217,141,77,57,218,141,38,215,218,141,2,117,219,141,227,18,220,141,200,176,220,141,177,78,221,141,158,236,221,141,144,138,222,141,133,40,223,141,127,198,223,141,125,100,224,141,127,2,225,141,133,160,225,141,143,62,226,141,158,220,226,141,176,122,227,141,199,24,228,141,226,182,228,141,1,85,229,141,36,243,229,141,76,145,230,141,119,47,231,141,167,205,231,141,218,107,232,141,18,10,233,141,78,168,233,141,142,70,234,141,211,228,234,141,27,131,235,141,104,33,236,141,184,191,236,141,13,94,237,141,102,252,237,141,195,154,238,141,36,57,239,141,138,215,239,141,243,117,240,141,97,20,241,141,211,178,241,141,72,81,242,141,194,239,242,141,64,142,243,141,195,44,244,141,73,203,244,141,211,105,245,141,98,8,246,141,245,166,246,141,139,69,247,141,38,228,247,141,197,130,248,141,105,33,249,141,16,192,249,141,187,94,250,141,107,253,250,141,30,156,251,141,214,58,252,141,146,217,252,141,82,120,253,141,22,23,254,141,222,181,254,141,170,84,255,141,123,243,255,141,79,146,0,142,40,49,1,142,4,208,1,142,229,110,2,142,202,13,3,142,179,172,3,142,160,75,4,142,145,234,4,142,135,137,5,142,128,40,6,142,125,199,6,142,127,102,7,142,133,5,8,142,143,164,8,142,156,67,9,142,174,226,9,142,196,129,10,142,223,32,11,142,253,191,11,142,31,95,12,142,70,254,12,142,112,157,13,142,159,60,14,142,209,219,14,142,8,123,15,142,67,26,16,142,130,185,16,142,197,88,17,142,12,248,17,142,87,151,18,142,166,54,19,142,250,213,19,142,81,117,20,142,173,20,21,142,12,180,21,142,112,83,22,142,216,242,22,142,67,146,23,142,179,49,24,142,39,209,24,142,159,112,25,142,27,16,26,142,156,175,26,142,32,79,27,142,168,238,27,142,52,142,28,142,197,45,29,142,89,205,29,142,242,108,30,142,143,12,31,142,47,172,31,142,212,75,32,142,125,235,32,142,42,139,33,142,219,42,34,142,144,202,34,142,73,106,35,142,6,10,36,142,199,169,36,142,141,73,37,142,86,233,37,142,35,137,38,142,245,40,39,142,202,200,39,142,164,104,40,142,129,8,41,142,99,168,41,142,73,72,42,142,50,232,42,142,32,136,43,142,18,40,44,142,8,200,44,142,2,104,45,142,0,8,46,142,2,168,46,142,8,72,47,142,18,232,47,142,32,136,48,142,50,40,49,142,73,200,49,142,99,104,50,142,129,8,51,142,163,168,51,142,202,72,52,142,244,232,52,142,35,137,53,142,85,41,54,142,140,201,54,142,198,105,55,142,5,10,56,142,72,170,56,142,142,74,57,142,217,234,57,142,40,139,58,142,123,43,59,142,209,203,59,142,44,108,60,142,139,12,61,142,238,172,61,142,85,77,62,142,192,237,62,142,47,142,63,142,162,46,64,142,25,207,64,142,148,111,65,142,19,16,66,142,150,176,66,142,29,81,67,142,168,241,67,142,55,146,68,142,202,50,69,142,97,211,69,142,252,115,70,142,156,20,71,142,63,181,71,142,230,85,72,142,145,246,72,142,64,151,73,142,244,55,74,142,171,216,74,142,102,121,75,142,37,26,76,142,233,186,76,142,176,91,77,142,123,252,77,142,75,157,78,142,30,62,79,142,245,222,79,142,208,127,80,142,176,32,81,142,147,193,81,142,122,98,82,142,102,3,83,142,85,164,83,142,72,69,84,142,64,230,84,142,59,135,85,142,58,40,86,142,61,201,86,142,69,106,87,142,80,11,88,142,95,172,88,142,115,77,89,142,138,238,89,142,165,143,90,142,196,48,91,142,231,209,91,142,15,115,92,142,58,20,93,142,105,181,93,142,156,86,94,142,211,247,94,142,14,153,95,142,78,58,96,142,145,219,96,142,216,124,97,142,35,30,98,142,114,191,98,142,197,96,99,142,28,2,100,142,119,163,100,142,214,68,101,142,57,230,101,142,160,135,102,142,11,41,103,142,121,202,103,142,236,107,104,142,99,13,105,142,222,174,105,142,93,80,106,142,223,241,106,142,102,147,107,142,241,52,108,142,127,214,108,142,18,120,109,142,169,25,110,142,67,187,110,142,226,92,111,142,132,254,111,142,42,160,112,142,213,65,113,142,131,227,113,142,53,133,114,142,236,38,115,142,166,200,115,142,100,106,116,142,38,12,117,142,236,173,117,142,182,79,118,142,132,241,118,142,86,147,119,142,44,53,120,142,6,215,120,142,228,120,121,142,198,26,122,142,172,188,122,142,149,94,123,142,131,0,124,142,117,162,124,142,106,68,125,142,100,230,125,142,97,136,126,142,98,42,127,142,104,204,127,142,113,110,128,142,126,16,129,142,143,178,129,142,164,84,130,142,189,246,130,142,218,152,131,142,251,58,132,142,32,221,132,142,73,127,133,142,118,33,134,142,166,195,134,142,219,101,135,142,20,8,136,142,80,170,136,142,144,76,137,142,213,238,137,142,29,145,138,142,105,51,139,142,185,213,139,142,14,120,140,142,102,26,141,142,193,188,141,142,33,95,142,142,133,1,143,142,237,163,143,142,88,70,144,142,200,232,144,142,60,139,145,142,179,45,146,142,46,208,146,142,174,114,147,142,49,21,148,142,184,183,148,142,67,90,149,142,210,252,149,142,101,159,150,142,251,65,151,142,150,228,151,142,53,135,152,142,215,41,153,142,126,204,153,142,40,111,154,142,214,17,155,142,137,180,155,142,63,87,156,142,249,249,156,142,183,156,157,142,120,63,158,142,62,226,158,142,8,133,159,142,213,39,160,142,167,202,160,142,124,109,161,142,85,16,162,142,51,179,162,142,20,86,163,142,249,248,163,142,226,155,164,142,206,62,165,142,191,225,165,142,180,132,166,142,172,39,167,142,169,202,167,142,169,109,168,142,173,16,169,142,181,179,169,142,193,86,170,142,209,249,170,142,229,156,171,142,252,63,172,142,24,227,172,142,55,134,173,142,91,41,174,142,130,204,174,142,173,111,175,142,220,18,176,142,15,182,176,142,70,89,177,142,129,252,177,142,191,159,178,142,2,67,179,142,72,230,179,142,146,137,180,142,224,44,181,142,50,208,181,142,136,115,182,142,226,22,183,142,63,186,183,142,161,93,184,142,6,1,185,142,112,164,185,142,221,71,186,142,78,235,186,142,195,142,187,142,59,50,188,142,184,213,188,142,57,121,189,142,189,28,190,142,69,192,190,142,209,99,191,142,97,7,192,142,245,170,192,142,141,78,193,142,41,242,193,142,200,149,194,142,108,57,195,142,19,221,195,142,190,128,196,142,109,36,197,142,32,200,197,142,214,107,198,142,145,15,199,142,79,179,199,142,18,87,200,142,216,250,200,142,162,158,201,142,112,66,202,142,65,230,202,142,23,138,203,142,240,45,204,142,206,209,204,142,175,117,205,142,148,25,206,142,125,189,206,142,105,97,207,142,90,5,208,142,78,169,208,142,71,77,209,142,67,241,209,142,67,149,210,142,71,57,211,142,78,221,211,142,90,129,212,142,105,37,213,142,124,201,213,142,147,109,214,142,174,17,215,142,205,181,215,142,240,89,216,142,22,254,216,142,64,162,217,142,111,70,218,142,161,234,218,142,214,142,219,142,16,51,220,142,77,215,220,142,143,123,221,142,212,31,222,142,29,196,222,142,106,104,223,142,187,12,224,142,15,177,224,142,103,85,225,142,196,249,225,142,36,158,226,142,135,66,227,142,239,230,227,142,91,139,228,142,202,47,229,142,61,212,229,142,180,120,230,142,47,29,231,142,174,193,231,142,48,102,232,142,183,10,233,142,65,175,233,142,207,83,234,142,96,248,234,142,246,156,235,142,143,65,236,142,45,230,236,142,206,138,237,142,115,47,238,142,27,212,238,142,200,120,239,142,120,29,240,142,44,194,240,142,228,102,241,142,160,11,242,142,96,176,242,142,35,85,243,142,235,249,243,142,182,158,244,142,133,67,245,142,87,232,245,142,46,141,246,142,8,50,247,142,230,214,247,142,200,123,248,142,174,32,249,142,151,197,249,142,133,106,250,142,118,15,251,142,107,180,251,142,100,89,252,142,96,254,252,142,97,163,253,142,101,72,254,142,109,237,254,142,121,146,255,142,136,55,0,143,156,220,0,143,179,129,1,143,206,38,2,143,237,203,2,143,15,113,3,143,54,22,4,143,96,187,4,143,142,96,5,143,192,5,6,143,245,170,6,143,47,80,7,143,108,245,7,143,173,154,8,143,242,63,9,143,58,229,9,143,134,138,10,143,215,47,11,143,42,213,11,143,130,122,12,143,222,31,13,143,61,197,13,143,160,106,14,143,7,16,15,143,113,181,15,143,224,90,16,143,82,0,17,143,200,165,17,143,66,75,18,143,191,240,18,143,65,150,19,143,198,59,20,143,79,225,20,143,219,134,21,143,108,44,22,143,0,210,22,143,152,119,23,143,52,29,24,143,211,194,24,143,119,104,25,143,30,14,26,143,201,179,26,143,119,89,27,143,42,255,27,143,224,164,28,143,154,74,29,143,88,240,29,143,25,150,30,143,222,59,31,143,168,225,31,143,116,135,32,143,69,45,33,143,25,211,33,143,241,120,34,143,205,30,35,143,173,196,35,143,144,106,36,143,119,16,37,143,98,182,37,143,81,92,38,143,68,2,39,143,58,168,39,143,52,78,40,143,49,244,40,143,51,154,41,143,56,64,42,143,65,230,42,143,78,140,43,143,94,50,44,143,115,216,44,143,139,126,45,143,167,36,46,143,198,202,46,143,233,112,47,143,16,23,48,143,59,189,48,143,106,99,49,143,156,9,50,143,210,175,50,143,12,86,51,143,73,252,51,143,139,162,52,143,208,72,53,143,24,239,53,143,101,149,54,143,181,59,55,143,9,226,55,143,97,136,56,143,188,46,57,143,28,213,57,143,127,123,58,143,229,33,59,143,80,200,59,143,190,110,60,143,48,21,61,143,166,187,61,143,31,98,62,143,156,8,63,143,29,175,63,143,162,85,64,143,42,252,64,143,182,162,65,143,70,73,66,143,217,239,66,143,113,150,67,143,12,61,68,143,170,227,68,143,77,138,69,143,243,48,70,143,157,215,70,143,75,126,71,143,252,36,72,143,177,203,72,143,106,114,73,143,39,25,74,143,231,191,74,143,171,102,75,143,115,13,76,143,62,180,76,143,13,91,77,143,224,1,78,143,183,168,78,143,145,79,79,143,111,246,79,143,81,157,80,143,55,68,81,143,32,235,81,143,13,146,82,143,253,56,83,143,242,223,83,143,234,134,84,143,230,45,85,143,229,212,85,143,232,123,86,143,239,34,87,143,250,201,87,143,8,113,88,143,26,24,89,143,48,191,89,143,74,102,90,143,103,13,91,143,136,180,91,143,172,91,92,143,213,2,93,143,1,170,93,143,48,81,94,143,100,248,94,143,155,159,95,143,214,70,96,143,20,238,96,143,87,149,97,143,157,60,98,143,230,227,98,143,52,139,99,143,133,50,100,143,217,217,100,143,50,129,101,143,142,40,102,143,238,207,102,143,81,119,103,143,185,30,104,143,36,198,104,143,146,109,105,143,5,21,106,143,123,188,106,143,244,99,107,143,114,11,108,143,243,178,108,143,120,90,109,143,0,2,110,143,140,169,110,143,28,81,111,143,176,248,111,143,71,160,112,143,226,71,113,143,128,239,113,143,35,151,114,143,201,62,115,143,114,230,115,143,32,142,116,143,209,53,117,143,133,221,117,143,62,133,118,143,250,44,119,143,186,212,119,143,125,124,120,143,68,36,121,143,15,204,121,143,221,115,122,143,175,27,123,143,133,195,123,143,95,107,124,143,60,19,125,143,29,187,125,143,1,99,126,143,233,10,127,143,213,178,127,143,197,90,128,143,184,2,129,143,175,170,129,143,170,82,130,143,168,250,130,143,170,162,131,143,175,74,132,143,184,242,132,143,197,154,133,143,214,66,134,143,234,234,134,143,2,147,135,143,30,59,136,143,61,227,136,143,96,139,137,143,134,51,138,143,176,219,138,143,222,131,139,143,16,44,140,143,69,212,140,143,126,124,141,143,186,36,142,143,251,204,142,143,62,117,143,143,134,29,144,143,209,197,144,143,32,110,145,143,114,22,146,143,200,190,146,143,34,103,147,143,128,15,148,143,225,183,148,143,69,96,149,143,174,8,150,143,26,177,150,143,138,89,151,143,253,1,152,143,116,170,152,143,238,82,153,143,109,251,153,143,239,163,154,143,116,76,155,143,253,244,155,143,138,157,156,143,27,70,157,143,175,238,157,143,71,151,158,143,226,63,159,143,129,232,159,143,36,145,160,143,202,57,161,143,116,226,161,143,34,139,162,143,211,51,163,143,136,220,163,143,65,133,164,143,253,45,165,143,189,214,165,143,128,127,166,143,71,40,167,143,18,209,167,143,225,121,168,143,179,34,169,143,136,203,169,143,98,116,170,143,62,29,171,143,31,198,171,143,3,111,172,143,235,23,173,143,214,192,173,143,198,105,174,143,184,18,175,143,175,187,175,143,168,100,176,143,166,13,177,143,167,182,177,143,172,95,178,143,181,8,179,143,193,177,179,143,208,90,180,143,228,3,181,143,251,172,181,143,21,86,182,143,51,255,182,143,85,168,183,143,123,81,184,143,164,250,184,143,208,163,185,143,1,77,186,143,53,246,186,143,108,159,187,143,167,72,188,143,230,241,188,143,40,155,189,143,110,68,190,143,184,237,190,143,5,151,191,143,86,64,192,143,170,233,192,143,2,147,193,143,94,60,194,143,189,229,194,143,32,143,195,143,135,56,196,143,241,225,196,143,95,139,197,143,208,52,198,143,69,222,198,143,189,135,199,143,57,49,200,143,185,218,200,143,60,132,201,143,195,45,202,143,78,215,202,143,220,128,203,143,110,42,204,143,3,212,204,143,156,125,205,143,57,39,206,143,217,208,206,143,125,122,207,143,36,36,208,143,207,205,208,143,126,119,209,143,48,33,210,143,229,202,210,143,159,116,211,143,92,30,212,143,28,200,212,143,224,113,213,143,168,27,214,143,115,197,214,143,66,111,215,143,21,25,216,143,235,194,216,143,196,108,217,143,162,22,218,143,131,192,218,143,103,106,219,143,79,20,220,143,59,190,220,143,42,104,221,143,29,18,222,143,19,188,222,143,13,102,223,143,10,16,224,143,12,186,224,143,16,100,225,143,25,14,226,143,36,184,226,143,52,98,227,143,71,12,228,143,94,182,228,143,120,96,229,143,149,10,230,143,183,180,230,143,220,94,231,143,4,9,232,143,48,179,232,143,96,93,233,143,147,7,234,143,202,177,234,143,4,92,235,143,66,6,236,143,132,176,236,143,201,90,237,143,18,5,238,143,94,175,238,143,174,89,239,143,1,4,240,143,88,174,240,143,179,88,241,143,17,3,242,143,114,173,242,143,216,87,243,143,64,2,244,143,173,172,244,143,29,87,245,143,144,1,246,143,7,172,246,143,130,86,247,143,0,1,248,143,130,171,248,143,7,86,249,143,144,0,250,143,28,171,250,143,172,85,251,143,64,0,252,143,215,170,252,143,114,85,253,143,16,0,254,143,178,170,254,143,87,85,255,143,0,0,0,148,86,85,0,148,174,170,0,148,8,0,1,148,99,85,1,148,193,170,1,148,32,0,2,148,129,85,2,148,227,170,2,148,72,0,3,148,174,85,3,148,22,171,3,148,128,0,4,148,235,85,4,148,89,171,4,148,200,0,5,148,56,86,5,148,171,171,5,148,31,1,6,148,150,86,6,148,14,172,6,148,135,1,7,148,3,87,7,148,128,172,7,148,255,1,8,148,128,87,8,148,2,173,8,148,135,2,9,148,13,88,9,148,149,173,9,148,30,3,10,148,170,88,10,148,55,174,10,148,198,3,11,148,87,89,11,148,233,174,11,148,126,4,12,148,20,90,12,148,171,175,12,148,69,5,13,148,224,90,13,148,125,176,13,148,28,6,14,148,189,91,14,148,95,177,14,148,3,7,15,148,169,92,15,148,81,178,15,148,250,7,16,148,166,93,16,148,83,179,16,148,1,9,17,148,178,94,17,148,100,180,17,148,24,10,18,148,206,95,18,148,134,181,18,148,63,11,19,148,250,96,19,148,183,182,19,148,117,12,20,148,54,98,20,148,248,183,20,148,188,13,21,148,129,99,21,148,73,185,21,148,18,15,22,148,221,100,22,148,170,186,22,148,120,16,23,148,72,102,23,148,26,188,23,148,238,17,24,148,195,103,24,148,155,189,24,148,116,19,25,148,78,105,25,148,43,191,25,148,9,21,26,148,233,106,26,148,203,192,26,148,174,22,27,148,148,108,27,148,123,194,27,148,99,24,28,148,78,110,28,148,58,196,28,148,40,26,29,148,24,112,29,148,10,198,29,148,253,27,30,148,242,113,30,148,233,199,30,148,225,29,31,148,220,115,31,148,216,201,31,148,213,31,32,148,213,117,32,148,214,203,32,148,217,33,33,148,222,119,33,148,229,205,33,148,237,35,34,148,247,121,34,148,3,208,34,148,17,38,35,148,32,124,35,148,49,210,35,148,68,40,36,148,88,126,36,148,110,212,36,148,135,42,37,148,160,128,37,148,188,214,37,148,217,44,38,148,248,130,38,148,25,217,38,148,59,47,39,148,96,133,39,148,134,219,39,148,173,49,40,148,215,135,40,148,2,222,40,148,47,52,41,148,94,138,41,148,142,224,41,148,192,54,42,148,244,140,42,148,42,227,42,148,98,57,43,148,155,143,43,148,214,229,43,148,18,60,44,148,81,146,44,148,145,232,44,148,211,62,45,148,22,149,45,148,92,235,45,148,163,65,46,148,236,151,46,148,54,238,46,148,130,68,47,148,209,154,47,148,32,241,47,148,114,71,48,148,197,157,48,148,26,244,48,148,113,74,49,148,201,160,49,148,35,247,49,148,127,77,50,148,221,163,50,148,61,250,50,148,158,80,51,148,1,167,51,148,101,253,51,148,204,83,52,148,52,170,52,148,157,0,53,148,9,87,53,148,118,173,53,148,229,3,54,148,86,90,54,148,201,176,54,148,61,7,55,148,179,93,55,148,42,180,55,148,164,10,56,148,31,97,56,148,156,183,56,148,26,14,57,148,155,100,57,148,29,187,57,148,161,17,58,148,38,104,58,148,173,190,58,148,54,21,59,148,193,107,59,148,77,194,59,148,220,24,60,148,108,111,60,148,253,197,60,148,145,28,61,148,38,115,61,148,188,201,61,148,85,32,62,148,239,118,62,148,139,205,62,148,41,36,63,148,200,122,63,148,105,209,63,148,12,40,64,148,177,126,64,148,87,213,64,148,255,43,65,148,169,130,65,148,85,217,65,148,2,48,66,148,177,134,66,148,97,221,66,148,20,52,67,148,200,138,67,148,126,225,67,148,53,56,68,148,239,142,68,148,170,229,68,148,102,60,69,148,37,147,69,148,229,233,69,148,167,64,70,148,106,151,70,148,48,238,70,148,247,68,71,148,192,155,71,148,138,242,71,148,86,73,72,148,36,160,72,148,244,246,72,148,197,77,73,148,152,164,73,148,109,251,73,148,67,82,74,148,28,169,74,148,246,255,74,148,209,86,75,148,175,173,75,148,142,4,76,148,111,91,76,148,81,178,76,148,53,9,77,148,27,96,77,148,3,183,77,148,236,13,78,148,215,100,78,148,196,187,78,148,179,18,79,148,163,105,79,148,149,192,79,148,136,23,80,148,126,110,80,148,117,197,80,148,110,28,81,148,104,115,81,148,100,202,81,148,98,33,82,148,98,120,82,148,99,207,82,148,102,38,83,148,107,125,83,148,114,212,83,148,122,43,84,148,132,130,84,148,143,217,84,148,156,48,85,148,171,135,85,148,188,222,85,148,207,53,86,148,227,140,86,148,249,227,86,148,16,59,87,148,41,146,87,148,68,233,87,148,97,64,88,148,127,151,88,148,159,238,88,148,193,69,89,148,229,156,89,148,10,244,89,148,49,75,90,148,89,162,90,148,132,249,90,148,176,80,91,148,221,167,91,148,13,255,91,148,62,86,92,148,113,173,92,148,165,4,93,148,220,91,93,148,19,179,93,148,77,10,94,148,136,97,94,148,197,184,94,148,4,16,95,148,69,103,95,148,135,190,95,148,203,21,96,148,16,109,96,148,87,196,96,148,160,27,97,148,235,114,97,148,55,202,97,148,133,33,98,148,213,120,98,148,38,208,98,148,122,39,99,148,206,126,99,148,37,214,99,148,125,45,100,148,215,132,100,148,51,220,100,148,144,51,101,148,239,138,101,148,80,226,101,148,178,57,102,148,22,145,102,148,124,232,102,148,227,63,103,148,77,151,103,148,183,238,103,148,36,70,104,148,146,157,104,148,2,245,104,148,116,76,105,148,231,163,105,148,92,251,105,148,211,82,106,148,75,170,106,148,197,1,107,148,65,89,107,148,191,176,107,148,62,8,108,148,191,95,108,148,65,183,108,148,197,14,109,148,75,102,109,148,211,189,109,148,92,21,110,148,231,108,110,148,116,196,110,148,2,28,111,148,146,115,111,148,36,203,111,148,184,34,112,148,77,122,112,148,228,209,112,148,124,41,113,148,22,129,113,148,178,216,113,148,80,48,114,148,239,135,114,148,144,223,114,148,51,55,115,148,215,142,115,148,125,230,115,148,37,62,116,148,206,149,116,148,121,237,116,148,38,69,117,148,212,156,117,148,132,244,117,148,54,76,118,148,234,163,118,148,159,251,118,148,86,83,119,148,14,171,119,148,200,2,120,148,132,90,120,148,66,178,120,148,1,10,121,148,194,97,121,148,132,185,121,148,73,17,122,148,15,105,122,148,214,192,122,148,160,24,123,148,107,112,123,148,55,200,123,148,6,32,124,148,214,119,124,148,168,207,124,148,123,39,125,148,80,127,125,148,39,215,125,148,255,46,126,148,217,134,126,148,181,222,126,148,147,54,127,148,114,142,127,148,83,230,127,148,53,62,128,148,25,150,128,148,255,237,128,148,231,69,129,148,208,157,129,148,187,245,129,148,167,77,130,148,149,165,130,148,133,253,130,148,119,85,131,148,106,173,131,148,95,5,132,148,86,93,132,148,78,181,132,148,72,13,133,148,68,101,133,148,65,189,133,148,64,21,134,148,64,109,134,148,67,197,134,148,71,29,135,148,76,117,135,148,84,205,135,148,93,37,136,148,103,125,136,148,116,213,136,148,130,45,137,148,145,133,137,148,163,221,137,148,182,53,138,148,202,141,138,148,225,229,138,148,249,61,139,148,18,150,139,148,46,238,139,148,75,70,140,148,105,158,140,148,138,246,140,148,172,78,141,148,207,166,141,148,245,254,141,148,28,87,142,148,68,175,142,148,111,7,143,148,155,95,143,148,200,183,143,148,248,15,144,148,41,104,144,148,91,192,144,148,144,24,145,148,198,112,145,148,253,200,145,148,55,33,146,148,114,121,146,148,174,209,146,148,237,41,147,148,44,130,147,148,110,218,147,148,177,50,148,148,246,138,148,148,61,227,148,148,133,59,149,148,207,147,149,148,27,236,149,148,104,68,150,148,183,156,150,148,8,245,150,148,90,77,151,148,174,165,151,148,3,254,151,148,90,86,152,148,179,174,152,148,14,7,153,148,106,95,153,148,200,183,153,148,39,16,154,148,137,104,154,148,235,192,154,148,80,25,155,148,182,113,155,148,30,202,155,148,135,34,156,148,242,122,156,148,95,211,156,148,206,43,157,148,62,132,157,148,175,220,157,148,35,53,158,148,152,141,158,148,14,230,158,148,135,62,159,148,1,151,159,148,124,239,159,148,250,71,160,148,121,160,160,148,249,248,160,148,124,81,161,148,255,169,161,148,133,2,162,148,12,91,162,148,149,179,162,148,32,12,163,148,172,100,163,148,58,189,163,148,201,21,164,148,90,110,164,148,237,198,164,148,129,31,165,148,24,120,165,148,175,208,165,148,73,41,166,148,228,129,166,148,128,218,166,148,31,51,167,148,191,139,167,148,96,228,167,148,3,61,168,148,168,149,168,148,79,238,168,148,247,70,169,148,161,159,169,148,76,248,169,148,250,80,170,148,168,169,170,148,89,2,171,148,11,91,171,148,191,179,171,148,116,12,172,148,43,101,172,148,228,189,172,148,158,22,173,148,90,111,173,148,24,200,173,148,215,32,174,148,152,121,174,148,90,210,174,148,30,43,175,148,228,131,175,148,172,220,175,148,117,53,176,148,64,142,176,148,12,231,176,148,218,63,177,148,170,152,177,148,123,241,177,148,78,74,178,148,34,163,178,148,249,251,178,148,209,84,179,148,170,173,179,148,133,6,180,148,98,95,180,148,64,184,180,148,32,17,181,148,2,106,181,148,230,194,181,148,203,27,182,148,177,116,182,148,153,205,182,148,131,38,183,148,111,127,183,148,92,216,183,148,75,49,184,148,59,138,184,148,45,227,184,148,33,60,185,148,22,149,185,148,13,238,185,148,6,71,186,148,0,160,186,148,252,248,186,148,250,81,187,148,249,170,187,148,250,3,188,148,252,92,188,148,0,182,188,148,6,15,189,148,13,104,189,148,22,193,189,148,33,26,190,148,45,115,190,148,59,204,190,148,74,37,191,148,91,126,191,148,110,215,191,148,131,48,192,148,153,137,192,148,176,226,192,148,202,59,193,148,228,148,193,148,1,238,193,148,31,71,194,148,63,160,194,148,96,249,194,148,131,82,195,148,168,171,195,148,206,4,196,148,246,93,196,148,32,183,196,148,75,16,197,148,120,105,197,148,167,194,197,148,215,27,198,148,8,117,198,148,60,206,198,148,113,39,199,148,167,128,199,148,223,217,199,148,25,51,200,148,85,140,200,148,146,229,200,148,209,62,201,148,17,152,201,148,83,241,201,148,151,74,202,148,220,163,202,148,35,253,202,148,107,86,203,148,181,175,203,148,1,9,204,148,78,98,204,148,157,187,204,148,238,20,205,148,64,110,205,148,148,199,205,148,233,32,206,148,64,122,206,148,153,211,206,148,243,44,207,148,79,134,207,148,173,223,207,148,12,57,208,148,109,146,208,148,207,235,208,148,51,69,209,148,153,158,209,148,0,248,209,148,105,81,210,148,212,170,210,148,64,4,211,148,174,93,211,148,29,183,211,148,142,16,212,148,1,106,212,148,117,195,212,148,235,28,213,148,98,118,213,148,219,207,213,148,86,41,214,148,210,130,214,148,80,220,214,148,208,53,215,148,81,143,215,148,212,232,215,148,88,66,216,148,222,155,216,148,102,245,216,148,239,78,217,148,122,168,217,148,7,2,218,148,149,91,218,148,36,181,218,148,182,14,219,148,73,104,219,148,221,193,219,148,115,27,220,148,11,117,220,148,165,206,220,148,64,40,221,148,220,129,221,148,122,219,221,148,26,53,222,148,188,142,222,148,95,232,222,148,3,66,223,148,170,155,223,148,82,245,223,148,251,78,224,148,166,168,224,148,83,2,225,148,1,92,225,148,177,181,225,148,99,15,226,148,22,105,226,148,203,194,226,148,129,28,227,148,57,118,227,148,243,207,227,148,174,41,228,148,107,131,228,148,41,221,228,148,233,54,229,148,171,144,229,148,110,234,229,148,51,68,230,148,249,157,230,148,193,247,230,148,139,81,231,148,86,171,231,148,35,5,232,148,242,94,232,148,194,184,232,148,147,18,233,148,103,108,233,148,59,198,233,148,18,32,234,148,234,121,234,148,196,211,234,148,159,45,235,148,124,135,235,148,91,225,235,148,59,59,236,148,28,149,236,148,0,239,236,148,229,72,237,148,203,162,237,148,179,252,237,148,157,86,238,148,136,176,238,148,117,10,239,148,100,100,239,148,84,190,239,148,70,24,240,148,57,114,240,148,46,204,240,148,36,38,241,148,29,128,241,148,22,218,241,148,18,52,242,148,15,142,242,148,13,232,242,148,13,66,243,148,15,156,243,148,18,246,243,148,23,80,244,148,30,170,244,148,38,4,245,148,48,94,245,148,59,184,245,148,72,18,246,148,86,108,246,148,102,198,246,148,120,32,247,148,139,122,247,148,160,212,247,148,183,46,248,148,207,136,248,148,233,226,248,148,4,61,249,148,33,151,249,148,63,241,249,148,95,75,250,148,129,165,250,148,164,255,250,148,201,89,251,148,239,179,251,148,23,14,252,148,65,104,252,148,108,194,252,148,153,28,253,148,199,118,253,148,247,208,253,148,41,43,254,148,92,133,254,148,145,223,254,148,199,57,255,148,255,147,255,148,56,238,255,148,116,72,0,149,176,162,0,149,239,252,0,149,46,87,1,149,112,177,1,149,179,11,2,149,248,101,2,149,62,192,2,149,134,26,3,149,207,116,3,149,26,207,3,149,103,41,4,149,181,131,4,149,5,222,4,149,86,56,5,149,169,146,5,149,253,236,5,149,84,71,6,149,171,161,6,149,4,252,6,149,95,86,7,149,188,176,7,149,26,11,8,149,121,101,8,149,219,191,8,149,61,26,9,149,162,116,9,149,8,207,9,149,111,41,10,149,216,131,10,149,67,222,10,149,175,56,11,149,29,147,11,149,141,237,11,149,254,71,12,149,113,162,12,149,229,252,12,149,91,87,13,149,210,177,13,149,75,12,14,149,197,102,14,149,65,193,14,149,191,27,15,149,62,118,15,149,191,208,15,149,66,43,16,149,198,133,16,149,75,224,16,149,211,58,17,149,91,149,17,149,230,239,17,149,114,74,18,149,255,164,18,149,142,255,18,149,31,90,19,149,177,180,19,149,69,15,20,149,218,105,20,149,113,196,20,149,10,31,21,149,164,121,21,149,64,212,21,149,221,46,22,149,124,137,22,149,28,228,22,149,190,62,23,149,98,153,23,149,7,244,23,149,174,78,24,149,86,169,24,149,0,4,25,149,171,94,25,149,88,185,25,149,7,20,26,149,183,110,26,149,105,201,26,149,28,36,27,149,209,126,27,149,135,217,27,149,64,52,28,149,249,142,28,149,180,233,28,149,113,68,29,149,47,159,29,149,239,249,29,149,177,84,30,149,116,175,30,149,56,10,31,149,255,100,31,149,198,191,31,149,144,26,32,149,91,117,32,149,39,208,32,149,245,42,33,149,197,133,33,149,150,224,33,149,105,59,34,149,61,150,34,149,19,241,34,149,234,75,35,149,195,166,35,149,158,1,36,149,122,92,36,149,88,183,36,149,55,18,37,149,24,109,37,149,251,199,37,149,223,34,38,149,196,125,38,149,171,216,38,149,148,51,39,149,126,142,39,149,106,233,39,149,87,68,40,149,70,159,40,149,55,250,40,149,41,85,41,149,29,176,41,149,18,11,42,149,9,102,42,149,1,193,42,149,251,27,43,149,247,118,43,149,244,209,43,149,242,44,44,149,242,135,44,149,244,226,44,149,247,61,45,149,252,152,45,149,3,244,45,149,11,79,46,149,20,170,46,149,31,5,47,149,44,96,47,149,58,187,47,149,74,22,48,149,91,113,48,149,110,204,48,149,131,39,49,149,153,130,49,149,176,221,49,149,202,56,50,149,228,147,50,149,1,239,50,149,30,74,51,149,62,165,51,149,95,0,52,149,129,91,52,149,165,182,52,149,203,17,53,149,242,108,53,149,27,200,53,149,69,35,54,149,113,126,54,149,159,217,54,149,206,52,55,149,254,143,55,149,48,235,55,149,100,70,56,149,153,161,56,149,208,252,56,149,8,88,57,149,66,179,57,149,125,14,58,149,186,105,58,149,249,196,58,149,57,32,59,149,123,123,59,149,190,214,59,149,3,50,60,149,73,141,60,149,145,232,60,149,218,67,61,149,37,159,61,149,114,250,61,149,192,85,62,149,15,177,62,149,97,12,63,149,179,103,63,149,8,195,63,149,94,30,64,149,181,121,64,149,14,213,64,149,104,48,65,149,196,139,65,149,34,231,65,149,129,66,66,149,226,157,66,149,68,249,66,149,168,84,67,149,13,176,67,149,116,11,68,149,221,102,68,149,71,194,68,149,178,29,69,149,31,121,69,149,142,212,69,149,254,47,70,149,112,139,70,149,227,230,70,149,88,66,71,149,206,157,71,149,70,249,71,149,192,84,72,149,59,176,72,149,183,11,73,149,53,103,73,149,181,194,73,149,54,30,74,149,185,121,74,149,61,213,74,149,195,48,75,149,75,140,75,149,212,231,75,149,94,67,76,149,234,158,76,149,120,250,76,149,7,86,77,149,151,177,77,149,42,13,78,149,189,104,78,149,83,196,78,149,233,31,79,149,130,123,79,149,28,215,79,149,183,50,80,149,84,142,80,149,243,233,80,149,147,69,81,149,52,161,81,149,216,252,81,149,124,88,82,149,35,180,82,149,202,15,83,149,116,107,83,149,31,199,83,149,203,34,84,149,121,126,84,149,41,218,84,149,218,53,85,149,140,145,85,149,64,237,85,149,246,72,86,149,173,164,86,149,102,0,87,149,32,92,87,149,220,183,87,149,153,19,88,149,88,111,88,149,25,203,88,149,219,38,89,149,158,130,89,149,99,222,89,149,42,58,90,149,242,149,90,149,187,241,90,149,135,77,91,149,83,169,91,149,34,5,92,149,241,96,92,149,195,188,92,149,150,24,93,149,106,116,93,149,64,208,93,149,23,44,94,149,240,135,94,149,203,227,94,149,167,63,95,149,133,155,95,149,100,247,95,149,68,83,96,149,39,175,96,149,10,11,97,149,240,102,97,149,215,194,97,149,191,30,98,149,169,122,98,149,148,214,98,149,129,50,99,149,112,142,99,149,96,234,99,149,81,70,100,149,68,162,100,149,57,254,100,149,47,90,101,149,39,182,101,149,32,18,102,149,26,110,102,149,23,202,102,149,20,38,103,149,20,130,103,149,21,222,103,149,23,58,104,149,27,150,104,149,32,242,104,149,39,78,105,149,48,170,105,149,58,6,106,149,69,98,106,149,82,190,106,149,97,26,107,149,113,118,107,149,131,210,107,149,150,46,108,149,171,138,108,149,193,230,108,149,217,66,109,149,242,158,109,149,13,251,109,149,41,87,110,149,71,179,110,149,102,15,111,149,135,107,111,149,170,199,111,149,205,35,112,149,243,127,112,149,26,220,112,149,67,56,113,149,109,148,113,149,152,240,113,149,197,76,114,149,244,168,114,149,36,5,115,149,86,97,115,149,137,189,115,149,190,25,116,149,244,117,116,149,44,210,116,149,101,46,117,149,160,138,117,149,220,230,117,149,26,67,118,149,89,159,118,149,154,251,118,149,221,87,119,149,33,180,119,149,102,16,120,149,173,108,120,149,245,200,120,149,63,37,121,149,139,129,121,149,216,221,121,149,39,58,122,149,119,150,122,149,200,242,122,149,28,79,123,149,112,171,123,149,198,7,124,149,30,100,124,149,119,192,124,149,210,28,125,149,46,121,125,149,140,213,125,149,235,49,126,149,76,142,126,149,174,234,126,149,18,71,127,149,120,163,127,149,222,255,127,149,71,92,128,149,177,184,128,149,28,21,129,149,137,113,129,149,247,205,129,149,103,42,130,149,217,134,130,149,76,227,130,149,192,63,131,149,54,156,131,149,174,248,131,149,39,85,132,149,161,177,132,149,30,14,133,149,155,106,133,149,26,199,133,149,155,35,134,149,29,128,134,149,161,220,134,149,38,57,135,149,172,149,135,149,53,242,135,149,190,78,136,149,73,171,136,149,214,7,137,149,100,100,137,149,244,192,137,149,133,29,138,149,24,122,138,149,172,214,138,149,66,51,139,149,217,143,139,149,114,236,139,149,12,73,140,149,168,165,140,149,70,2,141,149,228,94,141,149,133,187,141,149,39,24,142,149,202,116,142,149,111,209,142,149,21,46,143,149,189,138,143,149,102,231,143,149,17,68,144,149,190,160,144,149,108,253,144,149,27,90,145,149,204,182,145,149,126,19,146,149,50,112,146,149,232,204,146,149,159,41,147,149,87,134,147,149,17,227,147,149,205,63,148,149,138,156,148,149,72,249,148,149,8,86,149,149,202,178,149,149,140,15,150,149,81,108,150,149,23,201,150,149,222,37,151,149,167,130,151,149,114,223,151,149,62,60,152,149,12,153,152,149,219,245,152,149,171,82,153,149,125,175,153,149,81,12,154,149,38,105,154,149,252,197,154,149,212,34,155,149,174,127,155,149,137,220,155,149,101,57,156,149,67,150,156,149,35,243,156,149,4,80,157,149,230,172,157,149,203,9,158,149,176,102,158,149,151,195,158,149,128,32,159,149,106,125,159,149,85,218,159,149,66,55,160,149,49,148,160,149,33,241,160,149,18,78,161,149,5,171,161,149,250,7,162,149,240,100,162,149,231,193,162,149,225,30,163,149,219,123,163,149,215,216,163,149,213,53,164,149,212,146,164,149,212,239,164,149,214,76,165,149,218,169,165,149,223,6,166,149,229,99,166,149,237,192,166,149,247,29,167,149,2,123,167,149,14,216,167,149,28,53,168,149,44,146,168,149,60,239,168,149,79,76,169,149,99,169,169,149,120,6,170,149,143,99,170,149,168,192,170,149,194,29,171,149,221,122,171,149,250,215,171,149,24,53,172,149,56,146,172,149,90,239,172,149,125,76,173,149,161,169,173,149,199,6,174,149,238,99,174,149,23,193,174,149,65,30,175,149,109,123,175,149,155,216,175,149,201,53,176,149,250,146,176,149,43,240,176,149,95,77,177,149,148,170,177,149,202,7,178,149,2,101,178,149,59,194,178,149,118,31,179,149,178,124,179,149,240,217,179,149,47,55,180,149,111,148,180,149,178,241,180,149,245,78,181,149,58,172,181,149,129,9,182,149,201,102,182,149,19,196,182,149,94,33,183,149,171,126,183,149,249,219,183,149,72,57,184,149,153,150,184,149,236,243,184,149,64,81,185,149,149,174,185,149,236,11,186,149,69,105,186,149,159,198,186,149,250,35,187,149,87,129,187,149,182,222,187,149,22,60,188,149,119,153,188,149,218,246,188,149,62,84,189,149,164,177,189,149,11,15,190,149,116,108,190,149,223,201,190,149,74,39,191,149,184,132,191,149,38,226,191,149,151,63,192,149,8,157,192,149,124,250,192,149,240,87,193,149,102,181,193,149,222,18,194,149,87,112,194,149,210,205,194,149,78,43,195,149,203,136,195,149,75,230,195,149,203,67,196,149,77,161,196,149,209,254,196,149,86,92,197,149,220,185,197,149,100,23,198,149,237,116,198,149,120,210,198,149,5,48,199,149,147,141,199,149,34,235,199,149,179,72,200,149,69,166,200,149,217,3,201,149,110,97,201,149,5,191,201,149,157,28,202,149,55,122,202,149,210,215,202,149,110,53,203,149,13,147,203,149,172,240,203,149,77,78,204,149,240,171,204,149,148,9,205,149,57,103,205,149,224,196,205,149,137,34,206,149,51,128,206,149,222,221,206,149,139,59,207,149,57,153,207,149,233,246,207,149,154,84,208,149,77,178,208,149,1,16,209,149,183,109,209,149,110,203,209,149,39,41,210,149,225,134,210,149,157,228,210,149,90,66,211,149,24,160,211,149,216,253,211,149,154,91,212,149,93,185,212,149,33,23,213,149,231,116,213,149,175,210,213,149,120,48,214,149,66,142,214,149,14,236,214,149,219,73,215,149,170,167,215,149,122,5,216,149,76,99,216,149,31,193,216,149,244,30,217,149,202,124,217,149,161,218,217,149,122,56,218,149,85,150,218,149,49,244,218,149,14,82,219,149,237,175,219,149,206,13,220,149,175,107,220,149,147,201,220,149,120,39,221,149,94,133,221,149,70,227,221,149,47,65,222,149,26,159,222,149,6,253,222,149,243,90,223,149,226,184,223,149,211,22,224,149,197,116,224,149,184,210,224,149,173,48,225,149,164,142,225,149,156,236,225,149,149,74,226,149,144,168,226,149,140,6,227,149,138,100,227,149,137,194,227,149,138,32,228,149,140,126,228,149,143,220,228,149,148,58,229,149,155,152,229,149,163,246,229,149,172,84,230,149,183,178,230,149,196,16,231,149,210,110,231,149,225,204,231,149,242,42,232,149,4,137,232,149,24,231,232,149,45,69,233,149,67,163,233,149,92,1,234,149,117,95,234,149,144,189,234,149,173,27,235,149,203,121,235,149,234,215,235,149,11,54,236,149,45,148,236,149,81,242,236,149,118,80,237,149,157,174,237,149,197,12,238,149,239,106,238,149,26,201,238,149,70,39,239,149,116,133,239,149,164,227,239,149,213,65,240,149,7,160,240,149,59,254,240,149,112,92,241,149,167,186,241,149,223,24,242,149,25,119,242,149,84,213,242,149,144,51,243,149,207,145,243,149,14,240,243,149,79,78,244,149,145,172,244,149,213,10,245,149,27,105,245,149,97,199,245,149,170,37,246,149,243,131,246,149,63,226,246,149,139,64,247,149,217,158,247,149,41,253,247,149,122,91,248,149,204,185,248,149,32,24,249,149,117,118,249,149,204,212,249,149,36,51,250,149,126,145,250,149,217,239,250,149,54,78,251,149,148,172,251,149,243,10,252,149,84,105,252,149,183,199,252,149,27,38,253,149,128,132,253,149,231,226,253,149,79,65,254,149,185,159,254,149,36,254,254,149,145,92,255,149,255,186,255,149,110,25,0,150,223,119,0,150,81,214,0,150,197,52,1,150,59,147,1,150,177,241,1,150,42,80,2,150,163,174,2,150,30,13,3,150,155,107,3,150,25,202,3,150,152,40,4,150,25,135,4,150,156,229,4,150,31,68,5,150,165,162,5,150,43,1,6,150,180,95,6,150,61,190,6,150,200,28,7,150,85,123,7,150,227,217,7,150,114,56,8,150,3,151,8,150,149,245,8,150,41,84,9,150,190,178,9,150,85,17,10,150,237,111,10,150,134,206,10,150,33,45,11,150,190,139,11,150,92,234,11,150,251,72,12,150,156,167,12,150,62,6,13,150,225,100,13,150,135,195,13,150,45,34,14,150,213,128,14,150,127,223,14,150,41,62,15,150,214,156,15,150,131,251,15,150,51,90,16,150,227,184,16,150,149,23,17,150,73,118,17,150,254,212,17,150,180,51,18,150,108,146,18,150,37,241,18,150,224,79,19,150,156,174,19,150,90,13,20,150,25,108,20,150,218,202,20,150,156,41,21,150,95,136,21,150,36,231,21,150,234,69,22,150,178,164,22,150,123,3,23,150,70,98,23,150,18,193,23,150,223,31,24,150,174,126,24,150,126,221,24,150,80,60,25,150,36,155,25,150,248,249,25,150,206,88,26,150,166,183,26,150,127,22,27,150,89,117,27,150,53,212,27,150,19,51,28,150,241,145,28,150,210,240,28,150,179,79,29,150,150,174,29,150,123,13,30,150,97,108,30,150,72,203,30,150,49,42,31,150,27,137,31,150,7,232,31,150,244,70,32,150,227,165,32,150,211,4,33,150,196,99,33,150,183,194,33,150,171,33,34,150,161,128,34,150,152,223,34,150,145,62,35,150,139,157,35,150,134,252,35,150,131,91,36,150,130,186,36,150,129,25,37,150,131,120,37,150,133,215,37,150,137,54,38,150,143,149,38,150,150,244,38,150,158,83,39,150,168,178,39,150,179,17,40,150,192,112,40,150,206,207,40,150,222,46,41,150,239,141,41,150,1,237,41,150,21,76,42,150,42,171,42,150,65,10,43,150,89,105,43,150,115,200,43,150,142,39,44,150,170,134,44,150,200,229,44,150,232,68,45,150,8,164,45,150,42,3,46,150,78,98,46,150,115,193,46,150,154,32,47,150,193,127,47,150,235,222,47,150,22,62,48,150,66,157,48,150,111,252,48,150,158,91,49,150,207,186,49,150,1,26,50,150,52,121,50,150,105,216,50,150,159,55,51,150,215,150,51,150,16,246,51,150,74,85,52,150,134,180,52,150,195,19,53,150,2,115,53,150,66,210,53,150,132,49,54,150,199,144,54,150,11,240,54,150,81,79,55,150,153,174,55,150,225,13,56,150,43,109,56,150,119,204,56,150,196,43,57,150,18,139,57,150,98,234,57,150,180,73,58,150,6,169,58,150,90,8,59,150,176,103,59,150,7,199,59,150,95,38,60,150,185,133,60,150,20,229,60,150,113,68,61,150,207,163,61,150,47,3,62,150,144,98,62,150,242,193,62,150,86,33,63,150,187,128,63,150,34,224,63,150,138,63,64,150,243,158,64,150,94,254,64,150,203,93,65,150,56,189,65,150,167,28,66,150,24,124,66,150,138,219,66,150,253,58,67,150,114,154,67,150,233,249,67,150,96,89,68,150,217,184,68,150,84,24,69,150,208,119,69,150,77,215,69,150,204,54,70,150,76,150,70,150,206,245,70,150,81,85,71,150,213,180,71,150,91,20,72,150,227,115,72,150,107,211,72,150,246,50,73,150,129,146,73,150,14,242,73,150,156,81,74,150,44,177,74,150,190,16,75,150,80,112,75,150,228,207,75,150,122,47,76,150,17,143,76,150,169,238,76,150,67,78,77,150,222,173,77,150,122,13,78,150,24,109,78,150,184,204,78,150,89,44,79,150,251,139,79,150,158,235,79,150,68,75,80,150,234,170,80,150,146,10,81,150,59,106,81,150,230,201,81,150,146,41,82,150,64,137,82,150,239,232,82,150,159,72,83,150,81,168,83,150,4,8,84,150,185,103,84,150,111,199,84,150,38,39,85,150,223,134,85,150,153,230,85,150,85,70,86,150,18,166,86,150,208,5,87,150,144,101,87,150,82,197,87,150,20,37,88,150,217,132,88,150,158,228,88,150,101,68,89,150,46,164,89,150,247,3,90,150,195,99,90,150,143,195,90,150,93,35,91,150,45,131,91,150,254,226,91,150,208,66,92,150,163,162,92,150,121,2,93,150,79,98,93,150,39,194,93,150,0,34,94,150,219,129,94,150,183,225,94,150,149,65,95,150,116,161,95,150,84,1,96,150,54,97,96,150,25,193,96,150,253,32,97,150,227,128,97,150,203,224,97,150,180,64,98,150,158,160,98,150,137,0,99,150,119,96,99,150,101,192,99,150,85,32,100,150,70,128,100,150,57,224,100,150,45,64,101,150,34,160,101,150,25,0,102,150,17,96,102,150,11,192,102,150,6,32,103,150,3,128,103,150,0,224,103,150,0,64,104,150,0,160,104,150,3,0,105,150,6,96,105,150,11,192,105,150,17,32,106,150,25,128,106,150,34,224,106,150,45,64,107,150,57,160,107,150,70,0,108,150,85,96,108,150,101,192,108,150,118,32,109,150,137,128,109,150,158,224,109,150,179,64,110,150,203,160,110,150,227,0,111,150,253,96,111,150,24,193,111,150,53,33,112,150,83,129,112,150,115,225,112,150,148,65,113,150,182,161,113,150,218,1,114,150,255,97,114,150,38,194,114,150,78,34,115,150,119,130,115,150,162,226,115,150,206,66,116,150,252,162,116,150,43,3,117,150,91,99,117,150,141,195,117,150,192,35,118,150,244,131,118,150,42,228,118,150,98,68,119,150,155,164,119,150,213,4,120,150,16,101,120,150,77,197,120,150,140,37,121,150,203,133,121,150,12,230,121,150,79,70,122,150,147,166,122,150,216,6,123,150,31,103,123,150,103,199,123,150,177,39,124,150,252,135,124,150,72,232,124,150,150,72,125,150,229,168,125,150,53,9,126,150,135,105,126,150,218,201,126,150,47,42,127,150,133,138,127,150,221,234,127,150,54,75,128,150,144,171,128,150,235,11,129,150,73,108,129,150,167,204,129,150,7,45,130,150,104,141,130,150,203,237,130,150,47,78,131,150,148,174,131,150,251,14,132,150,99,111,132,150,205,207,132,150,56,48,133,150,164,144,133,150,18,241,133,150,129,81,134,150,242,177,134,150,100,18,135,150,215,114,135,150,76,211,135,150,194,51,136,150,57,148,136,150,178,244,136,150,44,85,137,150,168,181,137,150,37,22,138,150,164,118,138,150,36,215,138,150,165,55,139,150,39,152,139,150,172,248,139,150,49,89,140,150,184,185,140,150,64,26,141,150,202,122,141,150,84,219,141,150,225,59,142,150,111,156,142,150,254,252,142,150,142,93,143,150,32,190,143,150,180,30,144,150,72,127,144,150,222,223,144,150,118,64,145,150,15,161,145,150,169,1,146,150,69,98,146,150,226,194,146,150,128,35,147,150,32,132,147,150,193,228,147,150,99,69,148,150,7,166,148,150,173,6,149,150,83,103,149,150,252,199,149,150,165,40,150,150,80,137,150,150,252,233,150,150,170,74,151,150,89,171,151,150,9,12,152,150,187,108,152,150,110,205,152,150,35,46,153,150,217,142,153,150,144,239,153,150,73,80,154,150,3,177,154,150,191,17,155,150,123,114,155,150,58,211,155,150,249,51,156,150,186,148,156,150,125,245,156,150,65,86,157,150,6,183,157,150,204,23,158,150,148,120,158,150,94,217,158,150,40,58,159,150,244,154,159,150,194,251,159,150,145,92,160,150,97,189,160,150,50,30,161,150,5,127,161,150,218,223,161,150,176,64,162,150,135,161,162,150,95,2,163,150,57,99,163,150,20,196,163,150,241,36,164,150,207,133,164,150,174,230,164,150,143,71,165,150,113,168,165,150,85,9,166,150,58,106,166,150,32,203,166,150,8,44,167,150,241,140,167,150,219,237,167,150,199,78,168,150,180,175,168,150,163,16,169,150,147,113,169,150,132,210,169,150,119,51,170,150,107,148,170,150,97,245,170,150,87,86,171,150,80,183,171,150,73,24,172,150,68,121,172,150,65,218,172,150,62,59,173,150,61,156,173,150,62,253,173,150,64,94,174,150,67,191,174,150,71,32,175,150,77,129,175,150,85,226,175,150,94,67,176,150,104,164,176,150,115,5,177,150,128,102,177,150,142,199,177,150,158,40,178,150,175,137,178,150,193,234,178,150,213,75,179,150,234,172,179,150,0,14,180,150,24,111,180,150,49,208,180,150,76,49,181,150,104,146,181,150,133,243,181,150,164,84,182,150,196,181,182,150,230,22,183,150,8,120,183,150,45,217,183,150,82,58,184,150,121,155,184,150,161,252,184,150,203,93,185,150,246,190,185,150,35,32,186,150,80,129,186,150,128,226,186,150,176,67,187,150,226,164,187,150,21,6,188,150,74,103,188,150,128,200,188,150,183,41,189,150,240,138,189,150,42,236,189,150,102,77,190,150,163,174,190,150,225,15,191,150,32,113,191,150,97,210,191,150,164,51,192,150,231,148,192,150,44,246,192,150,115,87,193,150,187,184,193,150,4,26,194,150,78,123,194,150,154,220,194,150,232,61,195,150,54,159,195,150,134,0,196,150,216,97,196,150,42,195,196,150,127,36,197,150,212,133,197,150,43,231,197,150,131,72,198,150,221,169,198,150,56,11,199,150,148,108,199,150,242,205,199,150,81,47,200,150,177,144,200,150,19,242,200,150,118,83,201,150,218,180,201,150,64,22,202,150,168,119,202,150,16,217,202,150,122,58,203,150,229,155,203,150,82,253,203,150,192,94,204,150,48,192,204,150,160,33,205,150,19,131,205,150,134,228,205,150,251,69,206,150,113,167,206,150,233,8,207,150,98,106,207,150,220,203,207,150,88,45,208,150,213,142,208,150,83,240,208,150,211,81,209,150,84,179,209,150,215,20,210,150,90,118,210,150,224,215,210,150,102,57,211,150,238,154,211,150,119,252,211,150,2,94,212,150,142,191,212,150,28,33,213,150,170,130,213,150,58,228,213,150,204,69,214,150,95,167,214,150,243,8,215,150,136,106,215,150,31,204,215,150,184,45,216,150,81,143,216,150,236,240,216,150,136,82,217,150,38,180,217,150,197,21,218,150,102,119,218,150,7,217,218,150,170,58,219,150,79,156,219,150,245,253,219,150,156,95,220,150,69,193,220,150,238,34,221,150,154,132,221,150,70,230,221,150,244,71,222,150,164,169,222,150,84,11,223,150,6,109,223,150,186,206,223,150,111,48,224,150,37,146,224,150,220,243,224,150,149,85,225,150,79,183,225,150,11,25,226,150,200,122,226,150,134,220,226,150,70,62,227,150,7,160,227,150,201,1,228,150,141,99,228,150,82,197,228,150,24,39,229,150,224,136,229,150,169,234,229,150,115,76,230,150,63,174,230,150,12,16,231,150,219,113,231,150,171,211,231,150,124,53,232,150,78,151,232,150,34,249,232,150,248,90,233,150,206,188,233,150,166,30,234,150,127,128,234,150,90,226,234,150,54,68,235,150,20,166,235,150,242,7,236,150,210,105,236,150,180,203,236,150,151,45,237,150,123,143,237,150,96,241,237,150,71,83,238,150,47,181,238,150,25,23,239,150,4,121,239,150,240,218,239,150,222,60,240,150,204,158,240,150,189,0,241,150,174,98,241,150,161,196,241,150,150,38,242,150,139,136,242,150,130,234,242,150,123,76,243,150,117,174,243,150,112,16,244,150,108,114,244,150,106,212,244,150,105,54,245,150,105,152,245,150,107,250,245,150,110,92,246,150,115,190,246,150,121,32,247,150,128,130,247,150,137,228,247,150,147,70,248,150,158,168,248,150,170,10,249,150,184,108,249,150,200,206,249,150,216,48,250,150,234,146,250,150,254,244,250,150,18,87,251,150,40,185,251,150,64,27,252,150,88,125,252,150,114,223,252,150,142,65,253,150,171,163,253,150,201,5,254,150,232,103,254,150,9,202,254,150,43,44,255,150,79,142,255,150,115,240,255,150,154,82,0,151,193,180,0,151,234,22,1,151,20,121,1,151,64,219,1,151,108,61,2,151,155,159,2,151,202,1,3,151,251,99,3,151,45,198,3,151,97,40,4,151,150,138,4,151,204,236,4,151,4,79,5,151,61,177,5,151,119,19,6,151,179,117,6,151,240,215,6,151,46,58,7,151,110,156,7,151,175,254,7,151,241,96,8,151,53,195,8,151,122,37,9,151,192,135,9,151,8,234,9,151,81,76,10,151,155,174,10,151,231,16,11,151,52,115,11,151,131,213,11,151,210,55,12,151,35,154,12,151,118,252,12,151,202,94,13,151,31,193,13,151,117,35,14,151,205,133,14,151,38,232,14,151,128,74,15,151,220,172,15,151,57,15,16,151,152,113,16,151,248,211,16,151,89,54,17,151,187,152,17,151,31,251,17,151,132,93,18,151,235,191,18,151,83,34,19,151,188,132,19,151,38,231,19,151,146,73,20,151,255,171,20,151,110,14,21,151,222,112,21,151,79,211,21,151,193,53,22,151,53,152,22,151,170,250,22,151,33,93,23,151,153,191,23,151,18,34,24,151,141,132,24,151,9,231,24,151,134,73,25,151,4,172,25,151,132,14,26,151,5,113,26,151,136,211,26,151,12,54,27,151,145,152,27,151,24,251,27,151,159,93,28,151,41,192,28,151,179,34,29,151,63,133,29,151,204,231,29,151,91,74,30,151,235,172,30,151,124,15,31,151,14,114,31,151,162,212,31,151,55,55,32,151,206,153,32,151,102,252,32,151,255,94,33,151,154,193,33,151,54,36,34,151,211,134,34,151,113,233,34,151,17,76,35,151,178,174,35,151,85,17,36,151,249,115,36,151,158,214,36,151,68,57,37,151,236,155,37,151,149,254,37,151,64,97,38,151,236,195,38,151,153,38,39,151,71,137,39,151,247,235,39,151,168,78,40,151,91,177,40,151,15,20,41,151,196,118,41,151,122,217,41,151,50,60,42,151,235,158,42,151,166,1,43,151,97,100,43,151,30,199,43,151,221,41,44,151,157,140,44,151,94,239,44,151,32,82,45,151,228,180,45,151,169,23,46,151,111,122,46,151,55,221,46,151,0,64,47,151,202,162,47,151,150,5,48,151,99,104,48,151,50,203,48,151,1,46,49,151,210,144,49,151,165,243,49,151,120,86,50,151,77,185,50,151,35,28,51,151,251,126,51,151,212,225,51,151,174,68,52,151,138,167,52,151,103,10,53,151,69,109,53,151,37,208,53,151,6,51,54,151,232,149,54,151,203,248,54,151,176,91,55,151,150,190,55,151,126,33,56,151,103,132,56,151,81,231,56,151,61,74,57,151,41,173,57,151,23,16,58,151,7,115,58,151,248,213,58,151,234,56,59,151,221,155,59,151,210,254,59,151,200,97,60,151,191,196,60,151,184,39,61,151,178,138,61,151,174,237,61,151,170,80,62,151,168,179,62,151,168,22,63,151,168,121,63,151,170,220,63,151,173,63,64,151,178,162,64,151,184,5,65,151,191,104,65,151,200,203,65,151,210,46,66,151,221,145,66,151,233,244,66,151,247,87,67,151,6,187,67,151,23,30,68,151,41,129,68,151,60,228,68,151,80,71,69,151,102,170,69,151,125,13,70,151,149,112,70,151,175,211,70,151,202,54,71,151,231,153,71,151,4,253,71,151,35,96,72,151,68,195,72,151,101,38,73,151,136,137,73,151,172,236,73,151,210,79,74,151,249,178,74,151,33,22,75,151,75,121,75,151,117,220,75,151,161,63,76,151,207,162,76,151,254,5,77,151,46,105,77,151,95,204,77,151,146,47,78,151,198,146,78,151,251,245,78,151,50,89,79,151,106,188,79,151,163,31,80,151,222,130,80,151,26,230,80,151,87,73,81,151,150,172,81,151,214,15,82,151,23,115,82,151,89,214,82,151,157,57,83,151,226,156,83,151,41,0,84,151,113,99,84,151,186,198,84,151,4,42,85,151,80,141,85,151,157,240,85,151,235,83,86,151,59,183,86,151,140,26,87,151,222,125,87,151,49,225,87,151,134,68,88,151,221,167,88,151,52,11,89,151,141,110,89,151,231,209,89,151,66,53,90,151,159,152,90,151,253,251,90,151,93,95,91,151,189,194,91,151,31,38,92,151,131,137,92,151,231,236,92,151,77,80,93,151,181,179,93,151,29,23,94,151,135,122,94,151,242,221,94,151,95,65,95,151,204,164,95,151,59,8,96,151,172,107,96,151,30,207,96,151,145,50,97,151,5,150,97,151,123,249,97,151,242,92,98,151,106,192,98,151,227,35,99,151,94,135,99,151,219,234,99,151,88,78,100,151,215,177,100,151,87,21,101,151,216,120,101,151,91,220,101,151,223,63,102,151,100,163,102,151,235,6,103,151,115,106,103,151,252,205,103,151,135,49,104,151,19,149,104,151,160,248,104,151,46,92,105,151,190,191,105,151,79,35,106,151,226,134,106,151,117,234,106,151,10,78,107,151,161,177,107,151,56,21,108,151,209,120,108,151,108,220,108,151,7,64,109,151,164,163,109,151,66,7,110,151,226,106,110,151,130,206,110,151,36,50,111,151,200,149,111,151,108,249,111,151,18,93,112,151,186,192,112,151,98,36,113,151,12,136,113,151,183,235,113,151,100,79,114,151,18,179,114,151,193,22,115,151,113,122,115,151,35,222,115,151,214,65,116,151,138,165,116,151,64,9,117,151,247,108,117,151,175,208,117,151,104,52,118,151,35,152,118,151,223,251,118,151,157,95,119,151,92,195,119,151,28,39,120,151,221,138,120,151,159,238,120,151,99,82,121,151,41,182,121,151,239,25,122,151,183,125,122,151,128,225,122,151,75,69,123,151,22,169,123,151,227,12,124,151,178,112,124,151,129,212,124,151,82,56,125,151,36,156,125,151,248,255,125,151,205,99,126,151,163,199,126,151,122,43,127,151,83,143,127,151,45,243,127,151,8,87,128,151,229,186,128,151,195,30,129,151,162,130,129,151,131,230,129,151,100,74,130,151,71,174,130,151,44,18,131,151,18,118,131,151,249,217,131,151,225,61,132,151,202,161,132,151,181,5,133,151,162,105,133,151,143,205,133,151,126,49,134,151,110,149,134,151,95,249,134,151,82,93,135,151,70,193,135,151,59,37,136,151,50,137,136,151,42,237,136,151,35,81,137,151,29,181,137,151,25,25,138,151,22,125,138,151,20,225,138,151,20,69,139,151,21,169,139,151,23,13,140,151,26,113,140,151,31,213,140,151,37,57,141,151,45,157,141,151,53,1,142,151,63,101,142,151,75,201,142,151,87,45,143,151,101,145,143,151,116,245,143,151,133,89,144,151,150,189,144,151,169,33,145,151,190,133,145,151,211,233,145,151,234,77,146,151,2,178,146,151,28,22,147,151,55,122,147,151,83,222,147,151,112,66,148,151,143,166,148,151,175,10,149,151,208,110,149,151,242,210,149,151,22,55,150,151,59,155,150,151,98,255,150,151,137,99,151,151,178,199,151,151,221,43,152,151,8,144,152,151,53,244,152,151,99,88,153,151,146,188,153,151,195,32,154,151,245,132,154,151,41,233,154,151,93,77,155,151,147,177,155,151,202,21,156,151,3,122,156,151,60,222,156,151,119,66,157,151,180,166,157,151,241,10,158,151,48,111,158,151,112,211,158,151,178,55,159,151,245,155,159,151,57,0,160,151,126,100,160,151,197,200,160,151,12,45,161,151,86,145,161,151,160,245,161,151,236,89,162,151,57,190,162,151,135,34,163,151,215,134,163,151,40,235,163,151,122,79,164,151,206,179,164,151,34,24,165,151,120,124,165,151,208,224,165,151,40,69,166,151,130,169,166,151,221,13,167,151,58,114,167,151,152,214,167,151,247,58,168,151,87,159,168,151,185,3,169,151,28,104,169,151,128,204,169,151,229,48,170,151,76,149,170,151,180,249,170,151,30,94,171,151,136,194,171,151,244,38,172,151,97,139,172,151,208,239,172,151,63,84,173,151,176,184,173,151,35,29,174,151,150,129,174,151,11,230,174,151,129,74,175,151,249,174,175,151,114,19,176,151,236,119,176,151,103,220,176,151,228,64,177,151,97,165,177,151,225,9,178,151,97,110,178,151,227,210,178,151,102,55,179,151,234,155,179,151,111,0,180,151,246,100,180,151,126,201,180,151,8,46,181,151,146,146,181,151,30,247,181,151,172,91,182,151,58,192,182,151,202,36,183,151,91,137,183,151,237,237,183,151,129,82,184,151,22,183,184,151,172,27,185,151,68,128,185,151,220,228,185,151,118,73,186,151,18,174,186,151,174,18,187,151,76,119,187,151,235,219,187,151,140,64,188,151,45,165,188,151,208,9,189,151,117,110,189,151,26,211,189,151,193,55,190,151,105,156,190,151,19,1,191,151,189,101,191,151,105,202,191,151,22,47,192,151,197,147,192,151,117,248,192,151,38,93,193,151,216,193,193,151,139,38,194,151,64,139,194,151,246,239,194,151,174,84,195,151,103,185,195,151,33,30,196,151,220,130,196,151,152,231,196,151,86,76,197,151,21,177,197,151,214,21,198,151,151,122,198,151,90,223,198,151,30,68,199,151,228,168,199,151,170,13,200,151,114,114,200,151,60,215,200,151,6,60,201,151,210,160,201,151,159,5,202,151,109,106,202,151,61,207,202,151,14,52,203,151,224,152,203,151,180,253,203,151,136,98,204,151,94,199,204,151,54,44,205,151,14,145,205,151,232,245,205,151,195,90,206,151,160,191,206,151,125,36,207,151,92,137,207,151,60,238,207,151,30,83,208,151,1,184,208,151,229,28,209,151,202,129,209,151,176,230,209,151,152,75,210,151,129,176,210,151,108,21,211,151,87,122,211,151,68,223,211,151,50,68,212,151,34,169,212,151,19,14,213,151,5,115,213,151,248,215,213,151,236,60,214,151,226,161,214,151,217,6,215,151,210,107,215,151,203,208,215,151,198,53,216,151,194,154,216,151,192,255,216,151,190,100,217,151,190,201,217,151,191,46,218,151,194,147,218,151,198,248,218,151,203,93,219,151,209,194,219,151,217,39,220,151,225,140,220,151,236,241,220,151,247,86,221,151,4,188,221,151,17,33,222,151,33,134,222,151,49,235,222,151,67,80,223,151,86,181,223,151,106,26,224,151,128,127,224,151,150,228,224,151,174,73,225,151,200,174,225,151,226,19,226,151,254,120,226,151,27,222,226,151,58,67,227,151,89,168,227,151,122,13,228,151,156,114,228,151,192,215,228,151,228,60,229,151,10,162,229,151,50,7,230,151,90,108,230,151,132,209,230,151,175,54,231,151,219,155,231,151,9,1,232,151,56,102,232,151,104,203,232,151,153,48,233,151,204,149,233,151,0,251,233,151,53,96,234,151,107,197,234,151,163,42,235,151,220,143,235,151,22,245,235,151,81,90,236,151,142,191,236,151,204,36,237,151,11,138,237,151,76,239,237,151,142,84,238,151,209,185,238,151,21,31,239,151,91,132,239,151,161,233,239,151,233,78,240,151,51,180,240,151,125,25,241,151,201,126,241,151,22,228,241,151,101,73,242,151,181,174,242,151,5,20,243,151,88,121,243,151,171,222,243,151,0,68,244,151,86,169,244,151,173,14,245,151,5,116,245,151,95,217,245,151,186,62,246,151,22,164,246,151,116,9,247,151,211,110,247,151,51,212,247,151,148,57,248,151,247,158,248,151,90,4,249,151,192,105,249,151,38,207,249,151,142,52,250,151,246,153,250,151,96,255,250,151,204,100,251,151,56,202,251,151,166,47,252,151,22,149,252,151,134,250,252,151,248,95,253,151,107,197,253,151,223,42,254,151,84,144,254,151,203,245,254,151,67,91,255,151,188,192,255,151,27,19,0,156,217,69,0,156,151,120,0,156,87,171,0,156,22,222,0,156,215,16,1,156,152,67,1,156,89,118,1,156,28,169,1,156,223,219,1,156,162,14,2,156,102,65,2,156,43,116,2,156,240,166,2,156,182,217,2,156,125,12,3,156,68,63,3,156,12,114,3,156,213,164,3,156,158,215,3,156,104,10,4,156,50,61,4,156,253,111,4,156,201,162,4,156,149,213,4,156,98,8,5,156,48,59,5,156,254,109,5,156,205,160,5,156,156,211,5,156,108,6,6,156,61,57,6,156,14,108,6,156,224,158,6,156,179,209,6,156,134,4,7,156,90,55,7,156,46,106,7,156,3,157,7,156,217,207,7,156,175,2,8,156,134,53,8,156,94,104,8,156,54,155,8,156,15,206,8,156,232,0,9,156,194,51,9,156,157,102,9,156,120,153,9,156,84,204,9,156,49,255,9,156,14,50,10,156,236,100,10,156,203,151,10,156,170,202,10,156,137,253,10,156,106,48,11,156,75,99,11,156,44,150,11,156,14,201,11,156,241,251,11,156,213,46,12,156,185,97,12,156,158,148,12,156,131,199,12,156,105,250,12,156,79,45,13,156,55,96,13,156,30,147,13,156,7,198,13,156,240,248,13,156,218,43,14,156,196,94,14,156,175,145,14,156,155,196,14,156,135,247,14,156,116,42,15,156,97,93,15,156,79,144,15,156,62,195,15,156,45,246,15,156,29,41,16,156,14,92,16,156,255,142,16,156,241,193,16,156,227,244,16,156,214,39,17,156,202,90,17,156,190,141,17,156,179,192,17,156,169,243,17,156,159,38,18,156,150,89,18,156,141,140,18,156,133,191,18,156,126,242,18,156,119,37,19,156,113,88,19,156,108,139,19,156,103,190,19,156,99,241,19,156,95,36,20,156,92,87,20,156,90,138,20,156,88,189,20,156,87,240,20,156,86,35,21,156,87,86,21,156,87,137,21,156,89,188,21,156,91,239,21,156,93,34,22,156,97,85,22,156,100,136,22,156,105,187,22,156,110,238,22,156,116,33,23,156,122,84,23,156,129,135,23,156,137,186,23,156,145,237,23,156,154,32,24,156,163,83,24,156,173,134,24,156,184,185,24,156,195,236,24,156,207,31,25,156,220,82,25,156,233,133,25,156,247,184,25,156,5,236,25,156,21,31,26,156,36,82,26,156,52,133,26,156,69,184,26,156,87,235,26,156,105,30,27,156,124,81,27,156,143,132,27,156,163,183,27,156,184,234,27,156,205,29,28,156,227,80,28,156,250,131,28,156,17,183,28,156,40,234,28,156,65,29,29,156,90,80,29,156,115,131,29,156,142,182,29,156,168,233,29,156,196,28,30,156,224,79,30,156,253,130,30,156,26,182,30,156,56,233,30,156,87,28,31,156,118,79,31,156,150,130,31,156,182,181,31,156,215,232,31,156,249,27,32,156,27,79,32,156,62,130,32,156,97,181,32,156,133,232,32,156,170,27,33,156,208,78,33,156,246,129,33,156,28,181,33,156,67,232,33,156,107,27,34,156,148,78,34,156,189,129,34,156,230,180,34,156,17,232,34,156,60,27,35,156,103,78,35,156,147,129,35,156,192,180,35,156,238,231,35,156,28,27,36,156,74,78,36,156,121,129,36,156,169,180,36,156,218,231,36,156,11,27,37,156,61,78,37,156,111,129,37,156,162,180,37,156,214,231,37,156,10,27,38,156,63,78,38,156,116,129,38,156,170,180,38,156,225,231,38,156,24,27,39,156,80,78,39,156,136,129,39,156,194,180,39,156,251,231,39,156,54,27,40,156,113,78,40,156,172,129,40,156,232,180,40,156,37,232,40,156,99,27,41,156,161,78,41,156,223,129,41,156,31,181,41,156,95,232,41,156,159,27,42,156,224,78,42,156,34,130,42,156,100,181,42,156,167,232,42,156,235,27,43,156,47,79,43,156,116,130,43,156,186,181,43,156,0,233,43,156,70,28,44,156,142,79,44,156,214,130,44,156,30,182,44,156,103,233,44,156,177,28,45,156,251,79,45,156,70,131,45,156,146,182,45,156,222,233,45,156,43,29,46,156,120,80,46,156,198,131,46,156,21,183,46,156,100,234,46,156,180,29,47,156,5,81,47,156,86,132,47,156,168,183,47,156,250,234,47,156,77,30,48,156,161,81,48,156,245,132,48,156,74,184,48,156,159,235,48,156,245,30,49,156,76,82,49,156,163,133,49,156,251,184,49,156,84,236,49,156,173,31,50,156,6,83,50,156,97,134,50,156,188,185,50,156,23,237,50,156,116,32,51,156,208,83,51,156,46,135,51,156,140,186,51,156,234,237,51,156,74,33,52,156,170,84,52,156,10,136,52,156,107,187,52,156,205,238,52,156,47,34,53,156,146,85,53,156,246,136,53,156,90,188,53,156,191,239,53,156,36,35,54,156,138,86,54,156,241,137,54,156,88,189,54,156,192,240,54,156,40,36,55,156,145,87,55,156,251,138,55,156,101,190,55,156,208,241,55,156,60,37,56,156,168,88,56,156,20,140,56,156,130,191,56,156,240,242,56,156,94,38,57,156,205,89,57,156,61,141,57,156,174,192,57,156,31,244,57,156,144,39,58,156,2,91,58,156,117,142,58,156,233,193,58,156,93,245,58,156,210,40,59,156,71,92,59,156,189,143,59,156,51,195,59,156,170,246,59,156,34,42,60,156,154,93,60,156,19,145,60,156,141,196,60,156,7,248,60,156,130,43,61,156,253,94,61,156,121,146,61,156,246,197,61,156,115,249,61,156,241,44,62,156,112,96,62,156,239,147,62,156,110,199,62,156,239,250,62,156,111,46,63,156,241,97,63,156,115,149,63,156,246,200,63,156,121,252,63,156,253,47,64,156,130,99,64,156,7,151,64,156,141,202,64,156,19,254,64,156,154,49,65,156,34,101,65,156,170,152,65,156,51,204,65,156,188,255,65,156,70,51,66,156,209,102,66,156,92,154,66,156,232,205,66,156,116,1,67,156,1,53,67,156,143,104,67,156,29,156,67,156,172,207,67,156,60,3,68,156,204,54,68,156,93,106,68,156,238,157,68,156,128,209,68,156,19,5,69,156,166,56,69,156,57,108,69,156,206,159,69,156,99,211,69,156,248,6,70,156,143,58,70,156,37,110,70,156,189,161,70,156,85,213,70,156,238,8,71,156,135,60,71,156,33,112,71,156,187,163,71,156,86,215,71,156,242,10,72,156,142,62,72,156,43,114,72,156,201,165,72,156,103,217,72,156,5,13,73,156,165,64,73,156,69,116,73,156,229,167,73,156,134,219,73,156,40,15,74,156,202,66,74,156,109,118,74,156,17,170,74,156,181,221,74,156,90,17,75,156,255,68,75,156,165,120,75,156,76,172,75,156,243,223,75,156,155,19,76,156,67,71,76,156,236,122,76,156,150,174,76,156,64,226,76,156,235,21,77,156,151,73,77,156,67,125,77,156,239,176,77,156,157,228,77,156,75,24,78,156,249,75,78,156,168,127,78,156,88,179,78,156,8,231,78,156,185,26,79,156,107,78,79,156,29,130,79,156,207,181,79,156,131,233,79,156,55,29,80,156,235,80,80,156,160,132,80,156,86,184,80,156,13,236,80,156,196,31,81,156,123,83,81,156,51,135,81,156,236,186,81,156,165,238,81,156,95,34,82,156,26,86,82,156,213,137,82,156,145,189,82,156,77,241,82,156,10,37,83,156,200,88,83,156,134,140,83,156,69,192,83,156,5,244,83,156,197,39,84,156,133,91,84,156,70,143,84,156,8,195,84,156,203,246,84,156,142,42,85,156,81,94,85,156,22,146,85,156,219,197,85,156,160,249,85,156,102,45,86,156,45,97,86,156,244,148,86,156,188,200,86,156,132,252,86,156,78,48,87,156,23,100,87,156,226,151,87,156,172,203,87,156,120,255,87,156,68,51,88,156,17,103,88,156,222,154,88,156,172,206,88,156,123,2,89,156,74,54,89,156,25,106,89,156,234,157,89,156,187,209,89,156,140,5,90,156,94,57,90,156,49,109,90,156,4,161,90,156,216,212,90,156,173,8,91,156,130,60,91,156,88,112,91,156,46,164,91,156,5,216,91,156,221,11,92,156,181,63,92,156,142,115,92,156,103,167,92,156,65,219,92,156,27,15,93,156,247,66,93,156,210,118,93,156,175,170,93,156,140,222,93,156,105,18,94,156,71,70,94,156,38,122,94,156,6,174,94,156,230,225,94,156,198,21,95,156,167,73,95,156,137,125,95,156,108,177,95,156,79,229,95,156,50,25,96,156,22,77,96,156,251,128,96,156,225,180,96,156,199,232,96,156,173,28,97,156,148,80,97,156,124,132,97,156,100,184,97,156,77,236,97,156,55,32,98,156,33,84,98,156,12,136,98,156,247,187,98,156,227,239,98,156,208,35,99,156,189,87,99,156,171,139,99,156,153,191,99,156,136,243,99,156,120,39,100,156,104,91,100,156,89,143,100,156,74,195,100,156,60,247,100,156,47,43,101,156,34,95,101,156,22,147,101,156,10,199,101,156,255,250,101,156,245,46,102,156,235,98,102,156,226,150,102,156,217,202,102,156,209,254,102,156,202,50,103,156,195,102,103,156,189,154,103,156,183,206,103,156,178,2,104,156,174,54,104,156,170,106,104,156,167,158,104,156,164,210,104,156,162,6,105,156,161,58,105,156,160,110,105,156,160,162,105,156,160,214,105,156,161,10,106,156,163,62,106,156,165,114,106,156,168,166,106,156,171,218,106,156,175,14,107,156,179,66,107,156,185,118,107,156,190,170,107,156,197,222,107,156,204,18,108,156,211,70,108,156,219,122,108,156,228,174,108,156,238,226,108,156,247,22,109,156,2,75,109,156,13,127,109,156,25,179,109,156,37,231,109,156,50,27,110,156,64,79,110,156,78,131,110,156,92,183,110,156,108,235,110,156,124,31,111,156,140,83,111,156,157,135,111,156,175,187,111,156,193,239,111,156,212,35,112,156,232,87,112,156,252,139,112,156,17,192,112,156,38,244,112,156,60,40,113,156,82,92,113,156,105,144,113,156,129,196,113,156,153,248,113,156,178,44,114,156,204,96,114,156,230,148,114,156,0,201,114,156,27,253,114,156,55,49,115,156,84,101,115,156,113,153,115,156,142,205,115,156,173,1,116,156,203,53,116,156,235,105,116,156,11,158,116,156,44,210,116,156,77,6,117,156,111,58,117,156,145,110,117,156,180,162,117,156,215,214,117,156,252,10,118,156,32,63,118,156,70,115,118,156,108,167,118,156,146,219,118,156,186,15,119,156,225,67,119,156,10,120,119,156,51,172,119,156,92,224,119,156,134,20,120,156,177,72,120,156,220,124,120,156,8,177,120,156,53,229,120,156,98,25,121,156,143,77,121,156,190,129,121,156,237,181,121,156,28,234,121,156,76,30,122,156,125,82,122,156,174,134,122,156,224,186,122,156,18,239,122,156,70,35,123,156,121,87,123,156,173,139,123,156,226,191,123,156,24,244,123,156,78,40,124,156,132,92,124,156,187,144,124,156,243,196,124,156,44,249,124,156,101,45,125,156,158,97,125,156,216,149,125,156,19,202,125,156,78,254,125,156,138,50,126,156,199,102,126,156,4,155,126,156,66,207,126,156,128,3,127,156,191,55,127,156,255,107,127,156,63,160,127,156,127,212,127,156,193,8,128,156,2,61,128,156,69,113,128,156,136,165,128,156,204,217,128,156,16,14,129,156,85,66,129,156,154,118,129,156,224,170,129,156,39,223,129,156,110,19,130,156,182,71,130,156,254,123,130,156,71,176,130,156,145,228,130,156,219,24,131,156,38,77,131,156,113,129,131,156,189,181,131,156,10,234,131,156,87,30,132,156,164,82,132,156,243,134,132,156,66,187,132,156,145,239,132,156,225,35,133,156,50,88,133,156,131,140,133,156,213,192,133,156,39,245,133,156,122,41,134,156,206,93,134,156,34,146,134,156,119,198,134,156,204,250,134,156,34,47,135,156,121,99,135,156,208,151,135,156,40,204,135,156,128,0,136,156,217,52,136,156,51,105,136,156,141,157,136,156,232,209,136,156,67,6,137,156,159,58,137,156,251,110,137,156,88,163,137,156,182,215,137,156,20,12,138,156,115,64,138,156,211,116,138,156,51,169,138,156,147,221,138,156,245,17,139,156,86,70,139,156,185,122,139,156,28,175,139,156,127,227,139,156,227,23,140,156,72,76,140,156,173,128,140,156,19,181,140,156,122,233,140,156,225,29,141,156,73,82,141,156,177,134,141,156,26,187,141,156,131,239,141,156,237,35,142,156,88,88,142,156,195,140,142,156,47,193,142,156,155,245,142,156,8,42,143,156,118,94,143,156,228,146,143,156,83,199,143,156,194,251,143,156,50,48,144,156,163,100,144,156,20,153,144,156,134,205,144,156,248,1,145,156,107,54,145,156,222,106,145,156,82,159,145,156,199,211,145,156,60,8,146,156,178,60,146,156,40,113,146,156,159,165,146,156,23,218,146,156,143,14,147,156,8,67,147,156,129,119,147,156,251,171,147,156,118,224,147,156,241,20,148,156,108,73,148,156,233,125,148,156,102,178,148,156,227,230,148,156,97,27,149,156,224,79,149,156,95,132,149,156,223,184,149,156,95,237,149,156,224,33,150,156,98,86,150,156,228,138,150,156,103,191,150,156,234,243,150,156,110,40,151,156,242,92,151,156,119,145,151,156,253,197,151,156,131,250,151,156,10,47,152,156,146,99,152,156,26,152,152,156,162,204,152,156,44,1,153,156,181,53,153,156,64,106,153,156,203,158,153,156,86,211,153,156,226,7,154,156,111,60,154,156,252,112,154,156,138,165,154,156,25,218,154,156,168,14,155,156,55,67,155,156,200,119,155,156,88,172,155,156,234,224,155,156,124,21,156,156,14,74,156,156,161,126,156,156,53,179,156,156,202,231,156,156,94,28,157,156,244,80,157,156,138,133,157,156,33,186,157,156,184,238,157,156,80,35,158,156,232,87,158,156,129,140,158,156,27,193,158,156,181,245,158,156,80,42,159,156,235,94,159,156,135,147,159,156,36,200,159,156,193,252,159,156,94,49,160,156,253,101,160,156,155,154,160,156,59,207,160,156,219,3,161,156,123,56,161,156,29,109,161,156,190,161,161,156,97,214,161,156,4,11,162,156,167,63,162,156,75,116,162,156,240,168,162,156,149,221,162,156,59,18,163,156,226,70,163,156,137,123,163,156,48,176,163,156,216,228,163,156,129,25,164,156,43,78,164,156,213,130,164,156,127,183,164,156,42,236,164,156,214,32,165,156,130,85,165,156,47,138,165,156,221,190,165,156,139,243,165,156,57,40,166,156,232,92,166,156,152,145,166,156,72,198,166,156,249,250,166,156,171,47,167,156,93,100,167,156,16,153,167,156,195,205,167,156,119,2,168,156,43,55,168,156,224,107,168,156,150,160,168,156,76,213,168,156,3,10,169,156,186,62,169,156,114,115,169,156,43,168,169,156,228,220,169,156,157,17,170,156,88,70,170,156,19,123,170,156,206,175,170,156,138,228,170,156,71,25,171,156,4,78,171,156,194,130,171,156,128,183,171,156,63,236,171,156,254,32,172,156,190,85,172,156,127,138,172,156,64,191,172,156,2,244,172,156,197,40,173,156,136,93,173,156,75,146,173,156,15,199,173,156,212,251,173,156,153,48,174,156,95,101,174,156,38,154,174,156,237,206,174,156,180,3,175,156,125,56,175,156,69,109,175,156,15,162,175,156,217,214,175,156,163,11,176,156,110,64,176,156,58,117,176,156,6,170,176,156,211,222,176,156,161,19,177,156,111,72,177,156,61,125,177,156,12,178,177,156,220,230,177,156,173,27,178,156,125,80,178,156,79,133,178,156,33,186,178,156,244,238,178,156,199,35,179,156,155,88,179,156,111,141,179,156,68,194,179,156,26,247,179,156,240,43,180,156,199,96,180,156,158,149,180,156,118,202,180,156,78,255,180,156,39,52,181,156,1,105,181,156,219,157,181,156,182,210,181,156,145,7,182,156,109,60,182,156,74,113,182,156,39,166,182,156,5,219,182,156,227,15,183,156,194,68,183,156,161,121,183,156,129,174,183,156,98,227,183,156,67,24,184,156,36,77,184,156,7,130,184,156,234,182,184,156,205,235,184,156,177,32,185,156,150,85,185,156,123,138,185,156,97,191,185,156,71,244,185,156,46,41,186,156,22,94,186,156,254,146,186,156,230,199,186,156,208,252,186,156,185,49,187,156,164,102,187,156,143,155,187,156,122,208,187,156,102,5,188,156,83,58,188,156,64,111,188,156,46,164,188,156,29,217,188,156,12,14,189,156,251,66,189,156,236,119,189,156,220,172,189,156,206,225,189,156,192,22,190,156,178,75,190,156,165,128,190,156,153,181,190,156,141,234,190,156,130,31,191,156,119,84,191,156,109,137,191,156,100,190,191,156,91,243,191,156,82,40,192,156,75,93,192,156,67,146,192,156,61,199,192,156,55,252,192,156,49,49,193,156,45,102,193,156,40,155,193,156,37,208,193,156,33,5,194,156,31,58,194,156,29,111,194,156,27,164,194,156,27,217,194,156,26,14,195,156,27,67,195,156,28,120,195,156,29,173,195,156,31,226,195,156,34,23,196,156,37,76,196,156,41,129,196,156,45,182,196,156,50,235,196,156,56,32,197,156,62,85,197,156,68,138,197,156,76,191,197,156,83,244,197,156,92,41,198,156,101,94,198,156,110,147,198,156,120,200,198,156,131,253,198,156,142,50,199,156,154,103,199,156,167,156,199,156,180,209,199,156,193,6,200,156,207,59,200,156,222,112,200,156,237,165,200,156,253,218,200,156,13,16,201,156,30,69,201,156,48,122,201,156,66,175,201,156,85,228,201,156,104,25,202,156,124,78,202,156,145,131,202,156,166,184,202,156,187,237,202,156,209,34,203,156,232,87,203,156,0,141,203,156,23,194,203,156,48,247,203,156,73,44,204,156,99,97,204,156,125,150,204,156,152,203,204,156,179,0,205,156,207,53,205,156,235,106,205,156,8,160,205,156,38,213,205,156,68,10,206,156,99,63,206,156,130,116,206,156,162,169,206,156,195,222,206,156,228,19,207,156,6,73,207,156,40,126,207,156,75,179,207,156,110,232,207,156,146,29,208,156,182,82,208,156,219,135,208,156,1,189,208,156,39,242,208,156,78,39,209,156,118,92,209,156,158,145,209,156,198,198,209,156,239,251,209,156,25,49,210,156,67,102,210,156,110,155,210,156,153,208,210,156,197,5,211,156,242,58,211,156,31,112,211,156,77,165,211,156,123,218,211,156,170,15,212,156,217,68,212,156,9,122,212,156,58,175,212,156,107,228,212,156,156,25,213,156,207,78,213,156,1,132,213,156,53,185,213,156,105,238,213,156,157,35,214,156,210,88,214,156,8,142,214,156,62,195,214,156,117,248,214,156,173,45,215,156,229,98,215,156,29,152,215,156,86,205,215,156,144,2,216,156,202,55,216,156,5,109,216,156,64,162,216,156,124,215,216,156,185,12,217,156,246,65,217,156,52,119,217,156,114,172,217,156,177,225,217,156,240,22,218,156,48,76,218,156,113,129,218,156,178,182,218,156,244,235,218,156,54,33,219,156,121,86,219,156,188,139,219,156,0,193,219,156,68,246,219,156,138,43,220,156,207,96,220,156,22,150,220,156,92,203,220,156,164,0,221,156,236,53,221,156,52,107,221,156,125,160,221,156,199,213,221,156,17,11,222,156,92,64,222,156,167,117,222,156,243,170,222,156,64,224,222,156,141,21,223,156,219,74,223,156,41,128,223,156,120,181,223,156,199,234,223,156,23,32,224,156,103,85,224,156,184,138,224,156,10,192,224,156,92,245,224,156,175,42,225,156,2,96,225,156,86,149,225,156,171,202,225,156,0,0,226,156,85,53,226,156,172,106,226,156,2,160,226,156,90,213,226,156,178,10,227,156,10,64,227,156,99,117,227,156,189,170,227,156,23,224,227,156,114,21,228,156,205,74,228,156,41,128,228,156,133,181,228,156,226,234,228,156,64,32,229,156,158,85,229,156,253,138,229,156,92,192,229,156,188,245,229,156,28,43,230,156,125,96,230,156,223,149,230,156,65,203,230,156,163,0,231,156,7,54,231,156,107,107,231,156,207,160,231,156,52,214,231,156,153,11,232,156,0,65,232,156,102,118,232,156,205,171,232,156,53,225,232,156,158,22,233,156,7,76,233,156,112,129,233,156,218,182,233,156,69,236,233,156,176,33,234,156,28,87,234,156,136,140,234,156,245,193,234,156,98,247,234,156,208,44,235,156,63,98,235,156,174,151,235,156,30,205,235,156,142,2,236,156,255,55,236,156,113,109,236,156,227,162,236,156,85,216,236,156,200,13,237,156,60,67,237,156,176,120,237,156,37,174,237,156,154,227,237,156,16,25,238,156,135,78,238,156,254,131,238,156,118,185,238,156,238,238,238,156,103,36,239,156,224,89,239,156,90,143,239,156,213,196,239,156,80,250,239,156,203,47,240,156,71,101,240,156,196,154,240,156,65,208,240,156,191,5,241,156,62,59,241,156,189,112,241,156,60,166,241,156,189,219,241,156,61,17,242,156,191,70,242,156,64,124,242,156,195,177,242,156,70,231,242,156,201,28,243,156,77,82,243,156,210,135,243,156,87,189,243,156,221,242,243,156,100,40,244,156,234,93,244,156,114,147,244,156,250,200,244,156,131,254,244,156,12,52,245,156,150,105,245,156,32,159,245,156,171,212,245,156,54,10,246,156,194,63,246,156,79,117,246,156,220,170,246,156,106,224,246,156,248,21,247,156,135,75,247,156,22,129,247,156,166,182,247,156,55,236,247,156,200,33,248,156,89,87,248,156,236,140,248,156,126,194,248,156,18,248,248,156,166,45,249,156,58,99,249,156,207,152,249,156,101,206,249,156,251,3,250,156,146,57,250,156,41,111,250,156,193,164,250,156,89,218,250,156,242,15,251,156,140,69,251,156,38,123,251,156,193,176,251,156,92,230,251,156,248,27,252,156,148,81,252,156,49,135,252,156,206,188,252,156,108,242,252,156,11,40,253,156,170,93,253,156,74,147,253,156,234,200,253,156,139,254,253,156,44,52,254,156,206,105,254,156,113,159,254,156,20,213,254,156,184,10,255,156,92,64,255,156,1,118,255,156,166,171,255,156,76,225,255,156,243,22,0,157,154,76,0,157,65,130,0,157,233,183,0,157,146,237,0,157,59,35,1,157,229,88,1,157,144,142,1,157,59,196,1,157,230,249,1,157,146,47,2,157,63,101,2,157,236,154,2,157,154,208,2,157,72,6,3,157,247,59,3,157,167,113,3,157,87,167,3,157,7,221,3,157,185,18,4,157,106,72,4,157,29,126,4,157,207,179,4,157,131,233,4,157,55,31,5,157,235,84,5,157,160,138,5,157,86,192,5,157,12,246,5,157,195,43,6,157,122,97,6,157,50,151,6,157,235,204,6,157,164,2,7,157,93,56,7,157,23,110,7,157,210,163,7,157,141,217,7,157,73,15,8,157,6,69,8,157,194,122,8,157,128,176,8,157,62,230,8,157,253,27,9,157,188,81,9,157,124,135,9,157,60,189,9,157,253,242,9,157,190,40,10,157,128,94,10,157,67,148,10,157,6,202,10,157,201,255,10,157,142,53,11,157,82,107,11,157,24,161,11,157,222,214,11,157,164,12,12,157,107,66,12,157,51,120,12,157,251,173,12,157,196,227,12,157,141,25,13,157,0,0,0,0,5,127,131,9,51,79,80,11,205,79,116,13,0,0,0,16,10,254,6,19,102,158,160,22,153,159,232,26,0,0,0,0,205,79,116,13,51,79,80,11,5,127,131,9,0,0,0,8,230,39,186,6,154,39,168,5,131,191,193,4,0,0,0,4,243,19,93,3,205,19,212,2,193,223,96,2,0,0,0,2,250,137,174,1,230,9,106,1,225,111,48,1,51,79,80,11,0,0,0,8,154,39,168,5,0,0,0,4,205,19,212,2,0,0,0,2,230,9,106,1,0,0,0,1,243,4,181,0,0,0,128,0,122,130,90,0,0,0,64,0,61,65,45,0,0,0,32,0,158,160,22,0,0,0,0,0,0,0,0,0,0,0,0,0,47,150,97,3,116,61,219,5,0,0,0,8,140,194,36,10,209,105,158,12,0,0,0,16,0,0,0,0,4,4,4,4,4,4,6,6,6,8,10,12,16,18,22,28,34,40,46,54,54,192,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,10,10,10,12,12,12,14,14,14,16,16,16,20,20,20,26,26,26,66,66,66,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,6,6,4,4,4,6,6,6,6,6,6,10,10,10,12,12,12,14,14,14,16,16,16,20,20,20,26,26,26,66,66,66,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,6,6,8,8,10,12,16,20,24,28,34,42,50,54,76,158,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,22,22,22,30,30,30,56,56,56,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,6,6,4,4,4,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,22,22,22,30,30,30,56,56,56,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,6,6,8,10,12,16,20,24,30,38,46,56,68,84,102,26,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,8,8,8,12,12,12,16,16,16,20,20,20,26,26,26,34,34,34,42,42,42,12,12,12,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,6,6,4,4,4,6,6,6,8,8,8,12,12,12,16,16,16,20,20,20,26,26,26,34,34,34,42,42,42,12,12,12,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,8,10,12,14,16,18,22,26,32,38,46,54,62,70,76,36,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,24,24,24,32,32,32,44,44,44,12,12,12,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,24,24,24,32,32,32,44,44,44,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,8,10,12,14,16,20,24,28,32,38,46,52,60,68,58,54,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,8,8,8,10,10,10,14,14,14,18,18,18,26,26,26,32,32,32,42,42,42,18,18,18,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,10,10,10,14,14,14,18,18,18,26,26,26,32,32,32,42,42,42,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,24,24,24,30,30,30,40,40,40,18,18,18,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,24,24,24,30,30,30,40,40,40,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,12,12,16,20,24,28,32,40,48,56,64,76,90,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,12,12,12,16,16,16,20,20,20,24,24,24,28,28,28,36,36,36,2,2,2,2,2,2,2,2,2,26,26,26,0,0,0,0,0,0,0,0,0,12,12,12,4,4,4,8,8,8,12,12,12,16,16,16,20,20,20,24,24,24,28,28,28,36,36,36,2,2,2,2,2,2,2,2,2,26,26,26,0,0,0,0,0,0,0,0,0,4,1,68,1,130,1,162,1,73,0,137,0,41,0,25,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,213,0,245,0,181,0,117,0,229,0,165,0,147,0,147,0,99,0,195,0,83,0,51,0,0,0,0,0,0,0,0,0,249,0,121,0,185,0,57,0,217,0,89,0,153,0,25,0,233,0,105,0,169,0,41,0,201,0,73,0,137,0,9,0,236,221,0,0,0,0,0,0,208,149,0,0,0,0,3,0,224,149,0,0,0,0,3,0,0,150,0,0,0,0,3,0,0,0,0,0,0,0,0,0,32,150,0,0,0,0,3,0,96,150,0,0,0,0,4,0,160,150,0,0,0,0,4,0,32,151,0,0,0,0,4,0,176,151,0,0,0,0,4,0,32,152,0,0,0,0,4,0,240,152,0,0,0,0,4,0,192,153,0,0,0,0,4,0,128,154,0,0,0,0,4,0,0,0,0,0,0,0,0,0,160,157,0,0,0,0,4,0,160,160,0,0,1,0,4,0,160,160,0,0,2,0,4,0,160,160,0,0,3,0,4,0,160,160,0,0,4,0,4,0,160,160,0,0,6,0,4,0,160,160,0,0,8,0,4,0,160,160,0,0,10,0,4,0,160,160,0,0,13,0,4,0,208,163,0,0,4,0,4,0,208,163,0,0,5,0,4,0,208,163,0,0,6,0,4,0,208,163,0,0,7,0,4,0,208,163,0,0,8,0,4,0,208,163,0,0,9,0,4,0,208,163,0,0,11,0,4,0,208,163,0,0,13,0,4,0,23,1,7,1,21,0,21,0,3,0,3,0,3,0,3,0,134,0,23,1,7,1,23,0,3,0,3,0,3,0,3,0,39,2,7,2,21,2,21,2,37,1,37,1,37,0,37,0,134,0,23,0,21,1,21,1,5,1,5,1,5,0,5,0,39,2,7,2,21,2,21,2,37,1,37,1,37,0,37,0,136,0,23,1,7,1,23,0,3,0,3,0,3,0,3,0,130,1,57,2,55,1,55,1,25,3,9,3,57,0,41,2,23,2,23,2,39,1,39,1,7,2,7,2,39,0,39,0,51,3,35,3,0,0,0,0,0,0,0,0,0,0,0,0,6,1,130,1,162,1,25,2,41,1,41,0,7,1,7,1,21,1,21,1,21,1,21,1,23,0,23,0,7,0,7,0,55,3,7,3,37,3,37,3,53,2,53,2,53,0,53,0,19,3,51,1,35,2,3,2,0,0,0,0,0,0,0,0,8,1,8,2,4,3,25,1,7,1,7,1,23,0,23,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,68,3,130,3,162,3,25,5,89,1,194,3,89,0,226,3,41,4,73,2,23,4,23,4,71,1,71,1,71,0,71,0,9,4,41,3,57,2,9,3,23,3,23,3,55,1,55,1,55,0,55,0,39,2,39,2,21,2,21,2,21,2,21,2,35,1,35,1,5,2,37,0,85,5,69,5,85,4,85,3,51,5,67,4,35,5,83,2,3,5,51,4,67,3,51,3,8,1,8,2,25,2,41,1,21,1,21,1,21,1,21,1,7,1,7,1,23,0,23,0,5,0,5,0,5,0,5,0,6,3,132,3,194,3,25,5,89,1,226,3,2,4,41,4,73,2,25,4,71,1,71,1,9,4,73,0,41,3,57,2,25,3,57,1,9,3,57,0,37,2,37,2,37,2,37,2,5,2,5,2,5,2,5,2,37,0,37,0,37,0,37,0,87,5,87,4,69,5,69,5,83,3,83,3,83,3,83,3,53,5,69,4,35,5,35,5,83,2,3,5,51,4,67,3,83,0,51,3,0,0,0,0,0,0,0,0,0,0,0,0,8,1,6,2,132,2,196,2,2,3,25,2,41,1,41,0,23,1,23,1,7,1,7,1,23,0,23,0,7,0,7,0,34,3,57,5,89,3,66,3,73,4,41,5,89,2,25,5,87,1,87,1,55,4,55,4,71,3,71,3,89,0,9,4,39,4,71,2,55,3,71,0,21,4,21,4,69,1,69,1,37,3,53,2,19,3,19,3,51,1,51,1,5,3,53,0,35,2,3,2,83,5,67,5,83,4,3,5,0,0,0,0,8,1,8,2,4,3,25,1,7,1,7,1,23,0,23,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,70,3,196,3,6,4,130,4,164,4,228,4,36,5,25,7,121,1,98,5,132,5,196,5,25,6,105,1,105,0,2,6,34,6,66,6,25,4,73,1,73,0,41,3,57,2,9,3,23,3,23,3,55,1,55,1,55,0,55,0,39,2,39,2,21,2,37,1,5,2,37,0,119,7,103,7,119,6,87,7,119,5,103,6,69,7,69,7,117,4,85,6,101,5,53,7,117,3,117,3,69,6,69,6,87,5,87,4,101,3,101,3,35,7,115,2,101,4,5,7,115,0,115,0,99,2,99,2,69,5,53,5,3,6,3,6,85,3,69,4,51,6,35,6,37,5,85,2,19,5,19,5,83,1,83,1,53,4,69,3,3,5,83,0,35,4,67,2,51,3,3,4,0,0,0,0,8,1,8,2,8,3,6,4,25,2,130,4,23,1,23,1,7,1,7,1,23,0,23,0,5,0,5,0,5,0,5,0,164,4,230,4,100,5,162,5,196,5,41,7,121,2,2,6,119,1,119,1,25,7,121,0,57,6,105,3,105,0,34,6,66,6,25,5,103,2,103,2,41,6,9,6,23,6,23,6,103,1,103,1,89,1,57,4,89,0,98,6,41,4,73,2,25,4,73,1,9,4,73,0,39,3,39,3,55,2,55,2,21,3,21,3,21,3,21,3,53,1,53,1,53,1,53,1,7,3,55,0,37,2,37,2,35,1,35,1,35,1,35,1,3,2,35,0,117,7,101,7,117,6,117,5,101,6,101,6,69,7,69,7,117,4,117,4,87,7,87,5,85,6,101,5,51,7,51,7,115,3,67,6,69,5,85,4,53,5,85,3,99,4,3,7,67,4,35,5,83,2,3,5,67,3,51,3,8,1,8,2,8,3,4,4,70,4,194,4,25,2,41,1,226,4,9,0,23,1,23,1,7,1,7,1,23,0,23,0,4,5,66,5,98,5,130,5,89,6,57,7,162,5,41,7,121,2,73,6,105,4,25,7,121,1,194,5,57,6,105,3,73,5,89,4,73,4,226,5,39,6,39,6,103,2,103,2,103,1,103,1,25,6,105,0,57,5,89,3,41,5,89,2,23,5,23,5,87,1,87,1,55,4,55,4,71,3,71,3,89,0,9,4,39,4,39,4,71,2,71,2,23,4,23,4,53,3,69,1,37,3,53,2,71,0,7,3,53,0,53,0,19,3,19,3,19,3,19,3,51,1,35,2,3,2,35,0,117,7,101,7,115,6,115,6,83,7,115,5,99,6,67,7,115,4,99,5,115,3,83,5,3,7,115,0,3,6,3,5,8,1,8,2,8,3,4,4,25,1,9,1,23,0,23,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,72,4,72,5,72,6,72,7,72,8,72,9,70,10,198,10,70,11,198,11,70,12,198,12,66,13,100,13,166,13,34,14,68,14,132,14,196,14,4,15,137,1,66,15,98,15,130,15,164,15,226,15,25,5,89,1,2,16,34,16,66,16,25,4,71,1,71,1,9,4,73,0,41,3,57,2,23,3,23,3,55,1,55,1,7,3,7,3,55,0,55,0,39,2,39,2,21,2,37,1,5,2,37,0,104,16,104,17,104,18,102,19,228,19,36,20,102,20,228,20,34,21,68,21,132,21,196,21,4,22,68,22,25,15,249,1,249,0,130,22,162,22,194,22,233,2,226,22,25,14,233,1,2,23,34,23,66,23,98,23,130,23,162,23,201,6,57,13,194,23,41,13,217,2,25,13,185,7,226,23,2,24,201,3,34,24,73,11,215,1,215,1,9,13,217,0,137,10,169,8,73,12,201,4,105,11,185,6,55,12,55,12,39,12,39,12,199,2,199,2,87,11,87,11,185,5,137,9,23,12,23,12,199,1,199,1,153,8,9,12,199,0,199,0,185,4,105,10,169,6,121,9,55,11,55,11,183,3,183,3,137,8,89,10,39,11,39,11,169,5,105,9,167,4,167,4,121,8,137,7,151,4,151,4,121,7,121,6,181,2,181,2,181,2,181,2,21,11,21,11,181,1,181,1,7,11,183,0,151,6,71,10,55,10,167,3,87,9,151,5,37,10,37,10,165,2,165,2,21,10,21,10,165,1,165,1,7,10,103,8,165,0,165,0,135,6,71,9,149,3,149,3,55,9,87,8,135,5,103,7,37,9,37,9,149,2,149,2,87,7,119,5,53,8,53,8,133,3,133,3,103,6,71,7,119,4,87,6,103,5,119,3,19,9,147,1,5,9,149,0,69,8,133,4,117,2,117,2,71,6,103,4,35,8,35,8,35,8,35,8,131,2,19,8,53,7,37,7,19,7,19,7,115,1,115,1,85,5,5,7,117,0,53,6,101,3,69,5,85,4,37,6,101,2,53,5,3,8,131,0,19,6,99,1,3,6,99,0,85,3,69,4,35,5,35,5,83,2,3,5,51,4,67,3,83,0,35,4,67,2,51,3,70,24,249,15,233,15,217,15,233,14,201,15,217,14,185,15,249,11,201,14,217,12,194,24,231,12,231,12,215,13,215,13,249,10,201,13,183,14,183,14,231,11,231,11,151,15,151,15,247,9,247,9,231,10,231,10,183,13,183,13,215,11,215,11,135,15,135,15,247,8,247,8,199,12,199,12,169,14,153,14,135,14,135,14,121,15,121,14,245,7,245,7,245,7,245,7,213,10,213,10,167,13,183,12,199,11,247,6,101,15,101,15,229,8,85,15,149,13,213,9,245,5,229,7,165,12,181,11,69,15,69,15,245,4,245,4,199,10,231,6,245,3,245,3,51,15,51,15,133,13,213,8,35,15,243,2,101,14,149,12,3,15,3,15,197,9,85,14,163,11,163,11,117,13,213,7,67,14,67,14,197,8,213,6,51,14,51,14,179,9,179,9,149,11,165,10,179,10,227,5,227,4,131,12,99,13,227,3,35,14,3,14,227,0,83,13,211,5,115,12,195,7,67,13,131,11,179,8,211,4,147,10,163,9,99,12,211,3,115,11,83,12,195,5,147,9,115,10,163,7,147,7,247,14,247,12,245,13,245,13,227,13,227,13,227,13,227,13,163,15,227,9,0,0,0,0,8,1,8,2,8,3,8,4,8,5,6,6,134,6,4,7,66,7,98,7,23,1,23,1,9,1,25,0,7,0,7,0,136,7,136,8,136,9,136,10,136,11,134,12,6,13,136,13,134,14,6,15,134,15,6,16,132,16,198,16,70,17,196,17,4,18,68,18,132,18,196,18,4,19,68,19,132,19,196,19,2,20,34,20,66,20,100,20,162,20,194,20,228,20,34,21,66,21,98,21,153,1,130,21,162,21,194,21,226,21,2,22,41,8,137,2,25,8,137,1,34,22,66,22,98,22,130,22,41,7,121,2,105,4,25,7,89,5,121,1,162,22,57,6,105,3,73,5,89,4,41,6,105,2,25,6,194,22,57,5,103,1,103,1,89,3,73,4,39,5,39,5,87,2,87,2,23,5,23,5,87,1,87,1,9,5,89,0,55,4,55,4,71,3,39,4,71,2,55,3,69,1,69,1,23,4,7,4,37,3,37,3,53,2,53,2,71,0,7,3,21,3,21,3,53,1,53,0,35,2,35,2,19,2,35,1,3,2,35,0,226,22,2,23,233,14,34,23,66,23,98,23,249,11,130,23,217,13,169,15,249,10,185,14,233,11,201,13,217,12,153,15,249,9,233,10,185,13,217,11,137,15,249,8,201,12,153,14,233,9,121,15,249,7,169,13,217,10,185,12,105,15,162,23,199,11,199,11,247,6,247,6,137,14,233,8,89,15,153,13,247,5,247,5,119,14,119,14,231,7,231,7,167,12,167,12,199,10,199,10,183,11,183,11,217,9,137,13,71,15,71,15,247,4,247,4,55,15,55,15,247,3,247,3,215,8,215,8,231,6,231,6,39,15,39,15,247,2,247,2,105,14,249,0,23,15,23,15,247,1,247,1,151,12,151,12,199,9,199,9,87,14,167,11,183,10,231,5,119,13,215,7,71,14,231,4,135,12,199,8,55,14,103,13,215,6,231,3,151,11,183,9,39,14,39,14,167,10,167,10,231,2,231,2,23,14,23,14,231,1,231,1,9,14,233,0,87,13,87,13,215,5,215,5,119,12,199,7,71,13,135,11,213,4,213,4,183,8,151,10,167,9,103,12,199,6,55,13,213,3,213,3,213,2,213,2,39,13,7,13,21,13,21,13,117,11,117,11,181,7,181,7,213,1,213,1,87,12,215,0,197,5,197,5,133,10,133,10,165,8,69,12,197,4,101,11,181,6,181,6,151,9,7,12,53,12,53,12,197,3,197,3,117,10,117,10,165,7,165,7,165,6,165,6,199,0,7,11,195,2,195,2,37,12,85,11,181,5,21,12,133,9,149,8,197,1,69,11,181,4,101,10,53,11,117,9,179,3,179,3,149,7,133,8,37,11,85,10,179,2,179,2,165,5,21,11,179,1,179,1,181,0,101,9,149,6,69,10,165,4,117,8,133,7,53,10,163,3,163,3,83,9,147,5,35,10,163,2,19,10,163,1,5,10,165,0,99,8,99,8,131,6,67,9,147,4,51,9,147,3,147,3,117,7,5,9,83,8,131,5,35,9,99,7,115,6,147,2,19,9,147,0,67,8,131,4,83,7,115,5,51,8,131,3,99,6,67,7,115,4,3,8,131,0,83,6,99,5,51,7,115,3,67,6,3,7,115,0,3,6,99,0,243,15,227,15,243,14,211,15,243,13,195,15,243,12,211,14,227,13,179,15,195,14,227,12,163,14,3,15,0,0,0,0,0,0,0,0,8,1,8,2,8,3,4,4,25,1,9,1,23,0,23,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,70,4,198,4,68,5,249,15,132,5,194,5,232,5,249,2,226,6,25,15,249,1,8,7,8,8,8,9,8,10,8,11,8,12,6,13,134,13,6,14,134,14,6,15,134,15,6,16,132,16,196,16,2,17,36,17,100,17,162,17,89,1,194,17,226,17,2,18,34,18,25,4,73,1,66,18,41,3,57,2,23,3,23,3,55,1,55,1,9,3,57,0,39,2,39,2,21,2,37,1,5,2,37,0,231,15,247,14,215,15,247,13,199,15,247,12,183,15,247,11,165,15,165,15,247,10,151,15,247,9,247,8,133,15,133,15,117,15,245,7,101,15,245,6,85,15,245,5,67,15,67,15,243,4,243,3,243,0,243,0,243,0,243,0,243,0,243,0,243,0,243,0,53,15,53,15,53,15,53,15,104,18,102,19,230,19,102,20,35,15,3,15,228,20,36,21,100,21,162,21,196,21,4,22,66,22,100,22,164,22,228,22,36,23,233,3,98,23,130,23,162,23,194,23,226,23,2,24,34,24,9,13,66,24,98,24,130,24,57,12,162,24,25,12,201,0,194,24,231,2,231,2,41,14,25,14,217,3,41,13,217,2,217,1,57,11,226,24,23,13,23,13,201,4,105,11,201,3,169,7,39,12,39,12,201,2,185,5,201,1,9,12,73,11,185,4,105,10,169,6,183,3,183,3,89,10,169,5,39,11,39,11,183,2,183,2,23,11,23,11,183,1,183,1,9,11,185,0,105,9,153,6,73,10,169,4,121,8,137,7,167,3,167,3,57,10,89,9,39,10,39,10,153,5,105,8,167,1,167,1,137,6,121,7,151,4,151,4,73,9,89,7,103,7,103,7,165,2,165,2,165,2,165,2,21,10,21,10,7,10,167,0,55,9,151,3,87,8,135,5,37,9,37,9,149,2,149,2,119,6,7,9,21,9,21,9,149,1,149,1,151,0,71,8,135,4,119,5,55,8,135,3,103,6,39,8,133,2,133,2,71,7,119,4,21,8,21,8,133,1,133,1,133,0,133,0,7,8,87,6,53,7,53,7,117,3,117,3,103,5,71,6,37,7,37,7,117,2,117,2,103,4,87,5,5,7,5,7,19,7,19,7,19,7,19,7,115,1,115,1,117,0,53,6,101,3,69,5,85,4,37,6,99,2,19,6,99,1,99,1,5,6,101,0,83,3,83,3,53,5,69,4,35,5,83,2,19,5,3,5,51,4,67,3,83,0,35,4,67,2,51,3,3,4,67,0,201,14,2,25,215,14,215,14,231,9,231,9,233,10,217,9,229,14,229,14,229,14,229,14,231,13,231,13,231,11,231,11,181,14,181,14,197,13,197,13,215,12,215,11,165,14,165,14,197,12,197,12,167,13,215,10,119,14,167,12,197,10,197,10,199,9,119,13,85,14,85,14,179,13,179,13,179,13,179,13,147,14,147,14,181,12,197,11,133,14,229,8,149,13,229,7,181,11,133,13,213,8,101,14,227,6,147,12,165,11,181,10,229,5,213,7,67,14,67,14,229,4,133,12,195,8,51,14,99,13,99,13,213,6,149,11,181,9,165,10,227,1,227,1,211,4,211,4,181,8,165,9,115,11,115,11,181,7,213,0,3,14,227,0,83,13,211,5,115,12,195,7,67,13,131,11,147,10,99,12,195,6,51,13,83,12,195,5,131,10,163,8,147,9,67,12,179,6,115,10,83,11,131,9,147,8,115,9,147,7,131,8,227,12,211,13,0,0,0,0,0,0,0,0,0,0,0,0,8,1,8,2,8,3,249,15,8,4,8,5,8,6,8,7,8,8,8,9,6,10,132,10,25,1,9,1,25,0,9,0,233,15,249,14,217,15,249,13,201,15,249,12,185,15,249,11,247,10,247,10,169,15,153,15,247,9,247,9,247,8,247,8,137,15,121,15,247,7,247,7,103,15,103,15,247,6,247,6,87,15,87,15,247,5,247,5,71,15,71,15,247,4,247,4,55,15,55,15,247,3,247,3,39,15,39,15,247,2,247,2,247,1,247,1,25,15,249,0,198,10,70,11,198,11,70,12,200,12,198,13,70,14,198,14,68,15,132,15,196,15,4,16,68,16,132,16,196,16,4,17,68,17,134,17,4,18,68,18,132,18,198,18,68,19,134,19,2,20,36,20,100,20,162,20,196,20,2,21,34,21,66,21,98,21,130,21,162,21,194,21,226,21,2,22,34,22,66,22,98,22,130,22,162,22,194,22,226,22,2,23,36,23,98,23,132,23,121,3,194,23,121,2,73,6,105,4,89,5,121,1,57,6,105,3,73,5,89,4,41,6,105,2,25,6,105,1,226,23,57,5,89,3,73,4,41,5,89,2,25,5,2,24,87,1,87,1,57,4,73,3,39,4,39,4,71,2,71,2,55,3,55,3,23,4,23,4,71,1,71,1,9,4,73,0,39,3,39,3,55,2,55,2,21,3,21,3,21,3,21,3,53,1,53,1,53,1,53,1,7,3,55,0,37,2,37,2,19,2,19,2,19,2,19,2,35,1,35,1,5,2,37,0,3,15,3,15,3,15,3,15,231,14,215,14,231,13,199,14,231,12,215,13,183,14,231,11,199,13,215,12,167,14,231,10,183,13,215,11,199,12,151,14,231,9,167,13,215,10,183,12,199,11,135,14,231,8,151,13,215,9,119,14,231,7,167,12,199,10,199,10,183,11,183,11,135,13,135,13,215,8,215,8,9,14,233,0,7,13,7,13,229,6,229,6,229,6,229,6,103,14,151,12,197,9,197,9,85,14,85,14,181,10,181,10,229,5,229,5,167,11,119,13,213,7,213,7,229,4,229,4,133,12,133,12,197,8,197,8,71,14,39,14,53,14,53,14,101,13,213,6,229,3,149,11,181,9,165,10,229,2,21,14,229,1,85,13,213,5,117,12,197,7,69,13,133,11,181,8,213,4,149,10,165,9,101,12,197,6,53,13,213,3,37,13,213,2,21,13,117,11,181,7,213,1,85,12,197,5,133,10,165,8,149,9,69,12,197,4,101,11,101,11,181,6,181,6,215,0,7,12,53,12,53,12,197,3,117,10,165,7,37,12,197,2,85,11,181,5,21,12,133,9,149,8,197,1,69,11,199,0,7,11,53,11,53,11,183,0,7,10,21,10,21,10,179,4,179,4,101,10,165,6,117,9,117,9,149,7,149,7,167,0,7,9,149,0,149,0,179,3,131,8,37,11,85,10,179,2,179,2,165,5,21,11,181,1,101,9,147,6,163,4,69,10,117,8,131,7,131,7,51,10,163,3,83,9,147,5,35,10,163,2,163,1,99,8,131,6,115,7,67,9,147,4,51,9,147,3,83,8,131,5,35,9,99,7,115,6,147,2,19,9,147,1,67,8,131,4,83,7,115,5,51,8,131,3,99,6,35,8,131,2,19,8,67,7,115,4,131,1,131,1,5,8,133,0,83,6,99,5,19,7,19,7,5,7,117,0,51,7,35,7,3,6,99,0,3,5,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,0,0,184,203,0,0,232,203,0,0,240,203,0,0,152,203,0,0,8,195,0,0,248,203,0,0,240,203,0,0,152,203,0,0,0,196,0,0,192,203,0,0,0,204,0,0,152,203,0,0,24,196,0,0,248,203,0,0,0,204,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,222,18,4,149,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,0,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,4,192,4,192,4,192,4,192,4,192,4,192,8,214,8,214,8,214,8,214,8,214,8,214,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,4,192,4,192,4,192,4,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,67,95,67,84,89,80,69,0,0,0,0,76,67,95,78,85,77,69,82,73,67,0,0,76,67,95,84,73,77,69,0,0,0,0,0,76,67,95,67,79,76,76,65,84,69,0,0,76,67,95,77,79,78,69,84,65,82,89,0,76,67,95,77,69,83,83,65,71,69,83,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,204,221,0,0,194,227,0,0,0,0,0,0,1,0,0,0,248,194,0,0,0,0,0,0,0,221,0,0,1,228,0,0,0,221,0,0,39,228,0,0,148,221,0,0,24,233,0,0,0,0,0,0,24,195,0,0,0,221,0,0,34,233,0,0,148,221,0,0,43,233,0,0,1,0,0,0,24,195,0,0,148,221,0,0,78,233,0,0,0,0,0,0,88,195,0,0,148,221,0,0,54,233,0,0,1,0,0,0,80,195,0,0,0,221,0,0,67,233,0,0,40,221,0,0,89,233,0,0,104,195,0,0,0,0,0,0,0,221,0,0,99,233,0,0,148,221,0,0,122,233,0,0,1,0,0,0,144,195,0,0,148,221,0,0,110,233,0,0,1,0,0,0,88,195,0,0,40,221,0,0,132,233,0,0,160,195,0,0,0,0,0,0,0,221,0,0,140,233,0,0,148,221,0,0,149,233,0,0,1,0,0,0,104,195,0,0,148,221,0,0,162,233,0,0,0,0,0,0,104,195,0,0,0,221,0,0,178,233,0,0,148,221,0,0,209,233,0,0,0,0,0,0,144,195,0,0,148,221,0,0,218,233,0,0,1,0,0,0,160,195,0,0,148,221,0,0,229,233,0,0,0,0,0,0,160,195,0,0,148,221,0,0,239,233,0,0,0,0,0,0,16,196,0,0,0,221,0,0,253,233,0,0,148,221,0,0,16,234,0,0,0,0,0,0,40,196,0,0,40,221,0,0,28,234,0,0,16,196,0,0,0,0,0,0,0,221,0,0,39,234,0,0,176,221,0,0,70,234,0,0,148,221,0,0,81,234,0,0,1,0,0,0,40,196,0,0,148,221,0,0,94,234,0,0,1,0,0,0,16,196,0,0,148,221,0,0,109,234,0,0,1,0,0,0,120,196,0,0,0,221,0,0,124,234,0,0,148,221,0,0,137,234,0,0,0,0,0,0,120,196,0,0,148,221,0,0,151,234,0,0,0,0,0,0,80,195,0,0,148,221,0,0,170,234,0,0,0,0,0,0,176,196,0,0,40,221,0,0,181,234,0,0,80,195,0,0,0,0,0,0,148,221,0,0,191,234,0,0,1,0,0,0,176,196,0,0,148,221,0,0,203,234,0,0,1,0,0,0,224,196,0,0,40,221,0,0,216,234,0,0,240,196,0,0,0,0,0,0,0,221,0,0,227,234,0,0,148,221,0,0,240,234,0,0,0,0,0,0,240,196,0,0,0,221,0,0,254,234,0,0,176,221,0,0,12,235,0,0,176,221,0,0,27,235,0,0,176,221,0,0,46,235,0,0,148,221,0,0,57,235,0,0,0,0,0,0,224,196,0,0,148,221,0,0,77,235,0,0,1,0,0,0,240,196,0,0,0,221,0,0,121,238,0,0,0,221,0,0,152,238,0,0,0,221,0,0,183,238,0,0,0,221,0,0,214,238,0,0,0,221,0,0,245,238,0,0,0,221,0,0,20,239,0,0,0,221,0,0,51,239,0,0,0,221,0,0,82,239,0,0,0,221,0,0,113,239,0,0,0,221,0,0,144,239,0,0,204,221,0,0,175,239,0,0,0,0,0,0,1,0,0,0,248,194,0,0,0,0,0,0,204,221,0,0,238,239,0,0,0,0,0,0,1,0,0,0,248,194,0,0,0,0,0,0,40,221,0,0,174,240,0,0,216,197,0,0,0,0,0,0,0,221,0,0,156,240,0,0,40,221,0,0,216,240,0,0,216,197,0,0,0,0,0,0,0,221,0,0,2,241,0,0,0,221,0,0,51,241,0,0,204,221,0,0,100,241,0,0,0,0,0,0,1,0,0,0,200,197,0,0,3,244,255,255,204,221,0,0,147,241,0,0,0,0,0,0,1,0,0,0,224,197,0,0,3,244,255,255,204,221,0,0,194,241,0,0,0,0,0,0,1,0,0,0,200,197,0,0,3,244,255,255,204,221,0,0,241,241,0,0,0,0,0,0,1,0,0,0,224,197,0,0,3,244,255,255,40,221,0,0,32,242,0,0,248,197,0,0,0,0,0,0,40,221,0,0,57,242,0,0,240,197,0,0,0,0,0,0,40,221,0,0,120,242,0,0,248,197,0,0,0,0,0,0,40,221,0,0,144,242,0,0,240,197,0,0,0,0,0,0,40,221,0,0,168,242,0,0,176,198,0,0,0,0,0,0,40,221,0,0,188,242,0,0,0,203,0,0,0,0,0,0,40,221,0,0,210,242,0,0,176,198,0,0,0,0,0,0,204,221,0,0,235,242,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,240,198,0,0,0,0,0,0,204,221,0,0,47,243,0,0,0,0,0,0,1,0,0,0,8,199,0,0,0,0,0,0,0,221,0,0,69,243,0,0,204,221,0,0,94,243,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,48,199,0,0,0,0,0,0,204,221,0,0,162,243,0,0,0,0,0,0,1,0,0,0,8,199,0,0,0,0,0,0,204,221,0,0,203,243,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,104,199,0,0,0,0,0,0,204,221,0,0,15,244,0,0,0,0,0,0,1,0,0,0,128,199,0,0,0,0,0,0,0,221,0,0,37,244,0,0,204,221,0,0,62,244,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,168,199,0,0,0,0,0,0,204,221,0,0,130,244,0,0,0,0,0,0,1,0,0,0,128,199,0,0,0,0,0,0,204,221,0,0,216,245,0,0,0,0,0,0,3,0,0,0,176,198,0,0,2,0,0,0,232,199,0,0,2,0,0,0,240,199,0,0,0,8,0,0,0,221,0,0,63,246,0,0,0,221,0,0,29,246,0,0,204,221,0,0,82,246,0,0,0,0,0,0,3,0,0,0,176,198,0,0,2,0,0,0,232,199,0,0,2,0,0,0,32,200,0,0,0,8,0,0,0,221,0,0,151,246,0,0,204,221,0,0,185,246,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,72,200,0,0,0,8,0,0,0,221,0,0,254,246,0,0,204,221,0,0,19,247,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,72,200,0,0,0,8,0,0,204,221,0,0,88,247,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,144,200,0,0,2,0,0,0,0,221,0,0,116,247,0,0,204,221,0,0,137,247,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,144,200,0,0,2,0,0,0,204,221,0,0,165,247,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,144,200,0,0,2,0,0,0,204,221,0,0,193,247,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,144,200,0,0,2,0,0,0,204,221,0,0,236,247,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,24,201,0,0,0,0,0,0,0,221,0,0,50,248,0,0,204,221,0,0,86,248,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,64,201,0,0,0,0,0,0,0,221,0,0,156,248,0,0,204,221,0,0,187,248,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,104,201,0,0,0,0,0,0,0,221,0,0,1,249,0,0,204,221,0,0,26,249,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,144,201,0,0,0,0,0,0,0,221,0,0,96,249,0,0,204,221,0,0,121,249,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,184,201,0,0,2,0,0,0,0,221,0,0,142,249,0,0,204,221,0,0,37,250,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,184,201,0,0,2,0,0,0,40,221,0,0,166,249,0,0,240,201,0,0,0,0,0,0,204,221,0,0,201,249,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,16,202,0,0,2,0,0,0,0,221,0,0,236,249,0,0,40,221,0,0,3,250,0,0,240,201,0,0,0,0,0,0,204,221,0,0,58,250,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,16,202,0,0,2,0,0,0,204,221,0,0,92,250,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,16,202,0,0,2,0,0,0,204,221,0,0,126,250,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,16,202,0,0,2,0,0,0,40,221,0,0,161,250,0,0,176,198,0,0,0,0,0,0,204,221,0,0,183,250,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,184,202,0,0,2,0,0,0,0,221,0,0,201,250,0,0,204,221,0,0,222,250,0,0,0,0,0,0,2,0,0,0,176,198,0,0,2,0,0,0,184,202,0,0,2,0,0,0,40,221,0,0,251,250,0,0,176,198,0,0,0,0,0,0,40,221,0,0,16,251,0,0,176,198,0,0,0,0,0,0,0,221,0,0,37,251,0,0,0,221,0,0,210,251,0,0,40,221,0,0,50,252,0,0,32,203,0,0,0,0,0,0,40,221,0,0,223,251,0,0,48,203,0,0,0,0,0,0,0,221,0,0,0,252,0,0,40,221,0,0,13,252,0,0,16,203,0,0,0,0,0,0,40,221,0,0,20,253,0,0,8,203,0,0,0,0,0,0,40,221,0,0,36,253,0,0,72,203,0,0,0,0,0,0,40,221,0,0,89,253,0,0,32,203,0,0,0,0,0,0,40,221,0,0,53,253,0,0,104,203,0,0,0,0,0,0,40,221,0,0,123,253,0,0,32,203,0,0,0,0,0,0,120,221,0,0,163,253,0,0,120,221,0,0,165,253,0,0,120,221,0,0,168,253,0,0,120,221,0,0,170,253,0,0,120,221,0,0,172,253,0,0,148,221,0,0,174,253,0,0,1,0,0,0,184,203,0,0,120,221,0,0,178,253,0,0,120,221,0,0,180,253,0,0,120,221,0,0,182,253,0,0,120,221,0,0,184,253,0,0,120,221,0,0,186,253,0,0,120,221,0,0,201,243,0,0,120,221,0,0,188,253,0,0,120,221,0,0,190,253,0,0,120,221,0,0,192,253,0,0,40,221,0,0,194,253,0,0,32,203,0,0,0,0,0,0,40,221,0,0,227,253,0,0,16,203,0,0,0,0,0,0,68,172,0,0,128,187,0,0,0,125,0,0,1,0,0,0,2,0,0,0,3,0,0,0,112,148,0,0,176,148,0,0,168,203,0,0,152,203,0,0,0,195,0,0,232,203,0,0,0,195,0,0,8,195,0,0,240,203,0,0,240,203,0,0,8,195,0,0,240,203,0,0,168,203,0,0,32,195,0,0,8,195,0,0,152,203,0,0,48,195,0,0,64,195,0,0,112,195,0,0,128,195,0,0,48,195,0,0,152,203,0,0,184,195,0,0,64,195,0,0,152,203,0,0,184,195,0,0,0,195,0,0,112,195,0,0,208,195,0,0,232,203,0,0,0,196,0,0,152,203,0,0,0,196,0,0,0,195,0,0,24,196,0,0,24,196,0,0,152,203,0,0,144,196,0,0,232,203,0,0,160,196,0,0,0,196,0,0,0,195,0,0,192,196,0,0,208,196,0,0,192,196,0,0,160,196,0,0,152,203,0,0,248,196,0,0,40,197,0,0,24,205,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,18,23,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,205,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,24,254,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,205,0,0,28,206,0,0,9,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,6,0,0,0,40,2,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,167,0,0,20,0,0,0,67,46,85,84,70,45,56,0,0,0,0,0,0,0,0,0,0,0,0,0,152,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,14,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,144,180,0,0,144,185,0,0,144,189,0,0,0,0,0,0,216,197,0,0,10,0,0,0,11,0,0,0,0,0,0,0,240,197,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,248,197,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,8,0,0,0,0,0,0,0,0,198,0,0,40,0,0,0,41,0,0,0,248,255,255,255,248,255,255,255,0,198,0,0,42,0,0,0,43,0,0,0,236,208,0,0,0,209,0,0,8,0,0,0,0,0,0,0,24,198,0,0,44,0,0,0,45,0,0,0,248,255,255,255,248,255,255,255,24,198,0,0,46,0,0,0,47,0,0,0,28,209,0,0,48,209,0,0,4,0,0,0,0,0,0,0,48,198,0,0,48,0,0,0,49,0,0,0,252,255,255,255,252,255,255,255,48,198,0,0,50,0,0,0,51,0,0,0,76,209,0,0,96,209,0,0,4,0,0,0,0,0,0,0,72,198,0,0,52,0,0,0,53,0,0,0,252,255,255,255,252,255,255,255,72,198,0,0,54,0,0,0,55,0,0,0,124,209,0,0,144,209,0,0,0,0,0,0,96,198,0,0,26,0,0,0,56,0,0,0,57,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,58,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,59,0,0,0,60,0,0,0,0,0,0,0,112,198,0,0,12,0,0,0,61,0,0,0,62,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,63,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,64,0,0,0,65,0,0,0,0,0,0,0,128,198,0,0,26,0,0,0,66,0,0,0,67,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,38,0,0,0,39,0,0,0,0,0,0,0,144,198,0,0,12,0,0,0,71,0,0,0,72,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,160,198,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,0,0,0,0,192,198,0,0,82,0,0,0,83,0,0,0,78,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,0,0,0,0,208,198,0,0,87,0,0,0,88,0,0,0,78,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,0,0,0,0,16,199,0,0,100,0,0,0,101,0,0,0,78,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,0,0,0,0,72,199,0,0,113,0,0,0,114,0,0,0,78,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,0,0,0,0,136,199,0,0,123,0,0,0,124,0,0,0,78,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,0,0,0,0,192,199,0,0,133,0,0,0,134,0,0,0,78,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,248,255,255,255,192,199,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,0,0,0,0,248,199,0,0,149,0,0,0,150,0,0,0,78,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,156,0,0,0,157,0,0,0,248,255,255,255,248,199,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,40,200,0,0,165,0,0,0,166,0,0,0,78,0,0,0,167,0,0,0,0,0,0,0,80,200,0,0,168,0,0,0,169,0,0,0,78,0,0,0,170,0,0,0,0,0,0,0,112,200,0,0,171,0,0,0,172,0,0,0,78,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,0,0,0,0,152,200,0,0,182,0,0,0,183,0,0,0,78,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,0,0,0,0,184,200,0,0,193,0,0,0,194,0,0,0,78,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,0,0,0,0,216,200,0,0,204,0,0,0,205,0,0,0,78,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,0,0,0,0,248,200,0,0,215,0,0,0,216,0,0,0,78,0,0,0,217,0,0,0,218,0,0,0,0,0,0,0,32,201,0,0,219,0,0,0,220,0,0,0,78,0,0,0,221,0,0,0,222,0,0,0,0,0,0,0,72,201,0,0,223,0,0,0,224,0,0,0,78,0,0,0,225,0,0,0,226,0,0,0,0,0,0,0,112,201,0,0,227,0,0,0,228,0,0,0,78,0,0,0,229,0,0,0,230,0,0,0,0,0,0,0,152,201,0,0,231,0,0,0,232,0,0,0,78,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,0,0,0,0,192,201,0,0,236,0,0,0,237,0,0,0,78,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,0,0,0,0,24,202,0,0,241,0,0,0,242,0,0,0,78,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,0,0,0,0,224,201,0,0,241,0,0,0,250,0,0,0,78,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,0,0,0,0,72,202,0,0,251,0,0,0,252,0,0,0,78,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,0,0,0,0,136,202,0,0,4,1,0,0,5,1,0,0,78,0,0,0,0,0,0,0,152,202,0,0,6,1,0,0,7,1,0,0,78,0,0,0,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,12,1,0,0,13,1,0,0,14,1,0,0,15,1,0,0,0,0,0,0,224,202,0,0,16,1,0,0,17,1,0,0,78,0,0,0,18,1,0,0,19,1,0,0,20,1,0,0,21,1,0,0,22,1,0,0,0,0,0,0,240,202,0,0,23,1,0,0,24,1,0,0,78,0,0,0,25,1,0,0,26,1,0,0,27,1,0,0,28,1,0,0,29,1,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,176,198,0,0,241,0,0,0,30,1,0,0,78,0,0,0,0,0,0,0,192,202,0,0,241,0,0,0,31,1,0,0,78,0,0,0,32,1,0,0,33,1,0,0,34,1,0,0,35,1,0,0,36,1,0,0,37,1,0,0,38,1,0,0,39,1,0,0,40,1,0,0,41,1,0,0,42,1,0,0,43,1,0,0,0,0,0,0,40,202,0,0,241,0,0,0,44,1,0,0,78,0,0,0,45,1,0,0,46,1,0,0,47,1,0,0,48,1,0,0,49,1,0,0,50,1,0,0,51,1,0,0,0,0,0,0,104,202,0,0,241,0,0,0,52,1,0,0,78,0,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,58,1,0,0,59,1,0,0,0,0,0,0,240,201,0,0,241,0,0,0,60,1,0,0,78,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,0,0,0,0,240,199,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,0,0,0,0,32,200,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,61,1,0,0,0,0,0,0,16,203,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,68,1,0,0,69,1,0,0,0,0,0,0,56,203,0,0,62,1,0,0,70,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,71,1,0,0,72,1,0,0,73,1,0,0,0,0,0,0,72,203,0,0,74,1,0,0,75,1,0,0,76,1,0,0,0,0,0,0,88,203,0,0,74,1,0,0,77,1,0,0,76,1,0,0,0,0,0,0,136,203,0,0,62,1,0,0,78,1,0,0,64,1,0,0,65,1,0,0,79,1,0,0,0,0,0,0,120,203,0,0,62,1,0,0,80,1,0,0,64,1,0,0,65,1,0,0,81,1,0,0,0,0,0,0,24,204,0,0,62,1,0,0,82,1,0,0,64,1,0,0,65,1,0,0,83,1,0,0,0,0,0,0,40,204,0,0,62,1,0,0,84,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,85,1,0,0,86,1,0,0,87,1,0,0,1,0,100,101,110,111,109,32,33,61,32,48,0,116,105,109,101,114,46,99,0,115,99,97,108,101,95,114,97,116,105,111,110,97,108,0,105,110,99,111,109,112,97,116,105,98,108,101,32,98,108,111,99,107,95,116,121,112,101,32,102,111,114,32,74,83,0,72,117,102,102,109,97,110,32,100,97,116,97,32,111,118,101,114,114,117,110,0,98,97,100,32,72,117,102,102,109,97,110,32,116,97,98,108,101,32,115,101,108,101,99,116,0,98,97,100,32,97,117,100,105,111,32,100,97,116,97,32,108,101,110,103,116,104,0,98,97,100,32,109,97,105,110,95,100,97,116,97,95,98,101,103,105,110,32,112,111,105,110,116,101,114,0,98,97,100,32,115,99,97,108,101,102,97,99,116,111,114,32,115,101,108,101,99,116,105,111,110,32,105,110,102,111,0,114,101,115,101,114,118,101,100,32,98,108,111,99,107,95,116,121,112,101,0,98,97,100,32,98,105,103,95,118,97,108,117,101,115,32,99,111,117,110,116,0,98,97,100,32,102,114,97,109,101,32,108,101,110,103,116,104,0,98,97,100,32,98,105,116,114,97,116,101,47,109,111,100,101,32,99,111,109,98,105,110,97,116,105,111,110,0,98,97,100,32,115,99,97,108,101,102,97,99,116,111,114,32,105,110,100,101,120,0,102,111,114,98,105,100,100,101,110,32,98,105,116,32,97,108,108,111,99,97,116,105,111,110,32,118,97,108,117,101,0,67,82,67,32,99,104,101,99,107,32,102,97,105,108,101,100,0,114,101,115,101,114,118,101,100,32,101,109,112,104,97,115,105,115,32,118,97,108,117,101,0,114,101,115,101,114,118,101,100,32,115,97,109,112,108,101,32,102,114,101,113,117,101,110,99,121,32,118,97,108,117,101,0,102,111,114,98,105,100,100,101,110,32,98,105,116,114,97,116,101,32,118,97,108,117,101,0,114,101,115,101,114,118,101,100,32,104,101,97,100,101,114,32,108,97,121,101,114,32,118,97,108,117,101,0,108,111,115,116,32,115,121,110,99,104,114,111,110,105,122,97,116,105,111,110,0,110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,105,110,118,97,108,105,100,32,40,110,117,108,108,41,32,98,117,102,102,101,114,32,112,111,105,110,116,101,114,0,105,110,112,117,116,32,98,117,102,102,101,114,32,116,111,111,32,115,109,97,108,108,32,40,111,114,32,69,79,70,41,0,110,111,32,101,114,114,111,114,0,115,116,114,101,97,109,45,62,109,100,95,108,101,110,32,43,32,109,100,95,108,101,110,32,45,32,115,105,46,109,97,105,110,95,100,97,116,97,95,98,101,103,105,110,32,60,61,32,77,65,68,95,66,85,70,70,69,82,95,77,68,76,69,78,0,108,97,121,101,114,51,46,99,0,109,97,100,95,108,97,121,101,114,95,73,73,73,0,45,98,105,116,115,95,108,101,102,116,32,60,61,32,77,65,68,95,66,85,70,70,69,82,95,71,85,65,82,68,32,42,32,67,72,65,82,95,66,73,84,0,73,73,73,95,104,117,102,102,100,101,99,111,100,101,0,65,117,100,105,111,67,111,110,116,101,120,116,0,119,101,98,107,105,116,65,117,100,105,111,67,111,110,116,101,120,116,0,99,108,111,115,101,0,65,110,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,102,114,97,103,109,101,110,116,32,115,109,97,108,108,101,114,32,116,104,101,110,32,104,97,108,102,32,111,102,32,116,104,101,32,103,108,117,101,32,98,117,102,102,101,114,44,32,105,103,110,111,114,105,110,103,0,65,100,100,105,110,103,32,110,101,119,32,102,114,97,103,109,101,110,116,32,0,32,98,121,116,101,115,32,108,111,110,103,0,87,114,111,110,103,32,115,116,97,116,101,32,111,110,32,115,119,105,116,99,104,66,117,102,102,101,114,32,109,101,116,104,111,100,32,45,32,101,109,112,116,121,44,32,97,98,111,114,116,105,110,103,0,87,114,111,110,103,32,115,116,97,116,101,32,111,110,32,115,119,105,116,99,104,66,117,102,102,101,114,32,109,101,116,104,111,100,32,45,32,111,110,71,108,117,101,72,97,108,102,44,32,97,98,111,114,116,105,110,103,0,72,97,118,105,110,103,32,97,110,111,116,104,101,114,32,102,114,97,103,109,101,110,116,32,0,87,65,82,78,73,78,71,58,32,83,119,105,116,99,104,105,110,103,32,98,117,102,102,101,114,115,32,119,104,105,108,101,32,116,104,101,32,112,114,101,118,105,111,117,115,32,111,110,101,32,105,115,32,110,111,116,32,100,114,97,105,110,101,100,44,32,101,114,114,111,114,58,32,0,87,65,82,78,73,78,71,58,32,110,111,116,32,115,117,112,112,111,115,101,100,32,116,111,32,104,97,112,112,101,110,0,69,114,114,111,114,58,32,98,121,116,101,115,32,116,111,32,114,101,97,100,32,105,110,32,116,104,101,32,98,117,102,102,101,114,32,97,114,101,32,109,111,114,101,32,116,104,101,110,32,103,108,117,101,32,98,117,102,102,101,114,32,99,97,110,32,102,105,116,32,40,0,41,0,83,119,105,116,99,104,105,110,103,32,116,111,32,103,108,117,101,0,70,114,101,101,105,110,103,32,116,104,101,32,100,114,97,105,110,101,100,32,102,114,97,103,109,101,110,116,0,69,114,114,111,114,32,105,110,32,112,117,108,108,66,117,102,102,101,114,32,109,101,116,104,111,100,33,0,102,114,97,109,101,115,76,101,102,116,32,101,114,114,111,114,58,32,0,32,102,114,97,109,101,115,32,97,114,101,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,100,101,99,111,100,105,110,103,0,97,108,108,111,99,97,116,111,114,60,84,62,58,58,97,108,108,111,99,97,116,101,40,115,105,122,101,95,116,32,110,41,32,39,110,39,32,101,120,99,101,101,100,115,32,109,97,120,105,109,117,109,32,115,117,112,112,111,114,116,101,100,32,115,105,122,101,0,99,114,101,97,116,101,66,117,102,102,101,114,0,103,101,116,67,104,97,110,110,101,108,68,97,116,97,0,85,110,101,120,112,101,99,116,101,100,32,101,114,114,111,114,32,100,117,114,105,110,103,32,116,104,101,32,100,101,99,111,100,105,110,103,32,112,114,111,99,101,115,115,58,32,0,80,114,111,99,101,115,115,101,100,32,0,32,102,114,97,109,101,115,44,32,0,32,115,117,99,99,101,115,115,102,117,108,108,121,44,32,108,97,115,116,32,101,114,114,111,114,32,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,50,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,109,97,100,95,108,97,121,101,114,0,77,65,68,95,76,65,89,69,82,95,73,0,77,65,68,95,76,65,89,69,82,95,73,73,0,77,65,68,95,76,65,89,69,82,95,73,73,73,0,109,97,100,95,109,111,100,101,0,77,65,68,95,77,79,68,69,95,68,85,65,76,95,67,72,65,78,78,69,76,0,77,65,68,95,77,79,68,69,95,74,79,73,78,84,95,83,84,69,82,69,79,0,77,65,68,95,77,79,68,69,95,83,73,78,71,76,69,95,67,72,65,78,78,69,76,0,77,65,68,95,77,79,68,69,95,83,84,69,82,69,79,0,109,97,100,95,101,109,112,104,97,115,105,115,0,77,65,68,95,69,77,80,72,65,83,73,83,95,53,48,95,49,53,95,85,83,0,77,65,68,95,69,77,80,72,65,83,73,83,95,67,67,73,84,84,95,74,95,49,55,0,77,65,68,95,69,77,80,72,65,83,73,83,95,78,79,78,69,0,77,65,68,95,69,77,80,72,65,83,73,83,95,82,69,83,69,82,86,69,68,0,109,97,100,95,101,114,114,111,114,0,77,65,68,95,69,82,82,79,82,95,78,79,78,69,0,77,65,68,95,69,82,82,79,82,95,66,85,70,76,69,78,0,77,65,68,95,69,82,82,79,82,95,66,85,70,80,84,82,0,77,65,68,95,69,82,82,79,82,95,78,79,77,69,77,0,77,65,68,95,69,82,82,79,82,95,76,79,83,84,83,89,78,67,0,77,65,68,95,69,82,82,79,82,95,66,65,68,76,65,89,69,82,0,77,65,68,95,69,82,82,79,82,95,66,65,68,66,73,84,82,65,84,69,0,77,65,68,95,69,82,82,79,82,95,66,65,68,83,65,77,80,76,69,82,65,84,69,0,77,65,68,95,69,82,82,79,82,95,66,65,68,69,77,80,72,65,83,73,83,0,77,65,68,95,69,82,82,79,82,95,66,65,68,67,82,67,0,77,65,68,95,69,82,82,79,82,95,66,65,68,66,73,84,65,76,76,79,67,0,77,65,68,95,69,82,82,79,82,95,66,65,68,83,67,65,76,69,70,65,67,84,79,82,0,77,65,68,95,69,82,82,79,82,95,66,65,68,77,79,68,69,0,77,65,68,95,69,82,82,79,82,95,66,65,68,70,82,65,77,69,76,69,78,0,77,65,68,95,69,82,82,79,82,95,66,65,68,66,73,71,86,65,76,85,69,83,0,77,65,68,95,69,82,82,79,82,95,66,65,68,66,76,79,67,75,84,89,80,69,0,77,65,68,95,69,82,82,79,82,95,66,65,68,83,67,70,83,73,0,77,65,68,95,69,82,82,79,82,95,66,65,68,68,65,84,65,80,84,82,0,77,65,68,95,69,82,82,79,82,95,66,65,68,80,65,82,84,51,76,69,78,0,77,65,68,95,69,82,82,79,82,95,66,65,68,72,85,70,70,84,65,66,76,69,0,77,65,68,95,69,82,82,79,82,95,66,65,68,72,85,70,70,68,65,84,65,0,77,65,68,95,69,82,82,79,82,95,66,65,68,83,84,69,82,69,79,0,109,97,100,95,104,101,97,100,101,114,0,77,97,100,72,101,97,100,101,114,0,108,97,121,101,114,0,109,111,100,101,95,101,120,116,101,110,115,105,111,110,0,109,111,100,101,0,101,109,112,104,97,115,105,115,0,98,105,116,114,97,116,101,0,115,97,109,112,108,101,114,97,116,101,0,99,114,99,95,99,104,101,99,107,0,99,114,99,95,116,97,114,103,101,116,0,102,108,97,103,115,0,112,114,105,118,97,116,101,95,98,105,116,115,0,100,117,114,97,116,105,111,110,0,109,97,100,95,104,101,97,100,101,114,95,105,110,105,116,0,109,97,100,95,102,114,97,109,101,0,77,97,100,70,114,97,109,101,0,111,112,116,105,111,110,115,0,104,101,97,100,101,114,0,115,98,115,97,109,112,108,101,0,111,118,101,114,108,97,112,0,100,101,99,111,100,101,0,109,97,100,95,116,105,109,101,114,95,116,0,115,101,99,111,110,100,115,0,102,114,97,99,116,105,111,110,0,109,97,100,95,102,114,97,109,101,95,105,110,105,116,0,109,97,100,95,102,114,97,109,101,95,102,105,110,105,115,104,0,109,97,100,95,98,105,116,112,116,114,0,109,97,100,95,115,116,114,101,97,109,0,77,97,100,83,116,114,101,97,109,0,115,121,110,99,0,102,114,101,101,114,97,116,101,0,101,114,114,111,114,0,109,100,76,101,110,0,109,97,105,110,68,97,116,97,0,115,101,116,66,117,102,102,101,114,0,109,97,100,95,115,116,114,101,97,109,95,105,110,105,116,0,109,97,100,95,115,116,114,101,97,109,95,102,105,110,105,115,104,0,109,97,100,95,115,116,114,101,97,109,95,98,117,102,102,101,114,0,109,97,100,95,115,116,114,101,97,109,95,115,121,110,99,0,109,97,100,95,112,99,109,0,77,97,100,80,67,77,0,99,104,97,110,110,101,108,115,0,108,101,110,103,116,104,0,115,97,109,112,108,101,115,0,109,97,100,95,115,121,110,116,104,95,105,110,105,116,0,109,97,100,95,115,121,110,116,104,95,102,114,97,109,101,0,109,97,100,95,115,121,110,116,104,0,77,97,100,83,121,110,116,104,0,112,104,97,115,101,0,112,99,109,0,102,114,97,109,101,0,68,101,99,111,100,101,114,0,97,100,100,70,114,97,103,109,101,110,116,0,104,97,115,77,111,114,101,0,102,114,97,109,101,115,76,101,102,116,0,80,55,68,101,99,111,100,101,114,0,55,68,101,99,111,100,101,114,0,80,75,55,68,101,99,111,100,101,114,0,80,75,57,109,97,100,95,102,114,97,109,101,0,57,109,97,100,95,102,114,97,109,101,0,80,56,77,97,100,83,121,110,116,104,0,56,77,97,100,83,121,110,116,104,0,57,109,97,100,95,115,121,110,116,104,0,80,75,56,77,97,100,83,121,110,116,104,0,80,75,54,77,97,100,80,67,77,0,54,77,97,100,80,67,77,0,55,109,97,100,95,112,99,109,0,80,75,57,109,97,100,95,115,121,110,116,104,0,80,57,109,97,100,95,115,121,110,116,104,0,118,105,105,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,80,54,77,97,100,80,67,77,0,80,75,55,109,97,100,95,112,99,109,0,80,55,109,97,100,95,112,99,109,0,80,49,48,109,97,100,95,115,116,114,101,97,109,0,49,48,109,97,100,95,115,116,114,101,97,109,0,118,105,105,105,105,0,80,57,77,97,100,83,116,114,101,97,109,0,57,77,97,100,83,116,114,101,97,109,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,57,109,97,100,95,101,114,114,111,114,0,80,75,57,77,97,100,83,116,114,101,97,109,0,80,75,49,48,109,97,100,95,115,116,114,101,97,109,0,80,75,49,48,109,97,100,95,98,105,116,112,116,114,0,49,48,109,97,100,95,98,105,116,112,116,114,0,80,49,48,109,97,100,95,98,105,116,112,116,114,0,80,57,109,97,100,95,102,114,97,109,101,0,105,0,105,105,105,105,0,80,56,77,97,100,70,114,97,109,101,0,56,77,97,100,70,114,97,109,101,0,80,75,56,77,97,100,70,114,97,109,101,0,80,75,57,77,97,100,72,101,97,100,101,114,0,57,77,97,100,72,101,97,100,101,114,0,49,48,109,97,100,95,104,101,97,100,101,114,0,80,49,48,109,97,100,95,104,101,97,100,101,114,0,49,49,109,97,100,95,116,105,109,101,114,95,116,0,49,50,109,97,100,95,101,109,112,104,97,115,105,115,0,56,109,97,100,95,109,111,100,101,0,118,105,105,105,0,105,105,105,0,57,109,97,100,95,108,97,121,101,114,0,80,57,77,97,100,72,101,97,100,101,114,0,118,105,0,118,0,105,105,0,80,75,49,48,109,97,100,95,104,101,97,100,101,114,0,118,111,105,100,0,98,111,111,108,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,102,108,111,97,116,0,100,111,117,98,108,101,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,0,1,2,4,7,3,6,5,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,105,110,102,105,110,105,116,121,0,110,97,110,0,76,67,95,65,76,76,0,76,65,78,71,0,67,46,85,84,70,45,56,0,80,79,83,73,88,0,77,85,83,76,95,76,79,67,80,65,84,72,0,78,83,116,51,95,95,50,56,105,111,115,95,98,97,115,101,69,0,78,83,116,51,95,95,50,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,78,83,116,51,95,95,50,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,78,83,116,51,95,95,50,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,50,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,83,116,51,95,95,50,55,99,111,108,108,97,116,101,73,99,69,69,0,78,83,116,51,95,95,50,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,78,83,116,51,95,95,50,55,99,111,108,108,97,116,101,73,119,69,69,0,37,112,0,67,0,78,83,116,51,95,95,50,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,50,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,78,83,116,51,95,95,50,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,37,112,0,0,0,0,76,0,108,108,0,37,0,0,0,0,0,108,0,78,83,116,51,95,95,50,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,50,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,78,83,116,51,95,95,50,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,37,72,58,37,77,58,37,83,0,37,109,47,37,100,47,37,121,0,37,73,58,37,77,58,37,83,32,37,112,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,65,77,0,80,77,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,37,72,58,37,77,37,72,58,37,77,58,37,83,37,72,58,37,77,58,37,83,78,83,116,51,95,95,50,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,78,83,116,51,95,95,50,57,116,105,109,101,95,98,97,115,101,69,0,78,83,116,51,95,95,50,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,78,83,116,51,95,95,50,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,48,95,95,116,105,109,101,95,112,117,116,69,0,78,83,116,51,95,95,50,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,95,98,97,115,101,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,48,49,50,51,52,53,54,55,56,57,0,37,76,102,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,48,49,50,51,52,53,54,55,56,57,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,37,46,48,76,102,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,50,56,109,101,115,115,97,103,101,115,73,99,69,69,0,78,83,116,51,95,95,50,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,50,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,109,51,50,69,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,78,83,116,51,95,95,50,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,109,51,50,69,69,69,0,78,83,116,51,95,95,50,56,109,101,115,115,97,103,101,115,73,119,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,78,83,116,51,95,95,50,53,99,116,121,112,101,73,99,69,69,0,78,83,116,51,95,95,50,49,48,99,116,121,112,101,95,98,97,115,101,69,0,78,83,116,51,95,95,50,53,99,116,121,112,101,73,119,69,69,0,102,97,108,115,101,0,116,114,117,101,0,78,83,116,51,95,95,50,56,110,117,109,112,117,110,99,116,73,99,69,69,0,78,83,116,51,95,95,50,56,110,117,109,112,117,110,99,116,73,119,69,69,0,78,83,116,51,95,95,50,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,37,100,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,68,110,0,98,0,99,0,104,0,80,75,104,0,97,0,115,0,116,0,105,0,106,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,101,110,117,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function(adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function(ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function(ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function(ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___cxa_uncaught_exception() {
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  
    

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var i = 0;
          try {
            if (offset === 0 && length === 0) {
              // musl implements an fflush using a write of a NULL buffer of size 0
              stream.tty.ops.flush(stream.tty);
            } else {
              while (i < length) {
                stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
                i++;
              }
            }
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function() {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function(mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function(mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function(name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function(mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function(mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function(path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function(path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function(path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function(store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function(store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function(store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function(src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function() {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function(flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function(node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function(node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function(node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function(parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function(node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function(node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function(parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function(parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function(parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function(node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { abort("random_device"); /*Math.random() is not safe for random number generation, so this fallback random_device implementation aborts... see kripken/emscripten/pull/7096 */ };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function(addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function() {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function() {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function(allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  
  var structRegistrations={};
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function __embind_finalize_value_object(structType) {
      var reg = structRegistrations[structType];
      delete structRegistrations[structType];
  
      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
      var fieldRecords = reg.fields;
      var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
                concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
      whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
          var fields = {};
          fieldRecords.forEach(function(field, i) {
              var fieldName = field.fieldName;
              var getterReturnType = fieldTypes[i];
              var getter = field.getter;
              var getterContext = field.getterContext;
              var setterArgumentType = fieldTypes[i + fieldRecords.length];
              var setter = field.setter;
              var setterContext = field.setterContext;
              fields[fieldName] = {
                  read: function(ptr) {
                      return getterReturnType['fromWireType'](
                          getter(getterContext, ptr));
                  },
                  write: function(ptr, o) {
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                      runDestructors(destructors);
                  }
              };
          });
  
          return [{
              name: reg.name,
              'fromWireType': function(ptr) {
                  var rv = {};
                  for (var i in fields) {
                      rv[i] = fields[i].read(ptr);
                  }
                  rawDestructor(ptr);
                  return rv;
              },
              'toWireType': function(destructors, o) {
                  // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                  // assume all fields are present without checking.
                  for (var fieldName in fields) {
                      if (!(fieldName in o)) {
                          throw new TypeError('Missing field');
                      }
                  }
                  var ptr = rawConstructor();
                  for (fieldName in fields) {
                      fields[fieldName].write(ptr, o[fieldName]);
                  }
                  if (destructors !== null) {
                      destructors.push(rawDestructor, ptr);
                  }
                  return ptr;
              },
              'argPackAdvance': 8,
              'readValueFromPointer': simpleReadValueFromPointer,
              destructorFunction: rawDestructor,
          }];
      });
    }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  
  var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  
  function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
          throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
          throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
          throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(
          this_.$$.ptr,
          this_.$$.ptrType.registeredClass,
          classType.registeredClass);
    }function __embind_register_class_property(
      classType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      fieldName = readLatin1String(fieldName);
      getter = embind__requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + fieldName;
          var desc = {
              get: function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
          };
          if (setter) {
              desc.set = function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              };
          } else {
              desc.set = function(v) {
                  throwBindingError(humanName + ' is a read-only property');
              };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
          whenDependentTypesAreResolved(
              [],
              (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
          function(types) {
              var getterReturnType = types[0];
              var desc = {
                  get: function() {
                      var ptr = validateThis(this, classType, humanName + ' getter');
                      return getterReturnType['fromWireType'](getter(getterContext, ptr));
                  },
                  enumerable: true
              };
  
              if (setter) {
                  setter = embind__requireFunction(setterSignature, setter);
                  var setterArgumentType = types[1];
                  desc.set = function(v) {
                      var ptr = validateThis(this, classType, humanName + ' setter');
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                      runDestructors(destructors);
                  };
              }
  
              Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
              return [];
          });
  
          return [];
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function enumReadValueFromPointer(name, shift, signed) {
      switch (shift) {
          case 0: return function(pointer) {
              var heap = signed ? HEAP8 : HEAPU8;
              return this['fromWireType'](heap[pointer]);
          };
          case 1: return function(pointer) {
              var heap = signed ? HEAP16 : HEAPU16;
              return this['fromWireType'](heap[pointer >> 1]);
          };
          case 2: return function(pointer) {
              var heap = signed ? HEAP32 : HEAPU32;
              return this['fromWireType'](heap[pointer >> 2]);
          };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_enum(
      rawType,
      name,
      size,
      isSigned
    ) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
  
      function ctor() {
      }
      ctor.values = {};
  
      registerType(rawType, {
          name: name,
          constructor: ctor,
          'fromWireType': function(c) {
              return this.constructor.values[c];
          },
          'toWireType': function(destructors, c) {
              return c.value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': enumReadValueFromPointer(name, shift, isSigned),
          destructorFunction: null,
      });
      exposePublicSymbol(name, ctor);
    }

  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __embind_register_enum_value(
      rawEnumType,
      name,
      enumValue
    ) {
      var enumType = requireRegisteredType(rawEnumType, 'enum');
      name = readLatin1String(name);
  
      var Enum = enumType.constructor;
  
      var Value = Object.create(enumType.constructor.prototype, {
          value: {value: enumValue},
          constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
      });
      Enum.values[enumValue] = Value;
      Enum[name] = Value;
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
              
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
              
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
              
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_value_object(
      rawType,
      name,
      constructorSignature,
      rawConstructor,
      destructorSignature,
      rawDestructor
    ) {
      structRegistrations[rawType] = {
          name: readLatin1String(name),
          rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
          rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
          fields: [],
      };
    }

  function __embind_register_value_object_field(
      structType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      structRegistrations[structType].fields.push({
          fieldName: readLatin1String(fieldName),
          getterReturnType: getterReturnType,
          getter: embind__requireFunction(getterSignature, getter),
          getterContext: getterContext,
          setterArgumentType: setterArgumentType,
          setter: embind__requireFunction(setterSignature, setter),
          setterContext: setterContext,
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }function __emval_as(handle, returnType, destructorsRef) {
      handle = requireHandle(handle);
      returnType = requireRegisteredType(returnType, 'emval::as');
      var destructors = [];
      var rd = __emval_register(destructors);
      HEAP32[destructorsRef >> 2] = rd;
      return returnType['toWireType'](destructors, handle);
    }

  
  function __emval_allocateDestructors(destructorsRef) {
      var destructors = [];
      HEAP32[destructorsRef >> 2] = __emval_register(destructors);
      return destructors;
    }
  
  
  var emval_symbols={};function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
          return readLatin1String(address);
      } else {
          return symbol;
      }
    }
  
  var emval_methodCallers=[];function __emval_call_method(caller, handle, methodName, destructorsRef, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      return caller(handle, methodName, __emval_allocateDestructors(destructorsRef), args);
    }

  function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }


  
  function emval_get_global() { return (function(){return Function;})()('return this')(); }function __emval_get_global(name) {
      if(name===0){
        return __emval_register(emval_get_global());
      } else {
        name = getStringOrSymbol(name);
        return __emval_register(emval_get_global()[name]);
      }
    }

  
  function __emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }
  
  function __emval_lookupTypes(argCount, argTypes, argWireTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i);
      }
      return a;
    }function __emval_get_method_caller(argCount, argTypes) {
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
  
      var params = ["retType"];
      var args = [retType];
  
      var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
      for (var i = 0; i < argCount - 1; ++i) {
          argsList += (i !== 0 ? ", " : "") + "arg" + i;
          params.push("argType" + i);
          args.push(types[1 + i]);
      }
  
      var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
      var functionBody =
          "return function " + functionName + "(handle, name, destructors, args) {\n";
  
      var offset = 0;
      for (var i = 0; i < argCount - 1; ++i) {
          functionBody +=
          "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? ("+"+offset) : "") + ");\n";
          offset += types[i + 1]['argPackAdvance'];
      }
      functionBody +=
          "    var rv = handle[name](" + argsList + ");\n";
      for (var i = 0; i < argCount - 1; ++i) {
          if (types[i + 1]['deleteObject']) {
              functionBody +=
              "    argType" + i + ".deleteObject(arg" + i + ");\n";
          }
      }
      if (!retType.isVoid) {
          functionBody +=
          "    return retType.toWireType(destructors, rv);\n";
      }
      functionBody +=
          "};\n";
  
      params.push(functionBody);
      var invokerFunction = new_(Function, params).apply(null, args);
      return __emval_addMethodCaller(invokerFunction);
    }

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  
  function craftEmvalAllocator(argCount) {
      /*This function returns a new function that looks like this:
      function emval_allocator_3(constructor, argTypes, args) {
          var argType0 = requireRegisteredType(HEAP32[(argTypes >> 2)], "parameter 0");
          var arg0 = argType0.readValueFromPointer(args);
          var argType1 = requireRegisteredType(HEAP32[(argTypes >> 2) + 1], "parameter 1");
          var arg1 = argType1.readValueFromPointer(args + 8);
          var argType2 = requireRegisteredType(HEAP32[(argTypes >> 2) + 2], "parameter 2");
          var arg2 = argType2.readValueFromPointer(args + 16);
          var obj = new constructor(arg0, arg1, arg2);
          return __emval_register(obj);
      } */
      var argsList = "";
      for(var i = 0; i < argCount; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i; // 'arg0, arg1, ..., argn'
      }
  
      var functionBody =
          "return function emval_allocator_"+argCount+"(constructor, argTypes, args) {\n";
  
      for(var i = 0; i < argCount; ++i) {
          functionBody +=
              "var argType"+i+" = requireRegisteredType(Module['HEAP32'][(argTypes >> 2) + "+i+"], \"parameter "+i+"\");\n" +
              "var arg"+i+" = argType"+i+".readValueFromPointer(args);\n" +
              "args += argType"+i+"['argPackAdvance'];\n";
      }
      functionBody +=
          "var obj = new constructor("+argsList+");\n" +
          "return __emval_register(obj);\n" +
          "}\n";
  
      /*jshint evil:true*/
      return (new Function("requireRegisteredType", "Module", "__emval_register", functionBody))(
          requireRegisteredType, Module, __emval_register);
    }
  
  var emval_newers={};function __emval_new(handle, argCount, argTypes, args) {
      handle = requireHandle(handle);
  
      var newer = emval_newers[argCount];
      if (!newer) {
          newer = craftEmvalAllocator(argCount);
          emval_newers[argCount] = newer;
      }
  
      return newer(handle, argTypes, args);
    }

  function __emval_run_destructors(handle) {
      var destructors = emval_handle_array[handle].value;
      runDestructors(destructors);
      __emval_decref(handle);
    }

  function __emval_set_property(handle, key, value) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      value = requireHandle(value);
      handle[key] = value;
    }

  function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function _abort() {
      Module['abort']();
    }

   

   

   

  
  var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }



   

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

   

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

   

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



function nullFunc_i(x) { err("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { err("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { err("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { err("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { err("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { err("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "ClassHandle": ClassHandle, "ClassHandle_clone": ClassHandle_clone, "ClassHandle_delete": ClassHandle_delete, "ClassHandle_deleteLater": ClassHandle_deleteLater, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "ClassHandle_isDeleted": ClassHandle_isDeleted, "RegisteredClass": RegisteredClass, "RegisteredPointer": RegisteredPointer, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "RegisteredPointer_destructor": RegisteredPointer_destructor, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "___assert_fail": ___assert_fail, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_throw": ___cxa_throw, "___cxa_uncaught_exception": ___cxa_uncaught_exception, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___map_file": ___map_file, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___syscall91": ___syscall91, "___unlock": ___unlock, "__addDays": __addDays, "__arraySum": __arraySum, "__embind_finalize_value_object": __embind_finalize_value_object, "__embind_register_bool": __embind_register_bool, "__embind_register_class": __embind_register_class, "__embind_register_class_constructor": __embind_register_class_constructor, "__embind_register_class_function": __embind_register_class_function, "__embind_register_class_property": __embind_register_class_property, "__embind_register_emval": __embind_register_emval, "__embind_register_enum": __embind_register_enum, "__embind_register_enum_value": __embind_register_enum_value, "__embind_register_float": __embind_register_float, "__embind_register_function": __embind_register_function, "__embind_register_integer": __embind_register_integer, "__embind_register_memory_view": __embind_register_memory_view, "__embind_register_std_string": __embind_register_std_string, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_value_object": __embind_register_value_object, "__embind_register_value_object_field": __embind_register_value_object_field, "__embind_register_void": __embind_register_void, "__emval_addMethodCaller": __emval_addMethodCaller, "__emval_allocateDestructors": __emval_allocateDestructors, "__emval_as": __emval_as, "__emval_call_method": __emval_call_method, "__emval_call_void_method": __emval_call_void_method, "__emval_decref": __emval_decref, "__emval_get_global": __emval_get_global, "__emval_get_method_caller": __emval_get_method_caller, "__emval_incref": __emval_incref, "__emval_lookupTypes": __emval_lookupTypes, "__emval_new": __emval_new, "__emval_register": __emval_register, "__emval_run_destructors": __emval_run_destructors, "__emval_set_property": __emval_set_property, "__emval_take_value": __emval_take_value, "__isLeapYear": __isLeapYear, "_abort": _abort, "_embind_repr": _embind_repr, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_getenv": _getenv, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_strftime": _strftime, "_strftime_l": _strftime_l, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "count_emval_handles": count_emval_handles, "craftEmvalAllocator": craftEmvalAllocator, "craftInvokerFunction": craftInvokerFunction, "createNamedFunction": createNamedFunction, "downcastPointer": downcastPointer, "embind__requireFunction": embind__requireFunction, "embind_init_charCodes": embind_init_charCodes, "emval_get_global": emval_get_global, "ensureOverloadTable": ensureOverloadTable, "enumReadValueFromPointer": enumReadValueFromPointer, "exposePublicSymbol": exposePublicSymbol, "extendError": extendError, "floatReadValueFromPointer": floatReadValueFromPointer, "flushPendingDeletes": flushPendingDeletes, "genericPointerToWireType": genericPointerToWireType, "getBasestPointer": getBasestPointer, "getInheritedInstance": getInheritedInstance, "getInheritedInstanceCount": getInheritedInstanceCount, "getLiveInheritedInstances": getLiveInheritedInstances, "getShiftFromSize": getShiftFromSize, "getStringOrSymbol": getStringOrSymbol, "getTypeName": getTypeName, "get_first_emval": get_first_emval, "heap32VectorToArray": heap32VectorToArray, "init_ClassHandle": init_ClassHandle, "init_RegisteredPointer": init_RegisteredPointer, "init_embind": init_embind, "init_emval": init_emval, "integerReadValueFromPointer": integerReadValueFromPointer, "makeClassHandle": makeClassHandle, "makeLegalFunctionName": makeLegalFunctionName, "new_": new_, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "readLatin1String": readLatin1String, "registerType": registerType, "replacePublicSymbol": replacePublicSymbol, "requireHandle": requireHandle, "requireRegisteredType": requireRegisteredType, "runDestructor": runDestructor, "runDestructors": runDestructors, "setDelayFunction": setDelayFunction, "shallowCopyInternalPointer": shallowCopyInternalPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwBindingError": throwBindingError, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "throwInternalError": throwInternalError, "throwUnboundTypeError": throwUnboundTypeError, "upcastPointer": upcastPointer, "validateThis": validateThis, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var ClassHandle=env.ClassHandle;
  var ClassHandle_clone=env.ClassHandle_clone;
  var ClassHandle_delete=env.ClassHandle_delete;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var RegisteredClass=env.RegisteredClass;
  var RegisteredPointer=env.RegisteredPointer;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_throw=env.___cxa_throw;
  var ___cxa_uncaught_exception=env.___cxa_uncaught_exception;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___map_file=env.___map_file;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___syscall91=env.___syscall91;
  var ___unlock=env.___unlock;
  var __addDays=env.__addDays;
  var __arraySum=env.__arraySum;
  var __embind_finalize_value_object=env.__embind_finalize_value_object;
  var __embind_register_bool=env.__embind_register_bool;
  var __embind_register_class=env.__embind_register_class;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var __embind_register_class_function=env.__embind_register_class_function;
  var __embind_register_class_property=env.__embind_register_class_property;
  var __embind_register_emval=env.__embind_register_emval;
  var __embind_register_enum=env.__embind_register_enum;
  var __embind_register_enum_value=env.__embind_register_enum_value;
  var __embind_register_float=env.__embind_register_float;
  var __embind_register_function=env.__embind_register_function;
  var __embind_register_integer=env.__embind_register_integer;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var __embind_register_std_string=env.__embind_register_std_string;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var __embind_register_value_object=env.__embind_register_value_object;
  var __embind_register_value_object_field=env.__embind_register_value_object_field;
  var __embind_register_void=env.__embind_register_void;
  var __emval_addMethodCaller=env.__emval_addMethodCaller;
  var __emval_allocateDestructors=env.__emval_allocateDestructors;
  var __emval_as=env.__emval_as;
  var __emval_call_method=env.__emval_call_method;
  var __emval_call_void_method=env.__emval_call_void_method;
  var __emval_decref=env.__emval_decref;
  var __emval_get_global=env.__emval_get_global;
  var __emval_get_method_caller=env.__emval_get_method_caller;
  var __emval_incref=env.__emval_incref;
  var __emval_lookupTypes=env.__emval_lookupTypes;
  var __emval_new=env.__emval_new;
  var __emval_register=env.__emval_register;
  var __emval_run_destructors=env.__emval_run_destructors;
  var __emval_set_property=env.__emval_set_property;
  var __emval_take_value=env.__emval_take_value;
  var __isLeapYear=env.__isLeapYear;
  var _abort=env._abort;
  var _embind_repr=env._embind_repr;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _getenv=env._getenv;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var _strftime=env._strftime;
  var _strftime_l=env._strftime_l;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var count_emval_handles=env.count_emval_handles;
  var craftEmvalAllocator=env.craftEmvalAllocator;
  var craftInvokerFunction=env.craftInvokerFunction;
  var createNamedFunction=env.createNamedFunction;
  var downcastPointer=env.downcastPointer;
  var embind__requireFunction=env.embind__requireFunction;
  var embind_init_charCodes=env.embind_init_charCodes;
  var emval_get_global=env.emval_get_global;
  var ensureOverloadTable=env.ensureOverloadTable;
  var enumReadValueFromPointer=env.enumReadValueFromPointer;
  var exposePublicSymbol=env.exposePublicSymbol;
  var extendError=env.extendError;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var flushPendingDeletes=env.flushPendingDeletes;
  var genericPointerToWireType=env.genericPointerToWireType;
  var getBasestPointer=env.getBasestPointer;
  var getInheritedInstance=env.getInheritedInstance;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var getShiftFromSize=env.getShiftFromSize;
  var getStringOrSymbol=env.getStringOrSymbol;
  var getTypeName=env.getTypeName;
  var get_first_emval=env.get_first_emval;
  var heap32VectorToArray=env.heap32VectorToArray;
  var init_ClassHandle=env.init_ClassHandle;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var init_embind=env.init_embind;
  var init_emval=env.init_emval;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var makeClassHandle=env.makeClassHandle;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var new_=env.new_;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var readLatin1String=env.readLatin1String;
  var registerType=env.registerType;
  var replacePublicSymbol=env.replacePublicSymbol;
  var requireHandle=env.requireHandle;
  var requireRegisteredType=env.requireRegisteredType;
  var runDestructor=env.runDestructor;
  var runDestructors=env.runDestructors;
  var setDelayFunction=env.setDelayFunction;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwBindingError=env.throwBindingError;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var throwInternalError=env.throwInternalError;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var upcastPointer=env.upcastPointer;
  var validateThis=env.validateThis;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function _mad_bit_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP16[$2>>1] = 0;
 $3 = ((($0)) + 6|0);
 HEAP16[$3>>1] = 8;
 return;
}
function _mad_bit_length($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 6|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 1|0);
 $8 = $7;
 $9 = (($5) - ($8))|0;
 $10 = $9 << 3;
 $11 = ((($1)) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (($4) + 8)|0;
 $15 = (($14) - ($13))|0;
 $16 = (($15) + ($10))|0;
 return ($16|0);
}
function _mad_bit_nextbyte($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 6|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(8);
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 1|0);
 $6 = $3 ? $4 : $5;
 return ($6|0);
}
function _mad_bit_skip($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 >>> 3;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + ($2)|0);
 HEAP32[$0>>2] = $4;
 $5 = $1 & 7;
 $6 = ((($0)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($8) - ($5))|0;
 $10 = $9&65535;
 HEAP16[$6>>1] = $10;
 $11 = $9 & 65535;
 $12 = ($11>>>0)>(8);
 if ($12) {
  $13 = (($9) + 8)|0;
  $14 = ((($4)) + 1|0);
  HEAP32[$0>>2] = $14;
  $15 = $13&65535;
  HEAP16[$6>>1] = $15;
  $17 = $15;$19 = $14;
 } else {
  $17 = $10;$19 = $4;
 }
 $16 = ($17&65535)<(8);
 if (!($16)) {
  return;
 }
 $18 = HEAP8[$19>>0]|0;
 $20 = $18&255;
 $21 = ((($0)) + 4|0);
 HEAP16[$21>>1] = $20;
 return;
}
function _mad_bit_read($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$031$lcssa = 0, $$03133 = 0, $$032 = 0, $$032$ph = 0, $$034 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink40 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 6|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(8);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ((($0)) + 4|0);
  HEAP16[$8>>1] = $7;
  $$pre$phiZ2D = $8;$12 = $7;
 } else {
  $$phi$trans$insert = ((($0)) + 4|0);
  $$pre = HEAP16[$$phi$trans$insert>>1]|0;
  $$pre$phiZ2D = $$phi$trans$insert;$12 = $$pre;
 }
 $9 = $3&65535;
 $10 = ($9>>>0)>($1>>>0);
 $11 = $12&65535;
 $13 = 1 << $9;
 $14 = (($13) + 65535)|0;
 $15 = $14 & $11;
 do {
  if ($10) {
   $16 = (($9) - ($1))|0;
   $17 = $15 >>> $16;
   $$032$ph = $17;$$sink40 = $16;
  } else {
   $18 = (($1) - ($9))|0;
   $19 = HEAP32[$0>>2]|0;
   $20 = ((($19)) + 1|0);
   HEAP32[$0>>2] = $20;
   HEAP16[$2>>1] = 8;
   $21 = ($18>>>0)>(7);
   if ($21) {
    $22 = (($1) - ($9))|0;
    $$03133 = $18;$$034 = $15;$25 = $20;
    while(1) {
     $23 = $$034 << 8;
     $24 = ((($25)) + 1|0);
     HEAP32[$0>>2] = $24;
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = $23 | $27;
     $29 = (($$03133) + -8)|0;
     $30 = ($29>>>0)>(7);
     if ($30) {
      $$03133 = $29;$$034 = $28;$25 = $24;
     } else {
      break;
     }
    }
    $31 = $22 & 7;
    $$0$lcssa = $28;$$031$lcssa = $31;$34 = $24;
   } else {
    $$0$lcssa = $15;$$031$lcssa = $18;$34 = $20;
   }
   $32 = ($$031$lcssa|0)==(0);
   if ($32) {
    $$032 = $$0$lcssa;
    return ($$032|0);
   } else {
    $33 = HEAP8[$34>>0]|0;
    $35 = $33&255;
    HEAP16[$$pre$phiZ2D>>1] = $35;
    $36 = $$0$lcssa << $$031$lcssa;
    $37 = $33&255;
    $38 = (8 - ($$031$lcssa))|0;
    $39 = $37 >>> $38;
    $40 = $39 | $36;
    $$032$ph = $40;$$sink40 = $38;
    break;
   }
  }
 } while(0);
 $41 = $$sink40&65535;
 HEAP16[$2>>1] = $41;
 $$032 = $$032$ph;
 return ($$032|0);
}
function _mad_bit_crc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$0$lcssa$i = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i59 = 0, $$0$lcssa$i72 = 0, $$0$lcssa$i85 = 0, $$0100 = 0, $$031$lcssa$i = 0, $$031$lcssa$i45 = 0, $$031$lcssa$i58 = 0, $$031$lcssa$i71 = 0, $$031$lcssa$i84 = 0, $$03133$i = 0, $$03133$i43 = 0, $$03133$i56 = 0, $$03133$i69 = 0, $$03133$i82 = 0, $$032$i = 0, $$032$i$ph = 0, $$032$i48 = 0;
 var $$032$i48$ph = 0, $$032$i61 = 0, $$032$i61$ph = 0, $$032$i74 = 0, $$032$i74$ph = 0, $$032$i87 = 0, $$032$i87$ph = 0, $$034$i = 0, $$034$i42 = 0, $$034$i55 = 0, $$034$i68 = 0, $$034$i81 = 0, $$034$lcssa = 0, $$03499 = 0, $$1 = 0, $$135 = 0, $$236 = 0, $$3 = 0, $$4$lcssa = 0, $$498 = 0;
 var $$in = 0, $$masked = 0, $$phi$trans$insert = 0, $$phi$trans$insert$i50 = 0, $$phi$trans$insert$i63 = 0, $$phi$trans$insert$i76 = 0, $$phi$trans$insert125 = 0, $$pre = 0, $$pre$i = 0, $$pre$i38 = 0, $$pre$i51 = 0, $$pre$i64 = 0, $$pre$i77 = 0, $$pre$phi$i53134Z2D = 0, $$pre$phi$i66132Z2D = 0, $$pre$phi$i79130Z2D = 0, $$pre$phi128Z2D = 0, $$pre$phiZ2D = 0, $$pre123 = 0, $$pre126 = 0;
 var $$pre127 = 0, $$sink = 0, $$sink147 = 0, $$sink149 = 0, $$sink151 = 0, $$sink153 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep = 0, $scevgep117 = 0, $scevgep118 = 0, $scevgep119 = 0, $scevgep120 = 0, $scevgep121 = 0, $scevgep122 = 0;
 var $spec$select = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2&65535;
 $4 = ($1>>>0)>(31);
 if ($4) {
  $5 = ((($0)) + 6|0);
  $6 = ((($0)) + 4|0);
  $$pre = HEAP16[$5>>1]|0;
  $$0100 = $1;$$03499 = $3;$8 = $$pre;
  while(1) {
   $7 = ($8<<16>>16)==(8);
   if ($7) {
    $9 = HEAP32[$0>>2]|0;
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    HEAP16[$6>>1] = $11;
    $12 = $8&65535;
    $13 = $10&255;
    $14 = 1 << $12;
    $15 = (($14) + 255)|0;
    $16 = $15 & $13;
    $27 = 8;$322 = $16;
    label = 7;
   } else {
    $$pre$i = HEAP16[$6>>1]|0;
    $17 = $8&65535;
    $18 = ($8&65535)>(32);
    $19 = $$pre$i&65535;
    $20 = 1 << $17;
    $21 = (($20) + 65535)|0;
    $22 = $21 & $19;
    if ($18) {
     $23 = (($17) + -32)|0;
     $24 = $22 >>> $23;
     $25 = $23&65535;
     $$032$i$ph = $24;$$sink = $25;
     label = 13;
    } else {
     $27 = $17;$322 = $22;
     label = 7;
    }
   }
   if ((label|0) == 7) {
    label = 0;
    $26 = (32 - ($27))|0;
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 1|0);
    HEAP32[$0>>2] = $29;
    HEAP16[$5>>1] = 8;
    $30 = ($26>>>0)>(7);
    if ($30) {
     $31 = (24 - ($27))|0;
     $32 = $31 >>> 3;
     $$03133$i = $26;$$034$i = $322;$35 = $29;
     while(1) {
      $33 = $$034$i << 8;
      $34 = ((($35)) + 1|0);
      HEAP32[$0>>2] = $34;
      $36 = HEAP8[$35>>0]|0;
      $37 = $36&255;
      $38 = $33 | $37;
      $39 = (($$03133$i) + -8)|0;
      $40 = ($39>>>0)>(7);
      if ($40) {
       $$03133$i = $39;$$034$i = $38;$35 = $34;
      } else {
       break;
      }
     }
     $scevgep121 = ((($28)) + 2|0);
     $scevgep122 = (($scevgep121) + ($32)|0);
     $41 = (0 - ($8))<<16>>16;
     $42 = $41 & 7;
     $43 = $42&65535;
     $$0$lcssa$i = $38;$$031$lcssa$i = $43;$46 = $scevgep122;
    } else {
     $$0$lcssa$i = $322;$$031$lcssa$i = $26;$46 = $29;
    }
    $44 = ($$031$lcssa$i|0)==(0);
    if ($44) {
     $$032$i = $$0$lcssa$i;$323 = 8;
    } else {
     $45 = HEAP8[$46>>0]|0;
     $47 = $45&255;
     HEAP16[$6>>1] = $47;
     $48 = $$0$lcssa$i << $$031$lcssa$i;
     $49 = $45&255;
     $50 = (8 - ($$031$lcssa$i))|0;
     $51 = $49 >>> $50;
     $52 = $51 | $48;
     $53 = $50&65535;
     $$032$i$ph = $52;$$sink = $53;
     label = 13;
    }
   }
   if ((label|0) == 13) {
    label = 0;
    HEAP16[$5>>1] = $$sink;
    $$032$i = $$032$i$ph;$323 = $$sink;
   }
   $54 = $$03499 << 8;
   $55 = $$03499 >>> 8;
   $56 = $$032$i >>> 24;
   $$masked = $55 & 255;
   $57 = $56 ^ $$masked;
   $58 = (16 + ($57<<1)|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $59&65535;
   $61 = $54 ^ $60;
   $62 = $61 << 8;
   $63 = $61 >>> 8;
   $64 = $$032$i >>> 16;
   $65 = $63 ^ $64;
   $66 = $65 & 255;
   $67 = (16 + ($66<<1)|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68&65535;
   $70 = $62 ^ $69;
   $71 = $70 << 8;
   $72 = $70 ^ $$032$i;
   $73 = $72 >>> 8;
   $74 = $73 & 255;
   $75 = (16 + ($74<<1)|0);
   $76 = HEAP16[$75>>1]|0;
   $77 = $76&65535;
   $78 = $71 ^ $77;
   $79 = $78 << 8;
   $80 = $78 >>> 8;
   $81 = $80 ^ $$032$i;
   $82 = $81 & 255;
   $83 = (16 + ($82<<1)|0);
   $84 = HEAP16[$83>>1]|0;
   $85 = $84&65535;
   $86 = $79 ^ $85;
   $87 = (($$0100) + -32)|0;
   $88 = ($87>>>0)>(31);
   if ($88) {
    $$0100 = $87;$$03499 = $86;$8 = $323;
   } else {
    break;
   }
  }
  $89 = $1 & 31;
  $$0$lcssa = $89;$$034$lcssa = $86;
 } else {
  $$0$lcssa = $1;$$034$lcssa = $3;
 }
 $trunc = $$0$lcssa >>> 3;
 $trunc$clear = $trunc & 536870911;
 switch ($trunc$clear|0) {
 case 3:  {
  $90 = $$034$lcssa << 8;
  $91 = $$034$lcssa >>> 8;
  $92 = ((($0)) + 6|0);
  $93 = HEAP16[$92>>1]|0;
  $94 = ($93<<16>>16)==(8);
  if ($94) {
   $95 = HEAP32[$0>>2]|0;
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = ((($0)) + 4|0);
   HEAP16[$98>>1] = $97;
   $99 = $93&65535;
   $100 = $96&255;
   $101 = 1 << $99;
   $102 = (($101) + 255)|0;
   $103 = $102 & $100;
   $$pre$phi$i79130Z2D = $98;$114 = 8;$324 = $103;
   label = 23;
  } else {
   $$phi$trans$insert$i76 = ((($0)) + 4|0);
   $$pre$i77 = HEAP16[$$phi$trans$insert$i76>>1]|0;
   $104 = $93&65535;
   $105 = ($93&65535)>(8);
   $106 = $$pre$i77&65535;
   $107 = 1 << $104;
   $108 = (($107) + 65535)|0;
   $109 = $108 & $106;
   if ($105) {
    $110 = (($104) + -8)|0;
    $111 = $109 >>> $110;
    $112 = $110&65535;
    $$032$i87$ph = $111;$$sink147 = $112;
    label = 29;
   } else {
    $$pre$phi$i79130Z2D = $$phi$trans$insert$i76;$114 = $104;$324 = $109;
    label = 23;
   }
  }
  if ((label|0) == 23) {
   $113 = (8 - ($114))|0;
   $115 = HEAP32[$0>>2]|0;
   $116 = ((($115)) + 1|0);
   HEAP32[$0>>2] = $116;
   HEAP16[$92>>1] = 8;
   $117 = ($113>>>0)>(7);
   if ($117) {
    $118 = (($113) + -8)|0;
    $119 = $118 >>> 3;
    $120 = (($119) + 2)|0;
    $$03133$i82 = $113;$$034$i81 = $324;$123 = $116;
    while(1) {
     $121 = $$034$i81 << 8;
     $122 = ((($123)) + 1|0);
     HEAP32[$0>>2] = $122;
     $124 = HEAP8[$123>>0]|0;
     $125 = $124&255;
     $126 = $121 | $125;
     $127 = (($$03133$i82) + -8)|0;
     $128 = ($127>>>0)>(7);
     if ($128) {
      $$03133$i82 = $127;$$034$i81 = $126;$123 = $122;
     } else {
      break;
     }
    }
    $scevgep120 = (($115) + ($120)|0);
    $129 = (0 - ($93))<<16>>16;
    $130 = $129 & 7;
    $131 = $130&65535;
    $$0$lcssa$i85 = $126;$$031$lcssa$i84 = $131;$134 = $scevgep120;
   } else {
    $$0$lcssa$i85 = $324;$$031$lcssa$i84 = $113;$134 = $116;
   }
   $132 = ($$031$lcssa$i84|0)==(0);
   if ($132) {
    $$032$i87 = $$0$lcssa$i85;$325 = 8;
   } else {
    $133 = HEAP8[$134>>0]|0;
    $135 = $133&255;
    HEAP16[$$pre$phi$i79130Z2D>>1] = $135;
    $136 = $$0$lcssa$i85 << $$031$lcssa$i84;
    $137 = $133&255;
    $138 = (8 - ($$031$lcssa$i84))|0;
    $139 = $137 >>> $138;
    $140 = $139 | $136;
    $141 = $138&65535;
    $$032$i87$ph = $140;$$sink147 = $141;
    label = 29;
   }
  }
  if ((label|0) == 29) {
   HEAP16[$92>>1] = $$sink147;
   $$032$i87 = $$032$i87$ph;$325 = $$sink147;
  }
  $142 = $$032$i87 ^ $91;
  $143 = $142 & 255;
  $144 = (16 + ($143<<1)|0);
  $145 = HEAP16[$144>>1]|0;
  $146 = $145&65535;
  $147 = $90 ^ $146;
  $$135 = $147;$$pre$phiZ2D = $92;$151 = $325;
  label = 31;
  break;
 }
 case 2:  {
  $$phi$trans$insert = ((($0)) + 6|0);
  $$pre123 = HEAP16[$$phi$trans$insert>>1]|0;
  $$135 = $$034$lcssa;$$pre$phiZ2D = $$phi$trans$insert;$151 = $$pre123;
  label = 31;
  break;
 }
 case 1:  {
  $$phi$trans$insert125 = ((($0)) + 6|0);
  $$pre126 = HEAP16[$$phi$trans$insert125>>1]|0;
  $$236 = $$034$lcssa;$$pre$phi128Z2D = $$phi$trans$insert125;$208 = $$pre126;
  label = 43;
  break;
 }
 default: {
  $$1 = $$0$lcssa;$$3 = $$034$lcssa;
 }
 }
 if ((label|0) == 31) {
  $148 = $$135 << 8;
  $149 = $$135 >>> 8;
  $150 = ($151<<16>>16)==(8);
  if ($150) {
   $152 = HEAP32[$0>>2]|0;
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = ((($0)) + 4|0);
   HEAP16[$155>>1] = $154;
   $156 = $151&65535;
   $157 = $153&255;
   $158 = 1 << $156;
   $159 = (($158) + 255)|0;
   $160 = $159 & $157;
   $$pre$phi$i66132Z2D = $155;$171 = 8;$326 = $160;
   label = 35;
  } else {
   $$phi$trans$insert$i63 = ((($0)) + 4|0);
   $$pre$i64 = HEAP16[$$phi$trans$insert$i63>>1]|0;
   $161 = $151&65535;
   $162 = ($151&65535)>(8);
   $163 = $$pre$i64&65535;
   $164 = 1 << $161;
   $165 = (($164) + 65535)|0;
   $166 = $165 & $163;
   if ($162) {
    $167 = (($161) + -8)|0;
    $168 = $166 >>> $167;
    $169 = $167&65535;
    $$032$i74$ph = $168;$$sink149 = $169;
    label = 41;
   } else {
    $$pre$phi$i66132Z2D = $$phi$trans$insert$i63;$171 = $161;$326 = $166;
    label = 35;
   }
  }
  if ((label|0) == 35) {
   $170 = (8 - ($171))|0;
   $172 = HEAP32[$0>>2]|0;
   $173 = ((($172)) + 1|0);
   HEAP32[$0>>2] = $173;
   HEAP16[$$pre$phiZ2D>>1] = 8;
   $174 = ($170>>>0)>(7);
   if ($174) {
    $175 = (($170) + -8)|0;
    $176 = $175 >>> 3;
    $177 = (($176) + 2)|0;
    $$03133$i69 = $170;$$034$i68 = $326;$180 = $173;
    while(1) {
     $178 = $$034$i68 << 8;
     $179 = ((($180)) + 1|0);
     HEAP32[$0>>2] = $179;
     $181 = HEAP8[$180>>0]|0;
     $182 = $181&255;
     $183 = $178 | $182;
     $184 = (($$03133$i69) + -8)|0;
     $185 = ($184>>>0)>(7);
     if ($185) {
      $$03133$i69 = $184;$$034$i68 = $183;$180 = $179;
     } else {
      break;
     }
    }
    $scevgep119 = (($172) + ($177)|0);
    $186 = (0 - ($151))<<16>>16;
    $187 = $186 & 7;
    $188 = $187&65535;
    $$0$lcssa$i72 = $183;$$031$lcssa$i71 = $188;$191 = $scevgep119;
   } else {
    $$0$lcssa$i72 = $326;$$031$lcssa$i71 = $170;$191 = $173;
   }
   $189 = ($$031$lcssa$i71|0)==(0);
   if ($189) {
    $$032$i74 = $$0$lcssa$i72;$327 = 8;
   } else {
    $190 = HEAP8[$191>>0]|0;
    $192 = $190&255;
    HEAP16[$$pre$phi$i66132Z2D>>1] = $192;
    $193 = $$0$lcssa$i72 << $$031$lcssa$i71;
    $194 = $190&255;
    $195 = (8 - ($$031$lcssa$i71))|0;
    $196 = $194 >>> $195;
    $197 = $196 | $193;
    $198 = $195&65535;
    $$032$i74$ph = $197;$$sink149 = $198;
    label = 41;
   }
  }
  if ((label|0) == 41) {
   HEAP16[$$pre$phiZ2D>>1] = $$sink149;
   $$032$i74 = $$032$i74$ph;$327 = $$sink149;
  }
  $199 = $$032$i74 ^ $149;
  $200 = $199 & 255;
  $201 = (16 + ($200<<1)|0);
  $202 = HEAP16[$201>>1]|0;
  $203 = $202&65535;
  $204 = $148 ^ $203;
  $$236 = $204;$$pre$phi128Z2D = $$pre$phiZ2D;$208 = $327;
  label = 43;
 }
 if ((label|0) == 43) {
  $205 = $$236 << 8;
  $206 = $$236 >>> 8;
  $207 = ($208<<16>>16)==(8);
  if ($207) {
   $209 = HEAP32[$0>>2]|0;
   $210 = HEAP8[$209>>0]|0;
   $211 = $210&255;
   $212 = ((($0)) + 4|0);
   HEAP16[$212>>1] = $211;
   $213 = $208&65535;
   $214 = $210&255;
   $215 = 1 << $213;
   $216 = (($215) + 255)|0;
   $217 = $216 & $214;
   $$pre$phi$i53134Z2D = $212;$227 = 8;$328 = $217;
   label = 47;
  } else {
   $$phi$trans$insert$i50 = ((($0)) + 4|0);
   $$pre$i51 = HEAP16[$$phi$trans$insert$i50>>1]|0;
   $218 = $208&65535;
   $219 = ($208&65535)>(8);
   $220 = $$pre$i51&65535;
   $221 = 1 << $218;
   $222 = (($221) + 65535)|0;
   $223 = $222 & $220;
   if ($219) {
    $224 = (($218) + -8)|0;
    $225 = $223 >>> $224;
    $$032$i61$ph = $225;$$sink151 = $224;
    label = 53;
   } else {
    $$pre$phi$i53134Z2D = $$phi$trans$insert$i50;$227 = $218;$328 = $223;
    label = 47;
   }
  }
  if ((label|0) == 47) {
   $226 = (8 - ($227))|0;
   $228 = HEAP32[$0>>2]|0;
   $229 = ((($228)) + 1|0);
   HEAP32[$0>>2] = $229;
   HEAP16[$$pre$phi128Z2D>>1] = 8;
   $230 = ($226>>>0)>(7);
   if ($230) {
    $231 = (($226) + -8)|0;
    $232 = $231 >>> 3;
    $233 = (($232) + 2)|0;
    $$03133$i56 = $226;$$034$i55 = $328;$236 = $229;
    while(1) {
     $234 = $$034$i55 << 8;
     $235 = ((($236)) + 1|0);
     HEAP32[$0>>2] = $235;
     $237 = HEAP8[$236>>0]|0;
     $238 = $237&255;
     $239 = $234 | $238;
     $240 = (($$03133$i56) + -8)|0;
     $241 = ($240>>>0)>(7);
     if ($241) {
      $$03133$i56 = $240;$$034$i55 = $239;$236 = $235;
     } else {
      break;
     }
    }
    $scevgep118 = (($228) + ($233)|0);
    $242 = (0 - ($208))<<16>>16;
    $243 = $242 & 7;
    $244 = $243&65535;
    $$0$lcssa$i59 = $239;$$031$lcssa$i58 = $244;$247 = $scevgep118;
   } else {
    $$0$lcssa$i59 = $328;$$031$lcssa$i58 = $226;$247 = $229;
   }
   $245 = ($$031$lcssa$i58|0)==(0);
   if ($245) {
    $$032$i61 = $$0$lcssa$i59;
   } else {
    $246 = HEAP8[$247>>0]|0;
    $248 = $246&255;
    HEAP16[$$pre$phi$i53134Z2D>>1] = $248;
    $249 = $$0$lcssa$i59 << $$031$lcssa$i58;
    $250 = $246&255;
    $251 = (8 - ($$031$lcssa$i58))|0;
    $252 = $250 >>> $251;
    $253 = $252 | $249;
    $$032$i61$ph = $253;$$sink151 = $251;
    label = 53;
   }
  }
  if ((label|0) == 53) {
   $254 = $$sink151&65535;
   HEAP16[$$pre$phi128Z2D>>1] = $254;
   $$032$i61 = $$032$i61$ph;
  }
  $255 = $$032$i61 ^ $206;
  $256 = $255 & 255;
  $257 = (16 + ($256<<1)|0);
  $258 = HEAP16[$257>>1]|0;
  $259 = $258&65535;
  $260 = $205 ^ $259;
  $261 = $$0$lcssa & 7;
  $$1 = $261;$$3 = $260;
 }
 $262 = ($$1|0)==(0);
 if ($262) {
  $$4$lcssa = $$3;
  $321 = $$4$lcssa&65535;
  return ($321|0);
 }
 $263 = ((($0)) + 6|0);
 $264 = ((($0)) + 4|0);
 $$pre127 = HEAP16[$263>>1]|0;
 $$498 = $$3;$$in = $$1;$267 = $$pre127;
 while(1) {
  $265 = (($$in) + -1)|0;
  $266 = ($267<<16>>16)==(8);
  if ($266) {
   $268 = HEAP32[$0>>2]|0;
   $269 = HEAP8[$268>>0]|0;
   $270 = $269&255;
   HEAP16[$264>>1] = $270;
   $271 = $267&65535;
   $272 = $269&255;
   $273 = 1 << $271;
   $274 = (($273) + 255)|0;
   $275 = $274 & $272;
   $283 = 8;$285 = $275;
   label = 60;
  } else {
   $$pre$i38 = HEAP16[$264>>1]|0;
   $276 = $267&65535;
   $277 = ($267&65535)>(1);
   $278 = $$pre$i38&65535;
   $279 = 1 << $276;
   $280 = (($279) + 65535)|0;
   $281 = $280 & $278;
   if ($277) {
    $283 = $276;$285 = $281;
    label = 60;
   } else {
    $287 = (1 - ($276))|0;
    $288 = HEAP32[$0>>2]|0;
    $289 = ((($288)) + 1|0);
    HEAP32[$0>>2] = $289;
    HEAP16[$263>>1] = 8;
    $290 = ($287>>>0)>(7);
    if ($290) {
     $291 = (-7 - ($276))|0;
     $292 = $291 >>> 3;
     $$03133$i43 = $287;$$034$i42 = $281;$295 = $289;
     while(1) {
      $293 = $$034$i42 << 8;
      $294 = ((($295)) + 1|0);
      HEAP32[$0>>2] = $294;
      $296 = HEAP8[$295>>0]|0;
      $297 = $296&255;
      $298 = $293 | $297;
      $299 = (($$03133$i43) + -8)|0;
      $300 = ($299>>>0)>(7);
      if ($300) {
       $$03133$i43 = $299;$$034$i42 = $298;$295 = $294;
      } else {
       break;
      }
     }
     $scevgep = ((($288)) + 2|0);
     $scevgep117 = (($scevgep) + ($292)|0);
     $301 = (1 - ($267))<<16>>16;
     $302 = $301 & 7;
     $303 = $302&65535;
     $$0$lcssa$i46 = $298;$$031$lcssa$i45 = $303;$306 = $scevgep117;
    } else {
     $$0$lcssa$i46 = $281;$$031$lcssa$i45 = $287;$306 = $289;
    }
    $304 = ($$031$lcssa$i45|0)==(0);
    if ($304) {
     $$032$i48 = $$0$lcssa$i46;$329 = 8;
    } else {
     $305 = HEAP8[$306>>0]|0;
     $307 = $305&255;
     HEAP16[$264>>1] = $307;
     $308 = $$0$lcssa$i46 << $$031$lcssa$i45;
     $309 = $305&255;
     $310 = (8 - ($$031$lcssa$i45))|0;
     $311 = $309 >>> $310;
     $312 = $311 | $308;
     $313 = $310&65535;
     $$032$i48$ph = $312;$$sink153 = $313;
     label = 67;
    }
   }
  }
  if ((label|0) == 60) {
   label = 0;
   $282 = (($283) + -1)|0;
   $284 = $285 >>> $282;
   $286 = $282&65535;
   $$032$i48$ph = $284;$$sink153 = $286;
   label = 67;
  }
  if ((label|0) == 67) {
   label = 0;
   HEAP16[$263>>1] = $$sink153;
   $$032$i48 = $$032$i48$ph;$329 = $$sink153;
  }
  $314 = $$498 >>> 15;
  $315 = $$032$i48 ^ $314;
  $316 = $$498 << 1;
  $317 = $315 & 1;
  $318 = ($317|0)==(0);
  $319 = $316 ^ 32773;
  $spec$select = $318 ? $316 : $319;
  $320 = ($265|0)==(0);
  if ($320) {
   $$4$lcssa = $spec$select;
   break;
  } else {
   $$498 = $spec$select;$$in = $265;$267 = $329;
  }
 }
 $321 = $$4$lcssa&65535;
 return ($321|0);
}
function _mad_timer_set($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i7$i = 0, $$078$i$i = 0, $$078$i$i41 = 0, $$09$i$i = 0, $$09$i$i$phi = 0, $$09$i$i40 = 0, $$09$i$i40$phi = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0;
 var $switch$split2D = 0, $switch$split42D = 0, $switch$split72D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $4 = ($2>>>0)>=($3>>>0);
 $5 = ($3|0)!=(0);
 $or$cond = $4 & $5;
 if ($or$cond) {
  $6 = (($2>>>0) / ($3>>>0))&-1;
  $7 = (($6) + ($1))|0;
  HEAP32[$0>>2] = $7;
  $8 = Math_imul($6, $3)|0;
  $9 = (($2) - ($8))|0;
  $$0 = $9;$65 = $7;
 } else {
  $$0 = $2;$65 = $1;
 }
 $switch$split2D = ($3|0)<(16000);
 L4: do {
  if ($switch$split2D) {
   $switch$split12D = ($3|0)<(8000);
   if ($switch$split12D) {
    switch ($3|0) {
    case 1: case 0:  {
     break;
    }
    case 1000:  {
     $12 = ($$0*352800)|0;
     $13 = ((($0)) + 4|0);
     HEAP32[$13>>2] = $12;
     $$pre$phiZ2D = $13;$62 = $12;
     break L4;
     break;
    }
    default: {
     label = 4;
     break L4;
    }
    }
    $10 = ((($0)) + 4|0);
    HEAP32[$10>>2] = 0;
    return;
   }
   $switch$split72D = ($3|0)<(11025);
   if ($switch$split72D) {
    switch ($3|0) {
    case 8000:  {
     break;
    }
    default: {
     label = 4;
     break L4;
    }
    }
    $14 = ($$0*44100)|0;
    $15 = ((($0)) + 4|0);
    HEAP32[$15>>2] = $14;
    $$pre$phiZ2D = $15;$62 = $14;
    break;
   }
   switch ($3|0) {
   case 11025:  {
    $16 = ($$0*32000)|0;
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $16;
    $$pre$phiZ2D = $17;$62 = $16;
    break L4;
    break;
   }
   case 12000:  {
    $18 = ($$0*29400)|0;
    $19 = ((($0)) + 4|0);
    HEAP32[$19>>2] = $18;
    $$pre$phiZ2D = $19;$62 = $18;
    break L4;
    break;
   }
   default: {
    label = 4;
    break L4;
   }
   }
  } else {
   $switch$split42D = ($3|0)<(32000);
   if ($switch$split42D) {
    $switch$split102D = ($3|0)<(22050);
    if ($switch$split102D) {
     switch ($3|0) {
     case 16000:  {
      break;
     }
     default: {
      label = 4;
      break L4;
     }
     }
     $20 = ($$0*22050)|0;
     $21 = ((($0)) + 4|0);
     HEAP32[$21>>2] = $20;
     $$pre$phiZ2D = $21;$62 = $20;
     break;
    }
    switch ($3|0) {
    case 22050:  {
     $22 = ($$0*16000)|0;
     $23 = ((($0)) + 4|0);
     HEAP32[$23>>2] = $22;
     $$pre$phiZ2D = $23;$62 = $22;
     break L4;
     break;
    }
    case 24000:  {
     $24 = ($$0*14700)|0;
     $25 = ((($0)) + 4|0);
     HEAP32[$25>>2] = $24;
     $$pre$phiZ2D = $25;$62 = $24;
     break L4;
     break;
    }
    default: {
     label = 4;
     break L4;
    }
    }
   }
   $switch$split132D = ($3|0)<(48000);
   if ($switch$split132D) {
    $switch$split162D = ($3|0)<(44100);
    if ($switch$split162D) {
     switch ($3|0) {
     case 32000:  {
      break;
     }
     default: {
      label = 4;
      break L4;
     }
     }
     $26 = ($$0*11025)|0;
     $27 = ((($0)) + 4|0);
     HEAP32[$27>>2] = $26;
     $$pre$phiZ2D = $27;$62 = $26;
     break;
    } else {
     switch ($3|0) {
     case 44100:  {
      break;
     }
     default: {
      label = 4;
      break L4;
     }
     }
     $28 = ($$0*8000)|0;
     $29 = ((($0)) + 4|0);
     HEAP32[$29>>2] = $28;
     $$pre$phiZ2D = $29;$62 = $28;
     break;
    }
   } else {
    $switch$split192D = ($3|0)<(352800000);
    if ($switch$split192D) {
     switch ($3|0) {
     case 48000:  {
      break;
     }
     default: {
      label = 4;
      break L4;
     }
     }
     $30 = ($$0*7350)|0;
     $31 = ((($0)) + 4|0);
     HEAP32[$31>>2] = $30;
     $$pre$phiZ2D = $31;$62 = $30;
     break;
    } else {
     switch ($3|0) {
     case 352800000:  {
      break;
     }
     default: {
      label = 4;
      break L4;
     }
     }
     $11 = ((($0)) + 4|0);
     HEAP32[$11>>2] = $$0;
     $$pre$phiZ2D = $11;$62 = $$0;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$078$i$i41 = $3;$$09$i$i40 = $$0;
  while(1) {
   $32 = (($$09$i$i40>>>0) % ($$078$i$i41>>>0))&-1;
   $33 = ($32|0)==(0);
   if ($33) {
    break;
   } else {
    $$09$i$i40$phi = $$078$i$i41;$$078$i$i41 = $32;$$09$i$i40 = $$09$i$i40$phi;
   }
  }
  $34 = (($$0>>>0) / ($$078$i$i41>>>0))&-1;
  $35 = (($3>>>0) / ($$078$i$i41>>>0))&-1;
  $36 = ($$078$i$i41>>>0)>($3>>>0);
  if ($36) {
   $$0$lcssa$i7$i = 352800000;
  } else {
   $$078$i$i = $35;$$09$i$i = 352800000;
   while(1) {
    $37 = (($$09$i$i>>>0) % ($$078$i$i>>>0))&-1;
    $38 = ($37|0)==(0);
    if ($38) {
     $$0$lcssa$i7$i = $$078$i$i;
     break;
    } else {
     $$09$i$i$phi = $$078$i$i;$$078$i$i = $37;$$09$i$i = $$09$i$i$phi;
    }
   }
  }
  $39 = (352800000 / ($$0$lcssa$i7$i>>>0))&-1;
  $40 = (($35>>>0) / ($$0$lcssa$i7$i>>>0))&-1;
  $41 = ($$0$lcssa$i7$i>>>0)>($35>>>0);
  if ($41) {
   ___assert_fail((56814|0),(56825|0),144,(56833|0));
   // unreachable;
  }
  $42 = ($40>>>0)<($39>>>0);
  do {
   if ($42) {
    $43 = (($39>>>0) / ($40>>>0))&-1;
    $44 = Math_imul($43, $34)|0;
    $45 = Math_imul($43, $40)|0;
    $46 = (($39) - ($45))|0;
    $47 = Math_imul($46, $34)|0;
    $48 = (($47>>>0) / ($40>>>0))&-1;
    $49 = (($48) + ($44))|0;
    $$0$i = $49;
   } else {
    $50 = ($40>>>0)<($34>>>0);
    if ($50) {
     $51 = (($34>>>0) / ($40>>>0))&-1;
     $52 = Math_imul($51, $39)|0;
     $53 = Math_imul($51, $40)|0;
     $54 = (($34) - ($53))|0;
     $55 = Math_imul($54, $39)|0;
     $56 = (($55>>>0) / ($40>>>0))&-1;
     $57 = (($56) + ($52))|0;
     $$0$i = $57;
     break;
    } else {
     $58 = Math_imul($39, $34)|0;
     $59 = (($58>>>0) / ($40>>>0))&-1;
     $$0$i = $59;
     break;
    }
   }
  } while(0);
  $60 = ((($0)) + 4|0);
  HEAP32[$60>>2] = $$0$i;
  $$pre$phiZ2D = $60;$62 = $$0$i;
 }
 $61 = ($62>>>0)>(352799999);
 if (!($61)) {
  return;
 }
 $63 = (($62>>>0) / 352800000)&-1;
 $64 = (($65) + ($63))|0;
 HEAP32[$0>>2] = $64;
 $66 = Math_imul($63, 352800000)|0;
 $67 = (($62) - ($66))|0;
 HEAP32[$$pre$phiZ2D>>2] = $67;
 return;
}
function _mad_stream_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;HEAP32[$0+24>>2]=0|0;
 _mad_bit_init($1,0);
 $2 = ((($0)) + 36|0);
 _mad_bit_init($2,0);
 $3 = ((($0)) + 44|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;
 return;
}
function _mad_stream_finish($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 _free($2);
 HEAP32[$1>>2] = 0;
 return;
}
function _mad_stream_buffer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $3 = (($1) + ($2)|0);
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 24|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($0)) + 12|0);
 HEAP32[$7>>2] = 1;
 $8 = ((($0)) + 28|0);
 _mad_bit_init($8,$1);
 return;
}
function _mad_stream_sync($0) {
 $0 = $0|0;
 var $$0 = 0, $$014$lcssa = 0, $$01416 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = (_mad_bit_nextbyte($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + -1|0);
 $6 = ($2>>>0)<($5>>>0);
 L1: do {
  if ($6) {
   $$01416 = $2;
   while(1) {
    $7 = HEAP8[$$01416>>0]|0;
    $8 = ($7<<24>>24)==(-1);
    $9 = ((($$01416)) + 1|0);
    if ($8) {
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10&255)>(223);
     if ($11) {
      $$014$lcssa = $$01416;
      break L1;
     }
    }
    $12 = ($9>>>0)<($5>>>0);
    if ($12) {
     $$01416 = $9;
    } else {
     $$014$lcssa = $9;
     break;
    }
   }
  } else {
   $$014$lcssa = $2;
  }
 } while(0);
 $13 = $4;
 $14 = $$014$lcssa;
 $15 = (($13) - ($14))|0;
 $16 = ($15|0)<(8);
 if ($16) {
  $$0 = -1;
  return ($$0|0);
 }
 _mad_bit_init($1,$$014$lcssa);
 $$0 = 0;
 return ($$0|0);
}
function _mad_stream_errorstr($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 do {
  switch ($2|0) {
  case 0:  {
   $$0 = 57372;
   break;
  }
  case 1:  {
   $$0 = 57340;
   break;
  }
  case 2:  {
   $$0 = 57310;
   break;
  }
  case 49:  {
   $$0 = 57292;
   break;
  }
  case 257:  {
   $$0 = 57271;
   break;
  }
  case 258:  {
   $$0 = 57243;
   break;
  }
  case 259:  {
   $$0 = 57219;
   break;
  }
  case 260:  {
   $$0 = 57187;
   break;
  }
  case 261:  {
   $$0 = 57163;
   break;
  }
  case 513:  {
   $$0 = 57146;
   break;
  }
  case 529:  {
   $$0 = 57115;
   break;
  }
  case 545:  {
   $$0 = 57093;
   break;
  }
  case 546:  {
   $$0 = 57064;
   break;
  }
  case 561:  {
   $$0 = 57047;
   break;
  }
  case 562:  {
   $$0 = 57026;
   break;
  }
  case 563:  {
   $$0 = 57006;
   break;
  }
  case 564:  {
   $$0 = 56975;
   break;
  }
  case 565:  {
   $$0 = 56947;
   break;
  }
  case 566:  {
   $$0 = 56925;
   break;
  }
  case 567:  {
   $$0 = 56900;
   break;
  }
  case 568:  {
   $$0 = 56879;
   break;
  }
  case 569:  {
   $$0 = 56848;
   break;
  }
  default: {
   $$0 = 0;
  }
  }
 } while(0);
 return ($$0|0);
}
function _mad_header_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 dest=$0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = 69304;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 return;
}
function _mad_frame_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 dest=$0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = 69304;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = ((($0)) + 44|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 9264|0);
 HEAP32[$13>>2] = 0;
 _mad_frame_mute($0);
 return;
}
function _mad_frame_mute($0) {
 $0 = $0|0;
 var $$12426 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $scevgep158 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $scevgep158 = ((($0)) + 48|0);
 $1 = ((($0)) + 9264|0);
 _memset(($scevgep158|0),0,9216)|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 _memset(($2|0),0,2304)|0;
 $$12426 = 0;
 while(1) {
  $4 = (((($2)) + 2304|0) + ($$12426<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = (((($2)) + 2376|0) + ($$12426<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (((($2)) + 2448|0) + ($$12426<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (((($2)) + 2520|0) + ($$12426<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (((($2)) + 2592|0) + ($$12426<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (((($2)) + 2664|0) + ($$12426<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = (((($2)) + 2736|0) + ($$12426<<2)|0);
  HEAP32[$10>>2] = 0;
  $11 = (((($2)) + 2808|0) + ($$12426<<2)|0);
  HEAP32[$11>>2] = 0;
  $12 = (((($2)) + 2880|0) + ($$12426<<2)|0);
  HEAP32[$12>>2] = 0;
  $13 = (((($2)) + 2952|0) + ($$12426<<2)|0);
  HEAP32[$13>>2] = 0;
  $14 = (((($2)) + 3024|0) + ($$12426<<2)|0);
  HEAP32[$14>>2] = 0;
  $15 = (((($2)) + 3096|0) + ($$12426<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (((($2)) + 3168|0) + ($$12426<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (((($2)) + 3240|0) + ($$12426<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (((($2)) + 3312|0) + ($$12426<<2)|0);
  HEAP32[$18>>2] = 0;
  $19 = (((($2)) + 3384|0) + ($$12426<<2)|0);
  HEAP32[$19>>2] = 0;
  $20 = (((($2)) + 3456|0) + ($$12426<<2)|0);
  HEAP32[$20>>2] = 0;
  $21 = (((($2)) + 3528|0) + ($$12426<<2)|0);
  HEAP32[$21>>2] = 0;
  $22 = (((($2)) + 3600|0) + ($$12426<<2)|0);
  HEAP32[$22>>2] = 0;
  $23 = (((($2)) + 3672|0) + ($$12426<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = (((($2)) + 3744|0) + ($$12426<<2)|0);
  HEAP32[$24>>2] = 0;
  $25 = (((($2)) + 3816|0) + ($$12426<<2)|0);
  HEAP32[$25>>2] = 0;
  $26 = (((($2)) + 3888|0) + ($$12426<<2)|0);
  HEAP32[$26>>2] = 0;
  $27 = (((($2)) + 3960|0) + ($$12426<<2)|0);
  HEAP32[$27>>2] = 0;
  $28 = (((($2)) + 4032|0) + ($$12426<<2)|0);
  HEAP32[$28>>2] = 0;
  $29 = (((($2)) + 4104|0) + ($$12426<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = (((($2)) + 4176|0) + ($$12426<<2)|0);
  HEAP32[$30>>2] = 0;
  $31 = (((($2)) + 4248|0) + ($$12426<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (((($2)) + 4320|0) + ($$12426<<2)|0);
  HEAP32[$32>>2] = 0;
  $33 = (((($2)) + 4392|0) + ($$12426<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (((($2)) + 4464|0) + ($$12426<<2)|0);
  HEAP32[$34>>2] = 0;
  $35 = (((($2)) + 4536|0) + ($$12426<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$12426) + 1)|0;
  $exitcond = ($36|0)==(18);
  if ($exitcond) {
   break;
  } else {
   $$12426 = $36;
  }
 }
 return;
}
function _mad_frame_finish($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 9264|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 _free($2);
 HEAP32[$1>>2] = 0;
 return;
}
function _mad_header_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0100 = 0, $$0101 = 0, $$04148$i = 0, $$1 = 0, $$142$i = 0, $$2 = 0, $$2$i = 0, $$3 = 0, $$4$i = 0, $$lobit = 0, $$lobit$i = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi157Z2D = 0, $$pre$phi159Z2D = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre150 = 0, $$pre151 = 0;
 var $$pre154 = 0, $$pre156 = 0, $$pre158 = 0, $$sink200 = 0, $$sink200$v = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$i = 0;
 var $phitmp$i = 0, $spec$select = 0, $spec$select$i = 0, $spec$select$i$sink = 0, $spec$select103 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $2 = sp + 48|0;
 $3 = sp;
 $4 = ((($1)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==(0|0);
 L1: do {
  if ($8) {
   $9 = ((($1)) + 60|0);
   HEAP32[$9>>2] = 2;
   $$pre154 = ((($1)) + 12|0);
   $$pre$phiZ2D = $$pre154;
  } else {
   $10 = ((($1)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   $$phi$trans$insert = ((($1)) + 12|0);
   $$pre$pre = HEAP32[$$phi$trans$insert>>2]|0;
   do {
    if ($12) {
     $$pre156 = $7;
     $$1 = $5;$$pre = $$pre$pre;$$pre$phi157Z2D = $$pre156;
    } else {
     $13 = ($$pre$pre|0)==(0);
     if ($13) {
      $14 = ((($1)) + 20|0);
      $15 = HEAP32[$14>>2]|0;
      $$0101 = $15;
     } else {
      $$0101 = $5;
     }
     $16 = $7;
     $17 = $$0101;
     $18 = (($16) - ($17))|0;
     $19 = ($11>>>0)>($18>>>0);
     if ($19) {
      $20 = (($11) - ($18))|0;
      HEAP32[$10>>2] = $20;
      HEAP32[$4>>2] = $7;
      $21 = ((($1)) + 60|0);
      HEAP32[$21>>2] = 1;
      $$pre$phiZ2D = $$phi$trans$insert;
      break L1;
     } else {
      $22 = (($$0101) + ($11)|0);
      HEAP32[$10>>2] = 0;
      HEAP32[$$phi$trans$insert>>2] = 1;
      $$1 = $22;$$pre = 1;$$pre$phi157Z2D = $16;
      break;
     }
    }
   } while(0);
   $23 = ((($1)) + 28|0);
   $24 = ((($1)) + 20|0);
   $25 = ((($0)) + 36|0);
   $26 = ((($0)) + 20|0);
   $27 = ((($0)) + 16|0);
   $28 = ((($0)) + 28|0);
   $29 = ((($1)) + 16|0);
   $30 = ((($3)) + 20|0);
   $$2 = $$1;$32 = $$pre;
   while(1) {
    $31 = ($32|0)==(0);
    if ($31) {
     _mad_bit_init($23,$$2);
     $43 = (_mad_stream_sync($1)|0);
     $44 = ($43|0)==(-1);
     if ($44) {
      label = 18;
      break;
     }
     $50 = (_mad_bit_nextbyte($23)|0);
     $$pre158 = ((($50)) + 1|0);
     $$3 = $50;$$pre$phi159Z2D = $$pre158;
    } else {
     $33 = $$2;
     $34 = (($$pre$phi157Z2D) - ($33))|0;
     $35 = ($34|0)<(8);
     if ($35) {
      label = 13;
      break;
     }
     $37 = HEAP8[$$2>>0]|0;
     $38 = ($37<<24>>24)==(-1);
     $39 = ((($$2)) + 1|0);
     if (!($38)) {
      label = 16;
      break;
     }
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40&255)>(223);
     if ($41) {
      $$3 = $$2;$$pre$phi159Z2D = $39;
     } else {
      label = 16;
      break;
     }
    }
    HEAP32[$24>>2] = $$3;
    HEAP32[$4>>2] = $$pre$phi159Z2D;
    _mad_bit_init($23,$$3);
    $51 = (_decode_header($0,$1)|0);
    $52 = ($51|0)==(-1);
    if ($52) {
     $$pre$phiZ2D = $$phi$trans$insert;
     break L1;
    }
    $53 = HEAP32[$0>>2]|0;
    switch ($53|0) {
    case 1:  {
     $58 = 384;
     break;
    }
    case 3:  {
     $54 = HEAP32[$28>>2]|0;
     $55 = $54 & 4096;
     $56 = ($55|0)==(0);
     $spec$select = $56 ? 1152 : 576;
     $58 = $spec$select;
     break;
    }
    default: {
     $58 = 1152;
    }
    }
    $57 = HEAP32[$26>>2]|0;
    _mad_timer_set($25,0,$58,$57);
    $59 = HEAP32[$27>>2]|0;
    $60 = ($59|0)==(0);
    if ($60) {
     $61 = HEAP32[$29>>2]|0;
     $62 = ($61|0)==(0);
     if ($62) {
      label = 31;
     } else {
      $63 = HEAP32[$$phi$trans$insert>>2]|0;
      $64 = ($63|0)==(0);
      if ($64) {
       label = 31;
      } else {
       $65 = HEAP32[$0>>2]|0;
       $66 = ($65|0)==(3);
       $67 = ($61>>>0)>(640000);
       $or$cond = $67 & $66;
       if ($or$cond) {
        label = 31;
       } else {
        $119 = $61;$154 = $65;
       }
      }
     }
     if ((label|0) == 31) {
      label = 0;
      $68 = $23;
      $69 = $68;
      $70 = HEAP32[$69>>2]|0;
      $71 = (($68) + 4)|0;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = HEAP32[$28>>2]|0;
      $75 = $74 >>> 7;
      $$lobit$i = $75 & 1;
      $76 = HEAP32[$0>>2]|0;
      $77 = ($76|0)==(3);
      $78 = $74 & 4096;
      $79 = ($78|0)==(0);
      $phitmp$i = $79 ? 144 : 72;
      $spec$select$i = $77 ? $phitmp$i : 144;
      $80 = (_mad_stream_sync($1)|0);
      $81 = ($80|0)==(0);
      if (!($81)) {
       label = 32;
       break;
      }
      $86 = $$lobit$i << 2;
      $87 = (4 - ($86))|0;
      $88 = $$lobit$i ^ 1;
      $$04148$i = 0;
      while(1) {
       dest=$2; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
       dest=$3; src=$0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
       $89 = (_decode_header($3,$2)|0);
       $90 = ($89|0)==(0);
       if ($90) {
        $91 = HEAP32[$3>>2]|0;
        $92 = HEAP32[$0>>2]|0;
        $93 = ($91|0)==($92|0);
        if ($93) {
         $94 = HEAP32[$30>>2]|0;
         $95 = HEAP32[$26>>2]|0;
         $96 = ($94|0)==($95|0);
         if ($96) {
          $97 = (_mad_bit_nextbyte($23)|0);
          $98 = HEAP32[$24>>2]|0;
          $99 = $97;
          $100 = (($99) - ($98))|0;
          $101 = HEAP32[$0>>2]|0;
          $102 = ($101|0)==(1);
          $103 = HEAP32[$26>>2]|0;
          $$sink200$v = $102 ? $87 : $88;
          $$sink200 = (($100) + ($$sink200$v))|0;
          $spec$select$i$sink = $102 ? 48 : $spec$select$i;
          $104 = Math_imul($103, $$sink200)|0;
          $105 = (($104>>>0) / ($spec$select$i$sink>>>0))&-1;
          $$142$i = (($105>>>0) / 1000)&-1;
          $106 = ($105>>>0)<(8000);
          if ($106) {
           $$2$i = $$142$i;
          } else {
           label = 38;
           break;
          }
         } else {
          $$2$i = $$04148$i;
         }
        } else {
         $$2$i = $$04148$i;
        }
       } else {
        $$2$i = $$04148$i;
       }
       _mad_bit_skip($23,8);
       $107 = (_mad_stream_sync($1)|0);
       $108 = ($107|0)==(0);
       if ($108) {
        $$04148$i = $$2$i;
       } else {
        $$4$i = $$2$i;
        break;
       }
      }
      if ((label|0) == 38) {
       label = 0;
       $$4$i = $$142$i;
      }
      $109 = $23;
      $110 = $109;
      HEAP32[$110>>2] = $70;
      $111 = (($109) + 4)|0;
      $112 = $111;
      HEAP32[$112>>2] = $73;
      $113 = ($$4$i>>>0)<(8);
      if ($113) {
       label = 42;
       break;
      }
      $114 = HEAP32[$0>>2]|0;
      $115 = ($114|0)==(3);
      $116 = ($$4$i>>>0)>(640);
      $or$cond$i = $116 & $115;
      if ($or$cond$i) {
       label = 42;
       break;
      }
      $118 = ($$4$i*1000)|0;
      HEAP32[$29>>2] = $118;
      $119 = $118;$154 = $114;
     }
     HEAP32[$27>>2] = $119;
     $120 = HEAP32[$28>>2]|0;
     $121 = $120 | 1024;
     HEAP32[$28>>2] = $121;
     $123 = $121;$124 = $154;$126 = $119;
    } else {
     $$pre150 = HEAP32[$28>>2]|0;
     $$pre151 = HEAP32[$0>>2]|0;
     $123 = $$pre150;$124 = $$pre151;$126 = $59;
    }
    $122 = $123 >>> 7;
    $$lobit = $122 & 1;
    switch ($124|0) {
    case 1:  {
     $125 = ($126*12)|0;
     $127 = HEAP32[$26>>2]|0;
     $128 = (($125>>>0) / ($127>>>0))&-1;
     $129 = (($128) + ($$lobit))|0;
     $130 = $129 << 2;
     $$0100 = $130;
     break;
    }
    case 3:  {
     $131 = $123 & 4096;
     $132 = ($131|0)==(0);
     $spec$select103 = $132 ? 144 : 72;
     $134 = $spec$select103;
     label = 48;
     break;
    }
    default: {
     $134 = 144;
     label = 48;
    }
    }
    if ((label|0) == 48) {
     label = 0;
     $133 = Math_imul($126, $134)|0;
     $135 = HEAP32[$26>>2]|0;
     $136 = (($133>>>0) / ($135>>>0))&-1;
     $137 = (($136) + ($$lobit))|0;
     $$0100 = $137;
    }
    $138 = (($$0100) + 8)|0;
    $139 = HEAP32[$24>>2]|0;
    $140 = $139;
    $141 = (($$pre$phi157Z2D) - ($140))|0;
    $142 = ($138>>>0)>($141>>>0);
    if ($142) {
     label = 50;
     break;
    }
    $144 = (($139) + ($$0100)|0);
    HEAP32[$4>>2] = $144;
    $145 = HEAP32[$$phi$trans$insert>>2]|0;
    $146 = ($145|0)==(0);
    if (!($146)) {
     break;
    }
    $147 = HEAP8[$144>>0]|0;
    $148 = ($147<<24>>24)==(-1);
    if ($148) {
     $149 = ((($144)) + 1|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = ($150&255)>(223);
     if ($151) {
      label = 55;
      break;
     }
    }
    $152 = ((($139)) + 1|0);
    HEAP32[$4>>2] = $152;
    $$2 = $152;$32 = 0;
   }
   if ((label|0) == 13) {
    HEAP32[$4>>2] = $$2;
    $36 = ((($1)) + 60|0);
    HEAP32[$36>>2] = 1;
    $$pre$phiZ2D = $$phi$trans$insert;
    break;
   }
   else if ((label|0) == 16) {
    HEAP32[$24>>2] = $$2;
    HEAP32[$4>>2] = $39;
    $42 = ((($1)) + 60|0);
    HEAP32[$42>>2] = 257;
    $$pre$phiZ2D = $$phi$trans$insert;
    break;
   }
   else if ((label|0) == 18) {
    $45 = HEAP32[$4>>2]|0;
    $46 = (($$pre$phi157Z2D) - ($45))|0;
    $47 = ($46|0)>(7);
    if ($47) {
     $48 = ((($7)) + -8|0);
     HEAP32[$4>>2] = $48;
    }
    $49 = ((($1)) + 60|0);
    HEAP32[$49>>2] = 1;
    $$pre$phiZ2D = $$phi$trans$insert;
    break;
   }
   else if ((label|0) == 32) {
    $82 = $23;
    $83 = $82;
    HEAP32[$83>>2] = $70;
    $84 = (($82) + 4)|0;
    $85 = $84;
    HEAP32[$85>>2] = $73;
    label = 42;
   }
   else if ((label|0) == 50) {
    HEAP32[$4>>2] = $139;
    $143 = ((($1)) + 60|0);
    HEAP32[$143>>2] = 1;
    $$pre$phiZ2D = $$phi$trans$insert;
    break;
   }
   else if ((label|0) == 55) {
    HEAP32[$$phi$trans$insert>>2] = 1;
   }
   if ((label|0) == 42) {
    $117 = ((($1)) + 60|0);
    HEAP32[$117>>2] = 257;
    $$pre$phiZ2D = $$phi$trans$insert;
    break;
   }
   $153 = $123 | 8;
   HEAP32[$28>>2] = $153;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$pre$phiZ2D>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _decode_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$byval_copy = 0, $$pn = 0, $$sink = 0, $$sink$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = ((($0)) + 28|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 32|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 28|0);
 _mad_bit_skip($4,11);
 $5 = (_mad_bit_read($4,1)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = HEAP32[$2>>2]|0;
  $8 = $7 | 16384;
  HEAP32[$2>>2] = $8;
 }
 $9 = (_mad_bit_read($4,1)|0);
 $10 = ($9|0)==(0);
 $11 = HEAP32[$2>>2]|0;
 if ($10) {
  $12 = $11 | 4096;
  HEAP32[$2>>2] = $12;
 } else {
  $13 = $11 & 16384;
  $14 = ($13|0)==(0);
  if (!($14)) {
   $15 = ((($1)) + 60|0);
   HEAP32[$15>>2] = 257;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $16 = (_mad_bit_read($4,2)|0);
 $17 = (4 - ($16))|0;
 HEAP32[$0>>2] = $17;
 $18 = ($16|0)==(0);
 if ($18) {
  $19 = ((($1)) + 60|0);
  HEAP32[$19>>2] = 258;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = (_mad_bit_read($4,1)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = HEAP32[$2>>2]|0;
  $23 = $22 | 16;
  HEAP32[$2>>2] = $23;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
  $24 = (_mad_bit_crc($$byval_copy,16,-1)|0);
  $25 = ((($0)) + 24|0);
  HEAP16[$25>>1] = $24;
 }
 $26 = (_mad_bit_read($4,4)|0);
 $27 = ($26|0)==(15);
 if ($27) {
  $28 = ((($1)) + 60|0);
  HEAP32[$28>>2] = 259;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = HEAP32[$2>>2]|0;
 $30 = $29 & 4096;
 $31 = ($30|0)==(0);
 $32 = HEAP32[$0>>2]|0;
 $33 = (($32) + -1)|0;
 $34 = $32 >>> 1;
 $35 = (($34) + 3)|0;
 $$pn = $31 ? $33 : $35;
 $$sink$in = ((528 + (($$pn*60)|0)|0) + ($26<<2)|0);
 $$sink = HEAP32[$$sink$in>>2]|0;
 $36 = ((($0)) + 16|0);
 HEAP32[$36>>2] = $$sink;
 $37 = (_mad_bit_read($4,2)|0);
 $38 = ($37|0)==(3);
 if ($38) {
  $39 = ((($1)) + 60|0);
  HEAP32[$39>>2] = 260;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = (52280 + ($37<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($0)) + 20|0);
 HEAP32[$42>>2] = $41;
 $43 = HEAP32[$2>>2]|0;
 $44 = $43 & 4096;
 $45 = ($44|0)==(0);
 if (!($45)) {
  $46 = $41 >>> 1;
  HEAP32[$42>>2] = $46;
  $47 = $43 & 16384;
  $48 = ($47|0)==(0);
  if (!($48)) {
   $49 = $41 >>> 2;
   HEAP32[$42>>2] = $49;
  }
 }
 $50 = (_mad_bit_read($4,1)|0);
 $51 = ($50|0)==(0);
 if (!($51)) {
  $52 = HEAP32[$2>>2]|0;
  $53 = $52 | 128;
  HEAP32[$2>>2] = $53;
 }
 $54 = (_mad_bit_read($4,1)|0);
 $55 = ($54|0)==(0);
 if (!($55)) {
  $56 = HEAP32[$3>>2]|0;
  $57 = $56 | 256;
  HEAP32[$3>>2] = $57;
 }
 $58 = (_mad_bit_read($4,2)|0);
 $59 = (3 - ($58))|0;
 $60 = ((($0)) + 4|0);
 HEAP32[$60>>2] = $59;
 $61 = (_mad_bit_read($4,2)|0);
 $62 = ((($0)) + 8|0);
 HEAP32[$62>>2] = $61;
 $63 = (_mad_bit_read($4,1)|0);
 $64 = ($63|0)==(0);
 if (!($64)) {
  $65 = HEAP32[$2>>2]|0;
  $66 = $65 | 32;
  HEAP32[$2>>2] = $66;
 }
 $67 = (_mad_bit_read($4,1)|0);
 $68 = ($67|0)==(0);
 if (!($68)) {
  $69 = HEAP32[$2>>2]|0;
  $70 = $69 | 64;
  HEAP32[$2>>2] = $70;
 }
 $71 = (_mad_bit_read($4,2)|0);
 $72 = ((($0)) + 12|0);
 HEAP32[$72>>2] = $71;
 $73 = HEAP32[$2>>2]|0;
 $74 = $73 & 16;
 $75 = ($74|0)==(0);
 if ($75) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $76 = (_mad_bit_read($4,16)|0);
 $77 = $76&65535;
 $78 = ((($0)) + 26|0);
 HEAP16[$78>>1] = $77;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _mad_frame_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($1)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 44|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = (_mad_header_decode($0,$1)|0);
  $11 = ($10|0)==(-1);
  if (!($11)) {
   $$pre = HEAP32[$6>>2]|0;
   $13 = $$pre;
   label = 4;
  }
 } else {
  $13 = $7;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $12 = $13 & -9;
   HEAP32[$6>>2] = $12;
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + -1)|0;
   $16 = (52292 + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 511]($1,$0)|0);
   $19 = ($18|0)==(-1);
   if ($19) {
    $20 = ((($1)) + 60|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21 & 65280;
    $23 = ($22|0)==(0);
    if (!($23)) {
     break;
    }
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 24|0);
    HEAP32[$26>>2] = $25;
    break;
   }
   $27 = HEAP32[$0>>2]|0;
   $28 = ($27|0)==(3);
   if ($28) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $29 = ((($1)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   _mad_bit_init($2,$30);
   $31 = ((($1)) + 36|0);
   $32 = ((($1)) + 28|0);
   $33 = $32;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) + 4)|0;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = $31;
   $40 = $39;
   HEAP32[$40>>2] = $35;
   $41 = (($39) + 4)|0;
   $42 = $41;
   HEAP32[$42>>2] = $38;
   $43 = (_mad_bit_length($32,$2)|0);
   $44 = ((($1)) + 44|0);
   HEAP32[$44>>2] = $43;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $45 = ((($1)) + 44|0);
 HEAP32[$45>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mad_synth_init($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _mad_synth_mute($0);
 $1 = ((($0)) + 4096|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 return;
}
function _mad_synth_mute($0) {
 $0 = $0|0;
 var $$02629 = 0, $$02629$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond$1 = 0, $scevgep35$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 _memset(($0|0),0,1024)|0;
 $$02629 = 0;
 while(1) {
  $1 = (((($0)) + 1536|0) + ($$02629<<5)|0);
  HEAP32[$1>>2] = 0;
  $2 = (((($0)) + 1024|0) + ($$02629<<5)|0);
  HEAP32[$2>>2] = 0;
  $3 = (((((($0)) + 1536|0) + ($$02629<<5)|0)) + 4|0);
  HEAP32[$3>>2] = 0;
  $4 = (((((($0)) + 1024|0) + ($$02629<<5)|0)) + 4|0);
  HEAP32[$4>>2] = 0;
  $5 = (((((($0)) + 1536|0) + ($$02629<<5)|0)) + 8|0);
  HEAP32[$5>>2] = 0;
  $6 = (((((($0)) + 1024|0) + ($$02629<<5)|0)) + 8|0);
  HEAP32[$6>>2] = 0;
  $7 = (((((($0)) + 1536|0) + ($$02629<<5)|0)) + 12|0);
  HEAP32[$7>>2] = 0;
  $8 = (((((($0)) + 1024|0) + ($$02629<<5)|0)) + 12|0);
  HEAP32[$8>>2] = 0;
  $9 = (((((($0)) + 1536|0) + ($$02629<<5)|0)) + 16|0);
  HEAP32[$9>>2] = 0;
  $10 = (((((($0)) + 1024|0) + ($$02629<<5)|0)) + 16|0);
  HEAP32[$10>>2] = 0;
  $11 = (((((($0)) + 1536|0) + ($$02629<<5)|0)) + 20|0);
  HEAP32[$11>>2] = 0;
  $12 = (((((($0)) + 1024|0) + ($$02629<<5)|0)) + 20|0);
  HEAP32[$12>>2] = 0;
  $13 = (((((($0)) + 1536|0) + ($$02629<<5)|0)) + 24|0);
  HEAP32[$13>>2] = 0;
  $14 = (((((($0)) + 1024|0) + ($$02629<<5)|0)) + 24|0);
  HEAP32[$14>>2] = 0;
  $15 = (((((($0)) + 1536|0) + ($$02629<<5)|0)) + 28|0);
  HEAP32[$15>>2] = 0;
  $16 = (((((($0)) + 1024|0) + ($$02629<<5)|0)) + 28|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$02629) + 1)|0;
  $exitcond = ($17|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $$02629 = $17;
  }
 }
 $scevgep35$1 = ((($0)) + 2048|0);
 _memset(($scevgep35$1|0),0,1024)|0;
 $$02629$1 = 0;
 while(1) {
  $18 = (((($0)) + 3584|0) + ($$02629$1<<5)|0);
  HEAP32[$18>>2] = 0;
  $19 = (((($0)) + 3072|0) + ($$02629$1<<5)|0);
  HEAP32[$19>>2] = 0;
  $20 = (((((($0)) + 3584|0) + ($$02629$1<<5)|0)) + 4|0);
  HEAP32[$20>>2] = 0;
  $21 = (((((($0)) + 3072|0) + ($$02629$1<<5)|0)) + 4|0);
  HEAP32[$21>>2] = 0;
  $22 = (((((($0)) + 3584|0) + ($$02629$1<<5)|0)) + 8|0);
  HEAP32[$22>>2] = 0;
  $23 = (((((($0)) + 3072|0) + ($$02629$1<<5)|0)) + 8|0);
  HEAP32[$23>>2] = 0;
  $24 = (((((($0)) + 3584|0) + ($$02629$1<<5)|0)) + 12|0);
  HEAP32[$24>>2] = 0;
  $25 = (((((($0)) + 3072|0) + ($$02629$1<<5)|0)) + 12|0);
  HEAP32[$25>>2] = 0;
  $26 = (((((($0)) + 3584|0) + ($$02629$1<<5)|0)) + 16|0);
  HEAP32[$26>>2] = 0;
  $27 = (((((($0)) + 3072|0) + ($$02629$1<<5)|0)) + 16|0);
  HEAP32[$27>>2] = 0;
  $28 = (((((($0)) + 3584|0) + ($$02629$1<<5)|0)) + 20|0);
  HEAP32[$28>>2] = 0;
  $29 = (((((($0)) + 3072|0) + ($$02629$1<<5)|0)) + 20|0);
  HEAP32[$29>>2] = 0;
  $30 = (((((($0)) + 3584|0) + ($$02629$1<<5)|0)) + 24|0);
  HEAP32[$30>>2] = 0;
  $31 = (((((($0)) + 3072|0) + ($$02629$1<<5)|0)) + 24|0);
  HEAP32[$31>>2] = 0;
  $32 = (((((($0)) + 3584|0) + ($$02629$1<<5)|0)) + 28|0);
  HEAP32[$32>>2] = 0;
  $33 = (((((($0)) + 3072|0) + ($$02629$1<<5)|0)) + 28|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$02629$1) + 1)|0;
  $exitcond$1 = ($34|0)==(16);
  if ($exitcond$1) {
   break;
  } else {
   $$02629$1 = $34;
  }
 }
 return;
}
function _mad_synth_frame($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = $4 ? 1 : 2;
 $6 = HEAP32[$1>>2]|0;
 switch ($6|0) {
 case 1:  {
  $17 = 12;
  break;
 }
 case 3:  {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 4096;
  $10 = ($9|0)==(0);
  $phitmp = $10 ? 36 : 18;
  $32 = $phitmp;
  label = 3;
  break;
 }
 default: {
  $32 = 36;
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $17 = $32;
 }
 $11 = ((($1)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 4100|0);
 HEAP32[$13>>2] = $12;
 $14 = $5&65535;
 $15 = ((($0)) + 4104|0);
 HEAP16[$15>>1] = $14;
 $16 = $17 << 5;
 $18 = $16&65535;
 $19 = ((($0)) + 4106|0);
 HEAP16[$19>>1] = $18;
 $20 = ((($1)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 2;
 $23 = ($22|0)==(0);
 if ($23) {
  $$0 = 344;
 } else {
  $24 = $17 << 4;
  $25 = $24 & 32752;
  $26 = $25&65535;
  $27 = $12 >>> 1;
  HEAP32[$13>>2] = $27;
  HEAP16[$19>>1] = $26;
  $$0 = 345;
 }
 FUNCTION_TABLE_viiii[$$0 & 511]($0,$1,$5,$17);
 $28 = ((($0)) + 4096|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($17))|0;
 $31 = $30 & 15;
 HEAP32[$28>>2] = $31;
 return;
}
function _synth_half($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0262304 = 0, $$0263308 = 0, $$0264303 = 0, $$0265309 = 0, $$0266307 = 0, $$0267302 = 0, $$0268306 = 0, $$0270300 = 0, $$0305 = 0, $$1 = 0, $$1269301 = 0, $$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond324 = 0, $exitcond325 = 0, $indvars$iv$in = 0, $indvars$iv320$in = 0, $scevgep = 0;
 var $scevgep316 = 0, $scevgep318 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($0)) + 4096|0);
 $6 = ($3|0)==(0);
 $scevgep = ((($0)) + 1504|0);
 $scevgep318 = ((($0)) + 1472|0);
 $$0265309 = 0;$indvars$iv$in = $scevgep;$indvars$iv320$in = $scevgep318;
 while(1) {
  if (!($6)) {
   $7 = (((($0)) + 4108|0) + (($$0265309*4608)|0)|0);
   $8 = HEAP32[$5>>2]|0;
   $$0263308 = $8;$$0266307 = 0;$$0268306 = $7;
   while(1) {
    $9 = ((((($1)) + 48|0) + (($$0265309*4608)|0)|0) + ($$0266307<<7)|0);
    $10 = $$0263308 >>> 1;
    $11 = $$0263308 & 1;
    $12 = ((($0) + ($$0265309<<11)|0) + ($11<<9)|0);
    $13 = ((((($0) + ($$0265309<<11)|0)) + 1024|0) + ($11<<9)|0);
    _dct32($9,$10,$12,$13);
    $14 = $$0263308 & -2;
    $15 = (($$0263308) + 15)|0;
    $16 = $15 & 14;
    $17 = $16 | 1;
    $18 = $11 ^ 1;
    $19 = ((((($0) + ($$0265309<<11)|0)) + 1024|0) + ($18<<9)|0);
    $20 = (832 + ($17<<2)|0);
    $21 = ((($0) + ($$0265309<<11)|0) + ($18<<9)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)<(0);
    $24 = $23 << 31 >> 31;
    $25 = HEAP32[$20>>2]|0;
    $26 = ($25|0)<(0);
    $27 = $26 << 31 >> 31;
    $28 = (___muldi3(($25|0),($27|0),($22|0),($24|0))|0);
    $29 = (getTempRet0() | 0);
    $30 = (_bitshift64Lshr(($28|0),($29|0),16)|0);
    $31 = (getTempRet0() | 0);
    $32 = ((((($0) + ($$0265309<<11)|0) + ($18<<9)|0)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)<(0);
    $35 = $34 << 31 >> 31;
    $36 = ((($20)) + 56|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)<(0);
    $39 = $38 << 31 >> 31;
    $40 = (___muldi3(($37|0),($39|0),($33|0),($35|0))|0);
    $41 = (getTempRet0() | 0);
    $42 = (_bitshift64Lshr(($40|0),($41|0),16)|0);
    $43 = (getTempRet0() | 0);
    $44 = ((((($0) + ($$0265309<<11)|0) + ($18<<9)|0)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)<(0);
    $47 = $46 << 31 >> 31;
    $48 = ((($20)) + 48|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)<(0);
    $51 = $50 << 31 >> 31;
    $52 = (___muldi3(($49|0),($51|0),($45|0),($47|0))|0);
    $53 = (getTempRet0() | 0);
    $54 = (_bitshift64Lshr(($52|0),($53|0),16)|0);
    $55 = (getTempRet0() | 0);
    $56 = ((((($0) + ($$0265309<<11)|0) + ($18<<9)|0)) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)<(0);
    $59 = $58 << 31 >> 31;
    $60 = ((($20)) + 40|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)<(0);
    $63 = $62 << 31 >> 31;
    $64 = (___muldi3(($61|0),($63|0),($57|0),($59|0))|0);
    $65 = (getTempRet0() | 0);
    $66 = (_bitshift64Lshr(($64|0),($65|0),16)|0);
    $67 = (getTempRet0() | 0);
    $68 = ((((($0) + ($$0265309<<11)|0) + ($18<<9)|0)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)<(0);
    $71 = $70 << 31 >> 31;
    $72 = ((($20)) + 32|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)<(0);
    $75 = $74 << 31 >> 31;
    $76 = (___muldi3(($73|0),($75|0),($69|0),($71|0))|0);
    $77 = (getTempRet0() | 0);
    $78 = (_bitshift64Lshr(($76|0),($77|0),16)|0);
    $79 = (getTempRet0() | 0);
    $80 = ((((($0) + ($$0265309<<11)|0) + ($18<<9)|0)) + 20|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)<(0);
    $83 = $82 << 31 >> 31;
    $84 = ((($20)) + 24|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)<(0);
    $87 = $86 << 31 >> 31;
    $88 = (___muldi3(($85|0),($87|0),($81|0),($83|0))|0);
    $89 = (getTempRet0() | 0);
    $90 = (_bitshift64Lshr(($88|0),($89|0),16)|0);
    $91 = (getTempRet0() | 0);
    $92 = ((((($0) + ($$0265309<<11)|0) + ($18<<9)|0)) + 24|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)<(0);
    $95 = $94 << 31 >> 31;
    $96 = ((($20)) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)<(0);
    $99 = $98 << 31 >> 31;
    $100 = (___muldi3(($97|0),($99|0),($93|0),($95|0))|0);
    $101 = (getTempRet0() | 0);
    $102 = (_bitshift64Lshr(($100|0),($101|0),16)|0);
    $103 = (getTempRet0() | 0);
    $104 = ((((($0) + ($$0265309<<11)|0) + ($18<<9)|0)) + 28|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ($105|0)<(0);
    $107 = $106 << 31 >> 31;
    $108 = ((($20)) + 8|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)<(0);
    $111 = $110 << 31 >> 31;
    $112 = (___muldi3(($109|0),($111|0),($105|0),($107|0))|0);
    $113 = (getTempRet0() | 0);
    $114 = (_bitshift64Lshr(($112|0),($113|0),16)|0);
    $115 = (getTempRet0() | 0);
    $116 = (832 + ($14<<2)|0);
    $117 = HEAP32[$12>>2]|0;
    $118 = ($117|0)<(0);
    $119 = $118 << 31 >> 31;
    $120 = HEAP32[$116>>2]|0;
    $121 = ($120|0)<(0);
    $122 = $121 << 31 >> 31;
    $123 = (___muldi3(($120|0),($122|0),($117|0),($119|0))|0);
    $124 = (getTempRet0() | 0);
    $125 = (_bitshift64Lshr(($123|0),($124|0),16)|0);
    $126 = (getTempRet0() | 0);
    $127 = (($42) + ($30))|0;
    $128 = (($127) + ($54))|0;
    $129 = (($128) + ($66))|0;
    $130 = (($129) + ($78))|0;
    $131 = (($130) + ($90))|0;
    $132 = (($131) + ($102))|0;
    $133 = (($132) + ($114))|0;
    $134 = (($125) - ($133))|0;
    $135 = ((((($0) + ($$0265309<<11)|0) + ($11<<9)|0)) + 4|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($136|0)<(0);
    $138 = $137 << 31 >> 31;
    $139 = ((($116)) + 56|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)<(0);
    $142 = $141 << 31 >> 31;
    $143 = (___muldi3(($140|0),($142|0),($136|0),($138|0))|0);
    $144 = (getTempRet0() | 0);
    $145 = (_bitshift64Lshr(($143|0),($144|0),16)|0);
    $146 = (getTempRet0() | 0);
    $147 = (($134) + ($145))|0;
    $148 = ((((($0) + ($$0265309<<11)|0) + ($11<<9)|0)) + 8|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)<(0);
    $151 = $150 << 31 >> 31;
    $152 = ((($116)) + 48|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ($153|0)<(0);
    $155 = $154 << 31 >> 31;
    $156 = (___muldi3(($153|0),($155|0),($149|0),($151|0))|0);
    $157 = (getTempRet0() | 0);
    $158 = (_bitshift64Lshr(($156|0),($157|0),16)|0);
    $159 = (getTempRet0() | 0);
    $160 = (($147) + ($158))|0;
    $161 = ((((($0) + ($$0265309<<11)|0) + ($11<<9)|0)) + 12|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = ($162|0)<(0);
    $164 = $163 << 31 >> 31;
    $165 = ((($116)) + 40|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)<(0);
    $168 = $167 << 31 >> 31;
    $169 = (___muldi3(($166|0),($168|0),($162|0),($164|0))|0);
    $170 = (getTempRet0() | 0);
    $171 = (_bitshift64Lshr(($169|0),($170|0),16)|0);
    $172 = (getTempRet0() | 0);
    $173 = (($160) + ($171))|0;
    $174 = ((((($0) + ($$0265309<<11)|0) + ($11<<9)|0)) + 16|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = ($175|0)<(0);
    $177 = $176 << 31 >> 31;
    $178 = ((($116)) + 32|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ($179|0)<(0);
    $181 = $180 << 31 >> 31;
    $182 = (___muldi3(($179|0),($181|0),($175|0),($177|0))|0);
    $183 = (getTempRet0() | 0);
    $184 = (_bitshift64Lshr(($182|0),($183|0),16)|0);
    $185 = (getTempRet0() | 0);
    $186 = (($173) + ($184))|0;
    $187 = ((((($0) + ($$0265309<<11)|0) + ($11<<9)|0)) + 20|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ($188|0)<(0);
    $190 = $189 << 31 >> 31;
    $191 = ((($116)) + 24|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = ($192|0)<(0);
    $194 = $193 << 31 >> 31;
    $195 = (___muldi3(($192|0),($194|0),($188|0),($190|0))|0);
    $196 = (getTempRet0() | 0);
    $197 = (_bitshift64Lshr(($195|0),($196|0),16)|0);
    $198 = (getTempRet0() | 0);
    $199 = (($186) + ($197))|0;
    $200 = ((((($0) + ($$0265309<<11)|0) + ($11<<9)|0)) + 24|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = ($201|0)<(0);
    $203 = $202 << 31 >> 31;
    $204 = ((($116)) + 16|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = ($205|0)<(0);
    $207 = $206 << 31 >> 31;
    $208 = (___muldi3(($205|0),($207|0),($201|0),($203|0))|0);
    $209 = (getTempRet0() | 0);
    $210 = (_bitshift64Lshr(($208|0),($209|0),16)|0);
    $211 = (getTempRet0() | 0);
    $212 = (($199) + ($210))|0;
    $213 = ((((($0) + ($$0265309<<11)|0) + ($11<<9)|0)) + 28|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = ($214|0)<(0);
    $216 = $215 << 31 >> 31;
    $217 = ((($116)) + 8|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ($218|0)<(0);
    $220 = $219 << 31 >> 31;
    $221 = (___muldi3(($218|0),($220|0),($214|0),($216|0))|0);
    $222 = (getTempRet0() | 0);
    $223 = (_bitshift64Lshr(($221|0),($222|0),16)|0);
    $224 = (getTempRet0() | 0);
    $225 = (($212) + ($223))|0;
    $226 = ((($$0268306)) + 4|0);
    HEAP32[$$0268306>>2] = $225;
    $227 = ((($$0268306)) + 60|0);
    $228 = (0 - ($17))|0;
    $229 = (0 - ($14))|0;
    $scevgep316 = (($indvars$iv$in) + ($18<<9)|0);
    $$0262304 = $19;$$0264303 = $12;$$0267302 = $227;$$0270300 = 1;$$0305 = 832;$$1269301 = $226;
    while(1) {
     $230 = ((($$0264303)) + 32|0);
     $231 = ((($$0305)) + 128|0);
     $232 = $$0270300 & 1;
     $233 = ($232|0)==(0);
     if ($233) {
      $234 = (((($$0305)) + 128|0) + ($17<<2)|0);
      $235 = HEAP32[$$0262304>>2]|0;
      $236 = ($235|0)<(0);
      $237 = $236 << 31 >> 31;
      $238 = HEAP32[$234>>2]|0;
      $239 = ($238|0)<(0);
      $240 = $239 << 31 >> 31;
      $241 = (___muldi3(($238|0),($240|0),($235|0),($237|0))|0);
      $242 = (getTempRet0() | 0);
      $243 = (_bitshift64Lshr(($241|0),($242|0),16)|0);
      $244 = (getTempRet0() | 0);
      $245 = ((($$0262304)) + 4|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = ($246|0)<(0);
      $248 = $247 << 31 >> 31;
      $249 = ((($234)) + 56|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = ($250|0)<(0);
      $252 = $251 << 31 >> 31;
      $253 = (___muldi3(($250|0),($252|0),($246|0),($248|0))|0);
      $254 = (getTempRet0() | 0);
      $255 = (_bitshift64Lshr(($253|0),($254|0),16)|0);
      $256 = (getTempRet0() | 0);
      $257 = ((($$0262304)) + 8|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = ($258|0)<(0);
      $260 = $259 << 31 >> 31;
      $261 = ((($234)) + 48|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = ($262|0)<(0);
      $264 = $263 << 31 >> 31;
      $265 = (___muldi3(($262|0),($264|0),($258|0),($260|0))|0);
      $266 = (getTempRet0() | 0);
      $267 = (_bitshift64Lshr(($265|0),($266|0),16)|0);
      $268 = (getTempRet0() | 0);
      $269 = ((($$0262304)) + 12|0);
      $270 = HEAP32[$269>>2]|0;
      $271 = ($270|0)<(0);
      $272 = $271 << 31 >> 31;
      $273 = ((($234)) + 40|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = ($274|0)<(0);
      $276 = $275 << 31 >> 31;
      $277 = (___muldi3(($274|0),($276|0),($270|0),($272|0))|0);
      $278 = (getTempRet0() | 0);
      $279 = (_bitshift64Lshr(($277|0),($278|0),16)|0);
      $280 = (getTempRet0() | 0);
      $281 = ((($$0262304)) + 16|0);
      $282 = HEAP32[$281>>2]|0;
      $283 = ($282|0)<(0);
      $284 = $283 << 31 >> 31;
      $285 = ((($234)) + 32|0);
      $286 = HEAP32[$285>>2]|0;
      $287 = ($286|0)<(0);
      $288 = $287 << 31 >> 31;
      $289 = (___muldi3(($286|0),($288|0),($282|0),($284|0))|0);
      $290 = (getTempRet0() | 0);
      $291 = (_bitshift64Lshr(($289|0),($290|0),16)|0);
      $292 = (getTempRet0() | 0);
      $293 = ((($$0262304)) + 20|0);
      $294 = HEAP32[$293>>2]|0;
      $295 = ($294|0)<(0);
      $296 = $295 << 31 >> 31;
      $297 = ((($234)) + 24|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = ($298|0)<(0);
      $300 = $299 << 31 >> 31;
      $301 = (___muldi3(($298|0),($300|0),($294|0),($296|0))|0);
      $302 = (getTempRet0() | 0);
      $303 = (_bitshift64Lshr(($301|0),($302|0),16)|0);
      $304 = (getTempRet0() | 0);
      $305 = ((($$0262304)) + 24|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = ($306|0)<(0);
      $308 = $307 << 31 >> 31;
      $309 = ((($234)) + 16|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = ($310|0)<(0);
      $312 = $311 << 31 >> 31;
      $313 = (___muldi3(($310|0),($312|0),($306|0),($308|0))|0);
      $314 = (getTempRet0() | 0);
      $315 = (_bitshift64Lshr(($313|0),($314|0),16)|0);
      $316 = (getTempRet0() | 0);
      $317 = ((($$0262304)) + 28|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = ($318|0)<(0);
      $320 = $319 << 31 >> 31;
      $321 = ((($234)) + 8|0);
      $322 = HEAP32[$321>>2]|0;
      $323 = ($322|0)<(0);
      $324 = $323 << 31 >> 31;
      $325 = (___muldi3(($322|0),($324|0),($318|0),($320|0))|0);
      $326 = (getTempRet0() | 0);
      $327 = (_bitshift64Lshr(($325|0),($326|0),16)|0);
      $328 = (getTempRet0() | 0);
      $329 = (((($$0305)) + 128|0) + ($14<<2)|0);
      $330 = ((($$0264303)) + 60|0);
      $331 = HEAP32[$330>>2]|0;
      $332 = ($331|0)<(0);
      $333 = $332 << 31 >> 31;
      $334 = ((($329)) + 8|0);
      $335 = HEAP32[$334>>2]|0;
      $336 = ($335|0)<(0);
      $337 = $336 << 31 >> 31;
      $338 = (___muldi3(($335|0),($337|0),($331|0),($333|0))|0);
      $339 = (getTempRet0() | 0);
      $340 = (_bitshift64Lshr(($338|0),($339|0),16)|0);
      $341 = (getTempRet0() | 0);
      $342 = (($255) + ($243))|0;
      $343 = (($342) + ($267))|0;
      $344 = (($343) + ($279))|0;
      $345 = (($344) + ($291))|0;
      $346 = (($345) + ($303))|0;
      $347 = (($346) + ($315))|0;
      $348 = (($347) + ($327))|0;
      $349 = (($340) - ($348))|0;
      $350 = ((($$0264303)) + 56|0);
      $351 = HEAP32[$350>>2]|0;
      $352 = ($351|0)<(0);
      $353 = $352 << 31 >> 31;
      $354 = ((($329)) + 16|0);
      $355 = HEAP32[$354>>2]|0;
      $356 = ($355|0)<(0);
      $357 = $356 << 31 >> 31;
      $358 = (___muldi3(($355|0),($357|0),($351|0),($353|0))|0);
      $359 = (getTempRet0() | 0);
      $360 = (_bitshift64Lshr(($358|0),($359|0),16)|0);
      $361 = (getTempRet0() | 0);
      $362 = (($349) + ($360))|0;
      $363 = ((($$0264303)) + 52|0);
      $364 = HEAP32[$363>>2]|0;
      $365 = ($364|0)<(0);
      $366 = $365 << 31 >> 31;
      $367 = ((($329)) + 24|0);
      $368 = HEAP32[$367>>2]|0;
      $369 = ($368|0)<(0);
      $370 = $369 << 31 >> 31;
      $371 = (___muldi3(($368|0),($370|0),($364|0),($366|0))|0);
      $372 = (getTempRet0() | 0);
      $373 = (_bitshift64Lshr(($371|0),($372|0),16)|0);
      $374 = (getTempRet0() | 0);
      $375 = (($362) + ($373))|0;
      $376 = ((($$0264303)) + 48|0);
      $377 = HEAP32[$376>>2]|0;
      $378 = ($377|0)<(0);
      $379 = $378 << 31 >> 31;
      $380 = ((($329)) + 32|0);
      $381 = HEAP32[$380>>2]|0;
      $382 = ($381|0)<(0);
      $383 = $382 << 31 >> 31;
      $384 = (___muldi3(($381|0),($383|0),($377|0),($379|0))|0);
      $385 = (getTempRet0() | 0);
      $386 = (_bitshift64Lshr(($384|0),($385|0),16)|0);
      $387 = (getTempRet0() | 0);
      $388 = (($375) + ($386))|0;
      $389 = ((($$0264303)) + 44|0);
      $390 = HEAP32[$389>>2]|0;
      $391 = ($390|0)<(0);
      $392 = $391 << 31 >> 31;
      $393 = ((($329)) + 40|0);
      $394 = HEAP32[$393>>2]|0;
      $395 = ($394|0)<(0);
      $396 = $395 << 31 >> 31;
      $397 = (___muldi3(($394|0),($396|0),($390|0),($392|0))|0);
      $398 = (getTempRet0() | 0);
      $399 = (_bitshift64Lshr(($397|0),($398|0),16)|0);
      $400 = (getTempRet0() | 0);
      $401 = (($388) + ($399))|0;
      $402 = ((($$0264303)) + 40|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = ($403|0)<(0);
      $405 = $404 << 31 >> 31;
      $406 = ((($329)) + 48|0);
      $407 = HEAP32[$406>>2]|0;
      $408 = ($407|0)<(0);
      $409 = $408 << 31 >> 31;
      $410 = (___muldi3(($407|0),($409|0),($403|0),($405|0))|0);
      $411 = (getTempRet0() | 0);
      $412 = (_bitshift64Lshr(($410|0),($411|0),16)|0);
      $413 = (getTempRet0() | 0);
      $414 = (($401) + ($412))|0;
      $415 = ((($$0264303)) + 36|0);
      $416 = HEAP32[$415>>2]|0;
      $417 = ($416|0)<(0);
      $418 = $417 << 31 >> 31;
      $419 = ((($329)) + 56|0);
      $420 = HEAP32[$419>>2]|0;
      $421 = ($420|0)<(0);
      $422 = $421 << 31 >> 31;
      $423 = (___muldi3(($420|0),($422|0),($416|0),($418|0))|0);
      $424 = (getTempRet0() | 0);
      $425 = (_bitshift64Lshr(($423|0),($424|0),16)|0);
      $426 = (getTempRet0() | 0);
      $427 = (($414) + ($425))|0;
      $428 = HEAP32[$230>>2]|0;
      $429 = ($428|0)<(0);
      $430 = $429 << 31 >> 31;
      $431 = HEAP32[$329>>2]|0;
      $432 = ($431|0)<(0);
      $433 = $432 << 31 >> 31;
      $434 = (___muldi3(($431|0),($433|0),($428|0),($430|0))|0);
      $435 = (getTempRet0() | 0);
      $436 = (_bitshift64Lshr(($434|0),($435|0),16)|0);
      $437 = (getTempRet0() | 0);
      $438 = (($427) + ($436))|0;
      $439 = ((($$1269301)) + 4|0);
      HEAP32[$$1269301>>2] = $438;
      $440 = (((($$0305)) + 128|0) + ($228<<2)|0);
      $441 = HEAP32[$317>>2]|0;
      $442 = ($441|0)<(0);
      $443 = $442 << 31 >> 31;
      $444 = ((($440)) + 116|0);
      $445 = HEAP32[$444>>2]|0;
      $446 = ($445|0)<(0);
      $447 = $446 << 31 >> 31;
      $448 = (___muldi3(($445|0),($447|0),($441|0),($443|0))|0);
      $449 = (getTempRet0() | 0);
      $450 = (_bitshift64Lshr(($448|0),($449|0),16)|0);
      $451 = (getTempRet0() | 0);
      $452 = HEAP32[$305>>2]|0;
      $453 = ($452|0)<(0);
      $454 = $453 << 31 >> 31;
      $455 = ((($440)) + 108|0);
      $456 = HEAP32[$455>>2]|0;
      $457 = ($456|0)<(0);
      $458 = $457 << 31 >> 31;
      $459 = (___muldi3(($456|0),($458|0),($452|0),($454|0))|0);
      $460 = (getTempRet0() | 0);
      $461 = (_bitshift64Lshr(($459|0),($460|0),16)|0);
      $462 = (getTempRet0() | 0);
      $463 = (($461) + ($450))|0;
      $464 = HEAP32[$293>>2]|0;
      $465 = ($464|0)<(0);
      $466 = $465 << 31 >> 31;
      $467 = ((($440)) + 100|0);
      $468 = HEAP32[$467>>2]|0;
      $469 = ($468|0)<(0);
      $470 = $469 << 31 >> 31;
      $471 = (___muldi3(($468|0),($470|0),($464|0),($466|0))|0);
      $472 = (getTempRet0() | 0);
      $473 = (_bitshift64Lshr(($471|0),($472|0),16)|0);
      $474 = (getTempRet0() | 0);
      $475 = (($463) + ($473))|0;
      $476 = HEAP32[$281>>2]|0;
      $477 = ($476|0)<(0);
      $478 = $477 << 31 >> 31;
      $479 = ((($440)) + 92|0);
      $480 = HEAP32[$479>>2]|0;
      $481 = ($480|0)<(0);
      $482 = $481 << 31 >> 31;
      $483 = (___muldi3(($480|0),($482|0),($476|0),($478|0))|0);
      $484 = (getTempRet0() | 0);
      $485 = (_bitshift64Lshr(($483|0),($484|0),16)|0);
      $486 = (getTempRet0() | 0);
      $487 = (($475) + ($485))|0;
      $488 = HEAP32[$269>>2]|0;
      $489 = ($488|0)<(0);
      $490 = $489 << 31 >> 31;
      $491 = ((($440)) + 84|0);
      $492 = HEAP32[$491>>2]|0;
      $493 = ($492|0)<(0);
      $494 = $493 << 31 >> 31;
      $495 = (___muldi3(($492|0),($494|0),($488|0),($490|0))|0);
      $496 = (getTempRet0() | 0);
      $497 = (_bitshift64Lshr(($495|0),($496|0),16)|0);
      $498 = (getTempRet0() | 0);
      $499 = (($487) + ($497))|0;
      $500 = HEAP32[$257>>2]|0;
      $501 = ($500|0)<(0);
      $502 = $501 << 31 >> 31;
      $503 = ((($440)) + 76|0);
      $504 = HEAP32[$503>>2]|0;
      $505 = ($504|0)<(0);
      $506 = $505 << 31 >> 31;
      $507 = (___muldi3(($504|0),($506|0),($500|0),($502|0))|0);
      $508 = (getTempRet0() | 0);
      $509 = (_bitshift64Lshr(($507|0),($508|0),16)|0);
      $510 = (getTempRet0() | 0);
      $511 = (($499) + ($509))|0;
      $512 = HEAP32[$245>>2]|0;
      $513 = ($512|0)<(0);
      $514 = $513 << 31 >> 31;
      $515 = ((($440)) + 68|0);
      $516 = HEAP32[$515>>2]|0;
      $517 = ($516|0)<(0);
      $518 = $517 << 31 >> 31;
      $519 = (___muldi3(($516|0),($518|0),($512|0),($514|0))|0);
      $520 = (getTempRet0() | 0);
      $521 = (_bitshift64Lshr(($519|0),($520|0),16)|0);
      $522 = (getTempRet0() | 0);
      $523 = (($511) + ($521))|0;
      $524 = HEAP32[$$0262304>>2]|0;
      $525 = ($524|0)<(0);
      $526 = $525 << 31 >> 31;
      $527 = ((($440)) + 60|0);
      $528 = HEAP32[$527>>2]|0;
      $529 = ($528|0)<(0);
      $530 = $529 << 31 >> 31;
      $531 = (___muldi3(($528|0),($530|0),($524|0),($526|0))|0);
      $532 = (getTempRet0() | 0);
      $533 = (_bitshift64Lshr(($531|0),($532|0),16)|0);
      $534 = (getTempRet0() | 0);
      $535 = (($523) + ($533))|0;
      $536 = (((($$0305)) + 128|0) + ($229<<2)|0);
      $537 = HEAP32[$230>>2]|0;
      $538 = ($537|0)<(0);
      $539 = $538 << 31 >> 31;
      $540 = ((($536)) + 60|0);
      $541 = HEAP32[$540>>2]|0;
      $542 = ($541|0)<(0);
      $543 = $542 << 31 >> 31;
      $544 = (___muldi3(($541|0),($543|0),($537|0),($539|0))|0);
      $545 = (getTempRet0() | 0);
      $546 = (_bitshift64Lshr(($544|0),($545|0),16)|0);
      $547 = (getTempRet0() | 0);
      $548 = (($535) + ($546))|0;
      $549 = HEAP32[$415>>2]|0;
      $550 = ($549|0)<(0);
      $551 = $550 << 31 >> 31;
      $552 = ((($536)) + 68|0);
      $553 = HEAP32[$552>>2]|0;
      $554 = ($553|0)<(0);
      $555 = $554 << 31 >> 31;
      $556 = (___muldi3(($553|0),($555|0),($549|0),($551|0))|0);
      $557 = (getTempRet0() | 0);
      $558 = (_bitshift64Lshr(($556|0),($557|0),16)|0);
      $559 = (getTempRet0() | 0);
      $560 = (($548) + ($558))|0;
      $561 = HEAP32[$402>>2]|0;
      $562 = ($561|0)<(0);
      $563 = $562 << 31 >> 31;
      $564 = ((($536)) + 76|0);
      $565 = HEAP32[$564>>2]|0;
      $566 = ($565|0)<(0);
      $567 = $566 << 31 >> 31;
      $568 = (___muldi3(($565|0),($567|0),($561|0),($563|0))|0);
      $569 = (getTempRet0() | 0);
      $570 = (_bitshift64Lshr(($568|0),($569|0),16)|0);
      $571 = (getTempRet0() | 0);
      $572 = (($560) + ($570))|0;
      $573 = HEAP32[$389>>2]|0;
      $574 = ($573|0)<(0);
      $575 = $574 << 31 >> 31;
      $576 = ((($536)) + 84|0);
      $577 = HEAP32[$576>>2]|0;
      $578 = ($577|0)<(0);
      $579 = $578 << 31 >> 31;
      $580 = (___muldi3(($577|0),($579|0),($573|0),($575|0))|0);
      $581 = (getTempRet0() | 0);
      $582 = (_bitshift64Lshr(($580|0),($581|0),16)|0);
      $583 = (getTempRet0() | 0);
      $584 = (($572) + ($582))|0;
      $585 = HEAP32[$376>>2]|0;
      $586 = ($585|0)<(0);
      $587 = $586 << 31 >> 31;
      $588 = ((($536)) + 92|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = ($589|0)<(0);
      $591 = $590 << 31 >> 31;
      $592 = (___muldi3(($589|0),($591|0),($585|0),($587|0))|0);
      $593 = (getTempRet0() | 0);
      $594 = (_bitshift64Lshr(($592|0),($593|0),16)|0);
      $595 = (getTempRet0() | 0);
      $596 = (($584) + ($594))|0;
      $597 = HEAP32[$363>>2]|0;
      $598 = ($597|0)<(0);
      $599 = $598 << 31 >> 31;
      $600 = ((($536)) + 100|0);
      $601 = HEAP32[$600>>2]|0;
      $602 = ($601|0)<(0);
      $603 = $602 << 31 >> 31;
      $604 = (___muldi3(($601|0),($603|0),($597|0),($599|0))|0);
      $605 = (getTempRet0() | 0);
      $606 = (_bitshift64Lshr(($604|0),($605|0),16)|0);
      $607 = (getTempRet0() | 0);
      $608 = (($596) + ($606))|0;
      $609 = HEAP32[$350>>2]|0;
      $610 = ($609|0)<(0);
      $611 = $610 << 31 >> 31;
      $612 = ((($536)) + 108|0);
      $613 = HEAP32[$612>>2]|0;
      $614 = ($613|0)<(0);
      $615 = $614 << 31 >> 31;
      $616 = (___muldi3(($613|0),($615|0),($609|0),($611|0))|0);
      $617 = (getTempRet0() | 0);
      $618 = (_bitshift64Lshr(($616|0),($617|0),16)|0);
      $619 = (getTempRet0() | 0);
      $620 = (($608) + ($618))|0;
      $621 = HEAP32[$330>>2]|0;
      $622 = ($621|0)<(0);
      $623 = $622 << 31 >> 31;
      $624 = ((($536)) + 116|0);
      $625 = HEAP32[$624>>2]|0;
      $626 = ($625|0)<(0);
      $627 = $626 << 31 >> 31;
      $628 = (___muldi3(($625|0),($627|0),($621|0),($623|0))|0);
      $629 = (getTempRet0() | 0);
      $630 = (_bitshift64Lshr(($628|0),($629|0),16)|0);
      $631 = (getTempRet0() | 0);
      $632 = (($620) + ($630))|0;
      $633 = ((($$0267302)) + -4|0);
      HEAP32[$$0267302>>2] = $632;
      $$1 = $633;$$2 = $439;
     } else {
      $$1 = $$0267302;$$2 = $$1269301;
     }
     $634 = ((($$0262304)) + 32|0);
     $635 = (($$0270300) + 1)|0;
     $exitcond = ($635|0)==(16);
     if ($exitcond) {
      break;
     } else {
      $$0262304 = $634;$$0264303 = $230;$$0267302 = $$1;$$0270300 = $635;$$0305 = $231;$$1269301 = $$2;
     }
    }
    $636 = ((((2624)) + 256|0) + ($17<<2)|0);
    $637 = HEAP32[$scevgep316>>2]|0;
    $638 = ($637|0)<(0);
    $639 = $638 << 31 >> 31;
    $640 = HEAP32[$636>>2]|0;
    $641 = ($640|0)<(0);
    $642 = $641 << 31 >> 31;
    $643 = (___muldi3(($640|0),($642|0),($637|0),($639|0))|0);
    $644 = (getTempRet0() | 0);
    $645 = (_bitshift64Lshr(($643|0),($644|0),16)|0);
    $646 = (getTempRet0() | 0);
    $647 = (((($indvars$iv320$in) + ($18<<9)|0)) + 36|0);
    $648 = HEAP32[$647>>2]|0;
    $649 = ($648|0)<(0);
    $650 = $649 << 31 >> 31;
    $651 = ((($636)) + 56|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = ($652|0)<(0);
    $654 = $653 << 31 >> 31;
    $655 = (___muldi3(($652|0),($654|0),($648|0),($650|0))|0);
    $656 = (getTempRet0() | 0);
    $657 = (_bitshift64Lshr(($655|0),($656|0),16)|0);
    $658 = (getTempRet0() | 0);
    $659 = (($645) + ($657))|0;
    $660 = (((($indvars$iv320$in) + ($18<<9)|0)) + 40|0);
    $661 = HEAP32[$660>>2]|0;
    $662 = ($661|0)<(0);
    $663 = $662 << 31 >> 31;
    $664 = ((($636)) + 48|0);
    $665 = HEAP32[$664>>2]|0;
    $666 = ($665|0)<(0);
    $667 = $666 << 31 >> 31;
    $668 = (___muldi3(($665|0),($667|0),($661|0),($663|0))|0);
    $669 = (getTempRet0() | 0);
    $670 = (_bitshift64Lshr(($668|0),($669|0),16)|0);
    $671 = (getTempRet0() | 0);
    $672 = (($659) + ($670))|0;
    $673 = (((($indvars$iv320$in) + ($18<<9)|0)) + 44|0);
    $674 = HEAP32[$673>>2]|0;
    $675 = ($674|0)<(0);
    $676 = $675 << 31 >> 31;
    $677 = ((($636)) + 40|0);
    $678 = HEAP32[$677>>2]|0;
    $679 = ($678|0)<(0);
    $680 = $679 << 31 >> 31;
    $681 = (___muldi3(($678|0),($680|0),($674|0),($676|0))|0);
    $682 = (getTempRet0() | 0);
    $683 = (_bitshift64Lshr(($681|0),($682|0),16)|0);
    $684 = (getTempRet0() | 0);
    $685 = (($672) + ($683))|0;
    $686 = (((($indvars$iv320$in) + ($18<<9)|0)) + 48|0);
    $687 = HEAP32[$686>>2]|0;
    $688 = ($687|0)<(0);
    $689 = $688 << 31 >> 31;
    $690 = ((($636)) + 32|0);
    $691 = HEAP32[$690>>2]|0;
    $692 = ($691|0)<(0);
    $693 = $692 << 31 >> 31;
    $694 = (___muldi3(($691|0),($693|0),($687|0),($689|0))|0);
    $695 = (getTempRet0() | 0);
    $696 = (_bitshift64Lshr(($694|0),($695|0),16)|0);
    $697 = (getTempRet0() | 0);
    $698 = (($685) + ($696))|0;
    $699 = (((($indvars$iv320$in) + ($18<<9)|0)) + 52|0);
    $700 = HEAP32[$699>>2]|0;
    $701 = ($700|0)<(0);
    $702 = $701 << 31 >> 31;
    $703 = ((($636)) + 24|0);
    $704 = HEAP32[$703>>2]|0;
    $705 = ($704|0)<(0);
    $706 = $705 << 31 >> 31;
    $707 = (___muldi3(($704|0),($706|0),($700|0),($702|0))|0);
    $708 = (getTempRet0() | 0);
    $709 = (_bitshift64Lshr(($707|0),($708|0),16)|0);
    $710 = (getTempRet0() | 0);
    $711 = (($698) + ($709))|0;
    $712 = (((($indvars$iv320$in) + ($18<<9)|0)) + 56|0);
    $713 = HEAP32[$712>>2]|0;
    $714 = ($713|0)<(0);
    $715 = $714 << 31 >> 31;
    $716 = ((($636)) + 16|0);
    $717 = HEAP32[$716>>2]|0;
    $718 = ($717|0)<(0);
    $719 = $718 << 31 >> 31;
    $720 = (___muldi3(($717|0),($719|0),($713|0),($715|0))|0);
    $721 = (getTempRet0() | 0);
    $722 = (_bitshift64Lshr(($720|0),($721|0),16)|0);
    $723 = (getTempRet0() | 0);
    $724 = (($711) + ($722))|0;
    $725 = (((($indvars$iv320$in) + ($18<<9)|0)) + 60|0);
    $726 = HEAP32[$725>>2]|0;
    $727 = ($726|0)<(0);
    $728 = $727 << 31 >> 31;
    $729 = ((($636)) + 8|0);
    $730 = HEAP32[$729>>2]|0;
    $731 = ($730|0)<(0);
    $732 = $731 << 31 >> 31;
    $733 = (___muldi3(($730|0),($732|0),($726|0),($728|0))|0);
    $734 = (getTempRet0() | 0);
    $735 = (_bitshift64Lshr(($733|0),($734|0),16)|0);
    $736 = (getTempRet0() | 0);
    $737 = (($724) + ($735))|0;
    $738 = (0 - ($737))|0;
    HEAP32[$$2>>2] = $738;
    $739 = ((($$2)) + 32|0);
    $740 = (($$0263308) + 1)|0;
    $741 = $740 & 15;
    $742 = (($$0266307) + 1)|0;
    $exitcond324 = ($742|0)==($3|0);
    if ($exitcond324) {
     break;
    } else {
     $$0263308 = $741;$$0266307 = $742;$$0268306 = $739;
    }
   }
  }
  $743 = (($$0265309) + 1)|0;
  $744 = ((($indvars$iv$in)) + 2048|0);
  $745 = ((($indvars$iv320$in)) + 2048|0);
  $exitcond325 = ($743|0)==($2|0);
  if ($exitcond325) {
   break;
  } else {
   $$0265309 = $743;$indvars$iv$in = $744;$indvars$iv320$in = $745;
  }
 }
 return;
}
function _synth_full($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0261302 = 0, $$0262307 = 0, $$0263301 = 0, $$0264308 = 0, $$0265306 = 0, $$0266300 = 0, $$0267305 = 0, $$0267305$pn = 0, $$0268299 = 0, $$0303 = 0, $$1304 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond325 = 0, $exitcond326 = 0, $indvars$iv$in = 0, $indvars$iv320$in = 0, $scevgep313 = 0, $scevgep318 = 0, $scevgep322 = 0, $scevgep324 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($0)) + 4096|0);
 $6 = ($3|0)==(0);
 $scevgep313 = ((($0)) + 1472|0);
 $scevgep318 = ((($0)) + 1504|0);
 $$0264308 = 0;$indvars$iv$in = $scevgep313;$indvars$iv320$in = $scevgep318;
 while(1) {
  if (!($6)) {
   $7 = (((($0)) + 4108|0) + (($$0264308*4608)|0)|0);
   $8 = HEAP32[$5>>2]|0;
   $$0262307 = $8;$$0265306 = 0;$$0267305 = $7;
   while(1) {
    $9 = ((((($1)) + 48|0) + (($$0264308*4608)|0)|0) + ($$0265306<<7)|0);
    $10 = $$0262307 >>> 1;
    $11 = $$0262307 & 1;
    $12 = ((($0) + ($$0264308<<11)|0) + ($11<<9)|0);
    $13 = ((((($0) + ($$0264308<<11)|0)) + 1024|0) + ($11<<9)|0);
    _dct32($9,$10,$12,$13);
    $14 = $$0262307 & -2;
    $15 = (($$0262307) + 15)|0;
    $16 = $15 & 14;
    $17 = $16 | 1;
    $18 = $11 ^ 1;
    $19 = ((((($0) + ($$0264308<<11)|0)) + 1024|0) + ($18<<9)|0);
    $20 = (832 + ($17<<2)|0);
    $21 = ((($0) + ($$0264308<<11)|0) + ($18<<9)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)<(0);
    $24 = $23 << 31 >> 31;
    $25 = HEAP32[$20>>2]|0;
    $26 = ($25|0)<(0);
    $27 = $26 << 31 >> 31;
    $28 = (___muldi3(($25|0),($27|0),($22|0),($24|0))|0);
    $29 = (getTempRet0() | 0);
    $30 = (_bitshift64Lshr(($28|0),($29|0),16)|0);
    $31 = (getTempRet0() | 0);
    $32 = ((((($0) + ($$0264308<<11)|0) + ($18<<9)|0)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)<(0);
    $35 = $34 << 31 >> 31;
    $36 = ((($20)) + 56|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)<(0);
    $39 = $38 << 31 >> 31;
    $40 = (___muldi3(($37|0),($39|0),($33|0),($35|0))|0);
    $41 = (getTempRet0() | 0);
    $42 = (_bitshift64Lshr(($40|0),($41|0),16)|0);
    $43 = (getTempRet0() | 0);
    $44 = ((((($0) + ($$0264308<<11)|0) + ($18<<9)|0)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)<(0);
    $47 = $46 << 31 >> 31;
    $48 = ((($20)) + 48|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)<(0);
    $51 = $50 << 31 >> 31;
    $52 = (___muldi3(($49|0),($51|0),($45|0),($47|0))|0);
    $53 = (getTempRet0() | 0);
    $54 = (_bitshift64Lshr(($52|0),($53|0),16)|0);
    $55 = (getTempRet0() | 0);
    $56 = ((((($0) + ($$0264308<<11)|0) + ($18<<9)|0)) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)<(0);
    $59 = $58 << 31 >> 31;
    $60 = ((($20)) + 40|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)<(0);
    $63 = $62 << 31 >> 31;
    $64 = (___muldi3(($61|0),($63|0),($57|0),($59|0))|0);
    $65 = (getTempRet0() | 0);
    $66 = (_bitshift64Lshr(($64|0),($65|0),16)|0);
    $67 = (getTempRet0() | 0);
    $68 = ((((($0) + ($$0264308<<11)|0) + ($18<<9)|0)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)<(0);
    $71 = $70 << 31 >> 31;
    $72 = ((($20)) + 32|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)<(0);
    $75 = $74 << 31 >> 31;
    $76 = (___muldi3(($73|0),($75|0),($69|0),($71|0))|0);
    $77 = (getTempRet0() | 0);
    $78 = (_bitshift64Lshr(($76|0),($77|0),16)|0);
    $79 = (getTempRet0() | 0);
    $80 = ((((($0) + ($$0264308<<11)|0) + ($18<<9)|0)) + 20|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)<(0);
    $83 = $82 << 31 >> 31;
    $84 = ((($20)) + 24|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)<(0);
    $87 = $86 << 31 >> 31;
    $88 = (___muldi3(($85|0),($87|0),($81|0),($83|0))|0);
    $89 = (getTempRet0() | 0);
    $90 = (_bitshift64Lshr(($88|0),($89|0),16)|0);
    $91 = (getTempRet0() | 0);
    $92 = ((((($0) + ($$0264308<<11)|0) + ($18<<9)|0)) + 24|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)<(0);
    $95 = $94 << 31 >> 31;
    $96 = ((($20)) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)<(0);
    $99 = $98 << 31 >> 31;
    $100 = (___muldi3(($97|0),($99|0),($93|0),($95|0))|0);
    $101 = (getTempRet0() | 0);
    $102 = (_bitshift64Lshr(($100|0),($101|0),16)|0);
    $103 = (getTempRet0() | 0);
    $104 = ((((($0) + ($$0264308<<11)|0) + ($18<<9)|0)) + 28|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ($105|0)<(0);
    $107 = $106 << 31 >> 31;
    $108 = ((($20)) + 8|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)<(0);
    $111 = $110 << 31 >> 31;
    $112 = (___muldi3(($109|0),($111|0),($105|0),($107|0))|0);
    $113 = (getTempRet0() | 0);
    $114 = (_bitshift64Lshr(($112|0),($113|0),16)|0);
    $115 = (getTempRet0() | 0);
    $116 = (832 + ($14<<2)|0);
    $117 = HEAP32[$12>>2]|0;
    $118 = ($117|0)<(0);
    $119 = $118 << 31 >> 31;
    $120 = HEAP32[$116>>2]|0;
    $121 = ($120|0)<(0);
    $122 = $121 << 31 >> 31;
    $123 = (___muldi3(($120|0),($122|0),($117|0),($119|0))|0);
    $124 = (getTempRet0() | 0);
    $125 = (_bitshift64Lshr(($123|0),($124|0),16)|0);
    $126 = (getTempRet0() | 0);
    $127 = (($42) + ($30))|0;
    $128 = (($127) + ($54))|0;
    $129 = (($128) + ($66))|0;
    $130 = (($129) + ($78))|0;
    $131 = (($130) + ($90))|0;
    $132 = (($131) + ($102))|0;
    $133 = (($132) + ($114))|0;
    $134 = (($125) - ($133))|0;
    $135 = ((((($0) + ($$0264308<<11)|0) + ($11<<9)|0)) + 4|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($136|0)<(0);
    $138 = $137 << 31 >> 31;
    $139 = ((($116)) + 56|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)<(0);
    $142 = $141 << 31 >> 31;
    $143 = (___muldi3(($140|0),($142|0),($136|0),($138|0))|0);
    $144 = (getTempRet0() | 0);
    $145 = (_bitshift64Lshr(($143|0),($144|0),16)|0);
    $146 = (getTempRet0() | 0);
    $147 = (($134) + ($145))|0;
    $148 = ((((($0) + ($$0264308<<11)|0) + ($11<<9)|0)) + 8|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)<(0);
    $151 = $150 << 31 >> 31;
    $152 = ((($116)) + 48|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ($153|0)<(0);
    $155 = $154 << 31 >> 31;
    $156 = (___muldi3(($153|0),($155|0),($149|0),($151|0))|0);
    $157 = (getTempRet0() | 0);
    $158 = (_bitshift64Lshr(($156|0),($157|0),16)|0);
    $159 = (getTempRet0() | 0);
    $160 = (($147) + ($158))|0;
    $161 = ((((($0) + ($$0264308<<11)|0) + ($11<<9)|0)) + 12|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = ($162|0)<(0);
    $164 = $163 << 31 >> 31;
    $165 = ((($116)) + 40|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)<(0);
    $168 = $167 << 31 >> 31;
    $169 = (___muldi3(($166|0),($168|0),($162|0),($164|0))|0);
    $170 = (getTempRet0() | 0);
    $171 = (_bitshift64Lshr(($169|0),($170|0),16)|0);
    $172 = (getTempRet0() | 0);
    $173 = (($160) + ($171))|0;
    $174 = ((((($0) + ($$0264308<<11)|0) + ($11<<9)|0)) + 16|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = ($175|0)<(0);
    $177 = $176 << 31 >> 31;
    $178 = ((($116)) + 32|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ($179|0)<(0);
    $181 = $180 << 31 >> 31;
    $182 = (___muldi3(($179|0),($181|0),($175|0),($177|0))|0);
    $183 = (getTempRet0() | 0);
    $184 = (_bitshift64Lshr(($182|0),($183|0),16)|0);
    $185 = (getTempRet0() | 0);
    $186 = (($173) + ($184))|0;
    $187 = ((((($0) + ($$0264308<<11)|0) + ($11<<9)|0)) + 20|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ($188|0)<(0);
    $190 = $189 << 31 >> 31;
    $191 = ((($116)) + 24|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = ($192|0)<(0);
    $194 = $193 << 31 >> 31;
    $195 = (___muldi3(($192|0),($194|0),($188|0),($190|0))|0);
    $196 = (getTempRet0() | 0);
    $197 = (_bitshift64Lshr(($195|0),($196|0),16)|0);
    $198 = (getTempRet0() | 0);
    $199 = (($186) + ($197))|0;
    $200 = ((((($0) + ($$0264308<<11)|0) + ($11<<9)|0)) + 24|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = ($201|0)<(0);
    $203 = $202 << 31 >> 31;
    $204 = ((($116)) + 16|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = ($205|0)<(0);
    $207 = $206 << 31 >> 31;
    $208 = (___muldi3(($205|0),($207|0),($201|0),($203|0))|0);
    $209 = (getTempRet0() | 0);
    $210 = (_bitshift64Lshr(($208|0),($209|0),16)|0);
    $211 = (getTempRet0() | 0);
    $212 = (($199) + ($210))|0;
    $213 = ((((($0) + ($$0264308<<11)|0) + ($11<<9)|0)) + 28|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = ($214|0)<(0);
    $216 = $215 << 31 >> 31;
    $217 = ((($116)) + 8|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ($218|0)<(0);
    $220 = $219 << 31 >> 31;
    $221 = (___muldi3(($218|0),($220|0),($214|0),($216|0))|0);
    $222 = (getTempRet0() | 0);
    $223 = (_bitshift64Lshr(($221|0),($222|0),16)|0);
    $224 = (getTempRet0() | 0);
    $225 = (($212) + ($223))|0;
    HEAP32[$$0267305>>2] = $225;
    $226 = ((($$0267305)) + 124|0);
    $227 = (0 - ($14))|0;
    $228 = (0 - ($17))|0;
    $scevgep322 = (($indvars$iv320$in) + ($18<<9)|0);
    $$0261302 = $19;$$0263301 = $12;$$0266300 = $226;$$0267305$pn = $$0267305;$$0268299 = 1;$$0303 = 832;
    while(1) {
     $$1304 = ((($$0267305$pn)) + 4|0);
     $229 = ((($$0263301)) + 32|0);
     $230 = ((($$0303)) + 128|0);
     $231 = (((($$0303)) + 128|0) + ($17<<2)|0);
     $232 = HEAP32[$$0261302>>2]|0;
     $233 = ($232|0)<(0);
     $234 = $233 << 31 >> 31;
     $235 = HEAP32[$231>>2]|0;
     $236 = ($235|0)<(0);
     $237 = $236 << 31 >> 31;
     $238 = (___muldi3(($235|0),($237|0),($232|0),($234|0))|0);
     $239 = (getTempRet0() | 0);
     $240 = (_bitshift64Lshr(($238|0),($239|0),16)|0);
     $241 = (getTempRet0() | 0);
     $242 = ((($$0261302)) + 4|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = ($243|0)<(0);
     $245 = $244 << 31 >> 31;
     $246 = ((($231)) + 56|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = ($247|0)<(0);
     $249 = $248 << 31 >> 31;
     $250 = (___muldi3(($247|0),($249|0),($243|0),($245|0))|0);
     $251 = (getTempRet0() | 0);
     $252 = (_bitshift64Lshr(($250|0),($251|0),16)|0);
     $253 = (getTempRet0() | 0);
     $254 = ((($$0261302)) + 8|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($255|0)<(0);
     $257 = $256 << 31 >> 31;
     $258 = ((($231)) + 48|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = ($259|0)<(0);
     $261 = $260 << 31 >> 31;
     $262 = (___muldi3(($259|0),($261|0),($255|0),($257|0))|0);
     $263 = (getTempRet0() | 0);
     $264 = (_bitshift64Lshr(($262|0),($263|0),16)|0);
     $265 = (getTempRet0() | 0);
     $266 = ((($$0261302)) + 12|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = ($267|0)<(0);
     $269 = $268 << 31 >> 31;
     $270 = ((($231)) + 40|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = ($271|0)<(0);
     $273 = $272 << 31 >> 31;
     $274 = (___muldi3(($271|0),($273|0),($267|0),($269|0))|0);
     $275 = (getTempRet0() | 0);
     $276 = (_bitshift64Lshr(($274|0),($275|0),16)|0);
     $277 = (getTempRet0() | 0);
     $278 = ((($$0261302)) + 16|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)<(0);
     $281 = $280 << 31 >> 31;
     $282 = ((($231)) + 32|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = ($283|0)<(0);
     $285 = $284 << 31 >> 31;
     $286 = (___muldi3(($283|0),($285|0),($279|0),($281|0))|0);
     $287 = (getTempRet0() | 0);
     $288 = (_bitshift64Lshr(($286|0),($287|0),16)|0);
     $289 = (getTempRet0() | 0);
     $290 = ((($$0261302)) + 20|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = ($291|0)<(0);
     $293 = $292 << 31 >> 31;
     $294 = ((($231)) + 24|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = ($295|0)<(0);
     $297 = $296 << 31 >> 31;
     $298 = (___muldi3(($295|0),($297|0),($291|0),($293|0))|0);
     $299 = (getTempRet0() | 0);
     $300 = (_bitshift64Lshr(($298|0),($299|0),16)|0);
     $301 = (getTempRet0() | 0);
     $302 = ((($$0261302)) + 24|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = ($303|0)<(0);
     $305 = $304 << 31 >> 31;
     $306 = ((($231)) + 16|0);
     $307 = HEAP32[$306>>2]|0;
     $308 = ($307|0)<(0);
     $309 = $308 << 31 >> 31;
     $310 = (___muldi3(($307|0),($309|0),($303|0),($305|0))|0);
     $311 = (getTempRet0() | 0);
     $312 = (_bitshift64Lshr(($310|0),($311|0),16)|0);
     $313 = (getTempRet0() | 0);
     $314 = ((($$0261302)) + 28|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = ($315|0)<(0);
     $317 = $316 << 31 >> 31;
     $318 = ((($231)) + 8|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = ($319|0)<(0);
     $321 = $320 << 31 >> 31;
     $322 = (___muldi3(($319|0),($321|0),($315|0),($317|0))|0);
     $323 = (getTempRet0() | 0);
     $324 = (_bitshift64Lshr(($322|0),($323|0),16)|0);
     $325 = (getTempRet0() | 0);
     $326 = (((($$0303)) + 128|0) + ($14<<2)|0);
     $327 = ((($$0263301)) + 60|0);
     $328 = HEAP32[$327>>2]|0;
     $329 = ($328|0)<(0);
     $330 = $329 << 31 >> 31;
     $331 = ((($326)) + 8|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = ($332|0)<(0);
     $334 = $333 << 31 >> 31;
     $335 = (___muldi3(($332|0),($334|0),($328|0),($330|0))|0);
     $336 = (getTempRet0() | 0);
     $337 = (_bitshift64Lshr(($335|0),($336|0),16)|0);
     $338 = (getTempRet0() | 0);
     $339 = (($252) + ($240))|0;
     $340 = (($339) + ($264))|0;
     $341 = (($340) + ($276))|0;
     $342 = (($341) + ($288))|0;
     $343 = (($342) + ($300))|0;
     $344 = (($343) + ($312))|0;
     $345 = (($344) + ($324))|0;
     $346 = (($337) - ($345))|0;
     $347 = ((($$0263301)) + 56|0);
     $348 = HEAP32[$347>>2]|0;
     $349 = ($348|0)<(0);
     $350 = $349 << 31 >> 31;
     $351 = ((($326)) + 16|0);
     $352 = HEAP32[$351>>2]|0;
     $353 = ($352|0)<(0);
     $354 = $353 << 31 >> 31;
     $355 = (___muldi3(($352|0),($354|0),($348|0),($350|0))|0);
     $356 = (getTempRet0() | 0);
     $357 = (_bitshift64Lshr(($355|0),($356|0),16)|0);
     $358 = (getTempRet0() | 0);
     $359 = (($346) + ($357))|0;
     $360 = ((($$0263301)) + 52|0);
     $361 = HEAP32[$360>>2]|0;
     $362 = ($361|0)<(0);
     $363 = $362 << 31 >> 31;
     $364 = ((($326)) + 24|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = ($365|0)<(0);
     $367 = $366 << 31 >> 31;
     $368 = (___muldi3(($365|0),($367|0),($361|0),($363|0))|0);
     $369 = (getTempRet0() | 0);
     $370 = (_bitshift64Lshr(($368|0),($369|0),16)|0);
     $371 = (getTempRet0() | 0);
     $372 = (($359) + ($370))|0;
     $373 = ((($$0263301)) + 48|0);
     $374 = HEAP32[$373>>2]|0;
     $375 = ($374|0)<(0);
     $376 = $375 << 31 >> 31;
     $377 = ((($326)) + 32|0);
     $378 = HEAP32[$377>>2]|0;
     $379 = ($378|0)<(0);
     $380 = $379 << 31 >> 31;
     $381 = (___muldi3(($378|0),($380|0),($374|0),($376|0))|0);
     $382 = (getTempRet0() | 0);
     $383 = (_bitshift64Lshr(($381|0),($382|0),16)|0);
     $384 = (getTempRet0() | 0);
     $385 = (($372) + ($383))|0;
     $386 = ((($$0263301)) + 44|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = ($387|0)<(0);
     $389 = $388 << 31 >> 31;
     $390 = ((($326)) + 40|0);
     $391 = HEAP32[$390>>2]|0;
     $392 = ($391|0)<(0);
     $393 = $392 << 31 >> 31;
     $394 = (___muldi3(($391|0),($393|0),($387|0),($389|0))|0);
     $395 = (getTempRet0() | 0);
     $396 = (_bitshift64Lshr(($394|0),($395|0),16)|0);
     $397 = (getTempRet0() | 0);
     $398 = (($385) + ($396))|0;
     $399 = ((($$0263301)) + 40|0);
     $400 = HEAP32[$399>>2]|0;
     $401 = ($400|0)<(0);
     $402 = $401 << 31 >> 31;
     $403 = ((($326)) + 48|0);
     $404 = HEAP32[$403>>2]|0;
     $405 = ($404|0)<(0);
     $406 = $405 << 31 >> 31;
     $407 = (___muldi3(($404|0),($406|0),($400|0),($402|0))|0);
     $408 = (getTempRet0() | 0);
     $409 = (_bitshift64Lshr(($407|0),($408|0),16)|0);
     $410 = (getTempRet0() | 0);
     $411 = (($398) + ($409))|0;
     $412 = ((($$0263301)) + 36|0);
     $413 = HEAP32[$412>>2]|0;
     $414 = ($413|0)<(0);
     $415 = $414 << 31 >> 31;
     $416 = ((($326)) + 56|0);
     $417 = HEAP32[$416>>2]|0;
     $418 = ($417|0)<(0);
     $419 = $418 << 31 >> 31;
     $420 = (___muldi3(($417|0),($419|0),($413|0),($415|0))|0);
     $421 = (getTempRet0() | 0);
     $422 = (_bitshift64Lshr(($420|0),($421|0),16)|0);
     $423 = (getTempRet0() | 0);
     $424 = (($411) + ($422))|0;
     $425 = HEAP32[$229>>2]|0;
     $426 = ($425|0)<(0);
     $427 = $426 << 31 >> 31;
     $428 = HEAP32[$326>>2]|0;
     $429 = ($428|0)<(0);
     $430 = $429 << 31 >> 31;
     $431 = (___muldi3(($428|0),($430|0),($425|0),($427|0))|0);
     $432 = (getTempRet0() | 0);
     $433 = (_bitshift64Lshr(($431|0),($432|0),16)|0);
     $434 = (getTempRet0() | 0);
     $435 = (($424) + ($433))|0;
     HEAP32[$$1304>>2] = $435;
     $436 = (((($$0303)) + 128|0) + ($227<<2)|0);
     $437 = HEAP32[$229>>2]|0;
     $438 = ($437|0)<(0);
     $439 = $438 << 31 >> 31;
     $440 = ((($436)) + 60|0);
     $441 = HEAP32[$440>>2]|0;
     $442 = ($441|0)<(0);
     $443 = $442 << 31 >> 31;
     $444 = (___muldi3(($441|0),($443|0),($437|0),($439|0))|0);
     $445 = (getTempRet0() | 0);
     $446 = (_bitshift64Lshr(($444|0),($445|0),16)|0);
     $447 = (getTempRet0() | 0);
     $448 = HEAP32[$412>>2]|0;
     $449 = ($448|0)<(0);
     $450 = $449 << 31 >> 31;
     $451 = ((($436)) + 68|0);
     $452 = HEAP32[$451>>2]|0;
     $453 = ($452|0)<(0);
     $454 = $453 << 31 >> 31;
     $455 = (___muldi3(($452|0),($454|0),($448|0),($450|0))|0);
     $456 = (getTempRet0() | 0);
     $457 = (_bitshift64Lshr(($455|0),($456|0),16)|0);
     $458 = (getTempRet0() | 0);
     $459 = (($457) + ($446))|0;
     $460 = HEAP32[$399>>2]|0;
     $461 = ($460|0)<(0);
     $462 = $461 << 31 >> 31;
     $463 = ((($436)) + 76|0);
     $464 = HEAP32[$463>>2]|0;
     $465 = ($464|0)<(0);
     $466 = $465 << 31 >> 31;
     $467 = (___muldi3(($464|0),($466|0),($460|0),($462|0))|0);
     $468 = (getTempRet0() | 0);
     $469 = (_bitshift64Lshr(($467|0),($468|0),16)|0);
     $470 = (getTempRet0() | 0);
     $471 = (($459) + ($469))|0;
     $472 = HEAP32[$386>>2]|0;
     $473 = ($472|0)<(0);
     $474 = $473 << 31 >> 31;
     $475 = ((($436)) + 84|0);
     $476 = HEAP32[$475>>2]|0;
     $477 = ($476|0)<(0);
     $478 = $477 << 31 >> 31;
     $479 = (___muldi3(($476|0),($478|0),($472|0),($474|0))|0);
     $480 = (getTempRet0() | 0);
     $481 = (_bitshift64Lshr(($479|0),($480|0),16)|0);
     $482 = (getTempRet0() | 0);
     $483 = (($471) + ($481))|0;
     $484 = HEAP32[$373>>2]|0;
     $485 = ($484|0)<(0);
     $486 = $485 << 31 >> 31;
     $487 = ((($436)) + 92|0);
     $488 = HEAP32[$487>>2]|0;
     $489 = ($488|0)<(0);
     $490 = $489 << 31 >> 31;
     $491 = (___muldi3(($488|0),($490|0),($484|0),($486|0))|0);
     $492 = (getTempRet0() | 0);
     $493 = (_bitshift64Lshr(($491|0),($492|0),16)|0);
     $494 = (getTempRet0() | 0);
     $495 = (($483) + ($493))|0;
     $496 = HEAP32[$360>>2]|0;
     $497 = ($496|0)<(0);
     $498 = $497 << 31 >> 31;
     $499 = ((($436)) + 100|0);
     $500 = HEAP32[$499>>2]|0;
     $501 = ($500|0)<(0);
     $502 = $501 << 31 >> 31;
     $503 = (___muldi3(($500|0),($502|0),($496|0),($498|0))|0);
     $504 = (getTempRet0() | 0);
     $505 = (_bitshift64Lshr(($503|0),($504|0),16)|0);
     $506 = (getTempRet0() | 0);
     $507 = (($495) + ($505))|0;
     $508 = HEAP32[$347>>2]|0;
     $509 = ($508|0)<(0);
     $510 = $509 << 31 >> 31;
     $511 = ((($436)) + 108|0);
     $512 = HEAP32[$511>>2]|0;
     $513 = ($512|0)<(0);
     $514 = $513 << 31 >> 31;
     $515 = (___muldi3(($512|0),($514|0),($508|0),($510|0))|0);
     $516 = (getTempRet0() | 0);
     $517 = (_bitshift64Lshr(($515|0),($516|0),16)|0);
     $518 = (getTempRet0() | 0);
     $519 = (($507) + ($517))|0;
     $520 = HEAP32[$327>>2]|0;
     $521 = ($520|0)<(0);
     $522 = $521 << 31 >> 31;
     $523 = ((($436)) + 116|0);
     $524 = HEAP32[$523>>2]|0;
     $525 = ($524|0)<(0);
     $526 = $525 << 31 >> 31;
     $527 = (___muldi3(($524|0),($526|0),($520|0),($522|0))|0);
     $528 = (getTempRet0() | 0);
     $529 = (_bitshift64Lshr(($527|0),($528|0),16)|0);
     $530 = (getTempRet0() | 0);
     $531 = (($519) + ($529))|0;
     $532 = (((($$0303)) + 128|0) + ($228<<2)|0);
     $533 = HEAP32[$314>>2]|0;
     $534 = ($533|0)<(0);
     $535 = $534 << 31 >> 31;
     $536 = ((($532)) + 116|0);
     $537 = HEAP32[$536>>2]|0;
     $538 = ($537|0)<(0);
     $539 = $538 << 31 >> 31;
     $540 = (___muldi3(($537|0),($539|0),($533|0),($535|0))|0);
     $541 = (getTempRet0() | 0);
     $542 = (_bitshift64Lshr(($540|0),($541|0),16)|0);
     $543 = (getTempRet0() | 0);
     $544 = (($531) + ($542))|0;
     $545 = HEAP32[$302>>2]|0;
     $546 = ($545|0)<(0);
     $547 = $546 << 31 >> 31;
     $548 = ((($532)) + 108|0);
     $549 = HEAP32[$548>>2]|0;
     $550 = ($549|0)<(0);
     $551 = $550 << 31 >> 31;
     $552 = (___muldi3(($549|0),($551|0),($545|0),($547|0))|0);
     $553 = (getTempRet0() | 0);
     $554 = (_bitshift64Lshr(($552|0),($553|0),16)|0);
     $555 = (getTempRet0() | 0);
     $556 = (($544) + ($554))|0;
     $557 = HEAP32[$290>>2]|0;
     $558 = ($557|0)<(0);
     $559 = $558 << 31 >> 31;
     $560 = ((($532)) + 100|0);
     $561 = HEAP32[$560>>2]|0;
     $562 = ($561|0)<(0);
     $563 = $562 << 31 >> 31;
     $564 = (___muldi3(($561|0),($563|0),($557|0),($559|0))|0);
     $565 = (getTempRet0() | 0);
     $566 = (_bitshift64Lshr(($564|0),($565|0),16)|0);
     $567 = (getTempRet0() | 0);
     $568 = (($556) + ($566))|0;
     $569 = HEAP32[$278>>2]|0;
     $570 = ($569|0)<(0);
     $571 = $570 << 31 >> 31;
     $572 = ((($532)) + 92|0);
     $573 = HEAP32[$572>>2]|0;
     $574 = ($573|0)<(0);
     $575 = $574 << 31 >> 31;
     $576 = (___muldi3(($573|0),($575|0),($569|0),($571|0))|0);
     $577 = (getTempRet0() | 0);
     $578 = (_bitshift64Lshr(($576|0),($577|0),16)|0);
     $579 = (getTempRet0() | 0);
     $580 = (($568) + ($578))|0;
     $581 = HEAP32[$266>>2]|0;
     $582 = ($581|0)<(0);
     $583 = $582 << 31 >> 31;
     $584 = ((($532)) + 84|0);
     $585 = HEAP32[$584>>2]|0;
     $586 = ($585|0)<(0);
     $587 = $586 << 31 >> 31;
     $588 = (___muldi3(($585|0),($587|0),($581|0),($583|0))|0);
     $589 = (getTempRet0() | 0);
     $590 = (_bitshift64Lshr(($588|0),($589|0),16)|0);
     $591 = (getTempRet0() | 0);
     $592 = (($580) + ($590))|0;
     $593 = HEAP32[$254>>2]|0;
     $594 = ($593|0)<(0);
     $595 = $594 << 31 >> 31;
     $596 = ((($532)) + 76|0);
     $597 = HEAP32[$596>>2]|0;
     $598 = ($597|0)<(0);
     $599 = $598 << 31 >> 31;
     $600 = (___muldi3(($597|0),($599|0),($593|0),($595|0))|0);
     $601 = (getTempRet0() | 0);
     $602 = (_bitshift64Lshr(($600|0),($601|0),16)|0);
     $603 = (getTempRet0() | 0);
     $604 = (($592) + ($602))|0;
     $605 = HEAP32[$242>>2]|0;
     $606 = ($605|0)<(0);
     $607 = $606 << 31 >> 31;
     $608 = ((($532)) + 68|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = ($609|0)<(0);
     $611 = $610 << 31 >> 31;
     $612 = (___muldi3(($609|0),($611|0),($605|0),($607|0))|0);
     $613 = (getTempRet0() | 0);
     $614 = (_bitshift64Lshr(($612|0),($613|0),16)|0);
     $615 = (getTempRet0() | 0);
     $616 = (($604) + ($614))|0;
     $617 = HEAP32[$$0261302>>2]|0;
     $618 = ($617|0)<(0);
     $619 = $618 << 31 >> 31;
     $620 = ((($532)) + 60|0);
     $621 = HEAP32[$620>>2]|0;
     $622 = ($621|0)<(0);
     $623 = $622 << 31 >> 31;
     $624 = (___muldi3(($621|0),($623|0),($617|0),($619|0))|0);
     $625 = (getTempRet0() | 0);
     $626 = (_bitshift64Lshr(($624|0),($625|0),16)|0);
     $627 = (getTempRet0() | 0);
     $628 = (($616) + ($626))|0;
     $629 = ((($$0266300)) + -4|0);
     HEAP32[$$0266300>>2] = $628;
     $630 = ((($$0261302)) + 32|0);
     $631 = (($$0268299) + 1)|0;
     $exitcond = ($631|0)==(16);
     if ($exitcond) {
      break;
     } else {
      $$0261302 = $630;$$0263301 = $229;$$0266300 = $629;$$0267305$pn = $$1304;$$0268299 = $631;$$0303 = $230;
     }
    }
    $scevgep324 = ((($$0267305)) + 64|0);
    $632 = ((((2624)) + 256|0) + ($17<<2)|0);
    $633 = HEAP32[$scevgep322>>2]|0;
    $634 = ($633|0)<(0);
    $635 = $634 << 31 >> 31;
    $636 = HEAP32[$632>>2]|0;
    $637 = ($636|0)<(0);
    $638 = $637 << 31 >> 31;
    $639 = (___muldi3(($636|0),($638|0),($633|0),($635|0))|0);
    $640 = (getTempRet0() | 0);
    $641 = (_bitshift64Lshr(($639|0),($640|0),16)|0);
    $642 = (getTempRet0() | 0);
    $643 = (((($indvars$iv$in) + ($18<<9)|0)) + 36|0);
    $644 = HEAP32[$643>>2]|0;
    $645 = ($644|0)<(0);
    $646 = $645 << 31 >> 31;
    $647 = ((($632)) + 56|0);
    $648 = HEAP32[$647>>2]|0;
    $649 = ($648|0)<(0);
    $650 = $649 << 31 >> 31;
    $651 = (___muldi3(($648|0),($650|0),($644|0),($646|0))|0);
    $652 = (getTempRet0() | 0);
    $653 = (_bitshift64Lshr(($651|0),($652|0),16)|0);
    $654 = (getTempRet0() | 0);
    $655 = (($641) + ($653))|0;
    $656 = (((($indvars$iv$in) + ($18<<9)|0)) + 40|0);
    $657 = HEAP32[$656>>2]|0;
    $658 = ($657|0)<(0);
    $659 = $658 << 31 >> 31;
    $660 = ((($632)) + 48|0);
    $661 = HEAP32[$660>>2]|0;
    $662 = ($661|0)<(0);
    $663 = $662 << 31 >> 31;
    $664 = (___muldi3(($661|0),($663|0),($657|0),($659|0))|0);
    $665 = (getTempRet0() | 0);
    $666 = (_bitshift64Lshr(($664|0),($665|0),16)|0);
    $667 = (getTempRet0() | 0);
    $668 = (($655) + ($666))|0;
    $669 = (((($indvars$iv$in) + ($18<<9)|0)) + 44|0);
    $670 = HEAP32[$669>>2]|0;
    $671 = ($670|0)<(0);
    $672 = $671 << 31 >> 31;
    $673 = ((($632)) + 40|0);
    $674 = HEAP32[$673>>2]|0;
    $675 = ($674|0)<(0);
    $676 = $675 << 31 >> 31;
    $677 = (___muldi3(($674|0),($676|0),($670|0),($672|0))|0);
    $678 = (getTempRet0() | 0);
    $679 = (_bitshift64Lshr(($677|0),($678|0),16)|0);
    $680 = (getTempRet0() | 0);
    $681 = (($668) + ($679))|0;
    $682 = (((($indvars$iv$in) + ($18<<9)|0)) + 48|0);
    $683 = HEAP32[$682>>2]|0;
    $684 = ($683|0)<(0);
    $685 = $684 << 31 >> 31;
    $686 = ((($632)) + 32|0);
    $687 = HEAP32[$686>>2]|0;
    $688 = ($687|0)<(0);
    $689 = $688 << 31 >> 31;
    $690 = (___muldi3(($687|0),($689|0),($683|0),($685|0))|0);
    $691 = (getTempRet0() | 0);
    $692 = (_bitshift64Lshr(($690|0),($691|0),16)|0);
    $693 = (getTempRet0() | 0);
    $694 = (($681) + ($692))|0;
    $695 = (((($indvars$iv$in) + ($18<<9)|0)) + 52|0);
    $696 = HEAP32[$695>>2]|0;
    $697 = ($696|0)<(0);
    $698 = $697 << 31 >> 31;
    $699 = ((($632)) + 24|0);
    $700 = HEAP32[$699>>2]|0;
    $701 = ($700|0)<(0);
    $702 = $701 << 31 >> 31;
    $703 = (___muldi3(($700|0),($702|0),($696|0),($698|0))|0);
    $704 = (getTempRet0() | 0);
    $705 = (_bitshift64Lshr(($703|0),($704|0),16)|0);
    $706 = (getTempRet0() | 0);
    $707 = (($694) + ($705))|0;
    $708 = (((($indvars$iv$in) + ($18<<9)|0)) + 56|0);
    $709 = HEAP32[$708>>2]|0;
    $710 = ($709|0)<(0);
    $711 = $710 << 31 >> 31;
    $712 = ((($632)) + 16|0);
    $713 = HEAP32[$712>>2]|0;
    $714 = ($713|0)<(0);
    $715 = $714 << 31 >> 31;
    $716 = (___muldi3(($713|0),($715|0),($709|0),($711|0))|0);
    $717 = (getTempRet0() | 0);
    $718 = (_bitshift64Lshr(($716|0),($717|0),16)|0);
    $719 = (getTempRet0() | 0);
    $720 = (($707) + ($718))|0;
    $721 = (((($indvars$iv$in) + ($18<<9)|0)) + 60|0);
    $722 = HEAP32[$721>>2]|0;
    $723 = ($722|0)<(0);
    $724 = $723 << 31 >> 31;
    $725 = ((($632)) + 8|0);
    $726 = HEAP32[$725>>2]|0;
    $727 = ($726|0)<(0);
    $728 = $727 << 31 >> 31;
    $729 = (___muldi3(($726|0),($728|0),($722|0),($724|0))|0);
    $730 = (getTempRet0() | 0);
    $731 = (_bitshift64Lshr(($729|0),($730|0),16)|0);
    $732 = (getTempRet0() | 0);
    $733 = (($720) + ($731))|0;
    $734 = (0 - ($733))|0;
    HEAP32[$scevgep324>>2] = $734;
    $735 = ((($$0267305)) + 128|0);
    $736 = (($$0262307) + 1)|0;
    $737 = $736 & 15;
    $738 = (($$0265306) + 1)|0;
    $exitcond325 = ($738|0)==($3|0);
    if ($exitcond325) {
     break;
    } else {
     $$0262307 = $737;$$0265306 = $738;$$0267305 = $735;
    }
   }
  }
  $739 = (($$0264308) + 1)|0;
  $740 = ((($indvars$iv$in)) + 2048|0);
  $741 = ((($indvars$iv320$in)) + 2048|0);
  $exitcond326 = ($739|0)==($2|0);
  if ($exitcond326) {
   break;
  } else {
   $$0264308 = $739;$indvars$iv$in = $740;$indvars$iv320$in = $741;
  }
 }
 return;
}
function _dct32($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($0)) + 124|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4))|0;
 $8 = (($4) - ($6))|0;
 $9 = ($8|0)<(0);
 $10 = $9 << 31 >> 31;
 $11 = (___muldi3(($8|0),($10|0),268112114,0)|0);
 $12 = (getTempRet0() | 0);
 $13 = (_bitshift64Lshr(($11|0),($12|0),28)|0);
 $14 = (getTempRet0() | 0);
 $15 = ((($0)) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 64|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($16))|0;
 $20 = (($16) - ($18))|0;
 $21 = ($20|0)<(0);
 $22 = $21 << 31 >> 31;
 $23 = (___muldi3(($20|0),($22|0),13171504,0)|0);
 $24 = (getTempRet0() | 0);
 $25 = (_bitshift64Ashr(($23|0),($24|0),28)|0);
 $26 = (getTempRet0() | 0);
 $27 = (($25) + ($13))|0;
 $28 = (($13) - ($25))|0;
 $29 = ($28|0)<(0);
 $30 = $29 << 31 >> 31;
 $31 = (___muldi3(($28|0),($30|0),267142866,0)|0);
 $32 = (getTempRet0() | 0);
 $33 = (_bitshift64Lshr(($31|0),($32|0),28)|0);
 $34 = (getTempRet0() | 0);
 $35 = (($19) + ($7))|0;
 $36 = (($7) - ($19))|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = (___muldi3(($36|0),($38|0),267142866,0)|0);
 $40 = (getTempRet0() | 0);
 $41 = (_bitshift64Lshr(($39|0),($40|0),28)|0);
 $42 = (getTempRet0() | 0);
 $43 = ((($0)) + 28|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($0)) + 96|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($44))|0;
 $48 = (($44) - ($46))|0;
 $49 = ($48|0)<(0);
 $50 = $49 << 31 >> 31;
 $51 = (___muldi3(($48|0),($50|0),198897553,0)|0);
 $52 = (getTempRet0() | 0);
 $53 = (_bitshift64Lshr(($51|0),($52|0),28)|0);
 $54 = (getTempRet0() | 0);
 $55 = ((($0)) + 32|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($0)) + 92|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + ($56))|0;
 $60 = (($56) - ($58))|0;
 $61 = ($60|0)<(0);
 $62 = $61 << 31 >> 31;
 $63 = (___muldi3(($60|0),($62|0),180270234,0)|0);
 $64 = (getTempRet0() | 0);
 $65 = (_bitshift64Lshr(($63|0),($64|0),28)|0);
 $66 = (getTempRet0() | 0);
 $67 = (($65) + ($53))|0;
 $68 = (($53) - ($65))|0;
 $69 = ($68|0)<(0);
 $70 = $69 << 31 >> 31;
 $71 = (___muldi3(($68|0),($70|0),26311276,0)|0);
 $72 = (getTempRet0() | 0);
 $73 = (_bitshift64Ashr(($71|0),($72|0),28)|0);
 $74 = (getTempRet0() | 0);
 $75 = (($59) + ($47))|0;
 $76 = (($47) - ($59))|0;
 $77 = ($76|0)<(0);
 $78 = $77 << 31 >> 31;
 $79 = (___muldi3(($76|0),($78|0),26311276,0)|0);
 $80 = (getTempRet0() | 0);
 $81 = (_bitshift64Ashr(($79|0),($80|0),28)|0);
 $82 = (getTempRet0() | 0);
 $83 = ((($0)) + 12|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($0)) + 112|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + ($84))|0;
 $88 = (($84) - ($86))|0;
 $89 = ($88|0)<(0);
 $90 = $89 << 31 >> 31;
 $91 = (___muldi3(($88|0),($90|0),252743810,0)|0);
 $92 = (getTempRet0() | 0);
 $93 = (_bitshift64Lshr(($91|0),($92|0),28)|0);
 $94 = (getTempRet0() | 0);
 $95 = ((($0)) + 48|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ((($0)) + 76|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (($98) + ($96))|0;
 $100 = (($96) - ($98))|0;
 $101 = ($100|0)<(0);
 $102 = $101 << 31 >> 31;
 $103 = (___muldi3(($100|0),($102|0),90433181,0)|0);
 $104 = (getTempRet0() | 0);
 $105 = (_bitshift64Lshr(($103|0),($104|0),28)|0);
 $106 = (getTempRet0() | 0);
 $107 = (($105) + ($93))|0;
 $108 = (($93) - ($105))|0;
 $109 = ($108|0)<(0);
 $110 = $109 << 31 >> 31;
 $111 = (___muldi3(($108|0),($110|0),207503414,0)|0);
 $112 = (getTempRet0() | 0);
 $113 = (_bitshift64Lshr(($111|0),($112|0),28)|0);
 $114 = (getTempRet0() | 0);
 $115 = (($99) + ($87))|0;
 $116 = (($87) - ($99))|0;
 $117 = ($116|0)<(0);
 $118 = $117 << 31 >> 31;
 $119 = (___muldi3(($116|0),($118|0),207503414,0)|0);
 $120 = (getTempRet0() | 0);
 $121 = (_bitshift64Lshr(($119|0),($120|0),28)|0);
 $122 = (getTempRet0() | 0);
 $123 = ((($0)) + 16|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($0)) + 108|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (($126) + ($124))|0;
 $128 = (($124) - ($126))|0;
 $129 = ($128|0)<(0);
 $130 = $129 << 31 >> 31;
 $131 = (___muldi3(($128|0),($130|0),242662778,0)|0);
 $132 = (getTempRet0() | 0);
 $133 = (_bitshift64Lshr(($131|0),($132|0),28)|0);
 $134 = (getTempRet0() | 0);
 $135 = ((($0)) + 44|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ((($0)) + 80|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = (($138) + ($136))|0;
 $140 = (($136) - ($138))|0;
 $141 = ($140|0)<(0);
 $142 = $141 << 31 >> 31;
 $143 = (___muldi3(($140|0),($142|0),114770946,0)|0);
 $144 = (getTempRet0() | 0);
 $145 = (_bitshift64Lshr(($143|0),($144|0),28)|0);
 $146 = (getTempRet0() | 0);
 $147 = (($145) + ($133))|0;
 $148 = (($133) - ($145))|0;
 $149 = ($148|0)<(0);
 $150 = $149 << 31 >> 31;
 $151 = (___muldi3(($148|0),($150|0),170293651,0)|0);
 $152 = (getTempRet0() | 0);
 $153 = (_bitshift64Lshr(($151|0),($152|0),28)|0);
 $154 = (getTempRet0() | 0);
 $155 = (($139) + ($127))|0;
 $156 = (($127) - ($139))|0;
 $157 = ($156|0)<(0);
 $158 = $157 << 31 >> 31;
 $159 = (___muldi3(($156|0),($158|0),170293651,0)|0);
 $160 = (getTempRet0() | 0);
 $161 = (_bitshift64Lshr(($159|0),($160|0),28)|0);
 $162 = (getTempRet0() | 0);
 $163 = ((($0)) + 4|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = ((($0)) + 120|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = (($166) + ($164))|0;
 $168 = (($164) - ($166))|0;
 $169 = ($168|0)<(0);
 $170 = $169 << 31 >> 31;
 $171 = (___muldi3(($168|0),($170|0),265530048,0)|0);
 $172 = (getTempRet0() | 0);
 $173 = (_bitshift64Lshr(($171|0),($172|0),28)|0);
 $174 = (getTempRet0() | 0);
 $175 = ((($0)) + 56|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = ((($0)) + 68|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = (($178) + ($176))|0;
 $180 = (($176) - ($178))|0;
 $181 = ($180|0)<(0);
 $182 = $181 << 31 >> 31;
 $183 = (___muldi3(($180|0),($182|0),39387662,0)|0);
 $184 = (getTempRet0() | 0);
 $185 = (_bitshift64Ashr(($183|0),($184|0),28)|0);
 $186 = (getTempRet0() | 0);
 $187 = (($185) + ($173))|0;
 $188 = (($173) - ($185))|0;
 $189 = ($188|0)<(0);
 $190 = $189 << 31 >> 31;
 $191 = (___muldi3(($188|0),($190|0),256876715,0)|0);
 $192 = (getTempRet0() | 0);
 $193 = (_bitshift64Lshr(($191|0),($192|0),28)|0);
 $194 = (getTempRet0() | 0);
 $195 = (($179) + ($167))|0;
 $196 = (($167) - ($179))|0;
 $197 = ($196|0)<(0);
 $198 = $197 << 31 >> 31;
 $199 = (___muldi3(($196|0),($198|0),256876715,0)|0);
 $200 = (getTempRet0() | 0);
 $201 = (_bitshift64Lshr(($199|0),($200|0),28)|0);
 $202 = (getTempRet0() | 0);
 $203 = ((($0)) + 24|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = ((($0)) + 100|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = (($206) + ($204))|0;
 $208 = (($204) - ($206))|0;
 $209 = ($208|0)<(0);
 $210 = $209 << 31 >> 31;
 $211 = (___muldi3(($208|0),($210|0),215609380,0)|0);
 $212 = (getTempRet0() | 0);
 $213 = (_bitshift64Lshr(($211|0),($212|0),28)|0);
 $214 = (getTempRet0() | 0);
 $215 = ((($0)) + 36|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = ((($0)) + 88|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = (($218) + ($216))|0;
 $220 = (($216) - ($218))|0;
 $221 = ($220|0)<(0);
 $222 = $221 << 31 >> 31;
 $223 = (___muldi3(($220|0),($222|0),159906814,0)|0);
 $224 = (getTempRet0() | 0);
 $225 = (_bitshift64Lshr(($223|0),($224|0),28)|0);
 $226 = (getTempRet0() | 0);
 $227 = (($225) + ($213))|0;
 $228 = (($213) - ($225))|0;
 $229 = ($228|0)<(0);
 $230 = $229 << 31 >> 31;
 $231 = (___muldi3(($228|0),($230|0),77922700,0)|0);
 $232 = (getTempRet0() | 0);
 $233 = (_bitshift64Lshr(($231|0),($232|0),28)|0);
 $234 = (getTempRet0() | 0);
 $235 = (($219) + ($207))|0;
 $236 = (($207) - ($219))|0;
 $237 = ($236|0)<(0);
 $238 = $237 << 31 >> 31;
 $239 = (___muldi3(($236|0),($238|0),77922700,0)|0);
 $240 = (getTempRet0() | 0);
 $241 = (_bitshift64Lshr(($239|0),($240|0),28)|0);
 $242 = (getTempRet0() | 0);
 $243 = ((($0)) + 8|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = ((($0)) + 116|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = (($246) + ($244))|0;
 $248 = (($244) - ($246))|0;
 $249 = ($248|0)<(0);
 $250 = $249 << 31 >> 31;
 $251 = (___muldi3(($248|0),($250|0),260390782,0)|0);
 $252 = (getTempRet0() | 0);
 $253 = (_bitshift64Lshr(($251|0),($252|0),28)|0);
 $254 = (getTempRet0() | 0);
 $255 = ((($0)) + 52|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = ((($0)) + 72|0);
 $258 = HEAP32[$257>>2]|0;
 $259 = (($258) + ($256))|0;
 $260 = (($256) - ($258))|0;
 $261 = ($260|0)<(0);
 $262 = $261 << 31 >> 31;
 $263 = (___muldi3(($260|0),($262|0),65224495,0)|0);
 $264 = (getTempRet0() | 0);
 $265 = (_bitshift64Ashr(($263|0),($264|0),28)|0);
 $266 = (getTempRet0() | 0);
 $267 = (($265) + ($253))|0;
 $268 = (($253) - ($265))|0;
 $269 = ($268|0)<(0);
 $270 = $269 << 31 >> 31;
 $271 = (___muldi3(($268|0),($270|0),236738937,0)|0);
 $272 = (getTempRet0() | 0);
 $273 = (_bitshift64Lshr(($271|0),($272|0),28)|0);
 $274 = (getTempRet0() | 0);
 $275 = (($259) + ($247))|0;
 $276 = (($247) - ($259))|0;
 $277 = ($276|0)<(0);
 $278 = $277 << 31 >> 31;
 $279 = (___muldi3(($276|0),($278|0),236738937,0)|0);
 $280 = (getTempRet0() | 0);
 $281 = (_bitshift64Lshr(($279|0),($280|0),28)|0);
 $282 = (getTempRet0() | 0);
 $283 = ((($0)) + 20|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = ((($0)) + 104|0);
 $286 = HEAP32[$285>>2]|0;
 $287 = (($286) + ($284))|0;
 $288 = (($284) - ($286))|0;
 $289 = ($288|0)<(0);
 $290 = $289 << 31 >> 31;
 $291 = (___muldi3(($288|0),($290|0),230244771,0)|0);
 $292 = (getTempRet0() | 0);
 $293 = (_bitshift64Lshr(($291|0),($292|0),28)|0);
 $294 = (getTempRet0() | 0);
 $295 = ((($0)) + 40|0);
 $296 = HEAP32[$295>>2]|0;
 $297 = ((($0)) + 84|0);
 $298 = HEAP32[$297>>2]|0;
 $299 = (($298) + ($296))|0;
 $300 = (($296) - ($298))|0;
 $301 = ($300|0)<(0);
 $302 = $301 << 31 >> 31;
 $303 = (___muldi3(($300|0),($302|0),138003405,0)|0);
 $304 = (getTempRet0() | 0);
 $305 = (_bitshift64Lshr(($303|0),($304|0),28)|0);
 $306 = (getTempRet0() | 0);
 $307 = (($305) + ($293))|0;
 $308 = (($293) - ($305))|0;
 $309 = ($308|0)<(0);
 $310 = $309 << 31 >> 31;
 $311 = (___muldi3(($308|0),($310|0),126539598,0)|0);
 $312 = (getTempRet0() | 0);
 $313 = (_bitshift64Lshr(($311|0),($312|0),28)|0);
 $314 = (getTempRet0() | 0);
 $315 = (($299) + ($287))|0;
 $316 = (($287) - ($299))|0;
 $317 = ($316|0)<(0);
 $318 = $317 << 31 >> 31;
 $319 = (___muldi3(($316|0),($318|0),126539598,0)|0);
 $320 = (getTempRet0() | 0);
 $321 = (_bitshift64Lshr(($319|0),($320|0),28)|0);
 $322 = (getTempRet0() | 0);
 $323 = (($75) + ($35))|0;
 $324 = (($35) - ($75))|0;
 $325 = ($324|0)<(0);
 $326 = $325 << 31 >> 31;
 $327 = (___muldi3(($324|0),($326|0),263277544,0)|0);
 $328 = (getTempRet0() | 0);
 $329 = (_bitshift64Lshr(($327|0),($328|0),28)|0);
 $330 = (getTempRet0() | 0);
 $331 = (($155) + ($115))|0;
 $332 = (($115) - ($155))|0;
 $333 = ($332|0)<(0);
 $334 = $333 << 31 >> 31;
 $335 = (___muldi3(($332|0),($334|0),52369160,0)|0);
 $336 = (getTempRet0() | 0);
 $337 = (_bitshift64Ashr(($335|0),($336|0),28)|0);
 $338 = (getTempRet0() | 0);
 $339 = (($235) + ($195))|0;
 $340 = (($195) - ($235))|0;
 $341 = ($340|0)<(0);
 $342 = $341 << 31 >> 31;
 $343 = (___muldi3(($340|0),($342|0),223195925,0)|0);
 $344 = (getTempRet0() | 0);
 $345 = (_bitshift64Lshr(($343|0),($344|0),28)|0);
 $346 = (getTempRet0() | 0);
 $347 = (($315) + ($275))|0;
 $348 = (($275) - ($315))|0;
 $349 = ($348|0)<(0);
 $350 = $349 << 31 >> 31;
 $351 = (___muldi3(($348|0),($350|0),149134749,0)|0);
 $352 = (getTempRet0() | 0);
 $353 = (_bitshift64Lshr(($351|0),($352|0),28)|0);
 $354 = (getTempRet0() | 0);
 $355 = (($67) + ($27))|0;
 $356 = (($27) - ($67))|0;
 $357 = ($356|0)<(0);
 $358 = $357 << 31 >> 31;
 $359 = (___muldi3(($356|0),($358|0),263277544,0)|0);
 $360 = (getTempRet0() | 0);
 $361 = (_bitshift64Lshr(($359|0),($360|0),28)|0);
 $362 = (getTempRet0() | 0);
 $363 = (($147) + ($107))|0;
 $364 = (($107) - ($147))|0;
 $365 = ($364|0)<(0);
 $366 = $365 << 31 >> 31;
 $367 = (___muldi3(($364|0),($366|0),52369160,0)|0);
 $368 = (getTempRet0() | 0);
 $369 = (_bitshift64Ashr(($367|0),($368|0),28)|0);
 $370 = (getTempRet0() | 0);
 $371 = (($227) + ($187))|0;
 $372 = (($187) - ($227))|0;
 $373 = ($372|0)<(0);
 $374 = $373 << 31 >> 31;
 $375 = (___muldi3(($372|0),($374|0),223195925,0)|0);
 $376 = (getTempRet0() | 0);
 $377 = (_bitshift64Lshr(($375|0),($376|0),28)|0);
 $378 = (getTempRet0() | 0);
 $379 = (($307) + ($267))|0;
 $380 = (($267) - ($307))|0;
 $381 = ($380|0)<(0);
 $382 = $381 << 31 >> 31;
 $383 = (___muldi3(($380|0),($382|0),149134749,0)|0);
 $384 = (getTempRet0() | 0);
 $385 = (_bitshift64Lshr(($383|0),($384|0),28)|0);
 $386 = (getTempRet0() | 0);
 $387 = (($81) + ($41))|0;
 $388 = (($41) - ($81))|0;
 $389 = ($388|0)<(0);
 $390 = $389 << 31 >> 31;
 $391 = (___muldi3(($388|0),($390|0),263277544,0)|0);
 $392 = (getTempRet0() | 0);
 $393 = (_bitshift64Lshr(($391|0),($392|0),28)|0);
 $394 = (getTempRet0() | 0);
 $395 = (($161) + ($121))|0;
 $396 = (($121) - ($161))|0;
 $397 = ($396|0)<(0);
 $398 = $397 << 31 >> 31;
 $399 = (___muldi3(($396|0),($398|0),52369160,0)|0);
 $400 = (getTempRet0() | 0);
 $401 = (_bitshift64Ashr(($399|0),($400|0),28)|0);
 $402 = (getTempRet0() | 0);
 $403 = (($241) + ($201))|0;
 $404 = (($201) - ($241))|0;
 $405 = ($404|0)<(0);
 $406 = $405 << 31 >> 31;
 $407 = (___muldi3(($404|0),($406|0),223195925,0)|0);
 $408 = (getTempRet0() | 0);
 $409 = (_bitshift64Lshr(($407|0),($408|0),28)|0);
 $410 = (getTempRet0() | 0);
 $411 = (($321) + ($281))|0;
 $412 = (($281) - ($321))|0;
 $413 = ($412|0)<(0);
 $414 = $413 << 31 >> 31;
 $415 = (___muldi3(($412|0),($414|0),149134749,0)|0);
 $416 = (getTempRet0() | 0);
 $417 = (_bitshift64Lshr(($415|0),($416|0),28)|0);
 $418 = (getTempRet0() | 0);
 $419 = (($73) + ($33))|0;
 $420 = (($33) - ($73))|0;
 $421 = ($420|0)<(0);
 $422 = $421 << 31 >> 31;
 $423 = (___muldi3(($420|0),($422|0),263277544,0)|0);
 $424 = (getTempRet0() | 0);
 $425 = (_bitshift64Lshr(($423|0),($424|0),28)|0);
 $426 = (getTempRet0() | 0);
 $427 = (($153) + ($113))|0;
 $428 = (($113) - ($153))|0;
 $429 = ($428|0)<(0);
 $430 = $429 << 31 >> 31;
 $431 = (___muldi3(($428|0),($430|0),52369160,0)|0);
 $432 = (getTempRet0() | 0);
 $433 = (_bitshift64Ashr(($431|0),($432|0),28)|0);
 $434 = (getTempRet0() | 0);
 $435 = (($233) + ($193))|0;
 $436 = (($193) - ($233))|0;
 $437 = ($436|0)<(0);
 $438 = $437 << 31 >> 31;
 $439 = (___muldi3(($436|0),($438|0),223195925,0)|0);
 $440 = (getTempRet0() | 0);
 $441 = (_bitshift64Lshr(($439|0),($440|0),28)|0);
 $442 = (getTempRet0() | 0);
 $443 = (($313) + ($273))|0;
 $444 = (($273) - ($313))|0;
 $445 = ($444|0)<(0);
 $446 = $445 << 31 >> 31;
 $447 = (___muldi3(($444|0),($446|0),149134749,0)|0);
 $448 = (getTempRet0() | 0);
 $449 = (_bitshift64Lshr(($447|0),($448|0),28)|0);
 $450 = (getTempRet0() | 0);
 $451 = (($331) + ($323))|0;
 $452 = (($347) + ($339))|0;
 $453 = (($452) + ($451))|0;
 $454 = (((($3)) + 480|0) + ($1<<2)|0);
 HEAP32[$454>>2] = $453;
 $455 = (($451) - ($452))|0;
 $456 = ($455|0)<(0);
 $457 = $456 << 31 >> 31;
 $458 = (___muldi3(($455|0),($457|0),189812531,0)|0);
 $459 = (getTempRet0() | 0);
 $460 = (_bitshift64Lshr(($458|0),($459|0),28)|0);
 $461 = (getTempRet0() | 0);
 $462 = (($2) + ($1<<2)|0);
 HEAP32[$462>>2] = $460;
 $463 = (($363) + ($355))|0;
 $464 = (($379) + ($371))|0;
 $465 = (($464) + ($463))|0;
 $466 = (((($3)) + 448|0) + ($1<<2)|0);
 HEAP32[$466>>2] = $465;
 $467 = (($395) + ($387))|0;
 $468 = (($411) + ($403))|0;
 $469 = (($468) + ($467))|0;
 $470 = (((($3)) + 416|0) + ($1<<2)|0);
 HEAP32[$470>>2] = $469;
 $471 = (($427) + ($419))|0;
 $472 = (($443) + ($435))|0;
 $473 = (($472) + ($471))|0;
 $474 = $473 << 1;
 $475 = (($474) - ($465))|0;
 $476 = (((($3)) + 384|0) + ($1<<2)|0);
 HEAP32[$476>>2] = $475;
 $477 = (($337) + ($329))|0;
 $478 = (($353) + ($345))|0;
 $479 = (($478) + ($477))|0;
 $480 = (((($3)) + 352|0) + ($1<<2)|0);
 HEAP32[$480>>2] = $479;
 $481 = (($369) + ($361))|0;
 $482 = (($385) + ($377))|0;
 $483 = (($482) + ($481))|0;
 $484 = $483 << 1;
 $485 = (($484) - ($475))|0;
 $486 = (((($3)) + 320|0) + ($1<<2)|0);
 HEAP32[$486>>2] = $485;
 $487 = (($401) + ($393))|0;
 $488 = (($417) + ($409))|0;
 $489 = (($488) + ($487))|0;
 $490 = $489 << 1;
 $491 = (($490) - ($469))|0;
 $492 = (((($3)) + 288|0) + ($1<<2)|0);
 HEAP32[$492>>2] = $491;
 $493 = (($433) + ($425))|0;
 $494 = (($449) + ($441))|0;
 $495 = (($494) + ($493))|0;
 $496 = $495 << 1;
 $497 = (($496) - ($473))|0;
 $498 = $497 << 1;
 $499 = (($498) - ($485))|0;
 $500 = (((($3)) + 256|0) + ($1<<2)|0);
 HEAP32[$500>>2] = $499;
 $501 = (($323) - ($331))|0;
 $502 = ($501|0)<(0);
 $503 = $502 << 31 >> 31;
 $504 = (___muldi3(($501|0),($503|0),248002024,0)|0);
 $505 = (getTempRet0() | 0);
 $506 = (_bitshift64Lshr(($504|0),($505|0),28)|0);
 $507 = (getTempRet0() | 0);
 $508 = (($339) - ($347))|0;
 $509 = ($508|0)<(0);
 $510 = $509 << 31 >> 31;
 $511 = (___muldi3(($508|0),($510|0),102725802,0)|0);
 $512 = (getTempRet0() | 0);
 $513 = (_bitshift64Lshr(($511|0),($512|0),28)|0);
 $514 = (getTempRet0() | 0);
 $515 = (($513) + ($506))|0;
 $516 = (((($3)) + 224|0) + ($1<<2)|0);
 HEAP32[$516>>2] = $515;
 $517 = (($506) - ($513))|0;
 $518 = ($517|0)<(0);
 $519 = $518 << 31 >> 31;
 $520 = (___muldi3(($517|0),($519|0),189812531,0)|0);
 $521 = (getTempRet0() | 0);
 $522 = (_bitshift64Lshr(($520|0),($521|0),27)|0);
 $523 = (getTempRet0() | 0);
 $524 = $522 & -2;
 $525 = (($524) - ($515))|0;
 $526 = (((($2)) + 256|0) + ($1<<2)|0);
 HEAP32[$526>>2] = $525;
 $527 = (($355) - ($363))|0;
 $528 = ($527|0)<(0);
 $529 = $528 << 31 >> 31;
 $530 = (___muldi3(($527|0),($529|0),248002024,0)|0);
 $531 = (getTempRet0() | 0);
 $532 = (_bitshift64Lshr(($530|0),($531|0),28)|0);
 $533 = (getTempRet0() | 0);
 $534 = (($371) - ($379))|0;
 $535 = ($534|0)<(0);
 $536 = $535 << 31 >> 31;
 $537 = (___muldi3(($534|0),($536|0),102725802,0)|0);
 $538 = (getTempRet0() | 0);
 $539 = (_bitshift64Lshr(($537|0),($538|0),28)|0);
 $540 = (getTempRet0() | 0);
 $541 = (($539) + ($532))|0;
 $542 = $541 << 1;
 $543 = (($542) - ($499))|0;
 $544 = (((($3)) + 192|0) + ($1<<2)|0);
 HEAP32[$544>>2] = $543;
 $545 = (($387) - ($395))|0;
 $546 = ($545|0)<(0);
 $547 = $546 << 31 >> 31;
 $548 = (___muldi3(($545|0),($547|0),248002024,0)|0);
 $549 = (getTempRet0() | 0);
 $550 = (_bitshift64Lshr(($548|0),($549|0),28)|0);
 $551 = (getTempRet0() | 0);
 $552 = (($403) - ($411))|0;
 $553 = ($552|0)<(0);
 $554 = $553 << 31 >> 31;
 $555 = (___muldi3(($552|0),($554|0),102725802,0)|0);
 $556 = (getTempRet0() | 0);
 $557 = (_bitshift64Lshr(($555|0),($556|0),28)|0);
 $558 = (getTempRet0() | 0);
 $559 = (($557) + ($550))|0;
 $560 = $559 << 1;
 $561 = (($560) - ($491))|0;
 $562 = (((($3)) + 160|0) + ($1<<2)|0);
 HEAP32[$562>>2] = $561;
 $563 = (($419) - ($427))|0;
 $564 = ($563|0)<(0);
 $565 = $564 << 31 >> 31;
 $566 = (___muldi3(($563|0),($565|0),248002024,0)|0);
 $567 = (getTempRet0() | 0);
 $568 = (_bitshift64Lshr(($566|0),($567|0),28)|0);
 $569 = (getTempRet0() | 0);
 $570 = (($435) - ($443))|0;
 $571 = ($570|0)<(0);
 $572 = $571 << 31 >> 31;
 $573 = (___muldi3(($570|0),($572|0),102725802,0)|0);
 $574 = (getTempRet0() | 0);
 $575 = (_bitshift64Lshr(($573|0),($574|0),28)|0);
 $576 = (getTempRet0() | 0);
 $577 = (($575) + ($568))|0;
 $578 = $577 << 1;
 $579 = (($578) - ($497))|0;
 $580 = $579 << 1;
 $581 = (($580) - ($543))|0;
 $582 = (((($3)) + 128|0) + ($1<<2)|0);
 HEAP32[$582>>2] = $581;
 $583 = (($329) - ($337))|0;
 $584 = ($583|0)<(0);
 $585 = $584 << 31 >> 31;
 $586 = (___muldi3(($583|0),($585|0),248002024,0)|0);
 $587 = (getTempRet0() | 0);
 $588 = (_bitshift64Lshr(($586|0),($587|0),28)|0);
 $589 = (getTempRet0() | 0);
 $590 = (($345) - ($353))|0;
 $591 = ($590|0)<(0);
 $592 = $591 << 31 >> 31;
 $593 = (___muldi3(($590|0),($592|0),102725802,0)|0);
 $594 = (getTempRet0() | 0);
 $595 = (_bitshift64Lshr(($593|0),($594|0),28)|0);
 $596 = (getTempRet0() | 0);
 $597 = (($595) + ($588))|0;
 $598 = $597 << 1;
 $599 = (($598) - ($479))|0;
 $600 = (((($3)) + 96|0) + ($1<<2)|0);
 HEAP32[$600>>2] = $599;
 $601 = (($477) - ($478))|0;
 $602 = ($601|0)<(0);
 $603 = $602 << 31 >> 31;
 $604 = (___muldi3(($601|0),($603|0),189812531,0)|0);
 $605 = (getTempRet0() | 0);
 $606 = (_bitshift64Lshr(($604|0),($605|0),27)|0);
 $607 = (getTempRet0() | 0);
 $608 = $606 & -2;
 $609 = (($608) - ($599))|0;
 $610 = (((($2)) + 128|0) + ($1<<2)|0);
 HEAP32[$610>>2] = $609;
 $611 = (($588) - ($595))|0;
 $612 = ($611|0)<(0);
 $613 = $612 << 31 >> 31;
 $614 = (___muldi3(($611|0),($613|0),189812531,0)|0);
 $615 = (getTempRet0() | 0);
 $616 = (_bitshift64Lshr(($614|0),($615|0),27)|0);
 $617 = (getTempRet0() | 0);
 $618 = $616 & -2;
 $619 = (($618) - ($597))|0;
 $620 = $619 << 1;
 $621 = (($620) - ($609))|0;
 $622 = (((($2)) + 384|0) + ($1<<2)|0);
 HEAP32[$622>>2] = $621;
 $623 = (($361) - ($369))|0;
 $624 = ($623|0)<(0);
 $625 = $624 << 31 >> 31;
 $626 = (___muldi3(($623|0),($625|0),248002024,0)|0);
 $627 = (getTempRet0() | 0);
 $628 = (_bitshift64Lshr(($626|0),($627|0),28)|0);
 $629 = (getTempRet0() | 0);
 $630 = (($377) - ($385))|0;
 $631 = ($630|0)<(0);
 $632 = $631 << 31 >> 31;
 $633 = (___muldi3(($630|0),($632|0),102725802,0)|0);
 $634 = (getTempRet0() | 0);
 $635 = (_bitshift64Lshr(($633|0),($634|0),28)|0);
 $636 = (getTempRet0() | 0);
 $637 = (($635) + ($628))|0;
 $638 = $637 << 1;
 $639 = (($638) - ($483))|0;
 $640 = $639 << 1;
 $641 = (($640) - ($581))|0;
 $642 = (((($3)) + 64|0) + ($1<<2)|0);
 HEAP32[$642>>2] = $641;
 $643 = (($481) - ($482))|0;
 $644 = ($643|0)<(0);
 $645 = $644 << 31 >> 31;
 $646 = (___muldi3(($643|0),($645|0),189812531,0)|0);
 $647 = (getTempRet0() | 0);
 $648 = (_bitshift64Lshr(($646|0),($647|0),27)|0);
 $649 = (getTempRet0() | 0);
 $650 = $648 & -2;
 $651 = (($650) - ($639))|0;
 $652 = (($393) - ($401))|0;
 $653 = ($652|0)<(0);
 $654 = $653 << 31 >> 31;
 $655 = (___muldi3(($652|0),($654|0),248002024,0)|0);
 $656 = (getTempRet0() | 0);
 $657 = (_bitshift64Lshr(($655|0),($656|0),28)|0);
 $658 = (getTempRet0() | 0);
 $659 = (($409) - ($417))|0;
 $660 = ($659|0)<(0);
 $661 = $660 << 31 >> 31;
 $662 = (___muldi3(($659|0),($661|0),102725802,0)|0);
 $663 = (getTempRet0() | 0);
 $664 = (_bitshift64Lshr(($662|0),($663|0),28)|0);
 $665 = (getTempRet0() | 0);
 $666 = (($664) + ($657))|0;
 $667 = $666 << 1;
 $668 = (($667) - ($489))|0;
 $669 = $668 << 1;
 $670 = (($669) - ($561))|0;
 $671 = (((($3)) + 32|0) + ($1<<2)|0);
 HEAP32[$671>>2] = $670;
 $672 = (($467) - ($468))|0;
 $673 = ($672|0)<(0);
 $674 = $673 << 31 >> 31;
 $675 = (___muldi3(($672|0),($674|0),189812531,0)|0);
 $676 = (getTempRet0() | 0);
 $677 = (_bitshift64Lshr(($675|0),($676|0),27)|0);
 $678 = (getTempRet0() | 0);
 $679 = $677 & -2;
 $680 = (($679) - ($670))|0;
 $681 = (((($2)) + 64|0) + ($1<<2)|0);
 HEAP32[$681>>2] = $680;
 $682 = (($487) - ($488))|0;
 $683 = ($682|0)<(0);
 $684 = $683 << 31 >> 31;
 $685 = (___muldi3(($682|0),($684|0),189812531,0)|0);
 $686 = (getTempRet0() | 0);
 $687 = (_bitshift64Lshr(($685|0),($686|0),27)|0);
 $688 = (getTempRet0() | 0);
 $689 = $687 & -2;
 $690 = (($689) - ($668))|0;
 $691 = $690 << 1;
 $692 = (($691) - ($680))|0;
 $693 = (((($2)) + 192|0) + ($1<<2)|0);
 HEAP32[$693>>2] = $692;
 $694 = (($550) - ($557))|0;
 $695 = ($694|0)<(0);
 $696 = $695 << 31 >> 31;
 $697 = (___muldi3(($694|0),($696|0),189812531,0)|0);
 $698 = (getTempRet0() | 0);
 $699 = (_bitshift64Lshr(($697|0),($698|0),27)|0);
 $700 = (getTempRet0() | 0);
 $701 = $699 & -2;
 $702 = (($701) - ($559))|0;
 $703 = $702 << 1;
 $704 = (($703) - ($692))|0;
 $705 = (((($2)) + 320|0) + ($1<<2)|0);
 HEAP32[$705>>2] = $704;
 $706 = (($657) - ($664))|0;
 $707 = ($706|0)<(0);
 $708 = $707 << 31 >> 31;
 $709 = (___muldi3(($706|0),($708|0),189812531,0)|0);
 $710 = (getTempRet0() | 0);
 $711 = (_bitshift64Lshr(($709|0),($710|0),27)|0);
 $712 = (getTempRet0() | 0);
 $713 = $711 & -2;
 $714 = (($713) - ($666))|0;
 $715 = $714 << 1;
 $716 = (($715) - ($690))|0;
 $717 = $716 << 1;
 $718 = (($717) - ($704))|0;
 $719 = (((($2)) + 448|0) + ($1<<2)|0);
 HEAP32[$719>>2] = $718;
 $720 = (($425) - ($433))|0;
 $721 = ($720|0)<(0);
 $722 = $721 << 31 >> 31;
 $723 = (___muldi3(($720|0),($722|0),248002024,0)|0);
 $724 = (getTempRet0() | 0);
 $725 = (_bitshift64Lshr(($723|0),($724|0),28)|0);
 $726 = (getTempRet0() | 0);
 $727 = (($441) - ($449))|0;
 $728 = ($727|0)<(0);
 $729 = $728 << 31 >> 31;
 $730 = (___muldi3(($727|0),($729|0),102725802,0)|0);
 $731 = (getTempRet0() | 0);
 $732 = (_bitshift64Lshr(($730|0),($731|0),28)|0);
 $733 = (getTempRet0() | 0);
 $734 = (($732) + ($725))|0;
 $735 = $734 << 1;
 $736 = (($735) - ($495))|0;
 $737 = $736 << 1;
 $738 = (($737) - ($579))|0;
 $739 = (($471) - ($472))|0;
 $740 = ($739|0)<(0);
 $741 = $740 << 31 >> 31;
 $742 = (___muldi3(($739|0),($741|0),189812531,0)|0);
 $743 = (getTempRet0() | 0);
 $744 = (_bitshift64Lshr(($742|0),($743|0),27)|0);
 $745 = (getTempRet0() | 0);
 $746 = $744 & -2;
 $747 = (($746) - ($738))|0;
 $748 = $738 << 1;
 $749 = (($748) - ($641))|0;
 $750 = (($3) + ($1<<2)|0);
 HEAP32[$750>>2] = $749;
 $751 = (($463) - ($464))|0;
 $752 = ($751|0)<(0);
 $753 = $752 << 31 >> 31;
 $754 = (___muldi3(($751|0),($753|0),189812531,0)|0);
 $755 = (getTempRet0() | 0);
 $756 = (_bitshift64Lshr(($754|0),($755|0),27)|0);
 $757 = (getTempRet0() | 0);
 $758 = $756 & -2;
 $759 = (($758) - ($749))|0;
 $760 = (((($2)) + 32|0) + ($1<<2)|0);
 HEAP32[$760>>2] = $759;
 $761 = $747 << 1;
 $762 = (($761) - ($759))|0;
 $763 = (((($2)) + 96|0) + ($1<<2)|0);
 HEAP32[$763>>2] = $762;
 $764 = $651 << 1;
 $765 = (($764) - ($762))|0;
 $766 = (((($2)) + 160|0) + ($1<<2)|0);
 HEAP32[$766>>2] = $765;
 $767 = (($493) - ($494))|0;
 $768 = ($767|0)<(0);
 $769 = $768 << 31 >> 31;
 $770 = (___muldi3(($767|0),($769|0),189812531,0)|0);
 $771 = (getTempRet0() | 0);
 $772 = (_bitshift64Lshr(($770|0),($771|0),27)|0);
 $773 = (getTempRet0() | 0);
 $774 = $772 & -2;
 $775 = (($774) - ($736))|0;
 $776 = $775 << 1;
 $777 = (($776) - ($747))|0;
 $778 = $777 << 1;
 $779 = (($778) - ($765))|0;
 $780 = (((($2)) + 224|0) + ($1<<2)|0);
 HEAP32[$780>>2] = $779;
 $781 = (($532) - ($539))|0;
 $782 = ($781|0)<(0);
 $783 = $782 << 31 >> 31;
 $784 = (___muldi3(($781|0),($783|0),189812531,0)|0);
 $785 = (getTempRet0() | 0);
 $786 = (_bitshift64Lshr(($784|0),($785|0),27)|0);
 $787 = (getTempRet0() | 0);
 $788 = $786 & -2;
 $789 = (($788) - ($541))|0;
 $790 = $789 << 1;
 $791 = (($790) - ($779))|0;
 $792 = (((($2)) + 288|0) + ($1<<2)|0);
 HEAP32[$792>>2] = $791;
 $793 = (($568) - ($575))|0;
 $794 = ($793|0)<(0);
 $795 = $794 << 31 >> 31;
 $796 = (___muldi3(($793|0),($795|0),189812531,0)|0);
 $797 = (getTempRet0() | 0);
 $798 = (_bitshift64Lshr(($796|0),($797|0),27)|0);
 $799 = (getTempRet0() | 0);
 $800 = $798 & -2;
 $801 = (($800) - ($577))|0;
 $802 = $801 << 1;
 $803 = (($802) - ($777))|0;
 $804 = $803 << 1;
 $805 = (($804) - ($791))|0;
 $806 = (((($2)) + 352|0) + ($1<<2)|0);
 HEAP32[$806>>2] = $805;
 $807 = (($628) - ($635))|0;
 $808 = ($807|0)<(0);
 $809 = $808 << 31 >> 31;
 $810 = (___muldi3(($807|0),($809|0),189812531,0)|0);
 $811 = (getTempRet0() | 0);
 $812 = (_bitshift64Lshr(($810|0),($811|0),27)|0);
 $813 = (getTempRet0() | 0);
 $814 = $812 & -2;
 $815 = (($814) - ($637))|0;
 $816 = $815 << 1;
 $817 = (($816) - ($651))|0;
 $818 = $817 << 1;
 $819 = (($818) - ($805))|0;
 $820 = (((($2)) + 416|0) + ($1<<2)|0);
 HEAP32[$820>>2] = $819;
 $821 = (($725) - ($732))|0;
 $822 = ($821|0)<(0);
 $823 = $822 << 31 >> 31;
 $824 = (___muldi3(($821|0),($823|0),189812531,0)|0);
 $825 = (getTempRet0() | 0);
 $826 = (_bitshift64Lshr(($824|0),($825|0),27)|0);
 $827 = (getTempRet0() | 0);
 $828 = $826 & -2;
 $829 = (($828) - ($734))|0;
 $830 = $829 << 1;
 $831 = (($830) - ($775))|0;
 $832 = $831 << 1;
 $833 = (($832) - ($803))|0;
 $834 = $833 << 1;
 $835 = (($834) - ($819))|0;
 $836 = (((($2)) + 480|0) + ($1<<2)|0);
 HEAP32[$836>>2] = $835;
 return;
}
function _mad_layer_I($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0106135 = 0, $$0107125 = 0, $$0107125$us = 0, $$0108134 = 0, $$0113 = 0, $$1109128 = 0, $$1130 = 0, $$2110116$us = 0, $$2129 = 0, $$3111118 = 0, $$3111118$us = 0, $$3117$us = 0, $$4112119 = 0, $$4112119$us = 0, $$4120 = 0, $$4120$us = 0, $$byval_copy = 0, $$pre$phi148Z2D = 0, $$pre147 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond142 = 0, $exitcond143 = 0, $exitcond144 = 0, $exitcond145 = 0, $exitcond146 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 128|0;
 $2 = sp + 64|0;
 $3 = sp;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $7 = $6 ? 1 : 2;
 $8 = ($5|0)==(2);
 $9 = ((($1)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 if ($8) {
  $11 = $10 | 256;
  HEAP32[$9>>2] = $11;
  $12 = ((($1)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 << 2;
  $15 = (($14) + 4)|0;
  $$0113 = $15;$17 = $11;
 } else {
  $$0113 = 32;$17 = $10;
 }
 $16 = $17 & 16;
 $18 = ($16|0)==(0);
 if (!($18)) {
  $19 = ((($0)) + 28|0);
  $20 = Math_imul($$0113, $7)|0;
  $21 = (32 - ($$0113))|0;
  $22 = (($21) + ($20))|0;
  $23 = $22 << 2;
  $24 = ((($1)) + 24|0);
  $25 = HEAP16[$24>>1]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$19+4>>2]|0;
  $26 = (_mad_bit_crc($$byval_copy,$23,$25)|0);
  HEAP16[$24>>1] = $26;
  $27 = ((($1)) + 26|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = ($26<<16>>16)==($28<<16>>16);
  if (!($29)) {
   $30 = ((($1)) + 44|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 & 1;
   $33 = ($32|0)==(0);
   if ($33) {
    $34 = ((($0)) + 60|0);
    HEAP32[$34>>2] = 513;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $35 = ($$0113|0)==(0);
 do {
  if ($35) {
   label = 16;
  } else {
   $36 = ((($0)) + 28|0);
   $$0106135 = 0;
   L12: while(1) {
    $$0108134 = 0;
    while(1) {
     $37 = (_mad_bit_read($36,4)|0);
     $38 = ($37|0)==(15);
     if ($38) {
      label = 11;
      break L12;
     }
     $40 = ($37|0)==(0);
     $41 = (($37) + 1)|0;
     $42 = $41&255;
     $43 = $40 ? 0 : $42;
     $44 = ((($2) + ($$0108134<<5)|0) + ($$0106135)|0);
     HEAP8[$44>>0] = $43;
     $45 = (($$0108134) + 1)|0;
     $46 = ($45>>>0)<($7>>>0);
     if ($46) {
      $$0108134 = $45;
     } else {
      break;
     }
    }
    $47 = (($$0106135) + 1)|0;
    $48 = ($47>>>0)<($$0113>>>0);
    if ($48) {
     $$0106135 = $47;
    } else {
     label = 14;
     break;
    }
   }
   if ((label|0) == 11) {
    $39 = ((($0)) + 60|0);
    HEAP32[$39>>2] = 529;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 14) {
    $49 = ($$0113>>>0)<(32);
    if ($49) {
     label = 16;
     break;
    }
    $$pre147 = ((($0)) + 28|0);
    $$pre$phi148Z2D = $$pre147;$209 = 0;
    break;
   }
  }
 } while(0);
 L23: do {
  if ((label|0) == 16) {
   $50 = ((($0)) + 28|0);
   $$1130 = $$0113;
   while(1) {
    $51 = (_mad_bit_read($50,4)|0);
    $52 = ($51|0)==(15);
    if ($52) {
     break;
    }
    $54 = ($51|0)==(0);
    $55 = (($51) + 1)|0;
    $56 = $55&255;
    $57 = $54 ? 0 : $56;
    $58 = (((($2)) + 32|0) + ($$1130)|0);
    HEAP8[$58>>0] = $57;
    $59 = (($2) + ($$1130)|0);
    HEAP8[$59>>0] = $57;
    $60 = (($$1130) + 1)|0;
    $61 = ($60>>>0)<(32);
    if ($61) {
     $$1130 = $60;
    } else {
     $$pre$phi148Z2D = $50;$209 = 1;
     break L23;
    }
   }
   $53 = ((($0)) + 60|0);
   HEAP32[$53>>2] = 529;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $$2129 = 0;
 while(1) {
  $$1109128 = 0;
  while(1) {
   $62 = ((($2) + ($$1109128<<5)|0) + ($$2129)|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = ($63<<24>>24)==(0);
   if (!($64)) {
    $65 = ((($3) + ($$1109128<<5)|0) + ($$2129)|0);
    $66 = (_mad_bit_read($$pre$phi148Z2D,6)|0);
    $67 = $66&255;
    HEAP8[$65>>0] = $67;
   }
   $68 = (($$1109128) + 1)|0;
   $69 = ($68>>>0)<($7>>>0);
   if ($69) {
    $$1109128 = $68;
   } else {
    break;
   }
  }
  $70 = (($$2129) + 1)|0;
  $exitcond146 = ($70|0)==(32);
  if ($exitcond146) {
   break;
  } else {
   $$2129 = $70;
  }
 }
 if ($35) {
  $$0107125 = 0;
  while(1) {
   if ($209) {
    $$4120 = 0;
    while(1) {
     $162 = (($2) + ($$4120)|0);
     $163 = HEAP8[$162>>0]|0;
     $164 = ($163<<24>>24)==(0);
     if ($164) {
      $$4112119 = 0;
      while(1) {
       $204 = (((((($1)) + 48|0) + (($$4112119*4608)|0)|0) + ($$0107125<<7)|0) + ($$4120<<2)|0);
       HEAP32[$204>>2] = 0;
       $205 = (($$4112119) + 1)|0;
       $206 = ($205>>>0)<($7>>>0);
       if ($206) {
        $$4112119 = $205;
       } else {
        break;
       }
      }
     } else {
      $165 = $163&255;
      $166 = (_mad_bit_read($$pre$phi148Z2D,$165)|0);
      $167 = (($165) + -1)|0;
      $168 = 1 << $167;
      $169 = $166 ^ $168;
      $170 = $169 & $168;
      $171 = (0 - ($170))|0;
      $172 = $169 | $171;
      $173 = (29 - ($165))|0;
      $174 = $172 << $173;
      $175 = 268435456 >>> $167;
      $176 = (($174) + ($175))|0;
      $177 = ($176|0)<(0);
      $178 = $177 << 31 >> 31;
      $179 = (($165) + -2)|0;
      $180 = (3008 + ($179<<2)|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ($181|0)<(0);
      $183 = $182 << 31 >> 31;
      $184 = (_bitshift64Shl(($181|0),($183|0),4)|0);
      $185 = (getTempRet0() | 0);
      $186 = (___muldi3(($184|0),($185|0),($176|0),($178|0))|0);
      $187 = (getTempRet0() | 0);
      $188 = (_bitshift64Ashr(($186|0),($187|0),32)|0);
      $189 = (getTempRet0() | 0);
      $$3111118 = 0;
      while(1) {
       $190 = ((($3) + ($$3111118<<5)|0) + ($$4120)|0);
       $191 = HEAP8[$190>>0]|0;
       $192 = $191&255;
       $193 = (3072 + ($192<<2)|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = ($194|0)<(0);
       $196 = $195 << 31 >> 31;
       $197 = (___muldi3(($188|0),($189|0),($194|0),($196|0))|0);
       $198 = (getTempRet0() | 0);
       $199 = (_bitshift64Lshr(($197|0),($198|0),28)|0);
       $200 = (getTempRet0() | 0);
       $201 = (((((($1)) + 48|0) + (($$3111118*4608)|0)|0) + ($$0107125<<7)|0) + ($$4120<<2)|0);
       HEAP32[$201>>2] = $199;
       $202 = (($$3111118) + 1)|0;
       $203 = ($202>>>0)<($7>>>0);
       if ($203) {
        $$3111118 = $202;
       } else {
        break;
       }
      }
     }
     $207 = (($$4120) + 1)|0;
     $exitcond144 = ($207|0)==(32);
     if ($exitcond144) {
      break;
     } else {
      $$4120 = $207;
     }
    }
   }
   $208 = (($$0107125) + 1)|0;
   $exitcond145 = ($208|0)==(12);
   if ($exitcond145) {
    $$0 = 0;
    break;
   } else {
    $$0107125 = $208;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 $$0107125$us = 0;
 while(1) {
  $$3117$us = 0;
  while(1) {
   $$2110116$us = 0;
   while(1) {
    $119 = ((($2) + ($$2110116$us<<5)|0) + ($$3117$us)|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = ($120<<24>>24)==(0);
    if ($121) {
     $159 = 0;
    } else {
     $122 = $120&255;
     $123 = (_mad_bit_read($$pre$phi148Z2D,$122)|0);
     $124 = (($122) + -1)|0;
     $125 = 1 << $124;
     $126 = $123 ^ $125;
     $127 = $126 & $125;
     $128 = (0 - ($127))|0;
     $129 = $126 | $128;
     $130 = (29 - ($122))|0;
     $131 = $129 << $130;
     $132 = 268435456 >>> $124;
     $133 = (($131) + ($132))|0;
     $134 = ($133|0)<(0);
     $135 = $134 << 31 >> 31;
     $136 = (($122) + -2)|0;
     $137 = (3008 + ($136<<2)|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)<(0);
     $140 = $139 << 31 >> 31;
     $141 = (_bitshift64Shl(($138|0),($140|0),4)|0);
     $142 = (getTempRet0() | 0);
     $143 = (___muldi3(($141|0),($142|0),($133|0),($135|0))|0);
     $144 = (getTempRet0() | 0);
     $145 = (_bitshift64Ashr(($143|0),($144|0),32)|0);
     $146 = (getTempRet0() | 0);
     $147 = ((($3) + ($$2110116$us<<5)|0) + ($$3117$us)|0);
     $148 = HEAP8[$147>>0]|0;
     $149 = $148&255;
     $150 = (3072 + ($149<<2)|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)<(0);
     $153 = $152 << 31 >> 31;
     $154 = (___muldi3(($145|0),($146|0),($151|0),($153|0))|0);
     $155 = (getTempRet0() | 0);
     $156 = (_bitshift64Lshr(($154|0),($155|0),28)|0);
     $157 = (getTempRet0() | 0);
     $159 = $156;
    }
    $158 = (((((($1)) + 48|0) + (($$2110116$us*4608)|0)|0) + ($$0107125$us<<7)|0) + ($$3117$us<<2)|0);
    HEAP32[$158>>2] = $159;
    $160 = (($$2110116$us) + 1)|0;
    $161 = ($160>>>0)<($7>>>0);
    if ($161) {
     $$2110116$us = $160;
    } else {
     break;
    }
   }
   $118 = (($$3117$us) + 1)|0;
   $exitcond = ($118|0)==($$0113|0);
   if ($exitcond) {
    break;
   } else {
    $$3117$us = $118;
   }
  }
  if ($209) {
   $$4120$us = $$0113;
   while(1) {
    $72 = (($2) + ($$4120$us)|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $$4112119$us = 0;
     while(1) {
      $115 = (((((($1)) + 48|0) + (($$4112119$us*4608)|0)|0) + ($$0107125$us<<7)|0) + ($$4120$us<<2)|0);
      HEAP32[$115>>2] = 0;
      $116 = (($$4112119$us) + 1)|0;
      $117 = ($116>>>0)<($7>>>0);
      if ($117) {
       $$4112119$us = $116;
      } else {
       break;
      }
     }
    } else {
     $75 = $73&255;
     $76 = (_mad_bit_read($$pre$phi148Z2D,$75)|0);
     $77 = (($75) + -1)|0;
     $78 = 1 << $77;
     $79 = $76 ^ $78;
     $80 = $79 & $78;
     $81 = (0 - ($80))|0;
     $82 = $79 | $81;
     $83 = (29 - ($75))|0;
     $84 = $82 << $83;
     $85 = 268435456 >>> $77;
     $86 = (($84) + ($85))|0;
     $87 = ($86|0)<(0);
     $88 = $87 << 31 >> 31;
     $89 = (($75) + -2)|0;
     $90 = (3008 + ($89<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)<(0);
     $93 = $92 << 31 >> 31;
     $94 = (_bitshift64Shl(($91|0),($93|0),4)|0);
     $95 = (getTempRet0() | 0);
     $96 = (___muldi3(($94|0),($95|0),($86|0),($88|0))|0);
     $97 = (getTempRet0() | 0);
     $98 = (_bitshift64Ashr(($96|0),($97|0),32)|0);
     $99 = (getTempRet0() | 0);
     $$3111118$us = 0;
     while(1) {
      $100 = ((($3) + ($$3111118$us<<5)|0) + ($$4120$us)|0);
      $101 = HEAP8[$100>>0]|0;
      $102 = $101&255;
      $103 = (3072 + ($102<<2)|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = ($104|0)<(0);
      $106 = $105 << 31 >> 31;
      $107 = (___muldi3(($98|0),($99|0),($104|0),($106|0))|0);
      $108 = (getTempRet0() | 0);
      $109 = (_bitshift64Lshr(($107|0),($108|0),28)|0);
      $110 = (getTempRet0() | 0);
      $111 = (((((($1)) + 48|0) + (($$3111118$us*4608)|0)|0) + ($$0107125$us<<7)|0) + ($$4120$us<<2)|0);
      HEAP32[$111>>2] = $109;
      $112 = (($$3111118$us) + 1)|0;
      $113 = ($112>>>0)<($7>>>0);
      if ($113) {
       $$3111118$us = $112;
      } else {
       break;
      }
     }
    }
    $114 = (($$4120$us) + 1)|0;
    $exitcond142 = ($114|0)==(32);
    if ($exitcond142) {
     break;
    } else {
     $$4120$us = $114;
    }
   }
  }
  $71 = (($$0107125$us) + 1)|0;
  $exitcond143 = ($71|0)==(12);
  if ($exitcond143) {
   $$0 = 0;
   break;
  } else {
   $$0107125$us = $71;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _mad_layer_II($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0196 = 0, $$0197264 = 0, $$0203263 = 0, $$0210247 = 0, $$0211 = 0, $$0213 = 0, $$1204254 = 0, $$1259 = 0, $$2205248 = 0, $$2255 = 0, $$3206220 = 0, $$3250 = 0, $$4207224 = 0, $$4222 = 0, $$5208226 = 0, $$5227 = 0, $$6209237$us = 0, $$phi$trans$insert = 0, $$phi$trans$insert275 = 0;
 var $$pre = 0, $$pre274 = 0, $$pre276 = 0, $$sink = 0, $$sink280 = 0, $$sink282 = 0, $$sink283 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $scevgep = 0;
 var $scevgep$1 = 0, $scevgep$2 = 0, $spec$select = 0, $tmpcast$byval_copy = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $tmpcast$byval_copy = sp + 344|0;
 $2 = sp + 320|0;
 $3 = sp + 256|0;
 $4 = sp + 192|0;
 $5 = sp;
 $6 = sp + 328|0;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 $10 = $9 ? 2 : 1;
 $11 = ((($1)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 4096;
 $14 = ($13|0)==(0);
 L1: do {
  if ($14) {
   $15 = $12 & 1024;
   $16 = ($15|0)==(0);
   do {
    if ($16) {
     $17 = ((($1)) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     if ($9) {
      $19 = $18 >>> 1;
      $$0 = $19;
     } else {
      $20 = ($18>>>0)>(192000);
      if ($20) {
       $$sink283 = 546;
       break L1;
      } else {
       $$0 = $18;
      }
     }
     $21 = ($$0>>>0)<(48001);
     if ($21) {
      $22 = ((($1)) + 20|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(32000);
      $25 = $24 ? 3 : 2;
      $$0213 = $25;
      label = 10;
      break L1;
     } else {
      $26 = ($$0>>>0)<(80001);
      if ($26) {
       $$0213 = 0;
       label = 10;
       break L1;
      } else {
       break;
      }
     }
    }
   } while(0);
   $27 = ((($1)) + 20|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)!=(48000);
   $30 = $29&1;
   $$0213 = $30;
   label = 10;
  } else {
   $$0213 = 4;
   label = 10;
  }
 } while(0);
 do {
  if ((label|0) == 10) {
   $31 = (3328 + (($$0213*36)|0)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($8|0)==(2);
   if ($33) {
    $34 = ((($1)) + 8|0);
    $35 = $12 | 256;
    HEAP32[$11>>2] = $35;
    $36 = HEAP32[$34>>2]|0;
    $37 = $36 << 2;
    $38 = (($37) + 4)|0;
    $$0211 = $38;
   } else {
    $$0211 = 32;
   }
   $39 = ($$0211>>>0)>($32>>>0);
   $spec$select = $39 ? $32 : $$0211;
   $40 = ((($0)) + 28|0);
   $41 = $40;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (($41) + 4)|0;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = $2;
   $48 = $47;
   HEAP32[$48>>2] = $43;
   $49 = (($47) + 4)|0;
   $50 = $49;
   HEAP32[$50>>2] = $46;
   $51 = ($spec$select|0)==(0);
   if (!($51)) {
    $$0197264 = 0;
    while(1) {
     $52 = ((((3328 + (($$0213*36)|0)|0)) + 4|0) + ($$0197264)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53&255;
     $55 = (3520 + ($54<<2)|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56&65535;
     $$0203263 = 0;
     while(1) {
      $58 = (_mad_bit_read($40,$57)|0);
      $59 = $58&255;
      $60 = ((($3) + ($$0203263<<5)|0) + ($$0197264)|0);
      HEAP8[$60>>0] = $59;
      $61 = (($$0203263) + 1)|0;
      $62 = ($61>>>0)<($10>>>0);
      if ($62) {
       $$0203263 = $61;
      } else {
       break;
      }
     }
     $63 = (($$0197264) + 1)|0;
     $64 = ($63>>>0)<($spec$select>>>0);
     if ($64) {
      $$0197264 = $63;
     } else {
      break;
     }
    }
   }
   $65 = ($32>>>0)>($$0211>>>0);
   if ($65) {
    $$1259 = $spec$select;
    while(1) {
     $66 = ((((3328 + (($$0213*36)|0)|0)) + 4|0) + ($$1259)|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = $67&255;
     $69 = (3520 + ($68<<2)|0);
     $70 = HEAP16[$69>>1]|0;
     $71 = $70&65535;
     $72 = (_mad_bit_read($40,$71)|0);
     $73 = $72&255;
     $74 = (((($3)) + 32|0) + ($$1259)|0);
     HEAP8[$74>>0] = $73;
     $75 = (($3) + ($$1259)|0);
     HEAP8[$75>>0] = $73;
     $76 = (($$1259) + 1)|0;
     $77 = ($76>>>0)<($32>>>0);
     if ($77) {
      $$1259 = $76;
     } else {
      break;
     }
    }
   }
   $$2255 = 0;
   while(1) {
    $$1204254 = 0;
    while(1) {
     $78 = ((($3) + ($$1204254<<5)|0) + ($$2255)|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = ($79<<24>>24)==(0);
     if (!($80)) {
      $81 = ((($4) + ($$1204254<<5)|0) + ($$2255)|0);
      $82 = (_mad_bit_read($40,2)|0);
      $83 = $82&255;
      HEAP8[$81>>0] = $83;
     }
     $84 = (($$1204254) + 1)|0;
     $85 = ($84>>>0)<($10>>>0);
     if ($85) {
      $$1204254 = $84;
     } else {
      break;
     }
    }
    $86 = (($$2255) + 1)|0;
    $87 = ($86>>>0)<($32>>>0);
    if ($87) {
     $$2255 = $86;
    } else {
     break;
    }
   }
   $88 = HEAP32[$11>>2]|0;
   $89 = $88 & 16;
   $90 = ($89|0)==(0);
   if (!($90)) {
    $91 = (_mad_bit_length($2,$40)|0);
    $92 = ((($1)) + 24|0);
    $93 = HEAP16[$92>>1]|0;
    ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
    $94 = (_mad_bit_crc($tmpcast$byval_copy,$91,$93)|0);
    HEAP16[$92>>1] = $94;
    $95 = ((($1)) + 26|0);
    $96 = HEAP16[$95>>1]|0;
    $97 = ($94<<16>>16)==($96<<16>>16);
    if (!($97)) {
     $98 = ((($1)) + 44|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = $99 & 1;
     $101 = ($100|0)==(0);
     if ($101) {
      $$sink283 = 513;
      break;
     }
    }
   }
   $$3250 = 0;
   while(1) {
    $$2205248 = 0;
    while(1) {
     $102 = ((($3) + ($$2205248<<5)|0) + ($$3250)|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(0);
     if (!($104)) {
      $105 = (_mad_bit_read($40,6)|0);
      $106 = $105&255;
      $107 = ((($5) + (($$2205248*96)|0)|0) + (($$3250*3)|0)|0);
      HEAP8[$107>>0] = $106;
      $108 = ((($4) + ($$2205248<<5)|0) + ($$3250)|0);
      $109 = HEAP8[$108>>0]|0;
      switch ($109<<24>>24) {
      case 2:  {
       $110 = ((((($5) + (($$2205248*96)|0)|0) + (($$3250*3)|0)|0)) + 1|0);
       HEAP8[$110>>0] = $106;
       $$sink = $106;
       label = 36;
       break;
      }
      case 0:  {
       $111 = (_mad_bit_read($40,6)|0);
       $112 = $111&255;
       $113 = ((((($5) + (($$2205248*96)|0)|0) + (($$3250*3)|0)|0)) + 1|0);
       HEAP8[$113>>0] = $112;
       label = 35;
       break;
      }
      case 3: case 1:  {
       label = 35;
       break;
      }
      default: {
      }
      }
      if ((label|0) == 35) {
       label = 0;
       $114 = (_mad_bit_read($40,6)|0);
       $115 = $114&255;
       $$sink = $115;
       label = 36;
      }
      if ((label|0) == 36) {
       label = 0;
       $116 = ((((($5) + (($$2205248*96)|0)|0) + (($$3250*3)|0)|0)) + 2|0);
       HEAP8[$116>>0] = $$sink;
      }
      $117 = $109&255;
      $118 = $117 & 1;
      $119 = ($118|0)==(0);
      if (!($119)) {
       $120 = ((((($5) + (($$2205248*96)|0)|0) + (($$3250*3)|0)|0)) + 1|0);
       $121 = (($117) + -1)|0;
       $122 = (((($5) + (($$2205248*96)|0)|0) + (($$3250*3)|0)|0) + ($121)|0);
       $123 = HEAP8[$122>>0]|0;
       HEAP8[$120>>0] = $123;
      }
     }
     $124 = (($$2205248) + 1)|0;
     $125 = ($124>>>0)<($10>>>0);
     if ($125) {
      $$2205248 = $124;
     } else {
      break;
     }
    }
    $126 = (($$3250) + 1)|0;
    $127 = ($126>>>0)<($32>>>0);
    if ($127) {
     $$3250 = $126;
    } else {
     break;
    }
   }
   $128 = (($32) + 1)|0;
   $129 = ($128>>>0)>(32);
   $umax = $129 ? $128 : 32;
   $130 = (($umax) - ($32))|0;
   $131 = $130 << 2;
   $132 = ((($6)) + 4|0);
   $133 = ((($6)) + 8|0);
   $$phi$trans$insert = ((($6)) + 4|0);
   $$phi$trans$insert275 = ((($6)) + 8|0);
   $$0210247 = 0;
   while(1) {
    $134 = ($$0210247*3)|0;
    if (!($51)) {
     $135 = $$0210247 >>> 2;
     $136 = (($134) + 1)|0;
     $137 = (($134) + 1)|0;
     $$sink282 = (($134) + 2)|0;
     $$4222 = 0;
     while(1) {
      $138 = ((((3328 + (($$0213*36)|0)|0)) + 4|0) + ($$4222)|0);
      $$3206220 = 0;
      while(1) {
       $139 = ((($3) + ($$3206220<<5)|0) + ($$4222)|0);
       $140 = HEAP8[$139>>0]|0;
       $141 = ($140<<24>>24)==(0);
       if ($141) {
        $183 = (((((($1)) + 48|0) + (($$3206220*4608)|0)|0) + ($134<<7)|0) + ($$4222<<2)|0);
        HEAP32[$183>>2] = 0;
        $184 = (((((($1)) + 48|0) + (($$3206220*4608)|0)|0) + ($136<<7)|0) + ($$4222<<2)|0);
        HEAP32[$184>>2] = 0;
        $$sink280 = 0;
       } else {
        $142 = $140&255;
        $143 = HEAP8[$138>>0]|0;
        $144 = $143&255;
        $145 = (((3520 + ($144<<2)|0)) + 2|0);
        $146 = HEAP16[$145>>1]|0;
        $147 = $146&65535;
        $148 = (($142) + -1)|0;
        $149 = ((3552 + (($147*15)|0)|0) + ($148)|0);
        $150 = HEAP8[$149>>0]|0;
        $151 = $150&255;
        $152 = (3648 + (($151*12)|0)|0);
        _II_samples($40,$152,$6);
        $153 = (((($5) + (($$3206220*96)|0)|0) + (($$4222*3)|0)|0) + ($135)|0);
        $154 = HEAP8[$153>>0]|0;
        $155 = $154&255;
        $156 = (3072 + ($155<<2)|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)<(0);
        $159 = $158 << 31 >> 31;
        $160 = HEAP32[$6>>2]|0;
        $161 = ($160|0)<(0);
        $162 = $161 << 31 >> 31;
        $163 = (___muldi3(($157|0),($159|0),($160|0),($162|0))|0);
        $164 = (getTempRet0() | 0);
        $165 = (_bitshift64Lshr(($163|0),($164|0),28)|0);
        $166 = (getTempRet0() | 0);
        $167 = (((((($1)) + 48|0) + (($$3206220*4608)|0)|0) + ($134<<7)|0) + ($$4222<<2)|0);
        HEAP32[$167>>2] = $165;
        $168 = HEAP32[$132>>2]|0;
        $169 = ($168|0)<(0);
        $170 = $169 << 31 >> 31;
        $171 = (___muldi3(($157|0),($159|0),($168|0),($170|0))|0);
        $172 = (getTempRet0() | 0);
        $173 = (_bitshift64Lshr(($171|0),($172|0),28)|0);
        $174 = (getTempRet0() | 0);
        $175 = (((((($1)) + 48|0) + (($$3206220*4608)|0)|0) + ($137<<7)|0) + ($$4222<<2)|0);
        HEAP32[$175>>2] = $173;
        $176 = HEAP32[$133>>2]|0;
        $177 = ($176|0)<(0);
        $178 = $177 << 31 >> 31;
        $179 = (___muldi3(($157|0),($159|0),($176|0),($178|0))|0);
        $180 = (getTempRet0() | 0);
        $181 = (_bitshift64Lshr(($179|0),($180|0),28)|0);
        $182 = (getTempRet0() | 0);
        $$sink280 = $181;
       }
       $185 = (((((($1)) + 48|0) + (($$3206220*4608)|0)|0) + ($$sink282<<7)|0) + ($$4222<<2)|0);
       HEAP32[$185>>2] = $$sink280;
       $186 = (($$3206220) + 1)|0;
       $187 = ($186>>>0)<($10>>>0);
       if ($187) {
        $$3206220 = $186;
       } else {
        break;
       }
      }
      $188 = (($$4222) + 1)|0;
      $189 = ($188>>>0)<($spec$select>>>0);
      if ($189) {
       $$4222 = $188;
      } else {
       break;
      }
     }
    }
    if ($65) {
     $190 = $$0210247 >>> 2;
     $191 = (($134) + 1)|0;
     $192 = (($134) + 2)|0;
     $193 = (($134) + 1)|0;
     $194 = (($134) + 2)|0;
     $$5227 = $spec$select;
     while(1) {
      $195 = (($3) + ($$5227)|0);
      $196 = HEAP8[$195>>0]|0;
      $197 = ($196<<24>>24)==(0);
      if ($197) {
       $$5208226 = 0;
       while(1) {
        $240 = (((((($1)) + 48|0) + (($$5208226*4608)|0)|0) + ($134<<7)|0) + ($$5227<<2)|0);
        HEAP32[$240>>2] = 0;
        $241 = (((((($1)) + 48|0) + (($$5208226*4608)|0)|0) + ($191<<7)|0) + ($$5227<<2)|0);
        HEAP32[$241>>2] = 0;
        $242 = (((((($1)) + 48|0) + (($$5208226*4608)|0)|0) + ($192<<7)|0) + ($$5227<<2)|0);
        HEAP32[$242>>2] = 0;
        $243 = (($$5208226) + 1)|0;
        $244 = ($243>>>0)<($10>>>0);
        if ($244) {
         $$5208226 = $243;
        } else {
         break;
        }
       }
      } else {
       $198 = $196&255;
       $199 = ((((3328 + (($$0213*36)|0)|0)) + 4|0) + ($$5227)|0);
       $200 = HEAP8[$199>>0]|0;
       $201 = $200&255;
       $202 = (((3520 + ($201<<2)|0)) + 2|0);
       $203 = HEAP16[$202>>1]|0;
       $204 = $203&65535;
       $205 = (($198) + -1)|0;
       $206 = ((3552 + (($204*15)|0)|0) + ($205)|0);
       $207 = HEAP8[$206>>0]|0;
       $208 = $207&255;
       $209 = (3648 + (($208*12)|0)|0);
       _II_samples($40,$209,$6);
       $$pre = HEAP32[$6>>2]|0;
       $$pre274 = HEAP32[$$phi$trans$insert>>2]|0;
       $$pre276 = HEAP32[$$phi$trans$insert275>>2]|0;
       $210 = ($$pre|0)<(0);
       $211 = $210 << 31 >> 31;
       $212 = ($$pre274|0)<(0);
       $213 = $212 << 31 >> 31;
       $214 = ($$pre276|0)<(0);
       $215 = $214 << 31 >> 31;
       $$4207224 = 0;
       while(1) {
        $216 = (((($5) + (($$4207224*96)|0)|0) + (($$5227*3)|0)|0) + ($190)|0);
        $217 = HEAP8[$216>>0]|0;
        $218 = $217&255;
        $219 = (3072 + ($218<<2)|0);
        $220 = HEAP32[$219>>2]|0;
        $221 = ($220|0)<(0);
        $222 = $221 << 31 >> 31;
        $223 = (___muldi3(($220|0),($222|0),($$pre|0),($211|0))|0);
        $224 = (getTempRet0() | 0);
        $225 = (_bitshift64Lshr(($223|0),($224|0),28)|0);
        $226 = (getTempRet0() | 0);
        $227 = (((((($1)) + 48|0) + (($$4207224*4608)|0)|0) + ($134<<7)|0) + ($$5227<<2)|0);
        HEAP32[$227>>2] = $225;
        $228 = (___muldi3(($220|0),($222|0),($$pre274|0),($213|0))|0);
        $229 = (getTempRet0() | 0);
        $230 = (_bitshift64Lshr(($228|0),($229|0),28)|0);
        $231 = (getTempRet0() | 0);
        $232 = (((((($1)) + 48|0) + (($$4207224*4608)|0)|0) + ($193<<7)|0) + ($$5227<<2)|0);
        HEAP32[$232>>2] = $230;
        $233 = (___muldi3(($220|0),($222|0),($$pre276|0),($215|0))|0);
        $234 = (getTempRet0() | 0);
        $235 = (_bitshift64Lshr(($233|0),($234|0),28)|0);
        $236 = (getTempRet0() | 0);
        $237 = (((((($1)) + 48|0) + (($$4207224*4608)|0)|0) + ($194<<7)|0) + ($$5227<<2)|0);
        HEAP32[$237>>2] = $235;
        $238 = (($$4207224) + 1)|0;
        $239 = ($238>>>0)<($10>>>0);
        if ($239) {
         $$4207224 = $238;
        } else {
         break;
        }
       }
      }
      $245 = (($$5227) + 1)|0;
      $246 = ($245>>>0)<($32>>>0);
      if ($246) {
       $$5227 = $245;
      } else {
       break;
      }
     }
    }
    $247 = (($134) + 1)|0;
    $248 = (($134) + 2)|0;
    $$6209237$us = 0;
    while(1) {
     $scevgep = (((((($1)) + 48|0) + (($$6209237$us*4608)|0)|0) + ($134<<7)|0) + ($32<<2)|0);
     _memset(($scevgep|0),0,($131|0))|0;
     $scevgep$1 = (((((($1)) + 48|0) + (($$6209237$us*4608)|0)|0) + ($247<<7)|0) + ($32<<2)|0);
     _memset(($scevgep$1|0),0,($131|0))|0;
     $scevgep$2 = (((((($1)) + 48|0) + (($$6209237$us*4608)|0)|0) + ($248<<7)|0) + ($32<<2)|0);
     _memset(($scevgep$2|0),0,($131|0))|0;
     $249 = (($$6209237$us) + 1)|0;
     $250 = ($249>>>0)<($10>>>0);
     if ($250) {
      $$6209237$us = $249;
     } else {
      break;
     }
    }
    $251 = (($$0210247) + 1)|0;
    $exitcond = ($251|0)==(12);
    if ($exitcond) {
     $$0196 = 0;
     break;
    } else {
     $$0210247 = $251;
    }
   }
   STACKTOP = sp;return ($$0196|0);
  }
 } while(0);
 $252 = ((($0)) + 60|0);
 HEAP32[$252>>2] = $$sink283;
 $$0196 = -1;
 STACKTOP = sp;return ($$0196|0);
}
function _II_samples($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 $6 = ((($1)) + 3|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 if ($5) {
  $20 = (_mad_bit_read($0,$8)|0);
  $21 = (_mad_bit_read($0,$8)|0);
  $22 = (_mad_bit_read($0,$8)|0);
  $$0 = $8;$29 = $20;$46 = $21;$64 = $22;
 } else {
  $9 = $4&255;
  $10 = (_mad_bit_read($0,$8)|0);
  $11 = HEAP16[$1>>1]|0;
  $12 = $11&65535;
  $13 = (($10>>>0) / ($12>>>0))&-1;
  $14 = Math_imul($13, $12)|0;
  $15 = (($10) - ($14))|0;
  $16 = (($13>>>0) / ($12>>>0))&-1;
  $17 = Math_imul($16, $12)|0;
  $18 = (($13) - ($17))|0;
  $19 = (($16>>>0) % ($12>>>0))&-1;
  $$0 = $9;$29 = $15;$46 = $18;$64 = $19;
 }
 $23 = (($$0) + -1)|0;
 $24 = 1 << $23;
 $25 = (29 - ($$0))|0;
 $26 = ((($1)) + 8|0);
 $27 = ((($1)) + 4|0);
 $28 = $29 ^ $24;
 $30 = $28 & $24;
 $31 = (0 - ($30))|0;
 $32 = $28 | $31;
 $33 = $32 << $25;
 $34 = HEAP32[$26>>2]|0;
 $35 = (($33) + ($34))|0;
 $36 = ($35|0)<(0);
 $37 = $36 << 31 >> 31;
 $38 = HEAP32[$27>>2]|0;
 $39 = ($38|0)<(0);
 $40 = $39 << 31 >> 31;
 $41 = (___muldi3(($35|0),($37|0),($38|0),($40|0))|0);
 $42 = (getTempRet0() | 0);
 $43 = (_bitshift64Lshr(($41|0),($42|0),28)|0);
 $44 = (getTempRet0() | 0);
 HEAP32[$2>>2] = $43;
 $45 = $46 ^ $24;
 $47 = $45 & $24;
 $48 = (0 - ($47))|0;
 $49 = $45 | $48;
 $50 = $49 << $25;
 $51 = HEAP32[$26>>2]|0;
 $52 = (($50) + ($51))|0;
 $53 = ($52|0)<(0);
 $54 = $53 << 31 >> 31;
 $55 = HEAP32[$27>>2]|0;
 $56 = ($55|0)<(0);
 $57 = $56 << 31 >> 31;
 $58 = (___muldi3(($52|0),($54|0),($55|0),($57|0))|0);
 $59 = (getTempRet0() | 0);
 $60 = (_bitshift64Lshr(($58|0),($59|0),28)|0);
 $61 = (getTempRet0() | 0);
 $62 = ((($2)) + 4|0);
 HEAP32[$62>>2] = $60;
 $63 = $64 ^ $24;
 $65 = $63 & $24;
 $66 = (0 - ($65))|0;
 $67 = $63 | $66;
 $68 = $67 << $25;
 $69 = HEAP32[$26>>2]|0;
 $70 = (($68) + ($69))|0;
 $71 = ($70|0)<(0);
 $72 = $71 << 31 >> 31;
 $73 = HEAP32[$27>>2]|0;
 $74 = ($73|0)<(0);
 $75 = $74 << 31 >> 31;
 $76 = (___muldi3(($70|0),($72|0),($73|0),($75|0))|0);
 $77 = (getTempRet0() | 0);
 $78 = (_bitshift64Lshr(($76|0),($77|0),28)|0);
 $79 = (getTempRet0() | 0);
 $80 = ((($2)) + 8|0);
 HEAP32[$80>>2] = $78;
 return;
}
function _mad_layer_III($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$1$i$i = 0, $$0$1$i208$i = 0, $$0$1$i212$i = 0, $$0$1$i216$i = 0, $$0$2$i$i = 0, $$0$2$i209$i = 0, $$0$2$i213$i = 0, $$0$2$i217$i = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i205$i = 0, $$0$i207$i = 0, $$0$i211$i = 0, $$0$i215$i = 0, $$0$i403$i$i = 0, $$0$i407$i$i = 0, $$0$i411$i$i = 0, $$0$i415$i$i = 0, $$0$i419$i$i = 0;
 var $$0$i423$i$i = 0, $$0$i427$i$i = 0, $$0$i431$i$i = 0, $$0101116$i = 0, $$0130 = 0, $$0131 = 0, $$0132 = 0, $$0134 = 0, $$0170$lcssa$i = 0, $$0170271$i = 0, $$0181$i = 0, $$0181$v$i = 0, $$0182289$i = 0, $$0185$i = 0, $$0187258$i = 0, $$0212297$i$i = 0, $$0213296$i$i = 0, $$0227295$i$i = 0, $$0231308$i$i = 0, $$0233280$i$i = 0;
 var $$0235$lcssa340$i$i = 0, $$0235279$i$i = 0, $$0237333337$i$i = 0, $$0237333338$i$i = 0, $$0237334$i$i = 0, $$0238294$i$i = 0, $$0278481$i$i = 0, $$0283$lcssa$i$i = 0, $$0283507$i$i = 0, $$0288$i$i = 0, $$0292488$i$i = 0, $$0293$i$i = 0, $$0293486$i$i = 0, $$0294506$i$i = 0, $$0302505$i$i = 0, $$0306504$i$i = 0, $$0310503$i$i = 0, $$0314502$i$i = 0, $$0319501$i$i = 0, $$0325$lcssa$i$i = 0;
 var $$0325500$i$i = 0, $$0336$lcssa$i$i = 0, $$0336499$i$i = 0, $$0343$add$i$i = 0, $$0343$i$i = 0, $$0343$idx$lcssa$i$i = 0, $$0343$idx498$i$i = 0, $$0343$ptr$i$i = 0, $$0343$ptr508$i$i = 0, $$0349$lcssa$i$i = 0, $$0349497$i$i = 0, $$035$i$i = 0, $$035$i206$i = 0, $$035$i210$i = 0, $$035$i214$i = 0, $$0361$lcssa$i$i = 0, $$0361496$i$i = 0, $$0367$i$i = 0, $$0373$lcssa$i$i = 0, $$0373495$i$i = 0;
 var $$038$i$i = 0, $$0380$lcssa$i$i = 0, $$0380494$i$i = 0, $$0396$i$i = 0, $$07891$i$i$i = 0, $$07893$i$i = 0, $$086101$1$i$i = 0, $$086101$2$i$i = 0, $$086101$3$i$i = 0, $$086101$i$i = 0, $$092$i$i$i = 0, $$094$i$i = 0, $$096114$i = 0, $$097113$i = 0, $$1 = 0, $$1$i$i = 0, $$1$i$i$i = 0, $$10335479$i$i = 0, $$10371$lcssa$i$i = 0, $$10371475$i$i = 0;
 var $$11$i$i = 0, $$1102110$i = 0, $$1112$i = 0, $$11372$i$i = 0, $$1148 = 0, $$1188284$i = 0, $$1214336$i$i = 0, $$1221287$i$i = 0, $$1228335$i$i = 0, $$1232$i$i = 0, $$1234269$i$i = 0, $$1236$i$i = 0, $$1239$i$i = 0, $$12476$i$i = 0, $$1284$i$i = 0, $$1289$i$i = 0, $$13$i$i = 0, $$1303$i$i = 0, $$1307$i$i = 0, $$1311$i$i = 0;
 var $$1315$i$i = 0, $$1320$i$i = 0, $$1326$i$i = 0, $$1337$i$i = 0, $$135$i$i = 0, $$135$in$i$i = 0, $$1350$i$i = 0, $$1362$i$i = 0, $$1372$i$i = 0, $$1374$i$i = 0, $$14$i$i = 0, $$14$i200$i = 0, $$140$i$i = 0, $$16$i$i = 0, $$179$i$i$i = 0, $$18$i$i = 0, $$18793$1$i$i = 0, $$18793$2$i$i = 0, $$18793$3$i$i = 0, $$18793$i$i = 0;
 var $$189$lcssa$1$i$i = 0, $$189$lcssa$2$i$i = 0, $$189$lcssa$3$i$i = 0, $$189$lcssa$i$i = 0, $$189100$1$i$i = 0, $$189100$2$i$i = 0, $$189100$3$i$i = 0, $$2$i$i = 0, $$2$i202$i = 0, $$2178272$i = 0, $$2215282$i$i = 0, $$2222276$i$i = 0, $$2229281$i$i = 0, $$2240331339$i$i = 0, $$2240332$i$i = 0, $$2283$i$i = 0, $$2290$i$i = 0, $$2296$i$i = 0, $$2304$i$i = 0, $$2308$i$i = 0;
 var $$2312$i$i = 0, $$2316$i$i = 0, $$2321$i$i = 0, $$2327$i$i = 0, $$2351$lcssa$i$i = 0, $$2351487$i$i = 0, $$2363$i$i = 0, $$2382$i$i = 0, $$2411$i$i = 0, $$28089$i$i$i = 0, $$290$i$i$i = 0, $$3 = 0, $$3$i$i = 0, $$3$i201$i = 0, $$3174273$i = 0, $$3179276$i = 0, $$3216310$i$i = 0, $$3223272$i$i = 0, $$3230309$i$i = 0, $$3282$i$ph$i = 0;
 var $$3291$i$i = 0, $$3297$i$i = 0, $$3311$i$i = 0, $$3317$i$i = 0, $$3328$i$i = 0, $$3346$add$i$i = 0, $$3346$add390$i$i = 0, $$3346$idx$lcssa$i$i = 0, $$3346$idx477$i$i = 0, $$3346$ptr482$i$i = 0, $$3352$i$i = 0, $$3364$i$i = 0, $$4 = 0, $$4$i = 0, $$4$i$i = 0, $$4$i141 = 0, $$4$lcssa$1$i$i = 0, $$4$lcssa$2$i$i = 0, $$4$lcssa$3$i$i = 0, $$4$lcssa$i$i = 0;
 var $$4175277$i = 0, $$4180280$i = 0, $$4217263$i$i = 0, $$4224270$i$i = 0, $$4268$i$i = 0, $$4287480$i$i = 0, $$4298$i$i = 0, $$4329$i$i = 0, $$4340478$i$i = 0, $$4353$i$i = 0, $$4365$i$i = 0, $$4377474$i$i = 0, $$492$1$i$i = 0, $$492$2$i$i = 0, $$492$3$i$i = 0, $$5$i = 0, $$5$i$i = 0, $$5218258$i$i = 0, $$5225301$i$i = 0, $$5259$i$i = 0;
 var $$5299$i$i = 0, $$5330$i$i = 0, $$5341$i$i = 0, $$5354$i$i = 0, $$5366$i$i = 0, $$5378$i$i = 0, $$5385473$i$i = 0, $$591$i$i = 0, $$6$i$i = 0, $$6219252$i$i = 0, $$6226298$i$i = 0, $$6255$i$i = 0, $$6300$i$i = 0, $$6331$i$i = 0, $$6342$i$i = 0, $$6355$i$i = 0, $$6367$i$i = 0, $$6379$i$i = 0, $$6386$i$i = 0, $$7$i$i = 0;
 var $$7260$i$i = 0, $$7260$us$i$i = 0, $$7260$us262$i$i = 0, $$7332$i$i = 0, $$7356$i$i = 0, $$7368$i$i = 0, $$7387$i$i = 0, $$8$i$i = 0, $$8256$i$i = 0, $$8357$i$i = 0, $$8388$i$i = 0, $$9$i$i = 0, $$9251$i$i = 0, $$9358$i$i = 0, $$9389$i$i = 0, $$add$i$i = 0, $$byval_copy = 0, $$idx$i = 0, $$idx$val$i = 0, $$in$i = 0;
 var $$in$i$i = 0, $$in337$i = 0, $$lcssa$i$i = 0, $$mux = 0, $$mux270 = 0, $$not$i = 0, $$pre = 0, $$pre$i$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi208Z2D = 0, $$pre$phi209Z2D = 0, $$pre$phi210Z2D = 0, $$pre$phi211Z2D = 0, $$pre$phi212Z2D = 0, $$pre$phi213Z2D = 0, $$pre$phi214Z2D = 0, $$pre$phi215Z2D = 0, $$pre$phi216Z2D = 0, $$pre$phi217Z2D = 0, $$pre$phi527$i$iZ2D = 0;
 var $$pre$phi529$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre330$i$i = 0, $$pre334$i = 0, $$pre526$i$i = 0, $$ptr392$i$i = 0, $$sink$i = 0, $$sink264 = 0, $$sink265 = 0, $$sink266 = 0, $$sink269 = 0, $$sink330$i = 0, $$sink331$i = 0, $$sink332$i = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
 var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0;
 var $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0;
 var $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0;
 var $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0;
 var $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0;
 var $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0;
 var $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0;
 var $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0;
 var $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0;
 var $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0;
 var $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0;
 var $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0;
 var $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0;
 var $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0;
 var $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0;
 var $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0;
 var $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0;
 var $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0;
 var $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0;
 var $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0;
 var $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0;
 var $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0;
 var $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0;
 var $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0;
 var $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0;
 var $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0;
 var $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0;
 var $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0;
 var $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0;
 var $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0;
 var $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0;
 var $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0;
 var $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0;
 var $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0;
 var $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0;
 var $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0;
 var $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0;
 var $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0;
 var $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0;
 var $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0;
 var $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0;
 var $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0;
 var $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0;
 var $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0;
 var $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0;
 var $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0;
 var $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0;
 var $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0;
 var $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0;
 var $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0;
 var $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0;
 var $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0;
 var $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0;
 var $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0;
 var $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0;
 var $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0;
 var $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0;
 var $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0;
 var $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0;
 var $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0;
 var $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0;
 var $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0;
 var $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0;
 var $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0;
 var $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0;
 var $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0;
 var $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0;
 var $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0;
 var $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0;
 var $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0;
 var $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0;
 var $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0;
 var $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0;
 var $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0;
 var $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0;
 var $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0;
 var $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0;
 var $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0;
 var $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0;
 var $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0;
 var $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $addconv$i$i = 0, $brmerge = 0, $exitcond$i = 0;
 var $exitcond$i$i = 0, $exitcond$i140 = 0, $exitcond$i198$i = 0, $exitcond$i203$i = 0, $exitcond120$i = 0, $exitcond318$i$i = 0, $exitcond319$i$i = 0, $exitcond322$i$i = 0, $exitcond323$i$i = 0, $exitcond326$i$i = 0, $exitcond327$i$i = 0, $exitcond328$i$i = 0, $not$$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i138 = 0, $or$cond$i193$i = 0, $or$cond$i196$i = 0, $or$cond105$i = 0;
 var $or$cond399$i$i = 0, $or$cond399472$i$i = 0, $or$cond493$i$i = 0, $or$cond5$i = 0, $scevgep$i$i = 0, $sext$i$i$i = 0, $spec$select = 0, $spec$select$i = 0, $spec$select$i$i = 0, $spec$select$i$i$i = 0, $spec$select$i136 = 0, $spec$select$i402$i$i = 0, $spec$select$i406$i$i = 0, $spec$select$i410$i$i = 0, $spec$select$i414$i$i = 0, $spec$select$i418$i$i = 0, $spec$select$i422$i$i = 0, $spec$select$i426$i$i = 0, $spec$select$i430$i$i = 0, $spec$select103$i = 0;
 var $spec$select104$i = 0, $spec$select135 = 0, $spec$select21$i$i$i = 0, $spec$select21$i401$i$i = 0, $spec$select21$i405$i$i = 0, $spec$select21$i409$i$i = 0, $spec$select21$i413$i$i = 0, $spec$select21$i417$i$i = 0, $spec$select21$i421$i$i = 0, $spec$select21$i425$i$i = 0, $spec$select21$i429$i$i = 0, $spec$select398$i$i = 0, $spec$select400$i$i = 0, $spec$select449$i$i = 0, $spec$select450$i$i = 0, $spec$select451$i$i = 0, $spec$store$select$i = 0, $storemerge$i$i = 0, $storemerge395$i$i = 0, $trunc$i$i = 0;
 var $trunc$i$i$clear = 0, $trunc396$i$i = 0, $trunc396$i$i$clear = 0, $uglygep$i$i = 0, $uglygep$i190$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 7696|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(7696|0);
 $$byval_copy = sp + 7680|0;
 $2 = sp + 5056|0;
 $3 = sp + 7668|0;
 $4 = sp + 4976|0;
 $5 = sp + 7656|0;
 $6 = sp + 4816|0;
 $7 = sp + 7384|0;
 $8 = sp + 4752|0;
 $9 = sp + 7376|0;
 $10 = sp + 7368|0;
 $11 = sp + 7648|0;
 $12 = sp + 144|0;
 $13 = sp;
 $14 = sp + 7360|0;
 $15 = sp + 7400|0;
 $16 = sp + 7392|0;
 $17 = ((($0)) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = (_malloc(2567)|0);
  HEAP32[$17>>2] = $20;
  $21 = ($20|0)==(0|0);
  if ($21) {
   $22 = ((($0)) + 60|0);
   HEAP32[$22>>2] = 49;
   $$0130 = -1;
   STACKTOP = sp;return ($$0130|0);
  }
 }
 $23 = ((($1)) + 9264|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $26 = (_calloc(1152,4)|0);
  HEAP32[$23>>2] = $26;
  $27 = ($26|0)==(0|0);
  if ($27) {
   $28 = ((($0)) + 60|0);
   HEAP32[$28>>2] = 49;
   $$0130 = -1;
   STACKTOP = sp;return ($$0130|0);
  }
 }
 $29 = ((($1)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 $32 = $31 ? 1 : 2;
 $33 = ((($1)) + 28|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 & 4096;
 $36 = ($35|0)==(0);
 $37 = $31 ? 9 : 17;
 $38 = $31 ? 17 : 32;
 $39 = $36 ? $38 : $37;
 $40 = ((($0)) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($0)) + 28|0);
 $43 = (_mad_bit_nextbyte($42)|0);
 $44 = $43;
 $45 = (($41) - ($44))|0;
 $46 = ($45|0)<($39|0);
 if ($46) {
  $47 = ((($0)) + 60|0);
  HEAP32[$47>>2] = 561;
  $48 = ((($0)) + 52|0);
  HEAP32[$48>>2] = 0;
  $$0130 = -1;
  STACKTOP = sp;return ($$0130|0);
 }
 $49 = HEAP32[$33>>2]|0;
 $50 = $49 & 16;
 $51 = ($50|0)==(0);
 if ($51) {
  $$0131 = 0;
 } else {
  $52 = $39 << 3;
  $53 = ((($1)) + 24|0);
  $54 = HEAP16[$53>>1]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$42>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$42+4>>2]|0;
  $55 = (_mad_bit_crc($$byval_copy,$52,$54)|0);
  HEAP16[$53>>1] = $55;
  $56 = ((($1)) + 26|0);
  $57 = HEAP16[$56>>1]|0;
  $58 = ($55<<16>>16)==($57<<16>>16);
  if ($58) {
   $$0131 = 0;
  } else {
   $59 = ((($1)) + 44|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60 & 1;
   $62 = ($61|0)==(0);
   if ($62) {
    $63 = ((($0)) + 60|0);
    HEAP32[$63>>2] = 513;
    $$0131 = -1;
   } else {
    $$0131 = 0;
   }
  }
 }
 $64 = HEAP32[$33>>2]|0;
 $65 = $64 & 4096;
 $66 = ($65|0)!=(0);
 $67 = $31 ? 5 : 3;
 $68 = $66 ? $32 : $67;
 $69 = $65 >>> 12;
 $70 = (9 - ($69))|0;
 $71 = (_mad_bit_read($42,$70)|0);
 HEAP32[$15>>2] = $71;
 $72 = (_mad_bit_read($42,$68)|0);
 $73 = ((($15)) + 4|0);
 HEAP32[$73>>2] = $72;
 if ($66) {
  $$0$i = 1;
 } else {
  $$0101116$i = 0;
  while(1) {
   $74 = (_mad_bit_read($42,4)|0);
   $75 = $74&255;
   $76 = (((($15)) + 8|0) + ($$0101116$i)|0);
   HEAP8[$76>>0] = $75;
   $77 = (($$0101116$i) + 1)|0;
   $exitcond120$i = ($77|0)==($32|0);
   if ($exitcond120$i) {
    $$0$i = 2;
    break;
   } else {
    $$0101116$i = $77;
   }
  }
 }
 $78 = $66 ? 9 : 4;
 $79 = $69 ^ 3;
 $$not$i = $66 ^ 1;
 $$0 = 0;$$096114$i = 0;$$097113$i = 0;
 while(1) {
  $$1102110$i = 0;$$1112$i = $$097113$i;$$1148 = $$0;
  while(1) {
   $80 = (_mad_bit_read($42,12)|0);
   $81 = $80&65535;
   $82 = ((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0);
   HEAP16[$82>>1] = $81;
   $83 = (_mad_bit_read($42,9)|0);
   $84 = $83&65535;
   $85 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 2|0);
   HEAP16[$85>>1] = $84;
   $86 = (_mad_bit_read($42,8)|0);
   $87 = $86&65535;
   $88 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 4|0);
   HEAP16[$88>>1] = $87;
   $89 = (_mad_bit_read($42,$78)|0);
   $90 = $89&65535;
   $91 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 6|0);
   HEAP16[$91>>1] = $90;
   $92 = $80 & 65535;
   $93 = (($$1148) + ($92))|0;
   $94 = ($84&65535)>(288);
   $95 = ($$1112$i|0)==(0);
   $or$cond$i = $95 & $94;
   $spec$select$i = $or$cond$i ? 562 : $$1112$i;
   $96 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 8|0);
   HEAP8[$96>>0] = 0;
   $97 = (_mad_bit_read($42,1)|0);
   $98 = ($97|0)==(0);
   if ($98) {
    $129 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 9|0);
    HEAP8[$129>>0] = 0;
    $130 = (_mad_bit_read($42,5)|0);
    $131 = $130&255;
    $132 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 10|0);
    HEAP8[$132>>0] = $131;
    $133 = (_mad_bit_read($42,5)|0);
    $134 = $133&255;
    $135 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 11|0);
    HEAP8[$135>>0] = $134;
    $136 = (_mad_bit_read($42,5)|0);
    $137 = $136&255;
    $138 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 12|0);
    HEAP8[$138>>0] = $137;
    $139 = (_mad_bit_read($42,4)|0);
    $140 = $139&255;
    $141 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 16|0);
    HEAP8[$141>>0] = $140;
    $142 = (_mad_bit_read($42,3)|0);
    $143 = $142&255;
    $144 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 17|0);
    HEAP8[$144>>0] = $143;
    $$5$i = $spec$select$i;$147 = 0;
   } else {
    $99 = (_mad_bit_read($42,2)|0);
    $100 = $99&255;
    $101 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 9|0);
    HEAP8[$101>>0] = $100;
    $102 = $99 & 255;
    $103 = $102 | $spec$select$i;
    $104 = ($103|0)==(0);
    $spec$select103$i = $104 ? 563 : $spec$select$i;
    $105 = ($100<<24>>24)==(2);
    $or$cond105$i = $105 & $$not$i;
    if ($or$cond105$i) {
     $106 = (((($15)) + 8|0) + ($$1102110$i)|0);
     $107 = ($spec$select103$i|0)==(0);
     $108 = HEAP8[$106>>0]|0;
     $109 = ($108<<24>>24)!=(0);
     $or$cond5$i = $107 & $109;
     $spec$select104$i = $or$cond5$i ? 564 : $spec$select103$i;
     $$4$i = $spec$select104$i;
    } else {
     $$4$i = $spec$select103$i;
    }
    $110 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 16|0);
    HEAP8[$110>>0] = 7;
    $111 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 17|0);
    HEAP8[$111>>0] = 36;
    $112 = (_mad_bit_read($42,1)|0);
    $113 = ($112|0)!=(0);
    $brmerge = $113 | $105;
    if ($brmerge) {
     $$mux270 = $113 ? 8 : 0;
     $$mux = $113 ? $96 : $110;
     HEAP8[$$mux>>0] = 8;
     $2503 = $$mux270;
    } else {
     $2503 = 0;
    }
    $114 = (_mad_bit_read($42,5)|0);
    $115 = $114&255;
    $116 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 10|0);
    HEAP8[$116>>0] = $115;
    $117 = (_mad_bit_read($42,5)|0);
    $118 = $117&255;
    $119 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 11|0);
    HEAP8[$119>>0] = $118;
    $120 = (_mad_bit_read($42,3)|0);
    $121 = $120&255;
    $122 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 13|0);
    HEAP8[$122>>0] = $121;
    $123 = (_mad_bit_read($42,3)|0);
    $124 = $123&255;
    $125 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 14|0);
    HEAP8[$125>>0] = $124;
    $126 = (_mad_bit_read($42,3)|0);
    $127 = $126&255;
    $128 = ((((((($15)) + 10|0) + (($$096114$i*116)|0)|0) + (($$1102110$i*58)|0)|0)) + 15|0);
    HEAP8[$128>>0] = $127;
    $$5$i = $$4$i;$147 = $2503;
   }
   $145 = (_mad_bit_read($42,$79)|0);
   $146 = $145 | $147;
   $148 = $146&255;
   HEAP8[$96>>0] = $148;
   $149 = (($$1102110$i) + 1)|0;
   $exitcond$i = ($149|0)==($32|0);
   if ($exitcond$i) {
    break;
   } else {
    $$1102110$i = $149;$$1112$i = $$5$i;$$1148 = $93;
   }
  }
  $150 = (($$096114$i) + 1)|0;
  $151 = ($150>>>0)<($$0$i>>>0);
  if ($151) {
   $$0 = $93;$$096114$i = $150;$$097113$i = $$5$i;
  } else {
   break;
  }
 }
 $152 = ($$5$i|0)!=(0);
 $153 = ($$0131|0)==(0);
 $or$cond = $153 & $152;
 if ($or$cond) {
  $154 = ((($0)) + 60|0);
  HEAP32[$154>>2] = $$5$i;
  $$1 = -1;
 } else {
  $$1 = $$0131;
 }
 $155 = HEAP32[$33>>2]|0;
 $156 = $155 | $68;
 HEAP32[$33>>2] = $156;
 $157 = ((($1)) + 32|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = $158 | $72;
 HEAP32[$157>>2] = $159;
 $160 = HEAP32[$40>>2]|0;
 _mad_bit_init($16,$160);
 $161 = (_mad_bit_read($16,32)|0);
 $162 = $161 & -1703936;
 $163 = ($162|0)==(-1966080);
 if ($163) {
  $164 = $161 & 65536;
  $165 = ($164|0)==(0);
  if ($165) {
   _mad_bit_skip($16,16);
  }
  $166 = $161 >>> 19;
  $167 = $166 & 1;
  $168 = $167 | 8;
  $169 = (_mad_bit_read($16,$168)|0);
  $$0132 = $169;
 } else {
  $$0132 = 0;
 }
 $170 = HEAP32[$40>>2]|0;
 $171 = (_mad_bit_nextbyte($42)|0);
 $172 = $171;
 $173 = (($170) - ($172))|0;
 $174 = HEAP32[$15>>2]|0;
 $175 = (($173) + ($174))|0;
 $176 = ($$0132>>>0)>($175>>>0);
 $spec$select = $176 ? 0 : $$0132;
 $177 = (($175) - ($spec$select))|0;
 $178 = ($174|0)==(0);
 do {
  if ($178) {
   $179 = $42;
   $180 = $179;
   $181 = HEAP32[$180>>2]|0;
   $182 = (($179) + 4)|0;
   $183 = $182;
   $184 = HEAP32[$183>>2]|0;
   $185 = $14;
   $186 = $185;
   HEAP32[$186>>2] = $181;
   $187 = (($185) + 4)|0;
   $188 = $187;
   HEAP32[$188>>2] = $184;
   $189 = ((($0)) + 52|0);
   HEAP32[$189>>2] = 0;
   $$0134 = $177;
   label = 42;
  } else {
   $190 = ((($0)) + 52|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = ($174>>>0)>($191>>>0);
   if ($192) {
    $193 = ($$1|0)==(0);
    if (!($193)) {
     $$4 = $$1;$2475 = $173;
     break;
    }
    $194 = ((($0)) + 60|0);
    HEAP32[$194>>2] = 565;
    $$4 = -1;$2475 = $173;
    break;
   }
   $195 = HEAP32[$17>>2]|0;
   $196 = (($195) + ($191)|0);
   $197 = (0 - ($174))|0;
   $198 = (($196) + ($197)|0);
   _mad_bit_init($14,$198);
   $199 = HEAP32[$15>>2]|0;
   $200 = ($177>>>0)>($199>>>0);
   if ($200) {
    $201 = HEAP32[$190>>2]|0;
    $202 = (($177) - ($199))|0;
    $203 = (($202) + ($201))|0;
    $204 = ($203>>>0)<(2568);
    if ($204) {
     $205 = HEAP32[$17>>2]|0;
     $206 = (($205) + ($201)|0);
     $207 = (_mad_bit_nextbyte($42)|0);
     $208 = HEAP32[$15>>2]|0;
     $209 = (($177) - ($208))|0;
     _memcpy(($206|0),($207|0),($209|0))|0;
     $210 = HEAP32[$190>>2]|0;
     $211 = (($210) + ($209))|0;
     HEAP32[$190>>2] = $211;
     $$0134 = $209;
     label = 42;
     break;
    } else {
     ___assert_fail((57381|0),(57446|0),2633,(57455|0));
     // unreachable;
    }
   } else {
    $$0134 = 0;
    label = 42;
   }
  }
 } while(0);
 if ((label|0) == 42) {
  $212 = (($173) - ($$0134))|0;
  $213 = ($$1|0)==(0);
  if ($213) {
   $214 = ((($1)) + 20|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = HEAP32[$33>>2]|0;
   $217 = $216 & 16384;
   $218 = ($217|0)==(0);
   $not$$i = $218 ^ 1;
   $219 = $not$$i&1;
   $spec$select$i136 = $215 << $219;
   $220 = $spec$select$i136 >>> 7;
   $221 = $220 & 15;
   $222 = $spec$select$i136 >>> 15;
   $223 = $222 & 1;
   $$0181$v$i = $218 ? -8 : -5;
   $224 = (($223) + ($$0181$v$i))|0;
   $$0181$i = (($224) + ($221))|0;
   $225 = $216 >>> 12;
   $226 = $225 & 1;
   $227 = (2 - ($226))|0;
   $228 = ($227|0)==(0);
   L64: do {
    if ($228) {
     $$3 = 0;
    } else {
     $229 = (3856 + (($$0181$i*12)|0)|0);
     $230 = (((3856 + (($$0181$i*12)|0)|0)) + 8|0);
     $231 = (((3856 + (($$0181$i*12)|0)|0)) + 4|0);
     $232 = ((($15)) + 184|0);
     $233 = ((($1)) + 8|0);
     $234 = ((($6)) + 4|0);
     $235 = ((($6)) + 8|0);
     $236 = ((($6)) + 12|0);
     $237 = ((($6)) + 16|0);
     $238 = ((($6)) + 20|0);
     $239 = ((($6)) + 24|0);
     $240 = ((($6)) + 28|0);
     $241 = ((($6)) + 32|0);
     $242 = ((($6)) + 36|0);
     $243 = ((($6)) + 40|0);
     $244 = ((($6)) + 44|0);
     $245 = ((($6)) + 48|0);
     $246 = ((($6)) + 52|0);
     $247 = ((($6)) + 56|0);
     $248 = ((($6)) + 60|0);
     $249 = ((($6)) + 64|0);
     $250 = ((($6)) + 68|0);
     $251 = ((($6)) + 72|0);
     $252 = ((($6)) + 76|0);
     $253 = ((($6)) + 80|0);
     $254 = ((($6)) + 84|0);
     $255 = ((($5)) + 4|0);
     $256 = ((($5)) + 8|0);
     $257 = ((($4)) + 2|0);
     $258 = ((($4)) + 4|0);
     $259 = ((($4)) + 6|0);
     $260 = ((($4)) + 8|0);
     $261 = ((($4)) + 10|0);
     $262 = ((($4)) + 12|0);
     $263 = ((($4)) + 14|0);
     $264 = ((($4)) + 16|0);
     $265 = ((($4)) + 18|0);
     $266 = ((($4)) + 20|0);
     $267 = ((($4)) + 22|0);
     $268 = ((($4)) + 24|0);
     $269 = ((($4)) + 26|0);
     $270 = ((($4)) + 28|0);
     $271 = ((($4)) + 30|0);
     $272 = ((($4)) + 32|0);
     $273 = ((($4)) + 34|0);
     $274 = ((($4)) + 36|0);
     $275 = ((($4)) + 38|0);
     $276 = ((($4)) + 40|0);
     $277 = ((($4)) + 42|0);
     $278 = ((($4)) + 44|0);
     $279 = ((($4)) + 46|0);
     $280 = ((($4)) + 48|0);
     $281 = ((($4)) + 50|0);
     $282 = ((($4)) + 52|0);
     $283 = ((($4)) + 54|0);
     $284 = ((($4)) + 56|0);
     $285 = ((($4)) + 58|0);
     $286 = ((($4)) + 60|0);
     $287 = ((($4)) + 62|0);
     $288 = ((($4)) + 64|0);
     $289 = ((($4)) + 66|0);
     $290 = ((($4)) + 68|0);
     $291 = ((($4)) + 70|0);
     $292 = ((($4)) + 72|0);
     $293 = ((($4)) + 74|0);
     $294 = ((($4)) + 76|0);
     $295 = ((($12)) + 2304|0);
     $296 = HEAP32[$229>>2]|0;
     $297 = ((($13)) + 72|0);
     $298 = ((($13)) + 4|0);
     $299 = ((($13)) + 76|0);
     $300 = ((($13)) + 8|0);
     $301 = ((($13)) + 80|0);
     $302 = ((($13)) + 12|0);
     $303 = ((($13)) + 84|0);
     $304 = ((($13)) + 16|0);
     $305 = ((($13)) + 88|0);
     $306 = ((($13)) + 20|0);
     $307 = ((($13)) + 92|0);
     $308 = ((($13)) + 24|0);
     $309 = ((($13)) + 96|0);
     $310 = ((($13)) + 28|0);
     $311 = ((($13)) + 100|0);
     $312 = ((($13)) + 32|0);
     $313 = ((($13)) + 104|0);
     $314 = ((($13)) + 36|0);
     $315 = ((($13)) + 108|0);
     $316 = ((($13)) + 40|0);
     $317 = ((($13)) + 112|0);
     $318 = ((($13)) + 44|0);
     $319 = ((($13)) + 116|0);
     $320 = ((($13)) + 48|0);
     $321 = ((($13)) + 120|0);
     $322 = ((($13)) + 52|0);
     $323 = ((($13)) + 124|0);
     $324 = ((($13)) + 56|0);
     $325 = ((($13)) + 128|0);
     $326 = ((($13)) + 60|0);
     $327 = ((($13)) + 132|0);
     $328 = ((($13)) + 64|0);
     $329 = ((($13)) + 136|0);
     $330 = ((($13)) + 68|0);
     $331 = ((($13)) + 140|0);
     $$0182289$i = 0;
     L66: while(1) {
      $332 = (((($15)) + 10|0) + (($$0182289$i*116)|0)|0);
      $333 = ($$0182289$i|0)==(0);
      $$0187258$i = 0;
      while(1) {
       $336 = ((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0);
       $337 = (($11) + ($$0187258$i<<2)|0);
       HEAP32[$337>>2] = $296;
       $338 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 9|0);
       $339 = HEAP8[$338>>0]|0;
       $340 = ($339<<24>>24)==(2);
       if ($340) {
        $341 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 8|0);
        $342 = HEAP8[$341>>0]|0;
        $343 = $342 & 8;
        $344 = ($343<<24>>24)==(0);
        $$in$i = $344 ? $231 : $230;
        $345 = HEAP32[$$in$i>>2]|0;
        HEAP32[$337>>2] = $345;
        $$in337$i = $345;
       } else {
        $$in337$i = $296;
       }
       $346 = $$in337$i;
       $347 = HEAP32[$33>>2]|0;
       $348 = $347 & 4096;
       $349 = ($348|0)==(0);
       if ($349) {
        if ($333) {
         $640 = 0;
        } else {
         $533 = (((($15)) + 8|0) + ($$0187258$i)|0);
         $534 = HEAP8[$533>>0]|0;
         $535 = $534&255;
         $640 = $535;
        }
        $536 = $14;
        $537 = $536;
        $538 = HEAP32[$537>>2]|0;
        $539 = (($536) + 4)|0;
        $540 = $539;
        $541 = HEAP32[$540>>2]|0;
        $542 = $9;
        $543 = $542;
        HEAP32[$543>>2] = $538;
        $544 = (($542) + 4)|0;
        $545 = $544;
        HEAP32[$545>>2] = $541;
        $546 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 6|0);
        $547 = HEAP16[$546>>1]|0;
        $548 = $547&65535;
        $549 = (4048 + ($548<<1)|0);
        $550 = HEAP8[$549>>0]|0;
        $551 = $550&255;
        $552 = (((4048 + ($548<<1)|0)) + 1|0);
        $553 = HEAP8[$552>>0]|0;
        $554 = $553&255;
        if ($340) {
         $555 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 8|0);
         $556 = HEAP8[$555>>0]|0;
         $557 = ($556&255) >>> 3;
         $558 = $557 & 1;
         $559 = $558&255;
         $560 = (18 - ($559))|0;
         $$07893$i$i = 0;$$094$i$i = $560;
         while(1) {
          $561 = (($$094$i$i) + -1)|0;
          $562 = (_mad_bit_read($14,$551)|0);
          $563 = $562&255;
          $564 = (($$07893$i$i) + 1)|0;
          $565 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($$07893$i$i)|0);
          HEAP8[$565>>0] = $563;
          $566 = ($561|0)==(0);
          if ($566) {
           break;
          } else {
           $$07893$i$i = $564;$$094$i$i = $561;
          }
         }
         $567 = (_mad_bit_read($14,$554)|0);
         $568 = $567&255;
         $569 = (($560) + 1)|0;
         $570 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($560)|0);
         HEAP8[$570>>0] = $568;
         $571 = (_mad_bit_read($14,$554)|0);
         $572 = $571&255;
         $573 = (($560) + 2)|0;
         $574 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($569)|0);
         HEAP8[$574>>0] = $572;
         $575 = (_mad_bit_read($14,$554)|0);
         $576 = $575&255;
         $577 = (($560) + 3)|0;
         $578 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($573)|0);
         HEAP8[$578>>0] = $576;
         $579 = (_mad_bit_read($14,$554)|0);
         $580 = $579&255;
         $581 = $560 | 4;
         $582 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($577)|0);
         HEAP8[$582>>0] = $580;
         $583 = (_mad_bit_read($14,$554)|0);
         $584 = $583&255;
         $585 = (($581) + 1)|0;
         $586 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($581)|0);
         HEAP8[$586>>0] = $584;
         $587 = (_mad_bit_read($14,$554)|0);
         $588 = $587&255;
         $589 = (($581) + 2)|0;
         $590 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($585)|0);
         HEAP8[$590>>0] = $588;
         $591 = (_mad_bit_read($14,$554)|0);
         $592 = $591&255;
         $593 = (($581) + 3)|0;
         $594 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($589)|0);
         HEAP8[$594>>0] = $592;
         $595 = (_mad_bit_read($14,$554)|0);
         $596 = $595&255;
         $597 = (($581) + 4)|0;
         $598 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($593)|0);
         HEAP8[$598>>0] = $596;
         $599 = (_mad_bit_read($14,$554)|0);
         $600 = $599&255;
         $601 = (($581) + 5)|0;
         $602 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($597)|0);
         HEAP8[$602>>0] = $600;
         $603 = (_mad_bit_read($14,$554)|0);
         $604 = $603&255;
         $605 = (($581) + 6)|0;
         $606 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($601)|0);
         HEAP8[$606>>0] = $604;
         $607 = (_mad_bit_read($14,$554)|0);
         $608 = $607&255;
         $609 = (($581) + 7)|0;
         $610 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($605)|0);
         HEAP8[$610>>0] = $608;
         $611 = (_mad_bit_read($14,$554)|0);
         $612 = $611&255;
         $613 = $560 | 12;
         $614 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($609)|0);
         HEAP8[$614>>0] = $612;
         $615 = (_mad_bit_read($14,$554)|0);
         $616 = $615&255;
         $617 = (($613) + 1)|0;
         $618 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($613)|0);
         HEAP8[$618>>0] = $616;
         $619 = (_mad_bit_read($14,$554)|0);
         $620 = $619&255;
         $621 = (($613) + 2)|0;
         $622 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($617)|0);
         HEAP8[$622>>0] = $620;
         $623 = (_mad_bit_read($14,$554)|0);
         $624 = $623&255;
         $625 = (($613) + 3)|0;
         $626 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($621)|0);
         HEAP8[$626>>0] = $624;
         $627 = (_mad_bit_read($14,$554)|0);
         $628 = $627&255;
         $629 = (($613) + 4)|0;
         $630 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($625)|0);
         HEAP8[$630>>0] = $628;
         $631 = (_mad_bit_read($14,$554)|0);
         $632 = $631&255;
         $633 = (($613) + 5)|0;
         $634 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($629)|0);
         HEAP8[$634>>0] = $632;
         $635 = (_mad_bit_read($14,$554)|0);
         $636 = $635&255;
         $637 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($633)|0);
         HEAP8[$637>>0] = $636;
         $638 = $560 | 36;
         $uglygep$i190$i = (($336) + ($638)|0);
         ;HEAP8[$uglygep$i190$i>>0]=0|0;HEAP8[$uglygep$i190$i+1>>0]=0|0;HEAP8[$uglygep$i190$i+2>>0]=0|0;
        } else {
         $639 = $640 & 8;
         $641 = ($639|0)==(0);
         if ($641) {
          $659 = (_mad_bit_read($14,$551)|0);
          $660 = $659&255;
          $661 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0);
          HEAP8[$661>>0] = $660;
          $662 = (_mad_bit_read($14,$551)|0);
          $663 = $662&255;
          $664 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 19|0);
          HEAP8[$664>>0] = $663;
          $665 = (_mad_bit_read($14,$551)|0);
          $666 = $665&255;
          $667 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 20|0);
          HEAP8[$667>>0] = $666;
          $668 = (_mad_bit_read($14,$551)|0);
          $669 = $668&255;
          $670 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 21|0);
          HEAP8[$670>>0] = $669;
          $671 = (_mad_bit_read($14,$551)|0);
          $672 = $671&255;
          $673 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 22|0);
          HEAP8[$673>>0] = $672;
          $674 = (_mad_bit_read($14,$551)|0);
          $675 = $674&255;
          $$sink$i = $675;
         } else {
          $642 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 18|0);
          $643 = HEAP8[$642>>0]|0;
          $644 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0);
          HEAP8[$644>>0] = $643;
          $645 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 19|0);
          $646 = HEAP8[$645>>0]|0;
          $647 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 19|0);
          HEAP8[$647>>0] = $646;
          $648 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 20|0);
          $649 = HEAP8[$648>>0]|0;
          $650 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 20|0);
          HEAP8[$650>>0] = $649;
          $651 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 21|0);
          $652 = HEAP8[$651>>0]|0;
          $653 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 21|0);
          HEAP8[$653>>0] = $652;
          $654 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 22|0);
          $655 = HEAP8[$654>>0]|0;
          $656 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 22|0);
          HEAP8[$656>>0] = $655;
          $657 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 23|0);
          $658 = HEAP8[$657>>0]|0;
          $$sink$i = $658;
         }
         $676 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 23|0);
         HEAP8[$676>>0] = $$sink$i;
         $677 = $640 & 4;
         $678 = ($677|0)==(0);
         if ($678) {
          $693 = (_mad_bit_read($14,$551)|0);
          $694 = $693&255;
          $695 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 24|0);
          HEAP8[$695>>0] = $694;
          $696 = (_mad_bit_read($14,$551)|0);
          $697 = $696&255;
          $698 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 25|0);
          HEAP8[$698>>0] = $697;
          $699 = (_mad_bit_read($14,$551)|0);
          $700 = $699&255;
          $701 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 26|0);
          HEAP8[$701>>0] = $700;
          $702 = (_mad_bit_read($14,$551)|0);
          $703 = $702&255;
          $704 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 27|0);
          HEAP8[$704>>0] = $703;
          $705 = (_mad_bit_read($14,$551)|0);
          $706 = $705&255;
          $$sink330$i = $706;
         } else {
          $679 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 24|0);
          $680 = HEAP8[$679>>0]|0;
          $681 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 24|0);
          HEAP8[$681>>0] = $680;
          $682 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 25|0);
          $683 = HEAP8[$682>>0]|0;
          $684 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 25|0);
          HEAP8[$684>>0] = $683;
          $685 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 26|0);
          $686 = HEAP8[$685>>0]|0;
          $687 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 26|0);
          HEAP8[$687>>0] = $686;
          $688 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 27|0);
          $689 = HEAP8[$688>>0]|0;
          $690 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 27|0);
          HEAP8[$690>>0] = $689;
          $691 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 28|0);
          $692 = HEAP8[$691>>0]|0;
          $$sink330$i = $692;
         }
         $707 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 28|0);
         HEAP8[$707>>0] = $$sink330$i;
         $708 = $640 & 2;
         $709 = ($708|0)==(0);
         if ($709) {
          $724 = (_mad_bit_read($14,$554)|0);
          $725 = $724&255;
          $726 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 29|0);
          HEAP8[$726>>0] = $725;
          $727 = (_mad_bit_read($14,$554)|0);
          $728 = $727&255;
          $729 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 30|0);
          HEAP8[$729>>0] = $728;
          $730 = (_mad_bit_read($14,$554)|0);
          $731 = $730&255;
          $732 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 31|0);
          HEAP8[$732>>0] = $731;
          $733 = (_mad_bit_read($14,$554)|0);
          $734 = $733&255;
          $735 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 32|0);
          HEAP8[$735>>0] = $734;
          $736 = (_mad_bit_read($14,$554)|0);
          $737 = $736&255;
          $$sink331$i = $737;
         } else {
          $710 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 29|0);
          $711 = HEAP8[$710>>0]|0;
          $712 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 29|0);
          HEAP8[$712>>0] = $711;
          $713 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 30|0);
          $714 = HEAP8[$713>>0]|0;
          $715 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 30|0);
          HEAP8[$715>>0] = $714;
          $716 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 31|0);
          $717 = HEAP8[$716>>0]|0;
          $718 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 31|0);
          HEAP8[$718>>0] = $717;
          $719 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 32|0);
          $720 = HEAP8[$719>>0]|0;
          $721 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 32|0);
          HEAP8[$721>>0] = $720;
          $722 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 33|0);
          $723 = HEAP8[$722>>0]|0;
          $$sink331$i = $723;
         }
         $738 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 33|0);
         HEAP8[$738>>0] = $$sink331$i;
         $739 = $640 & 1;
         $740 = ($739|0)==(0);
         if ($740) {
          $755 = (_mad_bit_read($14,$554)|0);
          $756 = $755&255;
          $757 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 34|0);
          HEAP8[$757>>0] = $756;
          $758 = (_mad_bit_read($14,$554)|0);
          $759 = $758&255;
          $760 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 35|0);
          HEAP8[$760>>0] = $759;
          $761 = (_mad_bit_read($14,$554)|0);
          $762 = $761&255;
          $763 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 36|0);
          HEAP8[$763>>0] = $762;
          $764 = (_mad_bit_read($14,$554)|0);
          $765 = $764&255;
          $766 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 37|0);
          HEAP8[$766>>0] = $765;
          $767 = (_mad_bit_read($14,$554)|0);
          $768 = $767&255;
          $$sink332$i = $768;
         } else {
          $741 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 34|0);
          $742 = HEAP8[$741>>0]|0;
          $743 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 34|0);
          HEAP8[$743>>0] = $742;
          $744 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 35|0);
          $745 = HEAP8[$744>>0]|0;
          $746 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 35|0);
          HEAP8[$746>>0] = $745;
          $747 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 36|0);
          $748 = HEAP8[$747>>0]|0;
          $749 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 36|0);
          HEAP8[$749>>0] = $748;
          $750 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 37|0);
          $751 = HEAP8[$750>>0]|0;
          $752 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 37|0);
          HEAP8[$752>>0] = $751;
          $753 = (((((($15)) + 10|0) + (($$0187258$i*58)|0)|0)) + 38|0);
          $754 = HEAP8[$753>>0]|0;
          $$sink332$i = $754;
         }
         $769 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 38|0);
         HEAP8[$769>>0] = $$sink332$i;
         $770 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 39|0);
         HEAP8[$770>>0] = 0;
        }
        $771 = (_mad_bit_length($9,$14)|0);
        $$0185$i = $771;
       } else {
        $350 = ($$0187258$i|0)==(0);
        $351 = $350 ? 0 : $232;
        $352 = HEAP32[$233>>2]|0;
        $353 = $14;
        $354 = $353;
        $355 = HEAP32[$354>>2]|0;
        $356 = (($353) + 4)|0;
        $357 = $356;
        $358 = HEAP32[$357>>2]|0;
        $359 = $10;
        $360 = $359;
        HEAP32[$360>>2] = $355;
        $361 = (($359) + 4)|0;
        $362 = $361;
        HEAP32[$362>>2] = $358;
        $363 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 6|0);
        $364 = HEAP16[$363>>1]|0;
        $365 = $364&65535;
        if ($340) {
         $366 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 8|0);
         $367 = HEAP8[$366>>0]|0;
         $368 = ($367&255) >>> 3;
         $369 = $368 & 1;
         $addconv$i$i = (($369) + 1)<<24>>24;
         $370 = $addconv$i$i&255;
         $396 = $370;
        } else {
         $396 = 0;
        }
        $371 = $352 & 1;
        $372 = ($371|0)!=(0);
        $373 = ($351|0)!=(0|0);
        $or$cond$i$i = $373 & $372;
        do {
         if ($or$cond$i$i) {
          $412 = $365 >>> 1;
          $413 = ($364&65535)<(360);
          do {
           if ($413) {
            $414 = (($365>>>0) / 72)&-1;
            $415 = (($412>>>0) % 36)&-1;
            $416 = (($415>>>0) / 6)&-1;
            $417 = ($416*6)|0;
            $418 = (($415) - ($417))|0;
            $$sink265 = 3;$432 = $414;$447 = $416;$467 = $418;
           } else {
            $419 = ($364&65535)<(488);
            if ($419) {
             $420 = (($412) + -180)|0;
             $421 = $420 >>> 4;
             $422 = $421 & 3;
             $423 = $420 >>> 2;
             $424 = $423 & 3;
             $425 = $420 & 3;
             $$sink265 = 4;$432 = $422;$447 = $424;$467 = $425;
             break;
            } else {
             $426 = (($412) + -244)|0;
             $427 = (($426>>>0) / 3)&-1;
             $428 = ($427*3)|0;
             $429 = (($426) - ($428))|0;
             $$sink265 = 5;$432 = $427;$447 = $429;$467 = 0;
             break;
            }
           }
          } while(0);
          $430 = ((3968 + (($$sink265*12)|0)|0) + ($396<<2)|0);
          $431 = 1 << $432;
          $433 = (($431) + -1)|0;
          $434 = HEAP8[$430>>0]|0;
          $435 = ($434<<24>>24)==(0);
          if ($435) {
           $$4$lcssa$i$i = 0;
          } else {
           $$18793$i$i = 0;
           while(1) {
            $436 = (_mad_bit_read($14,$432)|0);
            $437 = $436&255;
            $438 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($$18793$i$i)|0);
            HEAP8[$438>>0] = $437;
            $439 = ($436|0)==($433|0);
            $440 = $439&1;
            $441 = (($$18793$i$i) + 1)|0;
            $442 = (((($351)) + 18|0) + ($$18793$i$i)|0);
            HEAP8[$442>>0] = $440;
            $443 = HEAP8[$430>>0]|0;
            $444 = $443&255;
            $445 = ($441>>>0)<($444>>>0);
            if ($445) {
             $$18793$i$i = $441;
            } else {
             $$4$lcssa$i$i = $441;
             break;
            }
           }
          }
          $446 = 1 << $447;
          $448 = (($446) + -1)|0;
          $449 = ((((3968 + (($$sink265*12)|0)|0) + ($396<<2)|0)) + 1|0);
          $450 = HEAP8[$449>>0]|0;
          $451 = ($450<<24>>24)==(0);
          if ($451) {
           $$4$lcssa$1$i$i = $$4$lcssa$i$i;
          } else {
           $$18793$1$i$i = 0;$$492$1$i$i = $$4$lcssa$i$i;
           while(1) {
            $455 = (_mad_bit_read($14,$447)|0);
            $456 = $455&255;
            $457 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($$492$1$i$i)|0);
            HEAP8[$457>>0] = $456;
            $458 = ($455|0)==($448|0);
            $459 = $458&1;
            $460 = (($$492$1$i$i) + 1)|0;
            $461 = (((($351)) + 18|0) + ($$492$1$i$i)|0);
            HEAP8[$461>>0] = $459;
            $462 = (($$18793$1$i$i) + 1)|0;
            $463 = HEAP8[$449>>0]|0;
            $464 = $463&255;
            $465 = ($462>>>0)<($464>>>0);
            if ($465) {
             $$18793$1$i$i = $462;$$492$1$i$i = $460;
            } else {
             $$4$lcssa$1$i$i = $460;
             break;
            }
           }
          }
          $466 = 1 << $467;
          $468 = (($466) + -1)|0;
          $469 = ((((3968 + (($$sink265*12)|0)|0) + ($396<<2)|0)) + 2|0);
          $470 = HEAP8[$469>>0]|0;
          $471 = ($470<<24>>24)==(0);
          if ($471) {
           $$4$lcssa$2$i$i = $$4$lcssa$1$i$i;
          } else {
           $$18793$2$i$i = 0;$$492$2$i$i = $$4$lcssa$1$i$i;
           while(1) {
            $472 = (_mad_bit_read($14,$467)|0);
            $473 = $472&255;
            $474 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($$492$2$i$i)|0);
            HEAP8[$474>>0] = $473;
            $475 = ($472|0)==($468|0);
            $476 = $475&1;
            $477 = (($$492$2$i$i) + 1)|0;
            $478 = (((($351)) + 18|0) + ($$492$2$i$i)|0);
            HEAP8[$478>>0] = $476;
            $479 = (($$18793$2$i$i) + 1)|0;
            $480 = HEAP8[$469>>0]|0;
            $481 = $480&255;
            $482 = ($479>>>0)<($481>>>0);
            if ($482) {
             $$18793$2$i$i = $479;$$492$2$i$i = $477;
            } else {
             $$4$lcssa$2$i$i = $477;
             break;
            }
           }
          }
          $483 = ((((3968 + (($$sink265*12)|0)|0) + ($396<<2)|0)) + 3|0);
          $484 = HEAP8[$483>>0]|0;
          $485 = ($484<<24>>24)==(0);
          if ($485) {
           $$4$lcssa$3$i$i = $$4$lcssa$2$i$i;
          } else {
           $$18793$3$i$i = 0;$$492$3$i$i = $$4$lcssa$2$i$i;
           while(1) {
            $486 = (_mad_bit_read($14,0)|0);
            $487 = $486&255;
            $488 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($$492$3$i$i)|0);
            HEAP8[$488>>0] = $487;
            $489 = ($486|0)==(0);
            $490 = $489&1;
            $491 = (($$492$3$i$i) + 1)|0;
            $492 = (((($351)) + 18|0) + ($$492$3$i$i)|0);
            HEAP8[$492>>0] = $490;
            $493 = (($$18793$3$i$i) + 1)|0;
            $494 = HEAP8[$483>>0]|0;
            $495 = $494&255;
            $496 = ($493>>>0)<($495>>>0);
            if ($496) {
             $$18793$3$i$i = $493;$$492$3$i$i = $491;
            } else {
             $$4$lcssa$3$i$i = $491;
             break;
            }
           }
          }
          $497 = ($$4$lcssa$3$i$i>>>0)<(39);
          if (!($497)) {
           break;
          }
          $$591$i$i = $$4$lcssa$3$i$i;
          while(1) {
           $452 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($$591$i$i)|0);
           HEAP8[$452>>0] = 0;
           $453 = (($$591$i$i) + 1)|0;
           $454 = (((($351)) + 18|0) + ($$591$i$i)|0);
           HEAP8[$454>>0] = 0;
           $exitcond$i$i = ($453|0)==(39);
           if ($exitcond$i$i) {
            break;
           } else {
            $$591$i$i = $453;
           }
          }
         } else {
          $374 = ($364&65535)<(400);
          do {
           if ($374) {
            $375 = $365 >>> 4;
            $376 = (($365>>>0) / 80)&-1;
            $377 = (($375>>>0) % 5)&-1;
            $378 = $365 >>> 2;
            $379 = $378 & 3;
            $380 = $365 & 3;
            $$sink264 = 0;$399 = $376;$498 = $377;$510 = $379;$522 = $380;
           } else {
            $381 = ($364&65535)<(500);
            if ($381) {
             $382 = (($365) + -400)|0;
             $383 = $382 >>> 2;
             $384 = (($382>>>0) / 20)&-1;
             $385 = (($383>>>0) % 5)&-1;
             $386 = $364 & 3;
             $387 = $386&65535;
             $$sink264 = 1;$399 = $384;$498 = $385;$510 = $387;$522 = 0;
             break;
            } else {
             $388 = (($365) + -500)|0;
             $389 = (($388>>>0) / 3)&-1;
             $390 = ($389*3)|0;
             $391 = (($388) - ($390))|0;
             $392 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 8|0);
             $393 = HEAP8[$392>>0]|0;
             $394 = $393 | 4;
             HEAP8[$392>>0] = $394;
             $$sink264 = 2;$399 = $389;$498 = $391;$510 = 0;$522 = 0;
             break;
            }
           }
          } while(0);
          $395 = ((3968 + (($$sink264*12)|0)|0) + ($396<<2)|0);
          $397 = HEAP8[$395>>0]|0;
          $398 = ($397<<24>>24)==(0);
          if ($398) {
           $$189$lcssa$i$i = 0;
          } else {
           $$086101$i$i = 0;
           while(1) {
            $400 = (_mad_bit_read($14,$399)|0);
            $401 = $400&255;
            $402 = (($$086101$i$i) + 1)|0;
            $403 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($$086101$i$i)|0);
            HEAP8[$403>>0] = $401;
            $404 = HEAP8[$395>>0]|0;
            $405 = $404&255;
            $406 = ($402>>>0)<($405>>>0);
            if ($406) {
             $$086101$i$i = $402;
            } else {
             $$189$lcssa$i$i = $402;
             break;
            }
           }
          }
          $407 = ((((3968 + (($$sink264*12)|0)|0) + ($396<<2)|0)) + 1|0);
          $408 = HEAP8[$407>>0]|0;
          $409 = ($408<<24>>24)==(0);
          if ($409) {
           $$189$lcssa$1$i$i = $$189$lcssa$i$i;
          } else {
           $$086101$1$i$i = 0;$$189100$1$i$i = $$189$lcssa$i$i;
           while(1) {
            $499 = (_mad_bit_read($14,$498)|0);
            $500 = $499&255;
            $501 = (($$189100$1$i$i) + 1)|0;
            $502 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($$189100$1$i$i)|0);
            HEAP8[$502>>0] = $500;
            $503 = (($$086101$1$i$i) + 1)|0;
            $504 = HEAP8[$407>>0]|0;
            $505 = $504&255;
            $506 = ($503>>>0)<($505>>>0);
            if ($506) {
             $$086101$1$i$i = $503;$$189100$1$i$i = $501;
            } else {
             $$189$lcssa$1$i$i = $501;
             break;
            }
           }
          }
          $507 = ((((3968 + (($$sink264*12)|0)|0) + ($396<<2)|0)) + 2|0);
          $508 = HEAP8[$507>>0]|0;
          $509 = ($508<<24>>24)==(0);
          if ($509) {
           $$189$lcssa$2$i$i = $$189$lcssa$1$i$i;
          } else {
           $$086101$2$i$i = 0;$$189100$2$i$i = $$189$lcssa$1$i$i;
           while(1) {
            $511 = (_mad_bit_read($14,$510)|0);
            $512 = $511&255;
            $513 = (($$189100$2$i$i) + 1)|0;
            $514 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($$189100$2$i$i)|0);
            HEAP8[$514>>0] = $512;
            $515 = (($$086101$2$i$i) + 1)|0;
            $516 = HEAP8[$507>>0]|0;
            $517 = $516&255;
            $518 = ($515>>>0)<($517>>>0);
            if ($518) {
             $$086101$2$i$i = $515;$$189100$2$i$i = $513;
            } else {
             $$189$lcssa$2$i$i = $513;
             break;
            }
           }
          }
          $519 = ((((3968 + (($$sink264*12)|0)|0) + ($396<<2)|0)) + 3|0);
          $520 = HEAP8[$519>>0]|0;
          $521 = ($520<<24>>24)==(0);
          if ($521) {
           $$189$lcssa$3$i$i = $$189$lcssa$2$i$i;
          } else {
           $$086101$3$i$i = 0;$$189100$3$i$i = $$189$lcssa$2$i$i;
           while(1) {
            $523 = (_mad_bit_read($14,$522)|0);
            $524 = $523&255;
            $525 = (($$189100$3$i$i) + 1)|0;
            $526 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($$189100$3$i$i)|0);
            HEAP8[$526>>0] = $524;
            $527 = (($$086101$3$i$i) + 1)|0;
            $528 = HEAP8[$519>>0]|0;
            $529 = $528&255;
            $530 = ($527>>>0)<($529>>>0);
            if ($530) {
             $$086101$3$i$i = $527;$$189100$3$i$i = $525;
            } else {
             $$189$lcssa$3$i$i = $525;
             break;
            }
           }
          }
          $531 = ($$189$lcssa$3$i$i>>>0)<(39);
          if (!($531)) {
           break;
          }
          $410 = (($$189$lcssa$3$i$i) + 18)|0;
          $uglygep$i$i = (($336) + ($410)|0);
          $411 = (39 - ($$189$lcssa$3$i$i))|0;
          _memset(($uglygep$i$i|0),0,($411|0))|0;
         }
        } while(0);
        $532 = (_mad_bit_length($10,$14)|0);
        $$0185$i = $532;
       }
       $772 = (($12) + (($$0187258$i*2304)|0)|0);
       $773 = HEAP16[$336>>1]|0;
       $774 = $773&65535;
       $775 = (($774) - ($$0185$i))|0;
       $776 = ($775|0)<(0);
       if ($776) {
        $$3282$i$ph$i = 566;
        label = 339;
        break L66;
       }
       $777 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 4|0);
       $778 = HEAP16[$777>>1]|0;
       $779 = $778&65535;
       $780 = (($779) + -210)|0;
       $781 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 8|0);
       $782 = HEAP8[$781>>0]|0;
       $783 = $782&255;
       $784 = $783 >>> 1;
       $785 = $784 & 1;
       $786 = (($785) + 1)|0;
       $787 = HEAP8[$338>>0]|0;
       $788 = ($787<<24>>24)==(2);
       do {
        if ($788) {
         $789 = $783 & 8;
         $790 = ($789|0)==(0);
         if ($790) {
          $$1$i$i$i = 0;$$179$i$i$i = 0;
         } else {
          $791 = $783 << 29;
          $sext$i$i$i = $791 >> 31;
          $$07891$i$i$i = 0;$$092$i$i$i = 0;
          while(1) {
           $792 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($$092$i$i$i)|0);
           $793 = HEAP8[$792>>0]|0;
           $794 = $793&255;
           $795 = (4080 + ($$092$i$i$i)|0);
           $796 = HEAP8[$795>>0]|0;
           $797 = $796&255;
           $798 = $sext$i$i$i & $797;
           $799 = (($798) + ($794))|0;
           $800 = $799 << $786;
           $801 = (($780) - ($800))|0;
           $802 = (($6) + ($$092$i$i$i<<2)|0);
           HEAP32[$802>>2] = $801;
           $803 = (($$092$i$i$i) + 1)|0;
           $804 = (($346) + ($$092$i$i$i)|0);
           $805 = HEAP8[$804>>0]|0;
           $806 = $805&255;
           $807 = (($$07891$i$i$i) + ($806))|0;
           $808 = ($807>>>0)<(36);
           if ($808) {
            $$07891$i$i$i = $807;$$092$i$i$i = $803;
           } else {
            $$1$i$i$i = $803;$$179$i$i$i = $807;
            break;
           }
          }
         }
         $809 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 13|0);
         $810 = HEAP8[$809>>0]|0;
         $811 = $810&255;
         $812 = $811 << 3;
         $813 = (($780) - ($812))|0;
         $814 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 14|0);
         $815 = HEAP8[$814>>0]|0;
         $816 = $815&255;
         $817 = $816 << 3;
         $818 = (($780) - ($817))|0;
         $819 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 15|0);
         $820 = HEAP8[$819>>0]|0;
         $821 = $820&255;
         $822 = $821 << 3;
         $823 = (($780) - ($822))|0;
         $824 = ($$179$i$i$i>>>0)<(576);
         if (!($824)) {
          break;
         }
         $$28089$i$i$i = $$179$i$i$i;$$290$i$i$i = $$1$i$i$i;
         while(1) {
          $825 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($$290$i$i$i)|0);
          $826 = HEAP8[$825>>0]|0;
          $827 = $826&255;
          $828 = $827 << $786;
          $829 = (($813) - ($828))|0;
          $830 = (($6) + ($$290$i$i$i<<2)|0);
          HEAP32[$830>>2] = $829;
          $831 = (($$290$i$i$i) + 1)|0;
          $832 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($831)|0);
          $833 = HEAP8[$832>>0]|0;
          $834 = $833&255;
          $835 = $834 << $786;
          $836 = (($818) - ($835))|0;
          $837 = (($6) + ($831<<2)|0);
          HEAP32[$837>>2] = $836;
          $838 = (($$290$i$i$i) + 2)|0;
          $839 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0) + ($838)|0);
          $840 = HEAP8[$839>>0]|0;
          $841 = $840&255;
          $842 = $841 << $786;
          $843 = (($823) - ($842))|0;
          $844 = (($6) + ($838<<2)|0);
          HEAP32[$844>>2] = $843;
          $845 = (($346) + ($$290$i$i$i)|0);
          $846 = HEAP8[$845>>0]|0;
          $847 = $846&255;
          $848 = ($847*3)|0;
          $849 = (($848) + ($$28089$i$i$i))|0;
          $850 = (($$290$i$i$i) + 3)|0;
          $851 = ($849>>>0)<(576);
          if ($851) {
           $$28089$i$i$i = $849;$$290$i$i$i = $850;
          } else {
           break;
          }
         }
        } else {
         $852 = $783 & 4;
         $853 = ($852|0)==(0);
         $854 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 18|0);
         $855 = HEAP8[$854>>0]|0;
         $856 = $855&255;
         $857 = $856 << $786;
         $858 = (($780) - ($857))|0;
         HEAP32[$6>>2] = $858;
         $859 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 19|0);
         $860 = HEAP8[$859>>0]|0;
         $861 = $860&255;
         $862 = $861 << $786;
         $863 = (($780) - ($862))|0;
         HEAP32[$234>>2] = $863;
         $864 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 20|0);
         $865 = HEAP8[$864>>0]|0;
         $866 = $865&255;
         $867 = $866 << $786;
         $868 = (($780) - ($867))|0;
         HEAP32[$235>>2] = $868;
         $869 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 21|0);
         $870 = HEAP8[$869>>0]|0;
         $871 = $870&255;
         $872 = $871 << $786;
         $873 = (($780) - ($872))|0;
         HEAP32[$236>>2] = $873;
         $874 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 22|0);
         $875 = HEAP8[$874>>0]|0;
         $876 = $875&255;
         $877 = $876 << $786;
         $878 = (($780) - ($877))|0;
         HEAP32[$237>>2] = $878;
         $879 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 23|0);
         $880 = HEAP8[$879>>0]|0;
         $881 = $880&255;
         $882 = $881 << $786;
         $883 = (($780) - ($882))|0;
         HEAP32[$238>>2] = $883;
         $884 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 24|0);
         $885 = HEAP8[$884>>0]|0;
         $886 = $885&255;
         $887 = $886 << $786;
         $888 = (($780) - ($887))|0;
         HEAP32[$239>>2] = $888;
         $889 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 25|0);
         $890 = HEAP8[$889>>0]|0;
         $891 = $890&255;
         $892 = $891 << $786;
         $893 = (($780) - ($892))|0;
         HEAP32[$240>>2] = $893;
         $894 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 26|0);
         $895 = HEAP8[$894>>0]|0;
         $896 = $895&255;
         $897 = $896 << $786;
         $898 = (($780) - ($897))|0;
         HEAP32[$241>>2] = $898;
         $899 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 27|0);
         $900 = HEAP8[$899>>0]|0;
         $901 = $900&255;
         $902 = $901 << $786;
         $903 = (($780) - ($902))|0;
         HEAP32[$242>>2] = $903;
         $904 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 28|0);
         $905 = HEAP8[$904>>0]|0;
         $906 = $905&255;
         $907 = $906 << $786;
         $908 = (($780) - ($907))|0;
         HEAP32[$243>>2] = $908;
         $909 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 29|0);
         $910 = HEAP8[$909>>0]|0;
         $911 = $910&255;
         if ($853) {
          $974 = $911 << $786;
          $975 = (($780) - ($974))|0;
          HEAP32[$244>>2] = $975;
          $976 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 30|0);
          $977 = HEAP8[$976>>0]|0;
          $978 = $977&255;
          $979 = $978 << $786;
          $980 = (($780) - ($979))|0;
          HEAP32[$245>>2] = $980;
          $981 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 31|0);
          $982 = HEAP8[$981>>0]|0;
          $983 = $982&255;
          $984 = $983 << $786;
          $985 = (($780) - ($984))|0;
          HEAP32[$246>>2] = $985;
          $986 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 32|0);
          $987 = HEAP8[$986>>0]|0;
          $988 = $987&255;
          $989 = $988 << $786;
          $990 = (($780) - ($989))|0;
          HEAP32[$247>>2] = $990;
          $991 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 33|0);
          $992 = HEAP8[$991>>0]|0;
          $993 = $992&255;
          $994 = $993 << $786;
          $995 = (($780) - ($994))|0;
          HEAP32[$248>>2] = $995;
          $996 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 34|0);
          $997 = HEAP8[$996>>0]|0;
          $998 = $997&255;
          $999 = $998 << $786;
          $1000 = (($780) - ($999))|0;
          HEAP32[$249>>2] = $1000;
          $1001 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 35|0);
          $1002 = HEAP8[$1001>>0]|0;
          $1003 = $1002&255;
          $1004 = $1003 << $786;
          $1005 = (($780) - ($1004))|0;
          HEAP32[$250>>2] = $1005;
          $1006 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 36|0);
          $1007 = HEAP8[$1006>>0]|0;
          $1008 = $1007&255;
          $1009 = $1008 << $786;
          $1010 = (($780) - ($1009))|0;
          HEAP32[$251>>2] = $1010;
          $1011 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 37|0);
          $1012 = HEAP8[$1011>>0]|0;
          $1013 = $1012&255;
          $1014 = $1013 << $786;
          $1015 = (($780) - ($1014))|0;
          HEAP32[$252>>2] = $1015;
          $1016 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 38|0);
          $1017 = HEAP8[$1016>>0]|0;
          $1018 = $1017&255;
          $1019 = $1018 << $786;
          $1020 = (($780) - ($1019))|0;
          HEAP32[$253>>2] = $1020;
          $1021 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 39|0);
          $1022 = HEAP8[$1021>>0]|0;
          $1023 = $1022&255;
          $1024 = $1023 << $786;
          $1025 = (($780) - ($1024))|0;
          HEAP32[$254>>2] = $1025;
          break;
         } else {
          $912 = (($911) + 1)|0;
          $913 = $912 << $786;
          $914 = (($780) - ($913))|0;
          HEAP32[$244>>2] = $914;
          $915 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 30|0);
          $916 = HEAP8[$915>>0]|0;
          $917 = $916&255;
          $918 = (($917) + 1)|0;
          $919 = $918 << $786;
          $920 = (($780) - ($919))|0;
          HEAP32[$245>>2] = $920;
          $921 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 31|0);
          $922 = HEAP8[$921>>0]|0;
          $923 = $922&255;
          $924 = (($923) + 1)|0;
          $925 = $924 << $786;
          $926 = (($780) - ($925))|0;
          HEAP32[$246>>2] = $926;
          $927 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 32|0);
          $928 = HEAP8[$927>>0]|0;
          $929 = $928&255;
          $930 = (($929) + 1)|0;
          $931 = $930 << $786;
          $932 = (($780) - ($931))|0;
          HEAP32[$247>>2] = $932;
          $933 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 33|0);
          $934 = HEAP8[$933>>0]|0;
          $935 = $934&255;
          $936 = (($935) + 2)|0;
          $937 = $936 << $786;
          $938 = (($780) - ($937))|0;
          HEAP32[$248>>2] = $938;
          $939 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 34|0);
          $940 = HEAP8[$939>>0]|0;
          $941 = $940&255;
          $942 = (($941) + 2)|0;
          $943 = $942 << $786;
          $944 = (($780) - ($943))|0;
          HEAP32[$249>>2] = $944;
          $945 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 35|0);
          $946 = HEAP8[$945>>0]|0;
          $947 = $946&255;
          $948 = (($947) + 3)|0;
          $949 = $948 << $786;
          $950 = (($780) - ($949))|0;
          HEAP32[$250>>2] = $950;
          $951 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 36|0);
          $952 = HEAP8[$951>>0]|0;
          $953 = $952&255;
          $954 = (($953) + 3)|0;
          $955 = $954 << $786;
          $956 = (($780) - ($955))|0;
          HEAP32[$251>>2] = $956;
          $957 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 37|0);
          $958 = HEAP8[$957>>0]|0;
          $959 = $958&255;
          $960 = (($959) + 3)|0;
          $961 = $960 << $786;
          $962 = (($780) - ($961))|0;
          HEAP32[$252>>2] = $962;
          $963 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 38|0);
          $964 = HEAP8[$963>>0]|0;
          $965 = $964&255;
          $966 = (($965) + 2)|0;
          $967 = $966 << $786;
          $968 = (($780) - ($967))|0;
          HEAP32[$253>>2] = $968;
          $969 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 39|0);
          $970 = HEAP8[$969>>0]|0;
          $971 = $970&255;
          $972 = $971 << $786;
          $973 = (($780) - ($972))|0;
          HEAP32[$254>>2] = $973;
          break;
         }
        }
       } while(0);
       $1026 = $14;
       $1027 = $1026;
       $1028 = HEAP32[$1027>>2]|0;
       $1029 = (($1026) + 4)|0;
       $1030 = $1029;
       $1031 = HEAP32[$1030>>2]|0;
       $1032 = $7;
       $1033 = $1032;
       HEAP32[$1033>>2] = $1028;
       $1034 = (($1032) + 4)|0;
       $1035 = $1034;
       HEAP32[$1035>>2] = $1031;
       _mad_bit_skip($14,$775);
       $1036 = (_bitshift64Lshr(($1028|0),($1031|0),48)|0);
       $1037 = (getTempRet0() | 0);
       $1038 = (31 - ($1036))|0;
       $1039 = $1038 & -8;
       $1040 = (($1039) + ($1036))|0;
       $1041 = (_mad_bit_read($7,$1040)|0);
       $1042 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 10|0);
       $1043 = HEAP8[$1042>>0]|0;
       $1044 = $1043&255;
       $1045 = (38096 + ($1044<<3)|0);
       $1046 = HEAP32[$1045>>2]|0;
       $1047 = ($1046|0)==(0|0);
       if ($1047) {
        label = 194;
        break L66;
       }
       $1048 = HEAP8[$346>>0]|0;
       $1049 = $1048&255;
       $1050 = ((($12) + (($$0187258$i*2304)|0)|0) + ($1049<<2)|0);
       $1051 = ((($346)) + 1|0);
       $1052 = (($775) - ($1040))|0;
       $1053 = HEAP32[$6>>2]|0;
       $1054 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 2|0);
       $1055 = HEAP16[$1054>>1]|0;
       $1056 = ($1055<<16>>16)!=(0);
       $1057 = ($775|0)>(0);
       $or$cond493$i$i = $1057 & $1056;
       if ($or$cond493$i$i) {
        $1058 = $1055&65535;
        $1059 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 16|0);
        $1060 = HEAP8[$1059>>0]|0;
        $1061 = $1060&255;
        $1062 = (($1061) + 1)|0;
        $1063 = (((38096 + ($1044<<3)|0)) + 4|0);
        $1064 = HEAP16[$1063>>1]|0;
        $1065 = $1064&65535;
        $1066 = (((38096 + ($1044<<3)|0)) + 6|0);
        $1067 = HEAP16[$1066>>1]|0;
        $1068 = $1067&65535;
        $1069 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 17|0);
        $$0283507$i$i = $1051;$$0294506$i$i = 0;$$0302505$i$i = $1068;$$0306504$i$i = $1065;$$0310503$i$i = $1046;$$0314502$i$i = $1062;$$0319501$i$i = 0;$$0325500$i$i = $1041;$$0336499$i$i = $1050;$$0343$idx498$i$i = 0;$$0343$ptr508$i$i = $772;$$0349497$i$i = $1040;$$0361496$i$i = $1052;$$0373495$i$i = $234;$$0380494$i$i = $1053;$$in$i$i = $1058;
        while(1) {
         $1070 = (($$in$i$i) + -1)|0;
         $1071 = ($$0343$ptr508$i$i|0)==($$0336499$i$i|0);
         if ($1071) {
          $1072 = ((($$0283507$i$i)) + 1|0);
          $1073 = HEAP8[$$0283507$i$i>>0]|0;
          $1074 = $1073&255;
          $1075 = (($$0343$ptr508$i$i) + ($1074<<2)|0);
          $1076 = (($$0314502$i$i) + -1)|0;
          $1077 = ($1076|0)==(0);
          if ($1077) {
           $1078 = ($$0319501$i$i|0)==(0);
           if ($1078) {
            $1079 = HEAP8[$1069>>0]|0;
            $1080 = $1079&255;
            $1081 = (($1080) + 1)|0;
            $$1315$i$i = $1081;
           } else {
            $$1315$i$i = 0;
           }
           $1082 = (($$0319501$i$i) + 1)|0;
           $1083 = (((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$0187258$i*58)|0)|0)) + 10|0) + ($1082)|0);
           $1084 = HEAP8[$1083>>0]|0;
           $1085 = $1084&255;
           $1086 = (38096 + ($1085<<3)|0);
           $1087 = HEAP32[$1086>>2]|0;
           $1088 = (((38096 + ($1085<<3)|0)) + 4|0);
           $1089 = HEAP16[$1088>>1]|0;
           $1090 = $1089&65535;
           $1091 = (((38096 + ($1085<<3)|0)) + 6|0);
           $1092 = HEAP16[$1091>>1]|0;
           $1093 = $1092&65535;
           $1094 = ($1087|0)==(0|0);
           if ($1094) {
            label = 194;
            break L66;
           } else {
            $$1303$i$i = $1093;$$1307$i$i = $1090;$$1311$i$i = $1087;$$1320$i$i = $1082;$$2316$i$i = $$1315$i$i;
           }
          } else {
           $$1303$i$i = $$0302505$i$i;$$1307$i$i = $$0306504$i$i;$$1311$i$i = $$0310503$i$i;$$1320$i$i = $$0319501$i$i;$$2316$i$i = $1076;
          }
          $1095 = HEAP32[$$0373495$i$i>>2]|0;
          $1096 = ($$0380494$i$i|0)==($1095|0);
          $spec$select398$i$i = $1096 ? $$0294506$i$i : 0;
          $1097 = ((($$0373495$i$i)) + 4|0);
          $$1284$i$i = $1072;$$1337$i$i = $1075;$$1374$i$i = $1097;$$2296$i$i = $spec$select398$i$i;$$2304$i$i = $$1303$i$i;$$2308$i$i = $$1307$i$i;$$2312$i$i = $$1311$i$i;$$2321$i$i = $$1320$i$i;$$2382$i$i = $1095;$$3317$i$i = $$2316$i$i;
         } else {
          $$1284$i$i = $$0283507$i$i;$$1337$i$i = $$0336499$i$i;$$1374$i$i = $$0373495$i$i;$$2296$i$i = $$0294506$i$i;$$2304$i$i = $$0302505$i$i;$$2308$i$i = $$0306504$i$i;$$2312$i$i = $$0310503$i$i;$$2321$i$i = $$0319501$i$i;$$2382$i$i = $$0380494$i$i;$$3317$i$i = $$0314502$i$i;
         }
         $1098 = ($$0349497$i$i|0)<(21);
         $1099 = (31 - ($$0349497$i$i))|0;
         $1100 = $1099 & -8;
         if ($1098) {
          $1101 = (($$0361496$i$i) - ($1100))|0;
          $1102 = (($1100) + ($$0349497$i$i))|0;
          $1103 = $$0325500$i$i << $1100;
          $1104 = (_mad_bit_read($7,$1100)|0);
          $1105 = $1104 | $1103;
          $$1326$i$i = $1105;$$1350$i$i = $1102;$$1362$i$i = $1101;
         } else {
          $$1326$i$i = $$0325500$i$i;$$1350$i$i = $$0349497$i$i;$$1362$i$i = $$0361496$i$i;
         }
         $1106 = (($$1350$i$i) - ($$2304$i$i))|0;
         $1107 = $$1326$i$i >>> $1106;
         $1108 = 1 << $$2304$i$i;
         $1109 = (($1108) + -1)|0;
         $1110 = $1107 & $1109;
         $$0293486$i$i = (($$2312$i$i) + ($1110<<1)|0);
         $1111 = HEAP8[$$0293486$i$i>>0]|0;
         $1112 = $1111 & 1;
         $1113 = ($1112<<24>>24)==(0);
         if ($1113) {
          $$0292488$i$i = $$2304$i$i;$$2351487$i$i = $$1350$i$i;$1116 = $1110;
          while(1) {
           $1114 = (($$2351487$i$i) - ($$0292488$i$i))|0;
           $1115 = (($$2312$i$i) + ($1116<<1)|0);
           $1117 = HEAP16[$1115>>1]|0;
           $1118 = ($1117&65535) >>> 1;
           $1119 = $1118 & 7;
           $1120 = $1119&65535;
           $1121 = ($1117&65535) >>> 4;
           $1122 = $1121&65535;
           $1123 = (($1114) - ($1120))|0;
           $1124 = $$1326$i$i >>> $1123;
           $1125 = 1 << $1120;
           $1126 = (($1125) + -1)|0;
           $1127 = $1124 & $1126;
           $1128 = (($1127) + ($1122))|0;
           $$0293$i$i = (($$2312$i$i) + ($1128<<1)|0);
           $1129 = HEAP8[$$0293$i$i>>0]|0;
           $1130 = $1129 & 1;
           $1131 = ($1130<<24>>24)==(0);
           if ($1131) {
            $$0292488$i$i = $1120;$$2351487$i$i = $1114;$1116 = $1128;
           } else {
            $$2351$lcssa$i$i = $1114;$1133 = $1128;
            break;
           }
          }
         } else {
          $$2351$lcssa$i$i = $$1350$i$i;$1133 = $1110;
         }
         $1132 = (($$2312$i$i) + ($1133<<1)|0);
         $1134 = HEAP16[$1132>>1]|0;
         $1135 = ($1134&65535) >>> 1;
         $1136 = $1135 & 7;
         $1137 = $1136&65535;
         $1138 = (($$2351$lcssa$i$i) - ($1137))|0;
         $1139 = ($$2308$i$i|0)==(0);
         $1140 = ($1134&65535) >>> 4;
         $1141 = $1140 & 15;
         $1142 = $1141&65535;
         L206: do {
          if ($1139) {
           $1313 = ($1141<<16>>16)==(0);
           if ($1313) {
            $$7$i$i = $$2296$i$i;$$8357$i$i = $1138;$storemerge$i$i = 0;
           } else {
            $1314 = 1 << $1142;
            $1315 = $1314 & $$2296$i$i;
            $1316 = ($1315|0)==(0);
            if ($1316) {
             $1319 = $1314 | $$2296$i$i;
             $1320 = (($$2382$i$i|0) % 4)&-1;
             $1321 = (($$2382$i$i|0) / 4)&-1;
             $1322 = (4112 + ($1142<<2)|0);
             $1323 = HEAP32[$1322>>2]|0;
             $1324 = $1323 & 134217727;
             $1325 = $1323 >>> 27;
             $1326 = (($1325) + ($1321))|0;
             $1327 = ($1326|0)<(0);
             if ($1327) {
              $1328 = (0 - ($1326))|0;
              $1329 = ($1328>>>0)>(31);
              $1330 = $1326 ^ -1;
              $1331 = 1 << $1330;
              $1332 = (($1331) + ($1324))|0;
              $1333 = $1332 >> $1328;
              $spec$select21$i413$i$i = $1329 ? 0 : $1333;
              $$0$i415$i$i = $spec$select21$i413$i$i;
             } else {
              $1334 = ($1326|0)>(4);
              $1335 = $1324 << $1326;
              $spec$select$i414$i$i = $1334 ? 2147483647 : $1335;
              $$0$i415$i$i = $spec$select$i414$i$i;
             }
             $1336 = ($1320|0)==(0);
             if ($1336) {
              $1349 = $$0$i415$i$i;
             } else {
              $1337 = ($$0$i415$i$i|0)<(0);
              $1338 = $1337 << 31 >> 31;
              $1339 = (($1320) + 3)|0;
              $1340 = (36944 + ($1339<<2)|0);
              $1341 = HEAP32[$1340>>2]|0;
              $1342 = ($1341|0)<(0);
              $1343 = $1342 << 31 >> 31;
              $1344 = (___muldi3(($1341|0),($1343|0),($$0$i415$i$i|0),($1338|0))|0);
              $1345 = (getTempRet0() | 0);
              $1346 = (_bitshift64Lshr(($1344|0),($1345|0),28)|0);
              $1347 = (getTempRet0() | 0);
              $1349 = $1346;
             }
             $1348 = (($8) + ($1142<<2)|0);
             HEAP32[$1348>>2] = $1349;
             $$2290$i$i = $1349;$$6300$i$i = $1319;
            } else {
             $1317 = (($8) + ($1142<<2)|0);
             $1318 = HEAP32[$1317>>2]|0;
             $$2290$i$i = $1318;$$6300$i$i = $$2296$i$i;
            }
            $1350 = (($1138) + -1)|0;
            $1351 = 1 << $1350;
            $1352 = $1351 & $$1326$i$i;
            $1353 = ($1352|0)==(0);
            $1354 = (0 - ($$2290$i$i))|0;
            $1355 = $1353 ? $$2290$i$i : $1354;
            $$7$i$i = $$6300$i$i;$$8357$i$i = $1350;$storemerge$i$i = $1355;
           }
           HEAP32[$$0343$ptr508$i$i>>2] = $storemerge$i$i;
           $1356 = HEAP16[$1132>>1]|0;
           $1357 = ($1356&65535) >>> 8;
           $1358 = $1357 & 15;
           $1359 = $1358&65535;
           $1360 = ($1358<<16>>16)==(0);
           if ($1360) {
            $$7332$i$i = $$1326$i$i;$$7368$i$i = $$1362$i$i;$$9$i$i = $$7$i$i;$$9358$i$i = $$8357$i$i;$$sink266 = 0;
            break;
           }
           $1361 = 1 << $1359;
           $1362 = $1361 & $$7$i$i;
           $1363 = ($1362|0)==(0);
           if ($1363) {
            $1366 = $1361 | $$7$i$i;
            $1367 = (($$2382$i$i|0) / 4)&-1;
            $1368 = $1367<<2;
            $1369 = (($$2382$i$i) - ($1368))|0;
            $1370 = (4112 + ($1359<<2)|0);
            $1371 = HEAP32[$1370>>2]|0;
            $1372 = $1371 & 134217727;
            $1373 = $1371 >>> 27;
            $1374 = (($1373) + ($1367))|0;
            $1375 = ($1374|0)<(0);
            if ($1375) {
             $1376 = (0 - ($1374))|0;
             $1377 = ($1376>>>0)>(31);
             $1378 = $1374 ^ -1;
             $1379 = 1 << $1378;
             $1380 = (($1379) + ($1372))|0;
             $1381 = $1380 >> $1376;
             $spec$select21$i409$i$i = $1377 ? 0 : $1381;
             $$0$i411$i$i = $spec$select21$i409$i$i;
            } else {
             $1382 = ($1374|0)>(4);
             $1383 = $1372 << $1374;
             $spec$select$i410$i$i = $1382 ? 2147483647 : $1383;
             $$0$i411$i$i = $spec$select$i410$i$i;
            }
            $1384 = ($1369|0)==(0);
            if ($1384) {
             $1397 = $$0$i411$i$i;
            } else {
             $1385 = ($$0$i411$i$i|0)<(0);
             $1386 = $1385 << 31 >> 31;
             $1387 = (($1369) + 3)|0;
             $1388 = (36944 + ($1387<<2)|0);
             $1389 = HEAP32[$1388>>2]|0;
             $1390 = ($1389|0)<(0);
             $1391 = $1390 << 31 >> 31;
             $1392 = (___muldi3(($1389|0),($1391|0),($$0$i411$i$i|0),($1386|0))|0);
             $1393 = (getTempRet0() | 0);
             $1394 = (_bitshift64Lshr(($1392|0),($1393|0),28)|0);
             $1395 = (getTempRet0() | 0);
             $1397 = $1394;
            }
            $1396 = (($8) + ($1359<<2)|0);
            HEAP32[$1396>>2] = $1397;
            $$3291$i$i = $1397;$$8$i$i = $1366;
           } else {
            $1364 = (($8) + ($1359<<2)|0);
            $1365 = HEAP32[$1364>>2]|0;
            $$3291$i$i = $1365;$$8$i$i = $$7$i$i;
           }
           $1398 = (($$8357$i$i) + -1)|0;
           $1399 = 1 << $1398;
           $1400 = $1399 & $$1326$i$i;
           $1401 = ($1400|0)==(0);
           $1402 = (0 - ($$3291$i$i))|0;
           $1403 = $1401 ? $$3291$i$i : $1402;
           $$7332$i$i = $$1326$i$i;$$7368$i$i = $$1362$i$i;$$9$i$i = $$8$i$i;$$9358$i$i = $1398;$$sink266 = $1403;
          } else {
           $trunc$i$i = $1140&255;
           $trunc$i$i$clear = $trunc$i$i & 15;
           L235: do {
            switch ($trunc$i$i$clear<<24>>24) {
            case 0:  {
             $$4298$i$i = $$2296$i$i;$$4329$i$i = $$1326$i$i;$$4365$i$i = $$1362$i$i;$$5354$i$i = $1138;$storemerge395$i$i = 0;
             break;
            }
            case 15:  {
             $1143 = (($$2308$i$i) + 2)|0;
             $1144 = ($1138>>>0)<($1143>>>0);
             if ($1144) {
              $1145 = (($$1362$i$i) + -16)|0;
              $1146 = (($1138) + 16)|0;
              $1147 = $$1326$i$i << 16;
              $1148 = (_mad_bit_read($7,16)|0);
              $1149 = $1148 | $1147;
              $$2327$i$i = $1149;$$2363$i$i = $1145;$$3352$i$i = $1146;
             } else {
              $$2327$i$i = $$1326$i$i;$$2363$i$i = $$1362$i$i;$$3352$i$i = $1138;
             }
             $1150 = (($$3352$i$i) - ($$2308$i$i))|0;
             $1151 = $$2327$i$i >>> $1150;
             $1152 = 1 << $$2308$i$i;
             $1153 = (($1152) + -1)|0;
             $1154 = $1151 & $1153;
             $1155 = (($1154) + ($1142))|0;
             $1156 = (($$2382$i$i|0) % 4)&-1;
             $1157 = (($$2382$i$i|0) / 4)&-1;
             $1158 = (4112 + ($1155<<2)|0);
             $1159 = HEAP32[$1158>>2]|0;
             $1160 = $1159 & 134217727;
             $1161 = $1159 >>> 27;
             $1162 = (($1161) + ($1157))|0;
             $1163 = ($1162|0)<(0);
             if ($1163) {
              $1164 = (0 - ($1162))|0;
              $1165 = ($1164>>>0)>(31);
              $1166 = $1162 ^ -1;
              $1167 = 1 << $1166;
              $1168 = (($1167) + ($1160))|0;
              $1169 = $1168 >> $1164;
              $spec$select21$i429$i$i = $1165 ? 0 : $1169;
              $$0$i431$i$i = $spec$select21$i429$i$i;
             } else {
              $1170 = ($1162|0)>(4);
              $1171 = $1160 << $1162;
              $spec$select$i430$i$i = $1170 ? 2147483647 : $1171;
              $$0$i431$i$i = $spec$select$i430$i$i;
             }
             $1172 = ($1156|0)==(0);
             if ($1172) {
              $$0288$i$i = $$0$i431$i$i;$$3297$i$i = $$2296$i$i;$$3328$i$i = $$2327$i$i;$$3364$i$i = $$2363$i$i;$$4353$i$i = $1150;
              label = 155;
              break L235;
             }
             $1173 = ($$0$i431$i$i|0)<(0);
             $1174 = $1173 << 31 >> 31;
             $1175 = (($1156) + 3)|0;
             $1176 = (36944 + ($1175<<2)|0);
             $1177 = HEAP32[$1176>>2]|0;
             $1178 = ($1177|0)<(0);
             $1179 = $1178 << 31 >> 31;
             $1180 = (___muldi3(($1177|0),($1179|0),($$0$i431$i$i|0),($1174|0))|0);
             $1181 = (getTempRet0() | 0);
             $1182 = (_bitshift64Lshr(($1180|0),($1181|0),28)|0);
             $1183 = (getTempRet0() | 0);
             $$0288$i$i = $1182;$$3297$i$i = $$2296$i$i;$$3328$i$i = $$2327$i$i;$$3364$i$i = $$2363$i$i;$$4353$i$i = $1150;
             label = 155;
             break;
            }
            default: {
             $1184 = 1 << $1142;
             $1185 = $1184 & $$2296$i$i;
             $1186 = ($1185|0)==(0);
             if (!($1186)) {
              $1187 = (($8) + ($1142<<2)|0);
              $1188 = HEAP32[$1187>>2]|0;
              $$0288$i$i = $1188;$$3297$i$i = $$2296$i$i;$$3328$i$i = $$1326$i$i;$$3364$i$i = $$1362$i$i;$$4353$i$i = $1138;
              label = 155;
              break L235;
             }
             $1189 = $1184 | $$2296$i$i;
             $1190 = (($$2382$i$i|0) % 4)&-1;
             $1191 = (($$2382$i$i|0) / 4)&-1;
             $1192 = (4112 + ($1142<<2)|0);
             $1193 = HEAP32[$1192>>2]|0;
             $1194 = $1193 & 134217727;
             $1195 = $1193 >>> 27;
             $1196 = (($1195) + ($1191))|0;
             $1197 = ($1196|0)<(0);
             if ($1197) {
              $1198 = (0 - ($1196))|0;
              $1199 = ($1198>>>0)>(31);
              $1200 = $1196 ^ -1;
              $1201 = 1 << $1200;
              $1202 = (($1201) + ($1194))|0;
              $1203 = $1202 >> $1198;
              $spec$select21$i425$i$i = $1199 ? 0 : $1203;
              $$0$i427$i$i = $spec$select21$i425$i$i;
             } else {
              $1204 = ($1196|0)>(4);
              $1205 = $1194 << $1196;
              $spec$select$i426$i$i = $1204 ? 2147483647 : $1205;
              $$0$i427$i$i = $spec$select$i426$i$i;
             }
             $1206 = ($1190|0)==(0);
             if ($1206) {
              $1219 = $$0$i427$i$i;
             } else {
              $1207 = ($$0$i427$i$i|0)<(0);
              $1208 = $1207 << 31 >> 31;
              $1209 = (($1190) + 3)|0;
              $1210 = (36944 + ($1209<<2)|0);
              $1211 = HEAP32[$1210>>2]|0;
              $1212 = ($1211|0)<(0);
              $1213 = $1212 << 31 >> 31;
              $1214 = (___muldi3(($1211|0),($1213|0),($$0$i427$i$i|0),($1208|0))|0);
              $1215 = (getTempRet0() | 0);
              $1216 = (_bitshift64Lshr(($1214|0),($1215|0),28)|0);
              $1217 = (getTempRet0() | 0);
              $1219 = $1216;
             }
             $1218 = (($8) + ($1142<<2)|0);
             HEAP32[$1218>>2] = $1219;
             $$0288$i$i = $1219;$$3297$i$i = $1189;$$3328$i$i = $$1326$i$i;$$3364$i$i = $$1362$i$i;$$4353$i$i = $1138;
             label = 155;
            }
            }
           } while(0);
           if ((label|0) == 155) {
            label = 0;
            $1220 = (($$4353$i$i) + -1)|0;
            $1221 = 1 << $1220;
            $1222 = $1221 & $$3328$i$i;
            $1223 = ($1222|0)==(0);
            $1224 = (0 - ($$0288$i$i))|0;
            $1225 = $1223 ? $$0288$i$i : $1224;
            $$4298$i$i = $$3297$i$i;$$4329$i$i = $$3328$i$i;$$4365$i$i = $$3364$i$i;$$5354$i$i = $1220;$storemerge395$i$i = $1225;
           }
           HEAP32[$$0343$ptr508$i$i>>2] = $storemerge395$i$i;
           $1226 = HEAP16[$1132>>1]|0;
           $1227 = ($1226&65535) >>> 8;
           $1228 = $1227 & 15;
           $1229 = $1228&65535;
           $trunc396$i$i = $1227&255;
           $trunc396$i$i$clear = $trunc396$i$i & 15;
           L259: do {
            switch ($trunc396$i$i$clear<<24>>24) {
            case 0:  {
             $$7332$i$i = $$4329$i$i;$$7368$i$i = $$4365$i$i;$$9$i$i = $$4298$i$i;$$9358$i$i = $$5354$i$i;$$sink266 = 0;
             break L206;
             break;
            }
            case 15:  {
             $1230 = (($$2308$i$i) + 1)|0;
             $1231 = ($$5354$i$i>>>0)<($1230>>>0);
             if ($1231) {
              $1232 = (($$4365$i$i) + -16)|0;
              $1233 = (($$5354$i$i) + 16)|0;
              $1234 = $$4329$i$i << 16;
              $1235 = (_mad_bit_read($7,16)|0);
              $1236 = $1235 | $1234;
              $$5330$i$i = $1236;$$5366$i$i = $1232;$$6355$i$i = $1233;
             } else {
              $$5330$i$i = $$4329$i$i;$$5366$i$i = $$4365$i$i;$$6355$i$i = $$5354$i$i;
             }
             $1237 = (($$6355$i$i) - ($$2308$i$i))|0;
             $1238 = $$5330$i$i >>> $1237;
             $1239 = 1 << $$2308$i$i;
             $1240 = (($1239) + -1)|0;
             $1241 = $1238 & $1240;
             $1242 = (($1241) + ($1229))|0;
             $1243 = (($$2382$i$i|0) % 4)&-1;
             $1244 = (($$2382$i$i|0) / 4)&-1;
             $1245 = (4112 + ($1242<<2)|0);
             $1246 = HEAP32[$1245>>2]|0;
             $1247 = $1246 & 134217727;
             $1248 = $1246 >>> 27;
             $1249 = (($1248) + ($1244))|0;
             $1250 = ($1249|0)<(0);
             if ($1250) {
              $1251 = (0 - ($1249))|0;
              $1252 = ($1251>>>0)>(31);
              $1253 = $1249 ^ -1;
              $1254 = 1 << $1253;
              $1255 = (($1254) + ($1247))|0;
              $1256 = $1255 >> $1251;
              $spec$select21$i421$i$i = $1252 ? 0 : $1256;
              $$0$i423$i$i = $spec$select21$i421$i$i;
             } else {
              $1257 = ($1249|0)>(4);
              $1258 = $1247 << $1249;
              $spec$select$i422$i$i = $1257 ? 2147483647 : $1258;
              $$0$i423$i$i = $spec$select$i422$i$i;
             }
             $1259 = ($1243|0)==(0);
             if ($1259) {
              $$1289$i$i = $$0$i423$i$i;$$5299$i$i = $$4298$i$i;$$6331$i$i = $$5330$i$i;$$6367$i$i = $$5366$i$i;$$7356$i$i = $1237;
              break L259;
             }
             $1260 = ($$0$i423$i$i|0)<(0);
             $1261 = $1260 << 31 >> 31;
             $1262 = (($1243) + 3)|0;
             $1263 = (36944 + ($1262<<2)|0);
             $1264 = HEAP32[$1263>>2]|0;
             $1265 = ($1264|0)<(0);
             $1266 = $1265 << 31 >> 31;
             $1267 = (___muldi3(($1264|0),($1266|0),($$0$i423$i$i|0),($1261|0))|0);
             $1268 = (getTempRet0() | 0);
             $1269 = (_bitshift64Lshr(($1267|0),($1268|0),28)|0);
             $1270 = (getTempRet0() | 0);
             $$1289$i$i = $1269;$$5299$i$i = $$4298$i$i;$$6331$i$i = $$5330$i$i;$$6367$i$i = $$5366$i$i;$$7356$i$i = $1237;
             break;
            }
            default: {
             $1271 = 1 << $1229;
             $1272 = $1271 & $$4298$i$i;
             $1273 = ($1272|0)==(0);
             if (!($1273)) {
              $1274 = (($8) + ($1229<<2)|0);
              $1275 = HEAP32[$1274>>2]|0;
              $$1289$i$i = $1275;$$5299$i$i = $$4298$i$i;$$6331$i$i = $$4329$i$i;$$6367$i$i = $$4365$i$i;$$7356$i$i = $$5354$i$i;
              break L259;
             }
             $1276 = $1271 | $$4298$i$i;
             $1277 = (($$2382$i$i|0) % 4)&-1;
             $1278 = (($$2382$i$i|0) / 4)&-1;
             $1279 = (4112 + ($1229<<2)|0);
             $1280 = HEAP32[$1279>>2]|0;
             $1281 = $1280 & 134217727;
             $1282 = $1280 >>> 27;
             $1283 = (($1282) + ($1278))|0;
             $1284 = ($1283|0)<(0);
             if ($1284) {
              $1285 = (0 - ($1283))|0;
              $1286 = ($1285>>>0)>(31);
              $1287 = $1283 ^ -1;
              $1288 = 1 << $1287;
              $1289 = (($1288) + ($1281))|0;
              $1290 = $1289 >> $1285;
              $spec$select21$i417$i$i = $1286 ? 0 : $1290;
              $$0$i419$i$i = $spec$select21$i417$i$i;
             } else {
              $1291 = ($1283|0)>(4);
              $1292 = $1281 << $1283;
              $spec$select$i418$i$i = $1291 ? 2147483647 : $1292;
              $$0$i419$i$i = $spec$select$i418$i$i;
             }
             $1293 = ($1277|0)==(0);
             if ($1293) {
              $1306 = $$0$i419$i$i;
             } else {
              $1294 = ($$0$i419$i$i|0)<(0);
              $1295 = $1294 << 31 >> 31;
              $1296 = (($1277) + 3)|0;
              $1297 = (36944 + ($1296<<2)|0);
              $1298 = HEAP32[$1297>>2]|0;
              $1299 = ($1298|0)<(0);
              $1300 = $1299 << 31 >> 31;
              $1301 = (___muldi3(($1298|0),($1300|0),($$0$i419$i$i|0),($1295|0))|0);
              $1302 = (getTempRet0() | 0);
              $1303 = (_bitshift64Lshr(($1301|0),($1302|0),28)|0);
              $1304 = (getTempRet0() | 0);
              $1306 = $1303;
             }
             $1305 = (($8) + ($1229<<2)|0);
             HEAP32[$1305>>2] = $1306;
             $$1289$i$i = $1306;$$5299$i$i = $1276;$$6331$i$i = $$4329$i$i;$$6367$i$i = $$4365$i$i;$$7356$i$i = $$5354$i$i;
            }
            }
           } while(0);
           $1307 = (($$7356$i$i) + -1)|0;
           $1308 = 1 << $1307;
           $1309 = $1308 & $$6331$i$i;
           $1310 = ($1309|0)==(0);
           $1311 = (0 - ($$1289$i$i))|0;
           $1312 = $1310 ? $$1289$i$i : $1311;
           $$7332$i$i = $$6331$i$i;$$7368$i$i = $$6367$i$i;$$9$i$i = $$5299$i$i;$$9358$i$i = $1307;$$sink266 = $1312;
          }
         } while(0);
         $1404 = ((($$0343$ptr508$i$i)) + 4|0);
         HEAP32[$1404>>2] = $$sink266;
         $$0343$add$i$i = (($$0343$idx498$i$i) + 2)|0;
         $$0343$ptr$i$i = ((($12) + (($$0187258$i*2304)|0)|0) + ($$0343$add$i$i<<2)|0);
         $1405 = ($1070|0)!=(0);
         $1406 = (($$9358$i$i) + ($$7368$i$i))|0;
         $1407 = ($1406|0)>(0);
         $or$cond$i193$i = $1405 & $1407;
         if ($or$cond$i193$i) {
          $$0283507$i$i = $$1284$i$i;$$0294506$i$i = $$9$i$i;$$0302505$i$i = $$2304$i$i;$$0306504$i$i = $$2308$i$i;$$0310503$i$i = $$2312$i$i;$$0314502$i$i = $$3317$i$i;$$0319501$i$i = $$2321$i$i;$$0325500$i$i = $$7332$i$i;$$0336499$i$i = $$1337$i$i;$$0343$idx498$i$i = $$0343$add$i$i;$$0343$ptr508$i$i = $$0343$ptr$i$i;$$0349497$i$i = $$9358$i$i;$$0361496$i$i = $$7368$i$i;$$0373495$i$i = $$1374$i$i;$$0380494$i$i = $$2382$i$i;$$in$i$i = $1070;
         } else {
          $$0283$lcssa$i$i = $$1284$i$i;$$0325$lcssa$i$i = $$7332$i$i;$$0336$lcssa$i$i = $$1337$i$i;$$0343$idx$lcssa$i$i = $$0343$add$i$i;$$0349$lcssa$i$i = $$9358$i$i;$$0361$lcssa$i$i = $$7368$i$i;$$0373$lcssa$i$i = $$1374$i$i;$$0380$lcssa$i$i = $$2382$i$i;$$pre$phi529$i$iZ2D = $1406;
          break;
         }
        }
       } else {
        $$0283$lcssa$i$i = $1051;$$0325$lcssa$i$i = $1041;$$0336$lcssa$i$i = $1050;$$0343$idx$lcssa$i$i = 0;$$0349$lcssa$i$i = $1040;$$0361$lcssa$i$i = $1052;$$0373$lcssa$i$i = $234;$$0380$lcssa$i$i = $1053;$$pre$phi529$i$iZ2D = $775;
       }
       $1408 = ($$pre$phi529$i$iZ2D|0)<(0);
       if ($1408) {
        $$3282$i$ph$i = 568;
        label = 339;
        break L66;
       }
       $1409 = HEAP8[$781>>0]|0;
       $1410 = $1409 & 1;
       $1411 = $1410&255;
       $1412 = (52304 + ($1411<<2)|0);
       $1413 = HEAP32[$1412>>2]|0;
       $1414 = (($$0380$lcssa$i$i|0) / 4)&-1;
       $1415 = $1414<<2;
       $1416 = (($$0380$lcssa$i$i) - ($1415))|0;
       $1417 = ($$0380$lcssa$i$i|0)<(-11);
       if ($1417) {
        $1418 = (-2 - ($1414))|0;
        $1419 = ($1418>>>0)>(31);
        $1420 = (-3 - ($1414))|0;
        $1421 = 1 << $1420;
        $1422 = (($1421) + 67108864)|0;
        $1423 = $1422 >> $1418;
        $spec$select21$i405$i$i = $1419 ? 0 : $1423;
        $$0$i407$i$i = $spec$select21$i405$i$i;
       } else {
        $1424 = (($1414) + 2)|0;
        $1425 = ($$0380$lcssa$i$i|0)>(11);
        $1426 = 67108864 << $1424;
        $spec$select$i406$i$i = $1425 ? 2147483647 : $1426;
        $$0$i407$i$i = $spec$select$i406$i$i;
       }
       $1427 = ($1416|0)==(0);
       if ($1427) {
        $2504 = $$0$i407$i$i;
       } else {
        $1428 = ($$0$i407$i$i|0)<(0);
        $1429 = $1428 << 31 >> 31;
        $1430 = (($1416) + 3)|0;
        $1431 = (36944 + ($1430<<2)|0);
        $1432 = HEAP32[$1431>>2]|0;
        $1433 = ($1432|0)<(0);
        $1434 = $1433 << 31 >> 31;
        $1435 = (___muldi3(($1432|0),($1434|0),($$0$i407$i$i|0),($1429|0))|0);
        $1436 = (getTempRet0() | 0);
        $1437 = (_bitshift64Lshr(($1435|0),($1436|0),28)|0);
        $1438 = (getTempRet0() | 0);
        $2504 = $1437;
       }
       $1439 = ($$pre$phi529$i$iZ2D|0)>(0);
       $1440 = ($$0343$idx$lcssa$i$i>>>0)<(573);
       $or$cond399472$i$i = $1439 & $1440;
       if ($or$cond399472$i$i) {
        $$0278481$i$i = $2504;$$10335479$i$i = $$0325$lcssa$i$i;$$10371475$i$i = $$0361$lcssa$i$i;$$12476$i$i = $$0349$lcssa$i$i;$$3346$idx477$i$i = $$0343$idx$lcssa$i$i;$$4287480$i$i = $$0283$lcssa$i$i;$$4340478$i$i = $$0336$lcssa$i$i;$$4377474$i$i = $$0373$lcssa$i$i;$$5385473$i$i = $$0380$lcssa$i$i;
        while(1) {
         $$3346$ptr482$i$i = ((($12) + (($$0187258$i*2304)|0)|0) + ($$3346$idx477$i$i<<2)|0);
         $1441 = ($$12476$i$i|0)<(10);
         if ($1441) {
          $1442 = (($$10371475$i$i) + -16)|0;
          $1443 = (($$12476$i$i) + 16)|0;
          $1444 = $$10335479$i$i << 16;
          $1445 = (_mad_bit_read($7,16)|0);
          $1446 = $1445 | $1444;
          $$11$i$i = $1446;$$11372$i$i = $1442;$$13$i$i = $1443;
         } else {
          $$11$i$i = $$10335479$i$i;$$11372$i$i = $$10371475$i$i;$$13$i$i = $$12476$i$i;
         }
         $1447 = (($$13$i$i) + -4)|0;
         $1448 = $$11$i$i >>> $1447;
         $1449 = $1448 & 15;
         $1450 = (($1413) + ($1449<<1)|0);
         $1451 = HEAP8[$1450>>0]|0;
         $1452 = $1451 & 1;
         $1453 = ($1452<<24>>24)==(0);
         if ($1453) {
          $1454 = HEAP16[$1450>>1]|0;
          $1455 = ($1454&65535) >>> 4;
          $1456 = $1455&65535;
          $1457 = ($1454&65535) >>> 1;
          $1458 = $1457 & 7;
          $1459 = $1458&65535;
          $1460 = (($1447) - ($1459))|0;
          $1461 = $$11$i$i >>> $1460;
          $1462 = 1 << $1459;
          $1463 = (($1462) + -1)|0;
          $1464 = $1461 & $1463;
          $1465 = (($1464) + ($1456))|0;
          $1466 = (($1413) + ($1465<<1)|0);
          $$pre$i$i = HEAP8[$1466>>0]|0;
          $$14$i$i = $1447;$$pre$phi$i$iZ2D = $1466;$1468 = $$pre$i$i;
         } else {
          $$14$i$i = $$13$i$i;$$pre$phi$i$iZ2D = $1450;$1468 = $1451;
         }
         $1467 = ($1468&255) >>> 1;
         $1469 = $1467 & 7;
         $1470 = $1469&255;
         $1471 = (($$14$i$i) - ($1470))|0;
         $1472 = ($$3346$ptr482$i$i|0)==($$4340478$i$i|0);
         if ($1472) {
          $1473 = ((($$4287480$i$i)) + 1|0);
          $1474 = HEAP8[$$4287480$i$i>>0]|0;
          $1475 = $1474&255;
          $1476 = (($$4340478$i$i) + ($1475<<2)|0);
          $1477 = HEAP32[$$4377474$i$i>>2]|0;
          $1478 = ($$5385473$i$i|0)==($1477|0);
          do {
           if ($1478) {
            $$1$i$i = $$0278481$i$i;$$6386$i$i = $$5385473$i$i;
           } else {
            $1479 = (($1477|0) / 4)&-1;
            $1480 = $1479<<2;
            $1481 = (($1477) - ($1480))|0;
            $1482 = ($1477|0)<(-11);
            if ($1482) {
             $1483 = (-2 - ($1479))|0;
             $1484 = ($1483>>>0)>(31);
             $1485 = (-3 - ($1479))|0;
             $1486 = 1 << $1485;
             $1487 = (($1486) + 67108864)|0;
             $1488 = $1487 >> $1483;
             $spec$select21$i401$i$i = $1484 ? 0 : $1488;
             $$0$i403$i$i = $spec$select21$i401$i$i;
            } else {
             $1489 = (($1479) + 2)|0;
             $1490 = ($1477|0)>(11);
             $1491 = 67108864 << $1489;
             $spec$select$i402$i$i = $1490 ? 2147483647 : $1491;
             $$0$i403$i$i = $spec$select$i402$i$i;
            }
            $1492 = ($1481|0)==(0);
            if ($1492) {
             $$1$i$i = $$0$i403$i$i;$$6386$i$i = $1477;
             break;
            }
            $1493 = ($$0$i403$i$i|0)<(0);
            $1494 = $1493 << 31 >> 31;
            $1495 = (($1481) + 3)|0;
            $1496 = (36944 + ($1495<<2)|0);
            $1497 = HEAP32[$1496>>2]|0;
            $1498 = ($1497|0)<(0);
            $1499 = $1498 << 31 >> 31;
            $1500 = (___muldi3(($1497|0),($1499|0),($$0$i403$i$i|0),($1494|0))|0);
            $1501 = (getTempRet0() | 0);
            $1502 = (_bitshift64Lshr(($1500|0),($1501|0),28)|0);
            $1503 = (getTempRet0() | 0);
            $$1$i$i = $1502;$$6386$i$i = $1477;
           }
          } while(0);
          $1504 = ((($$4377474$i$i)) + 4|0);
          $$2$i$i = $$1$i$i;$$5$i$i = $1473;$$5341$i$i = $1476;$$5378$i$i = $1504;$$7387$i$i = $$6386$i$i;
         } else {
          $$2$i$i = $$0278481$i$i;$$5$i$i = $$4287480$i$i;$$5341$i$i = $$4340478$i$i;$$5378$i$i = $$4377474$i$i;$$7387$i$i = $$5385473$i$i;
         }
         $1505 = $1468 & 16;
         $1506 = ($1505<<24>>24)==(0);
         $1507 = (($1471) + -1)|0;
         $1508 = 1 << $1507;
         $1509 = $1508 & $$11$i$i;
         $1510 = ($1509|0)==(0);
         $1511 = (0 - ($$2$i$i))|0;
         $1512 = $1510 ? $$2$i$i : $1511;
         $spec$select$i$i = $1506 ? $1471 : $1507;
         $spec$select449$i$i = $1506 ? 0 : $1512;
         HEAP32[$$3346$ptr482$i$i>>2] = $spec$select449$i$i;
         $1513 = HEAP8[$$pre$phi$i$iZ2D>>0]|0;
         $1514 = $1513 & 32;
         $1515 = ($1514<<24>>24)==(0);
         $1516 = (($spec$select$i$i) + -1)|0;
         $1517 = 1 << $1516;
         $1518 = $1517 & $$11$i$i;
         $1519 = ($1518|0)==(0);
         $1520 = $1519 ? $$2$i$i : $1511;
         $$16$i$i = $1515 ? $spec$select$i$i : $1516;
         $1521 = $1515 ? 0 : $1520;
         $1522 = ((($$3346$ptr482$i$i)) + 4|0);
         HEAP32[$1522>>2] = $1521;
         $$3346$add390$i$i = (($$3346$idx477$i$i) + 2)|0;
         $$ptr392$i$i = ((($12) + (($$0187258$i*2304)|0)|0) + ($$3346$add390$i$i<<2)|0);
         $1523 = ($$ptr392$i$i|0)==($$5341$i$i|0);
         if ($1523) {
          $1524 = ((($$5$i$i)) + 1|0);
          $1525 = HEAP8[$$5$i$i>>0]|0;
          $1526 = $1525&255;
          $1527 = (($$5341$i$i) + ($1526<<2)|0);
          $1528 = HEAP32[$$5378$i$i>>2]|0;
          $1529 = ($$7387$i$i|0)==($1528|0);
          do {
           if ($1529) {
            $$3$i$i = $$2$i$i;$$8388$i$i = $$7387$i$i;
           } else {
            $1530 = (($1528|0) / 4)&-1;
            $1531 = $1530<<2;
            $1532 = (($1528) - ($1531))|0;
            $1533 = ($1528|0)<(-11);
            if ($1533) {
             $1534 = (-2 - ($1530))|0;
             $1535 = ($1534>>>0)>(31);
             $1536 = (-3 - ($1530))|0;
             $1537 = 1 << $1536;
             $1538 = (($1537) + 67108864)|0;
             $1539 = $1538 >> $1534;
             $spec$select21$i$i$i = $1535 ? 0 : $1539;
             $$0$i$i$i = $spec$select21$i$i$i;
            } else {
             $1540 = (($1530) + 2)|0;
             $1541 = ($1528|0)>(11);
             $1542 = 67108864 << $1540;
             $spec$select$i$i$i = $1541 ? 2147483647 : $1542;
             $$0$i$i$i = $spec$select$i$i$i;
            }
            $1543 = ($1532|0)==(0);
            if ($1543) {
             $$3$i$i = $$0$i$i$i;$$8388$i$i = $1528;
             break;
            }
            $1544 = ($$0$i$i$i|0)<(0);
            $1545 = $1544 << 31 >> 31;
            $1546 = (($1532) + 3)|0;
            $1547 = (36944 + ($1546<<2)|0);
            $1548 = HEAP32[$1547>>2]|0;
            $1549 = ($1548|0)<(0);
            $1550 = $1549 << 31 >> 31;
            $1551 = (___muldi3(($1548|0),($1550|0),($$0$i$i$i|0),($1545|0))|0);
            $1552 = (getTempRet0() | 0);
            $1553 = (_bitshift64Lshr(($1551|0),($1552|0),28)|0);
            $1554 = (getTempRet0() | 0);
            $$3$i$i = $1553;$$8388$i$i = $1528;
           }
          } while(0);
          $1555 = ((($$5378$i$i)) + 4|0);
          $$pre526$i$i = (0 - ($$3$i$i))|0;
          $$4$i$i = $$3$i$i;$$6$i$i = $1524;$$6342$i$i = $1527;$$6379$i$i = $1555;$$9389$i$i = $$8388$i$i;$$pre$phi527$i$iZ2D = $$pre526$i$i;
         } else {
          $$4$i$i = $$2$i$i;$$6$i$i = $$5$i$i;$$6342$i$i = $$5341$i$i;$$6379$i$i = $$5378$i$i;$$9389$i$i = $$7387$i$i;$$pre$phi527$i$iZ2D = $1511;
         }
         $1556 = HEAP8[$$pre$phi$i$iZ2D>>0]|0;
         $1557 = $1556 & 64;
         $1558 = ($1557<<24>>24)==(0);
         $1559 = (($$16$i$i) + -1)|0;
         $1560 = 1 << $1559;
         $1561 = $1560 & $$11$i$i;
         $1562 = ($1561|0)==(0);
         $1563 = $1562 ? $$4$i$i : $$pre$phi527$i$iZ2D;
         $spec$select450$i$i = $1558 ? $$16$i$i : $1559;
         $spec$select451$i$i = $1558 ? 0 : $1563;
         HEAP32[$$ptr392$i$i>>2] = $spec$select451$i$i;
         $1564 = HEAP8[$$pre$phi$i$iZ2D>>0]|0;
         $1565 = ($1564<<24>>24)<(0);
         $1566 = (($spec$select450$i$i) + -1)|0;
         $1567 = 1 << $1566;
         $1568 = $1567 & $$11$i$i;
         $1569 = ($1568|0)==(0);
         $1570 = $1569 ? $$4$i$i : $$pre$phi527$i$iZ2D;
         $$18$i$i = $1565 ? $1566 : $spec$select450$i$i;
         $1571 = $1565 ? $1570 : 0;
         $1572 = ((($$ptr392$i$i)) + 4|0);
         HEAP32[$1572>>2] = $1571;
         $$add$i$i = (($$3346$idx477$i$i) + 4)|0;
         $1573 = (($$18$i$i) + ($$11372$i$i))|0;
         $1574 = ($1573|0)>(0);
         $1575 = ($$add$i$i>>>0)<(573);
         $or$cond399$i$i = $1575 & $1574;
         if ($or$cond399$i$i) {
          $$0278481$i$i = $$4$i$i;$$10335479$i$i = $$11$i$i;$$10371475$i$i = $$11372$i$i;$$12476$i$i = $$18$i$i;$$3346$idx477$i$i = $$add$i$i;$$4287480$i$i = $$6$i$i;$$4340478$i$i = $$6342$i$i;$$4377474$i$i = $$6379$i$i;$$5385473$i$i = $$9389$i$i;
         } else {
          $$10371$lcssa$i$i = $$11372$i$i;$$3346$idx$lcssa$i$i = $$add$i$i;$$lcssa$i$i = $1573;
          break;
         }
        }
       } else {
        $$10371$lcssa$i$i = $$0361$lcssa$i$i;$$3346$idx$lcssa$i$i = $$0343$idx$lcssa$i$i;$$lcssa$i$i = $$pre$phi529$i$iZ2D;
       }
       $1576 = ($$10371$lcssa$i$i|0)>(-65);
       if (!($1576)) {
        label = 225;
        break L66;
       }
       $1577 = ($$lcssa$i$i|0)<(0);
       $$3346$add$i$i = (($$3346$idx$lcssa$i$i) + -4)|0;
       $spec$select400$i$i = $1577 ? $$3346$add$i$i : $$3346$idx$lcssa$i$i;
       $1578 = ($spec$select400$i$i|0)<(576);
       if ($1578) {
        $scevgep$i$i = ((($12) + (($$0187258$i*2304)|0)|0) + ($spec$select400$i$i<<2)|0);
        $1579 = ($spec$select400$i$i|0)==(575);
        $1580 = $1579 ? 576 : 575;
        $1581 = (($1580) - ($spec$select400$i$i))|0;
        $1582 = $1581 >>> 1;
        $1583 = $1582 << 3;
        $1584 = (($1583) + 8)|0;
        _memset(($scevgep$i$i|0),0,($1584|0))|0;
       }
       $334 = (($$0187258$i) + 1)|0;
       $335 = ($334>>>0)<($32>>>0);
       if ($335) {
        $$0187258$i = $334;
       } else {
        break;
       }
      }
      $1585 = HEAP32[$29>>2]|0;
      $1586 = ($1585|0)==(2);
      if ($1586) {
       $1587 = HEAP32[$233>>2]|0;
       $1588 = ($1587|0)==(0);
       if (!($1588)) {
        $1589 = HEAP32[$11>>2]|0;
        $1590 = (((((($15)) + 10|0) + (($$0182289$i*116)|0)|0)) + 9|0);
        $1591 = HEAP8[$1590>>0]|0;
        $1592 = (((((($15)) + 10|0) + (($$0182289$i*116)|0)|0)) + 67|0);
        $1593 = HEAP8[$1592>>0]|0;
        $1594 = ($1591<<24>>24)==($1593<<24>>24);
        if (!($1594)) {
         label = 299;
         break;
        }
        $1595 = (((((($15)) + 10|0) + (($$0182289$i*116)|0)|0)) + 8|0);
        $1596 = HEAP8[$1595>>0]|0;
        $1597 = (((((($15)) + 10|0) + (($$0182289$i*116)|0)|0)) + 66|0);
        $1598 = HEAP8[$1597>>0]|0;
        $1599 = $1598 ^ $1596;
        $1600 = $1599 & 8;
        $1601 = ($1600<<24>>24)==(0);
        if (!($1601)) {
         label = 299;
         break;
        }
        $1602 = $1587&65535;
        HEAP16[$4>>1] = $1602;
        HEAP16[$257>>1] = $1602;
        HEAP16[$258>>1] = $1602;
        HEAP16[$259>>1] = $1602;
        HEAP16[$260>>1] = $1602;
        HEAP16[$261>>1] = $1602;
        HEAP16[$262>>1] = $1602;
        HEAP16[$263>>1] = $1602;
        HEAP16[$264>>1] = $1602;
        HEAP16[$265>>1] = $1602;
        HEAP16[$266>>1] = $1602;
        HEAP16[$267>>1] = $1602;
        HEAP16[$268>>1] = $1602;
        HEAP16[$269>>1] = $1602;
        HEAP16[$270>>1] = $1602;
        HEAP16[$271>>1] = $1602;
        HEAP16[$272>>1] = $1602;
        HEAP16[$273>>1] = $1602;
        HEAP16[$274>>1] = $1602;
        HEAP16[$275>>1] = $1602;
        HEAP16[$276>>1] = $1602;
        HEAP16[$277>>1] = $1602;
        HEAP16[$278>>1] = $1602;
        HEAP16[$279>>1] = $1602;
        HEAP16[$280>>1] = $1602;
        HEAP16[$281>>1] = $1602;
        HEAP16[$282>>1] = $1602;
        HEAP16[$283>>1] = $1602;
        HEAP16[$284>>1] = $1602;
        HEAP16[$285>>1] = $1602;
        HEAP16[$286>>1] = $1602;
        HEAP16[$287>>1] = $1602;
        HEAP16[$288>>1] = $1602;
        HEAP16[$289>>1] = $1602;
        HEAP16[$290>>1] = $1602;
        HEAP16[$291>>1] = $1602;
        HEAP16[$292>>1] = $1602;
        HEAP16[$293>>1] = $1602;
        HEAP16[$294>>1] = $1602;
        $1603 = $1587 & 1;
        $1604 = ($1603|0)==(0);
        L334: do {
         if (!($1604)) {
          $1605 = HEAP32[$33>>2]|0;
          $1606 = $1605 | 256;
          HEAP32[$33>>2] = $1606;
          $1607 = ($1591<<24>>24)==(2);
          do {
           if ($1607) {
            HEAP32[$256>>2] = 0;
            HEAP32[$255>>2] = 0;
            HEAP32[$5>>2] = 0;
            $1608 = $1598 & 8;
            $1609 = ($1608<<24>>24)==(0);
            if ($1609) {
             $$0237334$i$i = 0;$$1214336$i$i = 0;$$1228335$i$i = $295;$$2240332$i$i = 0;
             label = 243;
            } else {
             $$0212297$i$i = 0;$$0213296$i$i = 0;$$0227295$i$i = $295;$$0238294$i$i = 0;
             while(1) {
              $1610 = (($$0212297$i$i) + 1)|0;
              $1611 = (($1589) + ($$0212297$i$i)|0);
              $1612 = HEAP8[$1611>>0]|0;
              $1613 = $1612&255;
              $1614 = ($1612<<24>>24)==(0);
              L342: do {
               if ($1614) {
                $$1239$i$i = $$0238294$i$i;
               } else {
                $$1221287$i$i = 0;
                while(1) {
                 $1617 = (($$0227295$i$i) + ($$1221287$i$i<<2)|0);
                 $1618 = HEAP32[$1617>>2]|0;
                 $1619 = ($1618|0)==(0);
                 $1616 = (($$1221287$i$i) + 1)|0;
                 if (!($1619)) {
                  $$1239$i$i = $1610;
                  break L342;
                 }
                 $1615 = ($1616>>>0)<($1613>>>0);
                 if ($1615) {
                  $$1221287$i$i = $1616;
                 } else {
                  $$1239$i$i = $$0238294$i$i;
                  break;
                 }
                }
               }
              } while(0);
              $1620 = (($$0227295$i$i) + ($1613<<2)|0);
              $1621 = (($$0213296$i$i) + ($1613))|0;
              $1622 = ($1621>>>0)<(36);
              if ($1622) {
               $$0212297$i$i = $1610;$$0213296$i$i = $1621;$$0227295$i$i = $1620;$$0238294$i$i = $$1239$i$i;
              } else {
               break;
              }
             }
             $1623 = ($1621>>>0)<(576);
             if ($1623) {
              $$0237334$i$i = $1610;$$1214336$i$i = $1621;$$1228335$i$i = $1620;$$2240332$i$i = $$1239$i$i;
              label = 243;
             } else {
              $$0237333338$i$i = $1610;$$2240331339$i$i = $$1239$i$i;
              label = 251;
             }
            }
            if ((label|0) == 243) {
             label = 0;
             $$0233280$i$i = 0;$$0235279$i$i = 0;$$2215282$i$i = $$1214336$i$i;$$2229281$i$i = $$1228335$i$i;$$2283$i$i = $$0237334$i$i;
             while(1) {
              $1624 = (($$2283$i$i) + 1)|0;
              $1625 = (($1589) + ($$2283$i$i)|0);
              $1626 = HEAP8[$1625>>0]|0;
              $1627 = $1626&255;
              $1628 = ($1626<<24>>24)==(0);
              L353: do {
               if ($1628) {
                $$1236$i$i = $$0235279$i$i;
               } else {
                $$2222276$i$i = 0;
                while(1) {
                 $1631 = (($$2229281$i$i) + ($$2222276$i$i<<2)|0);
                 $1632 = HEAP32[$1631>>2]|0;
                 $1633 = ($1632|0)==(0);
                 $1630 = (($$2222276$i$i) + 1)|0;
                 if (!($1633)) {
                  break;
                 }
                 $1629 = ($1630>>>0)<($1627>>>0);
                 if ($1629) {
                  $$2222276$i$i = $1630;
                 } else {
                  $$1236$i$i = $$0235279$i$i;
                  break L353;
                 }
                }
                $1634 = (($5) + ($$0233280$i$i<<2)|0);
                HEAP32[$1634>>2] = $1624;
                $$1236$i$i = $1624;
               }
              } while(0);
              $1635 = (($$2229281$i$i) + ($1627<<2)|0);
              $1636 = (($$2215282$i$i) + ($1627))|0;
              $1637 = (($$0233280$i$i) + 1)|0;
              $1638 = (($1637>>>0) % 3)&-1;
              $1639 = ($1636>>>0)<(576);
              if ($1639) {
               $$0233280$i$i = $1638;$$0235279$i$i = $$1236$i$i;$$2215282$i$i = $1636;$$2229281$i$i = $1635;$$2283$i$i = $1624;
              } else {
               break;
              }
             }
             $1640 = ($$1236$i$i|0)==(0);
             if ($1640) {
              $$0237333338$i$i = $$0237334$i$i;$$2240331339$i$i = $$2240332$i$i;
              label = 251;
             } else {
              $$0235$lcssa340$i$i = $$1236$i$i;$$0237333337$i$i = $$0237334$i$i;$1642 = $$0237334$i$i;
             }
            }
            if ((label|0) == 251) {
             label = 0;
             $$0235$lcssa340$i$i = 0;$$0237333337$i$i = $$0237333338$i$i;$1642 = $$2240331339$i$i;
            }
            $1641 = ($1642|0)==(0);
            if (!($1641)) {
             $1643 = $1587 & 65534;
             $1644 = $1643&65535;
             $$3223272$i$i = 0;
             while(1) {
              $1645 = (($4) + ($$3223272$i$i<<1)|0);
              HEAP16[$1645>>1] = $1644;
              $1646 = (($$3223272$i$i) + 1)|0;
              $exitcond327$i$i = ($1646|0)==($1642|0);
              if ($exitcond327$i$i) {
               break;
              } else {
               $$3223272$i$i = $1646;
              }
             }
            }
            $1647 = ($$0237333337$i$i>>>0)<($$0235$lcssa340$i$i>>>0);
            if ($1647) {
             $1648 = $1587 & 65534;
             $1649 = $1648&65535;
             $$1234269$i$i = 0;$$4224270$i$i = $$0237333337$i$i;
             while(1) {
              $1650 = (($5) + ($$1234269$i$i<<2)|0);
              $1651 = HEAP32[$1650>>2]|0;
              $1652 = ($$4224270$i$i>>>0)<($1651>>>0);
              if ($1652) {
               $1653 = (($4) + ($$4224270$i$i<<1)|0);
               HEAP16[$1653>>1] = $1649;
              }
              $1654 = (($$1234269$i$i) + 1)|0;
              $1655 = (($1654>>>0) % 3)&-1;
              $1656 = (($$4224270$i$i) + 1)|0;
              $exitcond326$i$i = ($1656|0)==($$0235$lcssa340$i$i|0);
              if ($exitcond326$i$i) {
               break;
              } else {
               $$1234269$i$i = $1655;$$4224270$i$i = $1656;
              }
             }
            }
           } else {
            $$0231308$i$i = 0;$$3216310$i$i = 0;$$3230309$i$i = $295;$$3311$i$i = 0;
            while(1) {
             $1657 = (($$3311$i$i) + 1)|0;
             $1658 = (($1589) + ($$3311$i$i)|0);
             $1659 = HEAP8[$1658>>0]|0;
             $1660 = $1659&255;
             $1661 = ($1659<<24>>24)==(0);
             L380: do {
              if ($1661) {
               $$1232$i$i = $$0231308$i$i;
              } else {
               $$5225301$i$i = 0;
               while(1) {
                $1664 = (($$3230309$i$i) + ($$5225301$i$i<<2)|0);
                $1665 = HEAP32[$1664>>2]|0;
                $1666 = ($1665|0)==(0);
                $1663 = (($$5225301$i$i) + 1)|0;
                if (!($1666)) {
                 $$1232$i$i = $1657;
                 break L380;
                }
                $1662 = ($1663>>>0)<($1660>>>0);
                if ($1662) {
                 $$5225301$i$i = $1663;
                } else {
                 $$1232$i$i = $$0231308$i$i;
                 break;
                }
               }
              }
             } while(0);
             $1667 = (($$3230309$i$i) + ($1660<<2)|0);
             $1668 = (($$3216310$i$i) + ($1660))|0;
             $1669 = ($1668>>>0)<(576);
             if ($1669) {
              $$0231308$i$i = $$1232$i$i;$$3216310$i$i = $1668;$$3230309$i$i = $1667;$$3311$i$i = $1657;
             } else {
              break;
             }
            }
            $1670 = ($$1232$i$i|0)==(0);
            if ($1670) {
             break;
            }
            $1671 = $1587 & 65534;
            $1672 = $1671&65535;
            $$6226298$i$i = 0;
            while(1) {
             $1673 = (($4) + ($$6226298$i$i<<1)|0);
             HEAP16[$1673>>1] = $1672;
             $1674 = (($$6226298$i$i) + 1)|0;
             $exitcond328$i$i = ($1674|0)==($$1232$i$i|0);
             if ($exitcond328$i$i) {
              break;
             } else {
              $$6226298$i$i = $1674;
             }
            }
           }
          } while(0);
          $1675 = $1605 & 4096;
          $1676 = ($1675|0)==(0);
          if ($1676) {
           $$5218258$i$i = 0;$$5259$i$i = 0;
           while(1) {
            $1736 = (($1589) + ($$5259$i$i)|0);
            $1737 = HEAP8[$1736>>0]|0;
            $1738 = $1737&255;
            $1739 = (($4) + ($$5259$i$i<<1)|0);
            $1740 = HEAP16[$1739>>1]|0;
            $1741 = $1740 << 16 >> 16;
            $1742 = $1741 & 1;
            $1743 = ($1742|0)==(0);
            do {
             if (!($1743)) {
              $1744 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0)) + 76|0) + ($$5259$i$i)|0);
              $1745 = HEAP8[$1744>>0]|0;
              $1746 = $1745&255;
              $1747 = ($1745&255)>(6);
              if ($1747) {
               $1748 = $1741 & 65534;
               $1749 = $1748&65535;
               HEAP16[$1739>>1] = $1749;
               break;
              }
              $1750 = ($1737<<24>>24)==(0);
              if ($1750) {
               break;
              }
              $1751 = (37104 + ($1746<<2)|0);
              $1752 = HEAP32[$1751>>2]|0;
              $1753 = ($1752|0)<(0);
              $1754 = $1753 << 31 >> 31;
              $1755 = (6 - ($1746))|0;
              $1756 = (37104 + ($1755<<2)|0);
              $1757 = HEAP32[$1756>>2]|0;
              $1758 = ($1757|0)<(0);
              $1759 = $1758 << 31 >> 31;
              $$8256$i$i = 0;
              while(1) {
               $1760 = (($$8256$i$i) + ($$5218258$i$i))|0;
               $1761 = (($12) + ($1760<<2)|0);
               $1762 = HEAP32[$1761>>2]|0;
               $1763 = ($1762|0)<(0);
               $1764 = $1763 << 31 >> 31;
               $1765 = (___muldi3(($1762|0),($1764|0),($1752|0),($1754|0))|0);
               $1766 = (getTempRet0() | 0);
               $1767 = (_bitshift64Lshr(($1765|0),($1766|0),28)|0);
               $1768 = (getTempRet0() | 0);
               HEAP32[$1761>>2] = $1767;
               $1769 = (___muldi3(($1762|0),($1764|0),($1757|0),($1759|0))|0);
               $1770 = (getTempRet0() | 0);
               $1771 = (_bitshift64Lshr(($1769|0),($1770|0),28)|0);
               $1772 = (getTempRet0() | 0);
               $1773 = (((($12)) + 2304|0) + ($1760<<2)|0);
               HEAP32[$1773>>2] = $1771;
               $1774 = (($$8256$i$i) + 1)|0;
               $exitcond318$i$i = ($1774|0)==($1738|0);
               if ($exitcond318$i$i) {
                break;
               } else {
                $$8256$i$i = $1774;
               }
              }
             }
            } while(0);
            $1775 = (($$5259$i$i) + 1)|0;
            $1776 = (($$5218258$i$i) + ($1738))|0;
            $1777 = ($1776>>>0)<(576);
            if ($1777) {
             $$5218258$i$i = $1776;$$5259$i$i = $1775;
            } else {
             break L334;
            }
           }
          }
          $1677 = (((((($15)) + 10|0) + (($$0182289$i*116)|0)|0)) + 64|0);
          $1678 = HEAP16[$1677>>1]|0;
          $1679 = $1678 & 1;
          $1680 = $1679&65535;
          $$4217263$i$i = 0;$$4268$i$i = 0;
          while(1) {
           $1681 = (($1589) + ($$4268$i$i)|0);
           $1682 = HEAP8[$1681>>0]|0;
           $1683 = $1682&255;
           $1684 = (($4) + ($$4268$i$i<<1)|0);
           $1685 = HEAP16[$1684>>1]|0;
           $1686 = $1685 << 16 >> 16;
           $1687 = $1686 & 1;
           $1688 = ($1687|0)==(0);
           L407: do {
            if (!($1688)) {
             $1689 = (((($332)) + 192|0) + ($$4268$i$i)|0);
             $1690 = HEAP8[$1689>>0]|0;
             $1691 = ($1690<<24>>24)==(0);
             if (!($1691)) {
              $1692 = $1686 & 65534;
              $1693 = $1692&65535;
              HEAP16[$1684>>1] = $1693;
              break;
             }
             $1694 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0)) + 76|0) + ($$4268$i$i)|0);
             $1695 = HEAP8[$1694>>0]|0;
             $1696 = $1695&255;
             $1697 = ($1682<<24>>24)==(0);
             if ($1697) {
              break;
             }
             $1698 = ($1695<<24>>24)==(0);
             if ($1698) {
              $$7260$us$i$i = 0;
              while(1) {
               $1699 = (($$7260$us$i$i) + ($$4217263$i$i))|0;
               $1700 = (($12) + ($1699<<2)|0);
               $1701 = HEAP32[$1700>>2]|0;
               $1702 = (((($12)) + 2304|0) + ($1699<<2)|0);
               HEAP32[$1702>>2] = $1701;
               $1703 = (($$7260$us$i$i) + 1)|0;
               $exitcond323$i$i = ($1703|0)==($1683|0);
               if ($exitcond323$i$i) {
                break L407;
               } else {
                $$7260$us$i$i = $1703;
               }
              }
             }
             $1704 = (($1696) + -1)|0;
             $1705 = $1704 >>> 1;
             $1706 = ((36976 + (($1680*60)|0)|0) + ($1705<<2)|0);
             $1707 = $1696 & 1;
             $1708 = ($1707|0)==(0);
             $$pre330$i$i = HEAP32[$1706>>2]|0;
             $1709 = ($$pre330$i$i|0)<(0);
             $1710 = $1709 << 31 >> 31;
             if ($1708) {
              $$7260$us262$i$i = 0;
              while(1) {
               $1711 = (($$7260$us262$i$i) + ($$4217263$i$i))|0;
               $1712 = (($12) + ($1711<<2)|0);
               $1713 = HEAP32[$1712>>2]|0;
               $1714 = ($1713|0)<(0);
               $1715 = $1714 << 31 >> 31;
               $1716 = (___muldi3(($1713|0),($1715|0),($$pre330$i$i|0),($1710|0))|0);
               $1717 = (getTempRet0() | 0);
               $1718 = (_bitshift64Lshr(($1716|0),($1717|0),28)|0);
               $1719 = (getTempRet0() | 0);
               $1720 = (((($12)) + 2304|0) + ($1711<<2)|0);
               HEAP32[$1720>>2] = $1718;
               $1721 = (($$7260$us262$i$i) + 1)|0;
               $exitcond322$i$i = ($1721|0)==($1683|0);
               if ($exitcond322$i$i) {
                break;
               } else {
                $$7260$us262$i$i = $1721;
               }
              }
             } else {
              $$7260$i$i = 0;
              while(1) {
               $1722 = (($$7260$i$i) + ($$4217263$i$i))|0;
               $1723 = (($12) + ($1722<<2)|0);
               $1724 = HEAP32[$1723>>2]|0;
               $1725 = ($1724|0)<(0);
               $1726 = $1725 << 31 >> 31;
               $1727 = (___muldi3(($1724|0),($1726|0),($$pre330$i$i|0),($1710|0))|0);
               $1728 = (getTempRet0() | 0);
               $1729 = (_bitshift64Lshr(($1727|0),($1728|0),28)|0);
               $1730 = (getTempRet0() | 0);
               HEAP32[$1723>>2] = $1729;
               $1731 = (((($12)) + 2304|0) + ($1722<<2)|0);
               HEAP32[$1731>>2] = $1724;
               $1732 = (($$7260$i$i) + 1)|0;
               $exitcond319$i$i = ($1732|0)==($1683|0);
               if ($exitcond319$i$i) {
                break;
               } else {
                $$7260$i$i = $1732;
               }
              }
             }
            }
           } while(0);
           $1733 = (($$4268$i$i) + 1)|0;
           $1734 = (($$4217263$i$i) + ($1683))|0;
           $1735 = ($1734>>>0)<(576);
           if ($1735) {
            $$4217263$i$i = $1734;$$4268$i$i = $1733;
           } else {
            break;
           }
          }
         }
        } while(0);
        $1778 = $1587 & 2;
        $1779 = ($1778|0)==(0);
        if (!($1779)) {
         $1780 = HEAP32[$33>>2]|0;
         $1781 = $1780 | 512;
         HEAP32[$33>>2] = $1781;
         $$6219252$i$i = 0;$$6255$i$i = 0;
         while(1) {
          $1782 = (($1589) + ($$6255$i$i)|0);
          $1783 = HEAP8[$1782>>0]|0;
          $1784 = $1783&255;
          $1785 = (($4) + ($$6255$i$i<<1)|0);
          $1786 = HEAP16[$1785>>1]|0;
          $1787 = ($1786<<16>>16)==(2);
          $1788 = ($1783<<24>>24)!=(0);
          $or$cond$i196$i = $1788 & $1787;
          if ($or$cond$i196$i) {
           $$9251$i$i = 0;
           while(1) {
            $1789 = (($$9251$i$i) + ($$6219252$i$i))|0;
            $1790 = (($12) + ($1789<<2)|0);
            $1791 = HEAP32[$1790>>2]|0;
            $1792 = (((($12)) + 2304|0) + ($1789<<2)|0);
            $1793 = HEAP32[$1792>>2]|0;
            $1794 = (($1793) + ($1791))|0;
            $1795 = ($1794|0)<(0);
            $1796 = $1795 << 31 >> 31;
            $1797 = (___muldi3(($1794|0),($1796|0),189812531,0)|0);
            $1798 = (getTempRet0() | 0);
            $1799 = (_bitshift64Lshr(($1797|0),($1798|0),28)|0);
            $1800 = (getTempRet0() | 0);
            HEAP32[$1790>>2] = $1799;
            $1801 = (($1791) - ($1793))|0;
            $1802 = ($1801|0)<(0);
            $1803 = $1802 << 31 >> 31;
            $1804 = (___muldi3(($1801|0),($1803|0),189812531,0)|0);
            $1805 = (getTempRet0() | 0);
            $1806 = (_bitshift64Lshr(($1804|0),($1805|0),28)|0);
            $1807 = (getTempRet0() | 0);
            HEAP32[$1792>>2] = $1806;
            $1808 = (($$9251$i$i) + 1)|0;
            $exitcond$i198$i = ($1808|0)==($1784|0);
            if ($exitcond$i198$i) {
             break;
            } else {
             $$9251$i$i = $1808;
            }
           }
          }
          $1809 = (($$6255$i$i) + 1)|0;
          $1810 = (($$6219252$i$i) + ($1784))|0;
          $1811 = ($1810>>>0)<(576);
          if ($1811) {
           $$6219252$i$i = $1810;$$6255$i$i = $1809;
          } else {
           break;
          }
         }
        }
       }
      }
      $1812 = ($$0182289$i*18)|0;
      $$1188284$i = 0;
      while(1) {
       $1815 = ((((($1)) + 48|0) + (($$1188284$i*4608)|0)|0) + ($1812<<7)|0);
       $1816 = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$1188284$i*58)|0)|0)) + 9|0);
       $1817 = HEAP8[$1816>>0]|0;
       $1818 = ($1817<<24>>24)==(2);
       $1819 = (($12) + (($$1188284$i*2304)|0)|0);
       if ($1818) {
        $1820 = (($11) + ($$1188284$i<<2)|0);
        $1821 = HEAP32[$1820>>2]|0;
        $$idx$i = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$1188284$i*58)|0)|0)) + 8|0);
        $$idx$val$i = HEAP8[$$idx$i>>0]|0;
        $1822 = $$idx$val$i & 8;
        $1823 = ($1822<<24>>24)==(0);
        if ($1823) {
         $$038$i$i = 0;$$140$i$i = $1821;
        } else {
         $$0367$i$i = 0;$$0396$i$i = $1821;
         while(1) {
          $1824 = ((($$0396$i$i)) + 1|0);
          $1825 = HEAP8[$$0396$i$i>>0]|0;
          $1826 = $1825&255;
          $1827 = (($$0367$i$i) + ($1826))|0;
          $1828 = ($1827>>>0)<(36);
          if ($1828) {
           $$0367$i$i = $1827;$$0396$i$i = $1824;
          } else {
           $$038$i$i = 2;$$140$i$i = $1824;
           break;
          }
         }
        }
        ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
        HEAP32[$5>>2] = $$038$i$i;
        HEAP32[$255>>2] = $$038$i$i;
        HEAP32[$256>>2] = $$038$i$i;
        $1829 = ($$038$i$i*18)|0;
        $1830 = HEAP8[$$140$i$i>>0]|0;
        $1831 = $1830&255;
        $1832 = ((($$140$i$i)) + 1|0);
        $$0343$i$i = $1831;$$1372$i$i = $1829;$$14$i200$i = 0;$$2411$i$i = $1832;
        while(1) {
         $1833 = ($$0343$i$i|0)==(0);
         if ($1833) {
          $1834 = (($$14$i200$i) + 1)|0;
          $1835 = ((($$2411$i$i)) + 1|0);
          $1836 = HEAP8[$$2411$i$i>>0]|0;
          $1837 = $1836&255;
          $1838 = (($1834>>>0) % 3)&-1;
          $$135$in$i$i = $1837;$$2$i202$i = $1838;$$3$i201$i = $1835;
         } else {
          $$135$in$i$i = $$0343$i$i;$$2$i202$i = $$14$i200$i;$$3$i201$i = $$2411$i$i;
         }
         $$135$i$i = (($$135$in$i$i) + -1)|0;
         $1839 = ((($12) + (($$1188284$i*2304)|0)|0) + ($$1372$i$i<<2)|0);
         $1840 = HEAP32[$1839>>2]|0;
         $1841 = (($5) + ($$2$i202$i<<2)|0);
         $1842 = HEAP32[$1841>>2]|0;
         $1843 = (($3) + ($$2$i202$i<<2)|0);
         $1844 = HEAP32[$1843>>2]|0;
         $1845 = (($1844) + 1)|0;
         HEAP32[$1843>>2] = $1845;
         $1846 = (((($2) + (($1842*72)|0)|0) + (($$2$i202$i*24)|0)|0) + ($1844<<2)|0);
         HEAP32[$1846>>2] = $1840;
         $1847 = ($1845|0)==(6);
         if ($1847) {
          $1848 = (($1842) + 1)|0;
          HEAP32[$1843>>2] = 0;
          HEAP32[$1841>>2] = $1848;
         }
         $1849 = (($$1372$i$i) + 1)|0;
         $exitcond$i203$i = ($1849|0)==(576);
         if ($exitcond$i203$i) {
          break;
         } else {
          $$0343$i$i = $$135$i$i;$$1372$i$i = $1849;$$14$i200$i = $$2$i202$i;$$2411$i$i = $$3$i201$i;
         }
        }
        $1850 = ((($12) + (($$1188284$i*2304)|0)|0) + ($1829<<2)|0);
        $1851 = (($2) + (($$038$i$i*72)|0)|0);
        $1852 = Math_imul($$038$i$i, -72)|0;
        $1853 = (($1852) + 2304)|0;
        _memcpy(($1850|0),($1851|0),($1853|0))|0;
        if ($1823) {
         $$pre$phi208Z2D = $$idx$i;
        } else {
         _III_aliasreduce($1819,36);
         $$pre$phi208Z2D = $$idx$i;
        }
       } else {
        _III_aliasreduce($1819,576);
        $$pre = ((((((($15)) + 10|0) + (($$0182289$i*116)|0)|0) + (($$1188284$i*58)|0)|0)) + 8|0);
        $$pre$phi208Z2D = $$pre;
       }
       $1854 = HEAP8[$1816>>0]|0;
       $1855 = ($1854<<24>>24)==(2);
       $1856 = HEAP8[$$pre$phi208Z2D>>0]|0;
       $1857 = $1856 & 8;
       $1858 = ($1857<<24>>24)==(0);
       $or$cond$i138 = $1855 & $1858;
       if ($or$cond$i138) {
        _III_imdct_s($1819,$13);
        $2077 = HEAP32[$23>>2]|0;
        $2078 = (($2077) + (($$1188284$i*2304)|0)|0);
        $2079 = HEAP32[$13>>2]|0;
        $2080 = HEAP32[$2078>>2]|0;
        $2081 = (($2080) + ($2079))|0;
        HEAP32[$1815>>2] = $2081;
        $2082 = HEAP32[$297>>2]|0;
        HEAP32[$2078>>2] = $2082;
        $2083 = HEAP32[$298>>2]|0;
        $2084 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 4|0);
        $2085 = HEAP32[$2084>>2]|0;
        $2086 = (($2085) + ($2083))|0;
        $2087 = ((($1815)) + 128|0);
        HEAP32[$2087>>2] = $2086;
        $2088 = HEAP32[$299>>2]|0;
        HEAP32[$2084>>2] = $2088;
        $2089 = HEAP32[$300>>2]|0;
        $2090 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 8|0);
        $2091 = HEAP32[$2090>>2]|0;
        $2092 = (($2091) + ($2089))|0;
        $2093 = ((($1815)) + 256|0);
        HEAP32[$2093>>2] = $2092;
        $2094 = HEAP32[$301>>2]|0;
        HEAP32[$2090>>2] = $2094;
        $2095 = HEAP32[$302>>2]|0;
        $2096 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 12|0);
        $2097 = HEAP32[$2096>>2]|0;
        $2098 = (($2097) + ($2095))|0;
        $2099 = ((($1815)) + 384|0);
        HEAP32[$2099>>2] = $2098;
        $2100 = HEAP32[$303>>2]|0;
        HEAP32[$2096>>2] = $2100;
        $2101 = HEAP32[$304>>2]|0;
        $2102 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 16|0);
        $2103 = HEAP32[$2102>>2]|0;
        $2104 = (($2103) + ($2101))|0;
        $2105 = ((($1815)) + 512|0);
        HEAP32[$2105>>2] = $2104;
        $2106 = HEAP32[$305>>2]|0;
        HEAP32[$2102>>2] = $2106;
        $2107 = HEAP32[$306>>2]|0;
        $2108 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 20|0);
        $2109 = HEAP32[$2108>>2]|0;
        $2110 = (($2109) + ($2107))|0;
        $2111 = ((($1815)) + 640|0);
        HEAP32[$2111>>2] = $2110;
        $2112 = HEAP32[$307>>2]|0;
        HEAP32[$2108>>2] = $2112;
        $2113 = HEAP32[$308>>2]|0;
        $2114 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 24|0);
        $2115 = HEAP32[$2114>>2]|0;
        $2116 = (($2115) + ($2113))|0;
        $2117 = ((($1815)) + 768|0);
        HEAP32[$2117>>2] = $2116;
        $2118 = HEAP32[$309>>2]|0;
        HEAP32[$2114>>2] = $2118;
        $2119 = HEAP32[$310>>2]|0;
        $2120 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 28|0);
        $2121 = HEAP32[$2120>>2]|0;
        $2122 = (($2121) + ($2119))|0;
        $2123 = ((($1815)) + 896|0);
        HEAP32[$2123>>2] = $2122;
        $2124 = HEAP32[$311>>2]|0;
        HEAP32[$2120>>2] = $2124;
        $2125 = HEAP32[$312>>2]|0;
        $2126 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 32|0);
        $2127 = HEAP32[$2126>>2]|0;
        $2128 = (($2127) + ($2125))|0;
        $2129 = ((($1815)) + 1024|0);
        HEAP32[$2129>>2] = $2128;
        $2130 = HEAP32[$313>>2]|0;
        HEAP32[$2126>>2] = $2130;
        $2131 = HEAP32[$314>>2]|0;
        $2132 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 36|0);
        $2133 = HEAP32[$2132>>2]|0;
        $2134 = (($2133) + ($2131))|0;
        $2135 = ((($1815)) + 1152|0);
        HEAP32[$2135>>2] = $2134;
        $2136 = HEAP32[$315>>2]|0;
        HEAP32[$2132>>2] = $2136;
        $2137 = HEAP32[$316>>2]|0;
        $2138 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 40|0);
        $2139 = HEAP32[$2138>>2]|0;
        $2140 = (($2139) + ($2137))|0;
        $2141 = ((($1815)) + 1280|0);
        HEAP32[$2141>>2] = $2140;
        $2142 = HEAP32[$317>>2]|0;
        HEAP32[$2138>>2] = $2142;
        $2143 = HEAP32[$318>>2]|0;
        $2144 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 44|0);
        $2145 = HEAP32[$2144>>2]|0;
        $2146 = (($2145) + ($2143))|0;
        $2147 = ((($1815)) + 1408|0);
        HEAP32[$2147>>2] = $2146;
        $2148 = HEAP32[$319>>2]|0;
        HEAP32[$2144>>2] = $2148;
        $2149 = HEAP32[$320>>2]|0;
        $2150 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 48|0);
        $2151 = HEAP32[$2150>>2]|0;
        $2152 = (($2151) + ($2149))|0;
        $2153 = ((($1815)) + 1536|0);
        HEAP32[$2153>>2] = $2152;
        $2154 = HEAP32[$321>>2]|0;
        HEAP32[$2150>>2] = $2154;
        $2155 = HEAP32[$322>>2]|0;
        $2156 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 52|0);
        $2157 = HEAP32[$2156>>2]|0;
        $2158 = (($2157) + ($2155))|0;
        $2159 = ((($1815)) + 1664|0);
        HEAP32[$2159>>2] = $2158;
        $2160 = HEAP32[$323>>2]|0;
        HEAP32[$2156>>2] = $2160;
        $2161 = HEAP32[$324>>2]|0;
        $2162 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 56|0);
        $2163 = HEAP32[$2162>>2]|0;
        $2164 = (($2163) + ($2161))|0;
        $2165 = ((($1815)) + 1792|0);
        HEAP32[$2165>>2] = $2164;
        $2166 = HEAP32[$325>>2]|0;
        HEAP32[$2162>>2] = $2166;
        $2167 = HEAP32[$326>>2]|0;
        $2168 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 60|0);
        $2169 = HEAP32[$2168>>2]|0;
        $2170 = (($2169) + ($2167))|0;
        $2171 = ((($1815)) + 1920|0);
        HEAP32[$2171>>2] = $2170;
        $2172 = HEAP32[$327>>2]|0;
        HEAP32[$2168>>2] = $2172;
        $2173 = HEAP32[$328>>2]|0;
        $2174 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 64|0);
        $2175 = HEAP32[$2174>>2]|0;
        $2176 = (($2175) + ($2173))|0;
        $2177 = ((($1815)) + 2048|0);
        HEAP32[$2177>>2] = $2176;
        $2178 = HEAP32[$329>>2]|0;
        HEAP32[$2174>>2] = $2178;
        $2179 = HEAP32[$330>>2]|0;
        $2180 = (((($2077) + (($$1188284$i*2304)|0)|0)) + 68|0);
        $2181 = HEAP32[$2180>>2]|0;
        $2182 = (($2181) + ($2179))|0;
        $2183 = ((($1815)) + 2176|0);
        HEAP32[$2183>>2] = $2182;
        $2184 = HEAP32[$331>>2]|0;
        HEAP32[$2180>>2] = $2184;
        $2185 = (((($12) + (($$1188284$i*2304)|0)|0)) + 72|0);
        _III_imdct_s($2185,$13);
        $2186 = HEAP32[$23>>2]|0;
        $2187 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 72|0);
        $2188 = HEAP32[$13>>2]|0;
        $2189 = HEAP32[$2187>>2]|0;
        $2190 = (($2189) + ($2188))|0;
        $2191 = ((((((($1)) + 48|0) + (($$1188284$i*4608)|0)|0) + ($1812<<7)|0)) + 4|0);
        HEAP32[$2191>>2] = $2190;
        $2192 = HEAP32[$297>>2]|0;
        HEAP32[$2187>>2] = $2192;
        $2193 = HEAP32[$298>>2]|0;
        $2194 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 76|0);
        $2195 = HEAP32[$2194>>2]|0;
        $2196 = (($2195) + ($2193))|0;
        $2197 = ((($1815)) + 132|0);
        HEAP32[$2197>>2] = $2196;
        $2198 = HEAP32[$299>>2]|0;
        HEAP32[$2194>>2] = $2198;
        $2199 = HEAP32[$300>>2]|0;
        $2200 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 80|0);
        $2201 = HEAP32[$2200>>2]|0;
        $2202 = (($2201) + ($2199))|0;
        $2203 = ((($1815)) + 260|0);
        HEAP32[$2203>>2] = $2202;
        $2204 = HEAP32[$301>>2]|0;
        HEAP32[$2200>>2] = $2204;
        $2205 = HEAP32[$302>>2]|0;
        $2206 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 84|0);
        $2207 = HEAP32[$2206>>2]|0;
        $2208 = (($2207) + ($2205))|0;
        $2209 = ((($1815)) + 388|0);
        HEAP32[$2209>>2] = $2208;
        $2210 = HEAP32[$303>>2]|0;
        HEAP32[$2206>>2] = $2210;
        $2211 = HEAP32[$304>>2]|0;
        $2212 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 88|0);
        $2213 = HEAP32[$2212>>2]|0;
        $2214 = (($2213) + ($2211))|0;
        $2215 = ((($1815)) + 516|0);
        HEAP32[$2215>>2] = $2214;
        $2216 = HEAP32[$305>>2]|0;
        HEAP32[$2212>>2] = $2216;
        $2217 = HEAP32[$306>>2]|0;
        $2218 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 92|0);
        $2219 = HEAP32[$2218>>2]|0;
        $2220 = (($2219) + ($2217))|0;
        $2221 = ((($1815)) + 644|0);
        HEAP32[$2221>>2] = $2220;
        $2222 = HEAP32[$307>>2]|0;
        HEAP32[$2218>>2] = $2222;
        $2223 = HEAP32[$308>>2]|0;
        $2224 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 96|0);
        $2225 = HEAP32[$2224>>2]|0;
        $2226 = (($2225) + ($2223))|0;
        $2227 = ((($1815)) + 772|0);
        HEAP32[$2227>>2] = $2226;
        $2228 = HEAP32[$309>>2]|0;
        HEAP32[$2224>>2] = $2228;
        $2229 = HEAP32[$310>>2]|0;
        $2230 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 100|0);
        $2231 = HEAP32[$2230>>2]|0;
        $2232 = (($2231) + ($2229))|0;
        $2233 = ((($1815)) + 900|0);
        HEAP32[$2233>>2] = $2232;
        $2234 = HEAP32[$311>>2]|0;
        HEAP32[$2230>>2] = $2234;
        $2235 = HEAP32[$312>>2]|0;
        $2236 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 104|0);
        $2237 = HEAP32[$2236>>2]|0;
        $2238 = (($2237) + ($2235))|0;
        $2239 = ((($1815)) + 1028|0);
        HEAP32[$2239>>2] = $2238;
        $2240 = HEAP32[$313>>2]|0;
        HEAP32[$2236>>2] = $2240;
        $2241 = HEAP32[$314>>2]|0;
        $2242 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 108|0);
        $2243 = HEAP32[$2242>>2]|0;
        $2244 = (($2243) + ($2241))|0;
        $2245 = ((($1815)) + 1156|0);
        HEAP32[$2245>>2] = $2244;
        $2246 = HEAP32[$315>>2]|0;
        HEAP32[$2242>>2] = $2246;
        $2247 = HEAP32[$316>>2]|0;
        $2248 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 112|0);
        $2249 = HEAP32[$2248>>2]|0;
        $2250 = (($2249) + ($2247))|0;
        $2251 = ((($1815)) + 1284|0);
        HEAP32[$2251>>2] = $2250;
        $2252 = HEAP32[$317>>2]|0;
        HEAP32[$2248>>2] = $2252;
        $2253 = HEAP32[$318>>2]|0;
        $2254 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 116|0);
        $2255 = HEAP32[$2254>>2]|0;
        $2256 = (($2255) + ($2253))|0;
        $2257 = ((($1815)) + 1412|0);
        HEAP32[$2257>>2] = $2256;
        $2258 = HEAP32[$319>>2]|0;
        HEAP32[$2254>>2] = $2258;
        $2259 = HEAP32[$320>>2]|0;
        $2260 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 120|0);
        $2261 = HEAP32[$2260>>2]|0;
        $2262 = (($2261) + ($2259))|0;
        $2263 = ((($1815)) + 1540|0);
        HEAP32[$2263>>2] = $2262;
        $2264 = HEAP32[$321>>2]|0;
        HEAP32[$2260>>2] = $2264;
        $2265 = HEAP32[$322>>2]|0;
        $2266 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 124|0);
        $2267 = HEAP32[$2266>>2]|0;
        $2268 = (($2267) + ($2265))|0;
        $2269 = ((($1815)) + 1668|0);
        HEAP32[$2269>>2] = $2268;
        $2270 = HEAP32[$323>>2]|0;
        HEAP32[$2266>>2] = $2270;
        $2271 = HEAP32[$324>>2]|0;
        $2272 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 128|0);
        $2273 = HEAP32[$2272>>2]|0;
        $2274 = (($2273) + ($2271))|0;
        $2275 = ((($1815)) + 1796|0);
        HEAP32[$2275>>2] = $2274;
        $2276 = HEAP32[$325>>2]|0;
        HEAP32[$2272>>2] = $2276;
        $2277 = HEAP32[$326>>2]|0;
        $2278 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 132|0);
        $2279 = HEAP32[$2278>>2]|0;
        $2280 = (($2279) + ($2277))|0;
        $2281 = ((($1815)) + 1924|0);
        HEAP32[$2281>>2] = $2280;
        $2282 = HEAP32[$327>>2]|0;
        HEAP32[$2278>>2] = $2282;
        $2283 = HEAP32[$328>>2]|0;
        $2284 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 136|0);
        $2285 = HEAP32[$2284>>2]|0;
        $2286 = (($2285) + ($2283))|0;
        $2287 = ((($1815)) + 2052|0);
        HEAP32[$2287>>2] = $2286;
        $2288 = HEAP32[$329>>2]|0;
        HEAP32[$2284>>2] = $2288;
        $2289 = HEAP32[$330>>2]|0;
        $2290 = (((($2186) + (($$1188284$i*2304)|0)|0)) + 140|0);
        $2291 = HEAP32[$2290>>2]|0;
        $2292 = (($2291) + ($2289))|0;
        $2293 = ((($1815)) + 2180|0);
        HEAP32[$2293>>2] = $2292;
        $$pre$phi209Z2D = $2197;$$pre$phi210Z2D = $2209;$$pre$phi211Z2D = $2221;$$pre$phi212Z2D = $2233;$$pre$phi213Z2D = $2245;$$pre$phi214Z2D = $2257;$$pre$phi215Z2D = $2269;$$pre$phi216Z2D = $2281;$$pre$phi217Z2D = $2293;$$sink269 = $2290;
       } else {
        $1859 = $1854&255;
        $spec$store$select$i = $1858 ? $1859 : 0;
        _III_imdct_l($1819,$13,$spec$store$select$i);
        $1860 = HEAP32[$23>>2]|0;
        $1861 = (($1860) + (($$1188284$i*2304)|0)|0);
        $1862 = HEAP32[$13>>2]|0;
        $1863 = HEAP32[$1861>>2]|0;
        $1864 = (($1863) + ($1862))|0;
        HEAP32[$1815>>2] = $1864;
        $1865 = HEAP32[$297>>2]|0;
        HEAP32[$1861>>2] = $1865;
        $1866 = HEAP32[$298>>2]|0;
        $1867 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 4|0);
        $1868 = HEAP32[$1867>>2]|0;
        $1869 = (($1868) + ($1866))|0;
        $1870 = ((($1815)) + 128|0);
        HEAP32[$1870>>2] = $1869;
        $1871 = HEAP32[$299>>2]|0;
        HEAP32[$1867>>2] = $1871;
        $1872 = HEAP32[$300>>2]|0;
        $1873 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 8|0);
        $1874 = HEAP32[$1873>>2]|0;
        $1875 = (($1874) + ($1872))|0;
        $1876 = ((($1815)) + 256|0);
        HEAP32[$1876>>2] = $1875;
        $1877 = HEAP32[$301>>2]|0;
        HEAP32[$1873>>2] = $1877;
        $1878 = HEAP32[$302>>2]|0;
        $1879 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 12|0);
        $1880 = HEAP32[$1879>>2]|0;
        $1881 = (($1880) + ($1878))|0;
        $1882 = ((($1815)) + 384|0);
        HEAP32[$1882>>2] = $1881;
        $1883 = HEAP32[$303>>2]|0;
        HEAP32[$1879>>2] = $1883;
        $1884 = HEAP32[$304>>2]|0;
        $1885 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 16|0);
        $1886 = HEAP32[$1885>>2]|0;
        $1887 = (($1886) + ($1884))|0;
        $1888 = ((($1815)) + 512|0);
        HEAP32[$1888>>2] = $1887;
        $1889 = HEAP32[$305>>2]|0;
        HEAP32[$1885>>2] = $1889;
        $1890 = HEAP32[$306>>2]|0;
        $1891 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 20|0);
        $1892 = HEAP32[$1891>>2]|0;
        $1893 = (($1892) + ($1890))|0;
        $1894 = ((($1815)) + 640|0);
        HEAP32[$1894>>2] = $1893;
        $1895 = HEAP32[$307>>2]|0;
        HEAP32[$1891>>2] = $1895;
        $1896 = HEAP32[$308>>2]|0;
        $1897 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 24|0);
        $1898 = HEAP32[$1897>>2]|0;
        $1899 = (($1898) + ($1896))|0;
        $1900 = ((($1815)) + 768|0);
        HEAP32[$1900>>2] = $1899;
        $1901 = HEAP32[$309>>2]|0;
        HEAP32[$1897>>2] = $1901;
        $1902 = HEAP32[$310>>2]|0;
        $1903 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 28|0);
        $1904 = HEAP32[$1903>>2]|0;
        $1905 = (($1904) + ($1902))|0;
        $1906 = ((($1815)) + 896|0);
        HEAP32[$1906>>2] = $1905;
        $1907 = HEAP32[$311>>2]|0;
        HEAP32[$1903>>2] = $1907;
        $1908 = HEAP32[$312>>2]|0;
        $1909 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 32|0);
        $1910 = HEAP32[$1909>>2]|0;
        $1911 = (($1910) + ($1908))|0;
        $1912 = ((($1815)) + 1024|0);
        HEAP32[$1912>>2] = $1911;
        $1913 = HEAP32[$313>>2]|0;
        HEAP32[$1909>>2] = $1913;
        $1914 = HEAP32[$314>>2]|0;
        $1915 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 36|0);
        $1916 = HEAP32[$1915>>2]|0;
        $1917 = (($1916) + ($1914))|0;
        $1918 = ((($1815)) + 1152|0);
        HEAP32[$1918>>2] = $1917;
        $1919 = HEAP32[$315>>2]|0;
        HEAP32[$1915>>2] = $1919;
        $1920 = HEAP32[$316>>2]|0;
        $1921 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 40|0);
        $1922 = HEAP32[$1921>>2]|0;
        $1923 = (($1922) + ($1920))|0;
        $1924 = ((($1815)) + 1280|0);
        HEAP32[$1924>>2] = $1923;
        $1925 = HEAP32[$317>>2]|0;
        HEAP32[$1921>>2] = $1925;
        $1926 = HEAP32[$318>>2]|0;
        $1927 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 44|0);
        $1928 = HEAP32[$1927>>2]|0;
        $1929 = (($1928) + ($1926))|0;
        $1930 = ((($1815)) + 1408|0);
        HEAP32[$1930>>2] = $1929;
        $1931 = HEAP32[$319>>2]|0;
        HEAP32[$1927>>2] = $1931;
        $1932 = HEAP32[$320>>2]|0;
        $1933 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 48|0);
        $1934 = HEAP32[$1933>>2]|0;
        $1935 = (($1934) + ($1932))|0;
        $1936 = ((($1815)) + 1536|0);
        HEAP32[$1936>>2] = $1935;
        $1937 = HEAP32[$321>>2]|0;
        HEAP32[$1933>>2] = $1937;
        $1938 = HEAP32[$322>>2]|0;
        $1939 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 52|0);
        $1940 = HEAP32[$1939>>2]|0;
        $1941 = (($1940) + ($1938))|0;
        $1942 = ((($1815)) + 1664|0);
        HEAP32[$1942>>2] = $1941;
        $1943 = HEAP32[$323>>2]|0;
        HEAP32[$1939>>2] = $1943;
        $1944 = HEAP32[$324>>2]|0;
        $1945 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 56|0);
        $1946 = HEAP32[$1945>>2]|0;
        $1947 = (($1946) + ($1944))|0;
        $1948 = ((($1815)) + 1792|0);
        HEAP32[$1948>>2] = $1947;
        $1949 = HEAP32[$325>>2]|0;
        HEAP32[$1945>>2] = $1949;
        $1950 = HEAP32[$326>>2]|0;
        $1951 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 60|0);
        $1952 = HEAP32[$1951>>2]|0;
        $1953 = (($1952) + ($1950))|0;
        $1954 = ((($1815)) + 1920|0);
        HEAP32[$1954>>2] = $1953;
        $1955 = HEAP32[$327>>2]|0;
        HEAP32[$1951>>2] = $1955;
        $1956 = HEAP32[$328>>2]|0;
        $1957 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 64|0);
        $1958 = HEAP32[$1957>>2]|0;
        $1959 = (($1958) + ($1956))|0;
        $1960 = ((($1815)) + 2048|0);
        HEAP32[$1960>>2] = $1959;
        $1961 = HEAP32[$329>>2]|0;
        HEAP32[$1957>>2] = $1961;
        $1962 = HEAP32[$330>>2]|0;
        $1963 = (((($1860) + (($$1188284$i*2304)|0)|0)) + 68|0);
        $1964 = HEAP32[$1963>>2]|0;
        $1965 = (($1964) + ($1962))|0;
        $1966 = ((($1815)) + 2176|0);
        HEAP32[$1966>>2] = $1965;
        $1967 = HEAP32[$331>>2]|0;
        HEAP32[$1963>>2] = $1967;
        $1968 = (((($12) + (($$1188284$i*2304)|0)|0)) + 72|0);
        _III_imdct_l($1968,$13,$spec$store$select$i);
        $1969 = HEAP32[$23>>2]|0;
        $1970 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 72|0);
        $1971 = HEAP32[$13>>2]|0;
        $1972 = HEAP32[$1970>>2]|0;
        $1973 = (($1972) + ($1971))|0;
        $1974 = ((((((($1)) + 48|0) + (($$1188284$i*4608)|0)|0) + ($1812<<7)|0)) + 4|0);
        HEAP32[$1974>>2] = $1973;
        $1975 = HEAP32[$297>>2]|0;
        HEAP32[$1970>>2] = $1975;
        $1976 = HEAP32[$298>>2]|0;
        $1977 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 76|0);
        $1978 = HEAP32[$1977>>2]|0;
        $1979 = (($1978) + ($1976))|0;
        $1980 = ((($1815)) + 132|0);
        HEAP32[$1980>>2] = $1979;
        $1981 = HEAP32[$299>>2]|0;
        HEAP32[$1977>>2] = $1981;
        $1982 = HEAP32[$300>>2]|0;
        $1983 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 80|0);
        $1984 = HEAP32[$1983>>2]|0;
        $1985 = (($1984) + ($1982))|0;
        $1986 = ((($1815)) + 260|0);
        HEAP32[$1986>>2] = $1985;
        $1987 = HEAP32[$301>>2]|0;
        HEAP32[$1983>>2] = $1987;
        $1988 = HEAP32[$302>>2]|0;
        $1989 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 84|0);
        $1990 = HEAP32[$1989>>2]|0;
        $1991 = (($1990) + ($1988))|0;
        $1992 = ((($1815)) + 388|0);
        HEAP32[$1992>>2] = $1991;
        $1993 = HEAP32[$303>>2]|0;
        HEAP32[$1989>>2] = $1993;
        $1994 = HEAP32[$304>>2]|0;
        $1995 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 88|0);
        $1996 = HEAP32[$1995>>2]|0;
        $1997 = (($1996) + ($1994))|0;
        $1998 = ((($1815)) + 516|0);
        HEAP32[$1998>>2] = $1997;
        $1999 = HEAP32[$305>>2]|0;
        HEAP32[$1995>>2] = $1999;
        $2000 = HEAP32[$306>>2]|0;
        $2001 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 92|0);
        $2002 = HEAP32[$2001>>2]|0;
        $2003 = (($2002) + ($2000))|0;
        $2004 = ((($1815)) + 644|0);
        HEAP32[$2004>>2] = $2003;
        $2005 = HEAP32[$307>>2]|0;
        HEAP32[$2001>>2] = $2005;
        $2006 = HEAP32[$308>>2]|0;
        $2007 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 96|0);
        $2008 = HEAP32[$2007>>2]|0;
        $2009 = (($2008) + ($2006))|0;
        $2010 = ((($1815)) + 772|0);
        HEAP32[$2010>>2] = $2009;
        $2011 = HEAP32[$309>>2]|0;
        HEAP32[$2007>>2] = $2011;
        $2012 = HEAP32[$310>>2]|0;
        $2013 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 100|0);
        $2014 = HEAP32[$2013>>2]|0;
        $2015 = (($2014) + ($2012))|0;
        $2016 = ((($1815)) + 900|0);
        HEAP32[$2016>>2] = $2015;
        $2017 = HEAP32[$311>>2]|0;
        HEAP32[$2013>>2] = $2017;
        $2018 = HEAP32[$312>>2]|0;
        $2019 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 104|0);
        $2020 = HEAP32[$2019>>2]|0;
        $2021 = (($2020) + ($2018))|0;
        $2022 = ((($1815)) + 1028|0);
        HEAP32[$2022>>2] = $2021;
        $2023 = HEAP32[$313>>2]|0;
        HEAP32[$2019>>2] = $2023;
        $2024 = HEAP32[$314>>2]|0;
        $2025 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 108|0);
        $2026 = HEAP32[$2025>>2]|0;
        $2027 = (($2026) + ($2024))|0;
        $2028 = ((($1815)) + 1156|0);
        HEAP32[$2028>>2] = $2027;
        $2029 = HEAP32[$315>>2]|0;
        HEAP32[$2025>>2] = $2029;
        $2030 = HEAP32[$316>>2]|0;
        $2031 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 112|0);
        $2032 = HEAP32[$2031>>2]|0;
        $2033 = (($2032) + ($2030))|0;
        $2034 = ((($1815)) + 1284|0);
        HEAP32[$2034>>2] = $2033;
        $2035 = HEAP32[$317>>2]|0;
        HEAP32[$2031>>2] = $2035;
        $2036 = HEAP32[$318>>2]|0;
        $2037 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 116|0);
        $2038 = HEAP32[$2037>>2]|0;
        $2039 = (($2038) + ($2036))|0;
        $2040 = ((($1815)) + 1412|0);
        HEAP32[$2040>>2] = $2039;
        $2041 = HEAP32[$319>>2]|0;
        HEAP32[$2037>>2] = $2041;
        $2042 = HEAP32[$320>>2]|0;
        $2043 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 120|0);
        $2044 = HEAP32[$2043>>2]|0;
        $2045 = (($2044) + ($2042))|0;
        $2046 = ((($1815)) + 1540|0);
        HEAP32[$2046>>2] = $2045;
        $2047 = HEAP32[$321>>2]|0;
        HEAP32[$2043>>2] = $2047;
        $2048 = HEAP32[$322>>2]|0;
        $2049 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 124|0);
        $2050 = HEAP32[$2049>>2]|0;
        $2051 = (($2050) + ($2048))|0;
        $2052 = ((($1815)) + 1668|0);
        HEAP32[$2052>>2] = $2051;
        $2053 = HEAP32[$323>>2]|0;
        HEAP32[$2049>>2] = $2053;
        $2054 = HEAP32[$324>>2]|0;
        $2055 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 128|0);
        $2056 = HEAP32[$2055>>2]|0;
        $2057 = (($2056) + ($2054))|0;
        $2058 = ((($1815)) + 1796|0);
        HEAP32[$2058>>2] = $2057;
        $2059 = HEAP32[$325>>2]|0;
        HEAP32[$2055>>2] = $2059;
        $2060 = HEAP32[$326>>2]|0;
        $2061 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 132|0);
        $2062 = HEAP32[$2061>>2]|0;
        $2063 = (($2062) + ($2060))|0;
        $2064 = ((($1815)) + 1924|0);
        HEAP32[$2064>>2] = $2063;
        $2065 = HEAP32[$327>>2]|0;
        HEAP32[$2061>>2] = $2065;
        $2066 = HEAP32[$328>>2]|0;
        $2067 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 136|0);
        $2068 = HEAP32[$2067>>2]|0;
        $2069 = (($2068) + ($2066))|0;
        $2070 = ((($1815)) + 2052|0);
        HEAP32[$2070>>2] = $2069;
        $2071 = HEAP32[$329>>2]|0;
        HEAP32[$2067>>2] = $2071;
        $2072 = HEAP32[$330>>2]|0;
        $2073 = (((($1969) + (($$1188284$i*2304)|0)|0)) + 140|0);
        $2074 = HEAP32[$2073>>2]|0;
        $2075 = (($2074) + ($2072))|0;
        $2076 = ((($1815)) + 2180|0);
        HEAP32[$2076>>2] = $2075;
        $$pre$phi209Z2D = $1980;$$pre$phi210Z2D = $1992;$$pre$phi211Z2D = $2004;$$pre$phi212Z2D = $2016;$$pre$phi213Z2D = $2028;$$pre$phi214Z2D = $2040;$$pre$phi215Z2D = $2052;$$pre$phi216Z2D = $2064;$$pre$phi217Z2D = $2076;$$sink269 = $2073;
       }
       $2294 = HEAP32[$331>>2]|0;
       HEAP32[$$sink269>>2] = $2294;
       $2295 = HEAP32[$$pre$phi209Z2D>>2]|0;
       $$035$i$i = HEAP32[$$pre$phi210Z2D>>2]|0;
       $2296 = (0 - ($2295))|0;
       HEAP32[$$pre$phi209Z2D>>2] = $2296;
       $2297 = HEAP32[$$pre$phi211Z2D>>2]|0;
       $2298 = (0 - ($$035$i$i))|0;
       HEAP32[$$pre$phi210Z2D>>2] = $2298;
       $$0$i205$i = HEAP32[$$pre$phi212Z2D>>2]|0;
       $2299 = (0 - ($2297))|0;
       HEAP32[$$pre$phi211Z2D>>2] = $2299;
       $2300 = HEAP32[$$pre$phi213Z2D>>2]|0;
       $2301 = (0 - ($$0$i205$i))|0;
       HEAP32[$$pre$phi212Z2D>>2] = $2301;
       $$0$1$i$i = HEAP32[$$pre$phi214Z2D>>2]|0;
       $2302 = (0 - ($2300))|0;
       HEAP32[$$pre$phi213Z2D>>2] = $2302;
       $2303 = HEAP32[$$pre$phi215Z2D>>2]|0;
       $2304 = (0 - ($$0$1$i$i))|0;
       HEAP32[$$pre$phi214Z2D>>2] = $2304;
       $$0$2$i$i = HEAP32[$$pre$phi216Z2D>>2]|0;
       $2305 = (0 - ($2303))|0;
       HEAP32[$$pre$phi215Z2D>>2] = $2305;
       $2306 = HEAP32[$$pre$phi217Z2D>>2]|0;
       $2307 = (0 - ($$0$2$i$i))|0;
       HEAP32[$$pre$phi216Z2D>>2] = $2307;
       $2308 = (0 - ($2306))|0;
       HEAP32[$$pre$phi217Z2D>>2] = $2308;
       $$0170271$i = 576;
       while(1) {
        $2310 = (($$0170271$i) + -1)|0;
        $2311 = ((($12) + (($$1188284$i*2304)|0)|0) + ($2310<<2)|0);
        $2312 = HEAP32[$2311>>2]|0;
        $2313 = ($2312|0)==(0);
        if (!($2313)) {
         $$0170$lcssa$i = $$0170271$i;
         break;
        }
        $2309 = ($2310>>>0)>(36);
        if ($2309) {
         $$0170271$i = $2310;
        } else {
         $$0170$lcssa$i = 36;
         break;
        }
       }
       $2314 = (576 - ($$0170$lcssa$i))|0;
       $2315 = (($2314>>>0) / 18)&-1;
       $2316 = (32 - ($2315))|0;
       $2317 = HEAP8[$1816>>0]|0;
       $2318 = ($2317<<24>>24)==(2);
       $2319 = ($2316>>>0)>(2);
       L467: do {
        if ($2318) {
         if ($2319) {
          $$3179276$i = 2;$$4175277$i = 36;
          while(1) {
           $2353 = ((($12) + (($$1188284$i*2304)|0)|0) + ($$4175277$i<<2)|0);
           _III_imdct_s($2353,$13);
           $2354 = HEAP32[$23>>2]|0;
           $2355 = ((($2354) + (($$1188284$i*2304)|0)|0) + (($$3179276$i*72)|0)|0);
           _III_overlap($13,$2355,$1815,$$3179276$i);
           $2356 = $$3179276$i & 1;
           $2357 = ($2356|0)==(0);
           if (!($2357)) {
            $2358 = (((($1815)) + 128|0) + ($$3179276$i<<2)|0);
            $2359 = HEAP32[$2358>>2]|0;
            $2360 = (((($1815)) + 384|0) + ($$3179276$i<<2)|0);
            $$035$i210$i = HEAP32[$2360>>2]|0;
            $2361 = (0 - ($2359))|0;
            HEAP32[$2358>>2] = $2361;
            $2362 = (((($1815)) + 640|0) + ($$3179276$i<<2)|0);
            $2363 = HEAP32[$2362>>2]|0;
            $2364 = (0 - ($$035$i210$i))|0;
            HEAP32[$2360>>2] = $2364;
            $2365 = (((($1815)) + 896|0) + ($$3179276$i<<2)|0);
            $$0$i211$i = HEAP32[$2365>>2]|0;
            $2366 = (0 - ($2363))|0;
            HEAP32[$2362>>2] = $2366;
            $2367 = (((($1815)) + 1152|0) + ($$3179276$i<<2)|0);
            $2368 = HEAP32[$2367>>2]|0;
            $2369 = (0 - ($$0$i211$i))|0;
            HEAP32[$2365>>2] = $2369;
            $2370 = (((($1815)) + 1408|0) + ($$3179276$i<<2)|0);
            $$0$1$i212$i = HEAP32[$2370>>2]|0;
            $2371 = (0 - ($2368))|0;
            HEAP32[$2367>>2] = $2371;
            $2372 = (((($1815)) + 1664|0) + ($$3179276$i<<2)|0);
            $2373 = HEAP32[$2372>>2]|0;
            $2374 = (0 - ($$0$1$i212$i))|0;
            HEAP32[$2370>>2] = $2374;
            $2375 = (((($1815)) + 1920|0) + ($$3179276$i<<2)|0);
            $$0$2$i213$i = HEAP32[$2375>>2]|0;
            $2376 = (0 - ($2373))|0;
            HEAP32[$2372>>2] = $2376;
            $2377 = (((($1815)) + 2176|0) + ($$3179276$i<<2)|0);
            $2378 = HEAP32[$2377>>2]|0;
            $2379 = (0 - ($$0$2$i213$i))|0;
            HEAP32[$2375>>2] = $2379;
            $2380 = (0 - ($2378))|0;
            HEAP32[$2377>>2] = $2380;
           }
           $2381 = (($$3179276$i) + 1)|0;
           $2382 = (($$4175277$i) + 18)|0;
           $2383 = ($2381>>>0)<($2316>>>0);
           if ($2383) {
            $$3179276$i = $2381;$$4175277$i = $2382;
           } else {
            label = 333;
            break;
           }
          }
         } else {
          label = 334;
         }
        } else {
         if ($2319) {
          $$2178272$i = 2;$$3174273$i = 36;$2322 = $2317;
          while(1) {
           $2320 = ((($12) + (($$1188284$i*2304)|0)|0) + ($$3174273$i<<2)|0);
           $2321 = $2322&255;
           _III_imdct_l($2320,$13,$2321);
           $2323 = HEAP32[$23>>2]|0;
           $2324 = ((($2323) + (($$1188284$i*2304)|0)|0) + (($$2178272$i*72)|0)|0);
           _III_overlap($13,$2324,$1815,$$2178272$i);
           $2325 = $$2178272$i & 1;
           $2326 = ($2325|0)==(0);
           if (!($2326)) {
            $2327 = (((($1815)) + 128|0) + ($$2178272$i<<2)|0);
            $2328 = HEAP32[$2327>>2]|0;
            $2329 = (((($1815)) + 384|0) + ($$2178272$i<<2)|0);
            $$035$i206$i = HEAP32[$2329>>2]|0;
            $2330 = (0 - ($2328))|0;
            HEAP32[$2327>>2] = $2330;
            $2331 = (((($1815)) + 640|0) + ($$2178272$i<<2)|0);
            $2332 = HEAP32[$2331>>2]|0;
            $2333 = (0 - ($$035$i206$i))|0;
            HEAP32[$2329>>2] = $2333;
            $2334 = (((($1815)) + 896|0) + ($$2178272$i<<2)|0);
            $$0$i207$i = HEAP32[$2334>>2]|0;
            $2335 = (0 - ($2332))|0;
            HEAP32[$2331>>2] = $2335;
            $2336 = (((($1815)) + 1152|0) + ($$2178272$i<<2)|0);
            $2337 = HEAP32[$2336>>2]|0;
            $2338 = (0 - ($$0$i207$i))|0;
            HEAP32[$2334>>2] = $2338;
            $2339 = (((($1815)) + 1408|0) + ($$2178272$i<<2)|0);
            $$0$1$i208$i = HEAP32[$2339>>2]|0;
            $2340 = (0 - ($2337))|0;
            HEAP32[$2336>>2] = $2340;
            $2341 = (((($1815)) + 1664|0) + ($$2178272$i<<2)|0);
            $2342 = HEAP32[$2341>>2]|0;
            $2343 = (0 - ($$0$1$i208$i))|0;
            HEAP32[$2339>>2] = $2343;
            $2344 = (((($1815)) + 1920|0) + ($$2178272$i<<2)|0);
            $$0$2$i209$i = HEAP32[$2344>>2]|0;
            $2345 = (0 - ($2342))|0;
            HEAP32[$2341>>2] = $2345;
            $2346 = (((($1815)) + 2176|0) + ($$2178272$i<<2)|0);
            $2347 = HEAP32[$2346>>2]|0;
            $2348 = (0 - ($$0$2$i209$i))|0;
            HEAP32[$2344>>2] = $2348;
            $2349 = (0 - ($2347))|0;
            HEAP32[$2346>>2] = $2349;
           }
           $2350 = (($$2178272$i) + 1)|0;
           $2351 = ($2350>>>0)<($2316>>>0);
           if (!($2351)) {
            label = 333;
            break L467;
           }
           $2352 = (($$3174273$i) + 18)|0;
           $$pre334$i = HEAP8[$1816>>0]|0;
           $$2178272$i = $2350;$$3174273$i = $2352;$2322 = $$pre334$i;
          }
         } else {
          label = 334;
         }
        }
       } while(0);
       if ((label|0) == 333) {
        label = 0;
        $2384 = ($2316>>>0)<(32);
        if ($2384) {
         label = 334;
        }
       }
       if ((label|0) == 334) {
        label = 0;
        $2385 = HEAP32[$23>>2]|0;
        $$4180280$i = $2316;
        while(1) {
         $2386 = ((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0);
         $2387 = HEAP32[$2386>>2]|0;
         $2388 = (((((($1)) + 48|0) + (($$1188284$i*4608)|0)|0) + ($1812<<7)|0) + ($$4180280$i<<2)|0);
         HEAP32[$2388>>2] = $2387;
         HEAP32[$2386>>2] = 0;
         $2389 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 4|0);
         $2390 = HEAP32[$2389>>2]|0;
         $2391 = (((($1815)) + 128|0) + ($$4180280$i<<2)|0);
         HEAP32[$2391>>2] = $2390;
         HEAP32[$2389>>2] = 0;
         $2392 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 8|0);
         $2393 = HEAP32[$2392>>2]|0;
         $2394 = (((($1815)) + 256|0) + ($$4180280$i<<2)|0);
         HEAP32[$2394>>2] = $2393;
         HEAP32[$2392>>2] = 0;
         $2395 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 12|0);
         $2396 = HEAP32[$2395>>2]|0;
         $2397 = (((($1815)) + 384|0) + ($$4180280$i<<2)|0);
         HEAP32[$2397>>2] = $2396;
         HEAP32[$2395>>2] = 0;
         $2398 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 16|0);
         $2399 = HEAP32[$2398>>2]|0;
         $2400 = (((($1815)) + 512|0) + ($$4180280$i<<2)|0);
         HEAP32[$2400>>2] = $2399;
         HEAP32[$2398>>2] = 0;
         $2401 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 20|0);
         $2402 = HEAP32[$2401>>2]|0;
         $2403 = (((($1815)) + 640|0) + ($$4180280$i<<2)|0);
         HEAP32[$2403>>2] = $2402;
         HEAP32[$2401>>2] = 0;
         $2404 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 24|0);
         $2405 = HEAP32[$2404>>2]|0;
         $2406 = (((($1815)) + 768|0) + ($$4180280$i<<2)|0);
         HEAP32[$2406>>2] = $2405;
         HEAP32[$2404>>2] = 0;
         $2407 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 28|0);
         $2408 = HEAP32[$2407>>2]|0;
         $2409 = (((($1815)) + 896|0) + ($$4180280$i<<2)|0);
         HEAP32[$2409>>2] = $2408;
         HEAP32[$2407>>2] = 0;
         $2410 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 32|0);
         $2411 = HEAP32[$2410>>2]|0;
         $2412 = (((($1815)) + 1024|0) + ($$4180280$i<<2)|0);
         HEAP32[$2412>>2] = $2411;
         HEAP32[$2410>>2] = 0;
         $2413 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 36|0);
         $2414 = HEAP32[$2413>>2]|0;
         $2415 = (((($1815)) + 1152|0) + ($$4180280$i<<2)|0);
         HEAP32[$2415>>2] = $2414;
         HEAP32[$2413>>2] = 0;
         $2416 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 40|0);
         $2417 = HEAP32[$2416>>2]|0;
         $2418 = (((($1815)) + 1280|0) + ($$4180280$i<<2)|0);
         HEAP32[$2418>>2] = $2417;
         HEAP32[$2416>>2] = 0;
         $2419 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 44|0);
         $2420 = HEAP32[$2419>>2]|0;
         $2421 = (((($1815)) + 1408|0) + ($$4180280$i<<2)|0);
         HEAP32[$2421>>2] = $2420;
         HEAP32[$2419>>2] = 0;
         $2422 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 48|0);
         $2423 = HEAP32[$2422>>2]|0;
         $2424 = (((($1815)) + 1536|0) + ($$4180280$i<<2)|0);
         HEAP32[$2424>>2] = $2423;
         HEAP32[$2422>>2] = 0;
         $2425 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 52|0);
         $2426 = HEAP32[$2425>>2]|0;
         $2427 = (((($1815)) + 1664|0) + ($$4180280$i<<2)|0);
         HEAP32[$2427>>2] = $2426;
         HEAP32[$2425>>2] = 0;
         $2428 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 56|0);
         $2429 = HEAP32[$2428>>2]|0;
         $2430 = (((($1815)) + 1792|0) + ($$4180280$i<<2)|0);
         HEAP32[$2430>>2] = $2429;
         HEAP32[$2428>>2] = 0;
         $2431 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 60|0);
         $2432 = HEAP32[$2431>>2]|0;
         $2433 = (((($1815)) + 1920|0) + ($$4180280$i<<2)|0);
         HEAP32[$2433>>2] = $2432;
         HEAP32[$2431>>2] = 0;
         $2434 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 64|0);
         $2435 = HEAP32[$2434>>2]|0;
         $2436 = (((($1815)) + 2048|0) + ($$4180280$i<<2)|0);
         HEAP32[$2436>>2] = $2435;
         HEAP32[$2434>>2] = 0;
         $2437 = ((((($2385) + (($$1188284$i*2304)|0)|0) + (($$4180280$i*72)|0)|0)) + 68|0);
         $2438 = HEAP32[$2437>>2]|0;
         $2439 = (((($1815)) + 2176|0) + ($$4180280$i<<2)|0);
         HEAP32[$2439>>2] = $2438;
         HEAP32[$2437>>2] = 0;
         $2440 = $$4180280$i & 1;
         $2441 = ($2440|0)==(0);
         if (!($2441)) {
          $2442 = HEAP32[$2391>>2]|0;
          $$035$i214$i = HEAP32[$2397>>2]|0;
          $2443 = (0 - ($2442))|0;
          HEAP32[$2391>>2] = $2443;
          $2444 = HEAP32[$2403>>2]|0;
          $2445 = (0 - ($$035$i214$i))|0;
          HEAP32[$2397>>2] = $2445;
          $$0$i215$i = HEAP32[$2409>>2]|0;
          $2446 = (0 - ($2444))|0;
          HEAP32[$2403>>2] = $2446;
          $2447 = HEAP32[$2415>>2]|0;
          $2448 = (0 - ($$0$i215$i))|0;
          HEAP32[$2409>>2] = $2448;
          $$0$1$i216$i = HEAP32[$2421>>2]|0;
          $2449 = (0 - ($2447))|0;
          HEAP32[$2415>>2] = $2449;
          $2450 = HEAP32[$2427>>2]|0;
          $2451 = (0 - ($$0$1$i216$i))|0;
          HEAP32[$2421>>2] = $2451;
          $$0$2$i217$i = HEAP32[$2433>>2]|0;
          $2452 = (0 - ($2450))|0;
          HEAP32[$2427>>2] = $2452;
          $2453 = HEAP32[$2439>>2]|0;
          $2454 = (0 - ($$0$2$i217$i))|0;
          HEAP32[$2433>>2] = $2454;
          $2455 = (0 - ($2453))|0;
          HEAP32[$2439>>2] = $2455;
         }
         $2456 = (($$4180280$i) + 1)|0;
         $2457 = ($2456>>>0)<(32);
         if ($2457) {
          $$4180280$i = $2456;
         } else {
          break;
         }
        }
       }
       $2458 = (($$1188284$i) + 1)|0;
       $exitcond$i140 = ($2458|0)==($32|0);
       if ($exitcond$i140) {
        break;
       } else {
        $$1188284$i = $2458;
       }
      }
      $1813 = (($$0182289$i) + 1)|0;
      $1814 = ($1813>>>0)<($227>>>0);
      if ($1814) {
       $$0182289$i = $1813;
      } else {
       $$3 = 0;
       break L64;
      }
     }
     if ((label|0) == 194) {
      $$3282$i$ph$i = 567;
      label = 339;
     }
     else if ((label|0) == 225) {
      ___assert_fail((57469|0),(57446|0),1253,(57511|0));
      // unreachable;
     }
     else if ((label|0) == 299) {
      $$4$i141 = 569;
     }
     if ((label|0) == 339) {
      $$4$i141 = $$3282$i$ph$i;
     }
     $2459 = ((($0)) + 60|0);
     HEAP32[$2459>>2] = $$4$i141;
     $$3 = -1;
    }
   } while(0);
   $2460 = ((($0)) + 36|0);
   $2461 = $14;
   $2462 = $2461;
   $2463 = HEAP32[$2462>>2]|0;
   $2464 = (($2461) + 4)|0;
   $2465 = $2464;
   $2466 = HEAP32[$2465>>2]|0;
   $2467 = $2460;
   $2468 = $2467;
   HEAP32[$2468>>2] = $2463;
   $2469 = (($2467) + 4)|0;
   $2470 = $2469;
   HEAP32[$2470>>2] = $2466;
   $2471 = $177 << 3;
   $2472 = (($2471) - ($93))|0;
   $2473 = ((($0)) + 44|0);
   HEAP32[$2473>>2] = $2472;
   $$4 = $$3;$2475 = $212;
  } else {
   $$4 = $$1;$2475 = $212;
  }
 }
 $2474 = ($spec$select>>>0)>($2475>>>0);
 if (!($2474)) {
  $2476 = HEAP32[$17>>2]|0;
  $2477 = HEAP32[$40>>2]|0;
  $2478 = (0 - ($spec$select))|0;
  $2479 = (($2477) + ($2478)|0);
  _memcpy(($2476|0),($2479|0),($spec$select|0))|0;
  $2480 = ((($0)) + 52|0);
  HEAP32[$2480>>2] = $spec$select;
  $$0130 = $$4;
  STACKTOP = sp;return ($$0130|0);
 }
 $2481 = HEAP32[$15>>2]|0;
 $2482 = ($2481>>>0)>($177>>>0);
 if ($2482) {
  $2483 = (($2481) - ($177))|0;
  $2484 = (($2483) + ($2475))|0;
  $2485 = ($2484>>>0)>($spec$select>>>0);
  $2486 = (($spec$select) - ($2475))|0;
  $spec$select135 = $2485 ? $2486 : $2483;
  $2487 = ((($0)) + 52|0);
  $2488 = HEAP32[$2487>>2]|0;
  $2489 = ($spec$select135>>>0)<($2488>>>0);
  if ($2489) {
   $2490 = HEAP32[$17>>2]|0;
   $2491 = (($2490) + ($2488)|0);
   $2492 = (0 - ($spec$select135))|0;
   $2493 = (($2491) + ($2492)|0);
   _memmove(($2490|0),($2493|0),($spec$select135|0))|0;
   HEAP32[$2487>>2] = $spec$select135;
   $$pre$phiZ2D = $2487;$2497 = $spec$select135;
  } else {
   $$pre$phiZ2D = $2487;$2497 = $2488;
  }
 } else {
  $2494 = ((($0)) + 52|0);
  HEAP32[$2494>>2] = 0;
  $$pre$phiZ2D = $2494;$2497 = 0;
 }
 $2495 = HEAP32[$17>>2]|0;
 $2496 = (($2495) + ($2497)|0);
 $2498 = HEAP32[$40>>2]|0;
 $2499 = (0 - ($2475))|0;
 $2500 = (($2498) + ($2499)|0);
 _memcpy(($2496|0),($2500|0),($2475|0))|0;
 $2501 = HEAP32[$$pre$phiZ2D>>2]|0;
 $2502 = (($2501) + ($2475))|0;
 HEAP32[$$pre$phiZ2D>>2] = $2502;
 $$0130 = $$4;
 STACKTOP = sp;return ($$0130|0);
}
function _III_aliasreduce($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$042 = 0, $$043 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1<<2)|0);
 $3 = ($1|0)>(18);
 if (!($3)) {
  return;
 }
 $$042 = ((($0)) + 72|0);
 $$043 = $$042;
 while(1) {
  $4 = ((($$043)) + -4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$$043>>2]|0;
  $7 = ($5|0)<(0);
  $8 = $7 << 31 >> 31;
  $9 = (___muldi3(($5|0),($8|0),230181505,0)|0);
  $10 = (getTempRet0() | 0);
  $11 = (_bitshift64Lshr(($9|0),($10|0),28)|0);
  $12 = (getTempRet0() | 0);
  $13 = (0 - ($6))|0;
  $14 = ($13|0)<(0);
  $15 = $14 << 31 >> 31;
  $16 = (___muldi3(($13|0),($15|0),-138108903,-1)|0);
  $17 = (getTempRet0() | 0);
  $18 = (_bitshift64Lshr(($16|0),($17|0),28)|0);
  $19 = (getTempRet0() | 0);
  $20 = (($18) + ($11))|0;
  HEAP32[$4>>2] = $20;
  $21 = ($6|0)<(0);
  $22 = $21 << 31 >> 31;
  $23 = (___muldi3(($6|0),($22|0),230181505,0)|0);
  $24 = (getTempRet0() | 0);
  $25 = (_bitshift64Lshr(($23|0),($24|0),28)|0);
  $26 = (getTempRet0() | 0);
  $27 = (___muldi3(($5|0),($8|0),-138108903,-1)|0);
  $28 = (getTempRet0() | 0);
  $29 = (_bitshift64Lshr(($27|0),($28|0),28)|0);
  $30 = (getTempRet0() | 0);
  $31 = (($29) + ($25))|0;
  HEAP32[$$043>>2] = $31;
  $32 = ((($$043)) + -8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($$043)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($33|0)<(0);
  $37 = $36 << 31 >> 31;
  $38 = (___muldi3(($33|0),($37|0),236690815,0)|0);
  $39 = (getTempRet0() | 0);
  $40 = (_bitshift64Lshr(($38|0),($39|0),28)|0);
  $41 = (getTempRet0() | 0);
  $42 = (0 - ($35))|0;
  $43 = ($42|0)<(0);
  $44 = $43 << 31 >> 31;
  $45 = (___muldi3(($42|0),($44|0),-126629586,-1)|0);
  $46 = (getTempRet0() | 0);
  $47 = (_bitshift64Lshr(($45|0),($46|0),28)|0);
  $48 = (getTempRet0() | 0);
  $49 = (($47) + ($40))|0;
  HEAP32[$32>>2] = $49;
  $50 = ($35|0)<(0);
  $51 = $50 << 31 >> 31;
  $52 = (___muldi3(($35|0),($51|0),236690815,0)|0);
  $53 = (getTempRet0() | 0);
  $54 = (_bitshift64Lshr(($52|0),($53|0),28)|0);
  $55 = (getTempRet0() | 0);
  $56 = (___muldi3(($33|0),($37|0),-126629586,-1)|0);
  $57 = (getTempRet0() | 0);
  $58 = (_bitshift64Lshr(($56|0),($57|0),28)|0);
  $59 = (getTempRet0() | 0);
  $60 = (($58) + ($54))|0;
  HEAP32[$34>>2] = $60;
  $61 = ((($$043)) + -12|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($$043)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($62|0)<(0);
  $66 = $65 << 31 >> 31;
  $67 = (___muldi3(($62|0),($66|0),254913999,0)|0);
  $68 = (getTempRet0() | 0);
  $69 = (_bitshift64Lshr(($67|0),($68|0),28)|0);
  $70 = (getTempRet0() | 0);
  $71 = (0 - ($64))|0;
  $72 = ($71|0)<(0);
  $73 = $72 << 31 >> 31;
  $74 = (___muldi3(($71|0),($73|0),-84121620,-1)|0);
  $75 = (getTempRet0() | 0);
  $76 = (_bitshift64Lshr(($74|0),($75|0),28)|0);
  $77 = (getTempRet0() | 0);
  $78 = (($76) + ($69))|0;
  HEAP32[$61>>2] = $78;
  $79 = ($64|0)<(0);
  $80 = $79 << 31 >> 31;
  $81 = (___muldi3(($64|0),($80|0),254913999,0)|0);
  $82 = (getTempRet0() | 0);
  $83 = (_bitshift64Lshr(($81|0),($82|0),28)|0);
  $84 = (getTempRet0() | 0);
  $85 = (___muldi3(($62|0),($66|0),-84121620,-1)|0);
  $86 = (getTempRet0() | 0);
  $87 = (_bitshift64Lshr(($85|0),($86|0),28)|0);
  $88 = (getTempRet0() | 0);
  $89 = (($87) + ($83))|0;
  HEAP32[$63>>2] = $89;
  $90 = ((($$043)) + -16|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ((($$043)) + 12|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($91|0)<(0);
  $95 = $94 << 31 >> 31;
  $96 = (___muldi3(($91|0),($95|0),263956501,0)|0);
  $97 = (getTempRet0() | 0);
  $98 = (_bitshift64Lshr(($96|0),($97|0),28)|0);
  $99 = (getTempRet0() | 0);
  $100 = (0 - ($93))|0;
  $101 = ($100|0)<(0);
  $102 = $101 << 31 >> 31;
  $103 = (___muldi3(($100|0),($102|0),-48831953,-1)|0);
  $104 = (getTempRet0() | 0);
  $105 = (_bitshift64Lshr(($103|0),($104|0),28)|0);
  $106 = (getTempRet0() | 0);
  $107 = (($105) + ($98))|0;
  HEAP32[$90>>2] = $107;
  $108 = ($93|0)<(0);
  $109 = $108 << 31 >> 31;
  $110 = (___muldi3(($93|0),($109|0),263956501,0)|0);
  $111 = (getTempRet0() | 0);
  $112 = (_bitshift64Lshr(($110|0),($111|0),28)|0);
  $113 = (getTempRet0() | 0);
  $114 = (___muldi3(($91|0),($95|0),-48831953,-1)|0);
  $115 = (getTempRet0() | 0);
  $116 = (_bitshift64Lshr(($114|0),($115|0),28)|0);
  $117 = (getTempRet0() | 0);
  $118 = (($116) + ($112))|0;
  HEAP32[$92>>2] = $118;
  $119 = ((($$043)) + -20|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ((($$043)) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($120|0)<(0);
  $124 = $123 << 31 >> 31;
  $125 = (___muldi3(($120|0),($124|0),267232279,0)|0);
  $126 = (getTempRet0() | 0);
  $127 = (_bitshift64Lshr(($125|0),($126|0),28)|0);
  $128 = (getTempRet0() | 0);
  $129 = (0 - ($122))|0;
  $130 = ($129|0)<(0);
  $131 = $130 << 31 >> 31;
  $132 = (___muldi3(($129|0),($131|0),-25387066,-1)|0);
  $133 = (getTempRet0() | 0);
  $134 = (_bitshift64Lshr(($132|0),($133|0),28)|0);
  $135 = (getTempRet0() | 0);
  $136 = (($134) + ($127))|0;
  HEAP32[$119>>2] = $136;
  $137 = ($122|0)<(0);
  $138 = $137 << 31 >> 31;
  $139 = (___muldi3(($122|0),($138|0),267232279,0)|0);
  $140 = (getTempRet0() | 0);
  $141 = (_bitshift64Lshr(($139|0),($140|0),28)|0);
  $142 = (getTempRet0() | 0);
  $143 = (___muldi3(($120|0),($124|0),-25387066,-1)|0);
  $144 = (getTempRet0() | 0);
  $145 = (_bitshift64Lshr(($143|0),($144|0),28)|0);
  $146 = (getTempRet0() | 0);
  $147 = (($145) + ($141))|0;
  HEAP32[$121>>2] = $147;
  $148 = ((($$043)) + -24|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = ((($$043)) + 20|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($149|0)<(0);
  $153 = $152 << 31 >> 31;
  $154 = (___muldi3(($149|0),($153|0),268210120,0)|0);
  $155 = (getTempRet0() | 0);
  $156 = (_bitshift64Lshr(($154|0),($155|0),28)|0);
  $157 = (getTempRet0() | 0);
  $158 = (0 - ($151))|0;
  $159 = ($158|0)<(0);
  $160 = $159 << 31 >> 31;
  $161 = (___muldi3(($158|0),($160|0),-10996615,-1)|0);
  $162 = (getTempRet0() | 0);
  $163 = (_bitshift64Lshr(($161|0),($162|0),28)|0);
  $164 = (getTempRet0() | 0);
  $165 = (($163) + ($156))|0;
  HEAP32[$148>>2] = $165;
  $166 = ($151|0)<(0);
  $167 = $166 << 31 >> 31;
  $168 = (___muldi3(($151|0),($167|0),268210120,0)|0);
  $169 = (getTempRet0() | 0);
  $170 = (_bitshift64Lshr(($168|0),($169|0),28)|0);
  $171 = (getTempRet0() | 0);
  $172 = (___muldi3(($149|0),($153|0),-10996615,-1)|0);
  $173 = (getTempRet0() | 0);
  $174 = (_bitshift64Lshr(($172|0),($173|0),28)|0);
  $175 = (getTempRet0() | 0);
  $176 = (($174) + ($170))|0;
  HEAP32[$150>>2] = $176;
  $177 = ((($$043)) + -28|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = ((($$043)) + 24|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = ($178|0)<(0);
  $182 = $181 << 31 >> 31;
  $183 = (___muldi3(($178|0),($182|0),268408396,0)|0);
  $184 = (getTempRet0() | 0);
  $185 = (_bitshift64Lshr(($183|0),($184|0),28)|0);
  $186 = (getTempRet0() | 0);
  $187 = (0 - ($180))|0;
  $188 = ($187|0)<(0);
  $189 = $188 << 31 >> 31;
  $190 = (___muldi3(($187|0),($189|0),-3811399,-1)|0);
  $191 = (getTempRet0() | 0);
  $192 = (_bitshift64Lshr(($190|0),($191|0),28)|0);
  $193 = (getTempRet0() | 0);
  $194 = (($192) + ($185))|0;
  HEAP32[$177>>2] = $194;
  $195 = ($180|0)<(0);
  $196 = $195 << 31 >> 31;
  $197 = (___muldi3(($180|0),($196|0),268408396,0)|0);
  $198 = (getTempRet0() | 0);
  $199 = (_bitshift64Lshr(($197|0),($198|0),28)|0);
  $200 = (getTempRet0() | 0);
  $201 = (___muldi3(($178|0),($182|0),-3811399,-1)|0);
  $202 = (getTempRet0() | 0);
  $203 = (_bitshift64Lshr(($201|0),($202|0),28)|0);
  $204 = (getTempRet0() | 0);
  $205 = (($203) + ($199))|0;
  HEAP32[$179>>2] = $205;
  $206 = ((($$043)) + -32|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ((($$043)) + 28|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ($207|0)<(0);
  $211 = $210 << 31 >> 31;
  $212 = (___muldi3(($207|0),($211|0),268433619,0)|0);
  $213 = (getTempRet0() | 0);
  $214 = (_bitshift64Lshr(($212|0),($213|0),28)|0);
  $215 = (getTempRet0() | 0);
  $216 = (0 - ($209))|0;
  $217 = ($216|0)<(0);
  $218 = $217 << 31 >> 31;
  $219 = (___muldi3(($216|0),($218|0),-993204,-1)|0);
  $220 = (getTempRet0() | 0);
  $221 = (_bitshift64Lshr(($219|0),($220|0),28)|0);
  $222 = (getTempRet0() | 0);
  $223 = (($221) + ($214))|0;
  HEAP32[$206>>2] = $223;
  $224 = ($209|0)<(0);
  $225 = $224 << 31 >> 31;
  $226 = (___muldi3(($209|0),($225|0),268433619,0)|0);
  $227 = (getTempRet0() | 0);
  $228 = (_bitshift64Lshr(($226|0),($227|0),28)|0);
  $229 = (getTempRet0() | 0);
  $230 = (___muldi3(($207|0),($211|0),-993204,-1)|0);
  $231 = (getTempRet0() | 0);
  $232 = (_bitshift64Lshr(($230|0),($231|0),28)|0);
  $233 = (getTempRet0() | 0);
  $234 = (($232) + ($228))|0;
  HEAP32[$208>>2] = $234;
  $$0 = ((($$043)) + 72|0);
  $235 = ($$0>>>0)<($2>>>0);
  if ($235) {
   $$043 = $$0;
  } else {
   break;
  }
 }
 return;
}
function _III_imdct_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$neg156$i$i$i$i = 0, $$neg158$i$i$i$i = 0, $$neg158$i58$i$i$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $4 << 31 >> 31;
 $6 = (___muldi3(($3|0),($5|0),536359930,0)|0);
 $7 = (getTempRet0() | 0);
 $8 = (_bitshift64Lshr(($6|0),($7|0),28)|0);
 $9 = (getTempRet0() | 0);
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<(0);
 $13 = $12 << 31 >> 31;
 $14 = (___muldi3(($11|0),($13|0),532277907,0)|0);
 $15 = (getTempRet0() | 0);
 $16 = (_bitshift64Lshr(($14|0),($15|0),28)|0);
 $17 = (getTempRet0() | 0);
 $18 = ((($0)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<(0);
 $21 = $20 << 31 >> 31;
 $22 = (___muldi3(($19|0),($21|0),524144928,0)|0);
 $23 = (getTempRet0() | 0);
 $24 = (_bitshift64Lshr(($22|0),($23|0),28)|0);
 $25 = (getTempRet0() | 0);
 $26 = ((($0)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)<(0);
 $29 = $28 << 31 >> 31;
 $30 = (___muldi3(($27|0),($29|0),512022889,0)|0);
 $31 = (getTempRet0() | 0);
 $32 = (_bitshift64Lshr(($30|0),($31|0),28)|0);
 $33 = (getTempRet0() | 0);
 $34 = ((($0)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)<(0);
 $37 = $36 << 31 >> 31;
 $38 = (___muldi3(($35|0),($37|0),496004047,0)|0);
 $39 = (getTempRet0() | 0);
 $40 = (_bitshift64Lshr(($38|0),($39|0),28)|0);
 $41 = (getTempRet0() | 0);
 $42 = ((($0)) + 20|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)<(0);
 $45 = $44 << 31 >> 31;
 $46 = (___muldi3(($43|0),($45|0),476210315,0)|0);
 $47 = (getTempRet0() | 0);
 $48 = (_bitshift64Lshr(($46|0),($47|0),28)|0);
 $49 = (getTempRet0() | 0);
 $50 = ((($0)) + 24|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)<(0);
 $53 = $52 << 31 >> 31;
 $54 = (___muldi3(($51|0),($53|0),452792335,0)|0);
 $55 = (getTempRet0() | 0);
 $56 = (_bitshift64Lshr(($54|0),($55|0),28)|0);
 $57 = (getTempRet0() | 0);
 $58 = ((($0)) + 28|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)<(0);
 $61 = $60 << 31 >> 31;
 $62 = (___muldi3(($59|0),($61|0),425928331,0)|0);
 $63 = (getTempRet0() | 0);
 $64 = (_bitshift64Lshr(($62|0),($63|0),28)|0);
 $65 = (getTempRet0() | 0);
 $66 = ((($0)) + 32|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)<(0);
 $69 = $68 << 31 >> 31;
 $70 = (___muldi3(($67|0),($69|0),395822756,0)|0);
 $71 = (getTempRet0() | 0);
 $72 = (_bitshift64Lshr(($70|0),($71|0),28)|0);
 $73 = (getTempRet0() | 0);
 $74 = ((($0)) + 36|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)<(0);
 $77 = $76 << 31 >> 31;
 $78 = (___muldi3(($75|0),($77|0),362704731,0)|0);
 $79 = (getTempRet0() | 0);
 $80 = (_bitshift64Lshr(($78|0),($79|0),28)|0);
 $81 = (getTempRet0() | 0);
 $82 = ((($0)) + 40|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)<(0);
 $85 = $84 << 31 >> 31;
 $86 = (___muldi3(($83|0),($85|0),326826304,0)|0);
 $87 = (getTempRet0() | 0);
 $88 = (_bitshift64Lshr(($86|0),($87|0),28)|0);
 $89 = (getTempRet0() | 0);
 $90 = ((($0)) + 44|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)<(0);
 $93 = $92 << 31 >> 31;
 $94 = (___muldi3(($91|0),($93|0),288460531,0)|0);
 $95 = (getTempRet0() | 0);
 $96 = (_bitshift64Lshr(($94|0),($95|0),28)|0);
 $97 = (getTempRet0() | 0);
 $98 = ((($0)) + 48|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)<(0);
 $101 = $100 << 31 >> 31;
 $102 = (___muldi3(($99|0),($101|0),247899399,0)|0);
 $103 = (getTempRet0() | 0);
 $104 = (_bitshift64Lshr(($102|0),($103|0),28)|0);
 $105 = (getTempRet0() | 0);
 $106 = ((($0)) + 52|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)<(0);
 $109 = $108 << 31 >> 31;
 $110 = (___muldi3(($107|0),($109|0),205451603,0)|0);
 $111 = (getTempRet0() | 0);
 $112 = (_bitshift64Lshr(($110|0),($111|0),28)|0);
 $113 = (getTempRet0() | 0);
 $114 = ((($0)) + 56|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($115|0)<(0);
 $117 = $116 << 31 >> 31;
 $118 = (___muldi3(($115|0),($117|0),161440197,0)|0);
 $119 = (getTempRet0() | 0);
 $120 = (_bitshift64Lshr(($118|0),($119|0),28)|0);
 $121 = (getTempRet0() | 0);
 $122 = ((($0)) + 60|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123|0)<(0);
 $125 = $124 << 31 >> 31;
 $126 = (___muldi3(($123|0),($125|0),116200133,0)|0);
 $127 = (getTempRet0() | 0);
 $128 = (_bitshift64Lshr(($126|0),($127|0),28)|0);
 $129 = (getTempRet0() | 0);
 $130 = ((($0)) + 64|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)<(0);
 $133 = $132 << 31 >> 31;
 $134 = (___muldi3(($131|0),($133|0),70075716,0)|0);
 $135 = (getTempRet0() | 0);
 $136 = (_bitshift64Lshr(($134|0),($135|0),28)|0);
 $137 = (getTempRet0() | 0);
 $138 = ((($0)) + 68|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)<(0);
 $141 = $140 << 31 >> 31;
 $142 = (___muldi3(($139|0),($141|0),23417980,0)|0);
 $143 = (getTempRet0() | 0);
 $144 = (_bitshift64Lshr(($142|0),($143|0),28)|0);
 $145 = (getTempRet0() | 0);
 $146 = (($144) + ($8))|0;
 $147 = (($136) + ($16))|0;
 $148 = (($128) + ($24))|0;
 $149 = (($120) + ($32))|0;
 $150 = (($112) + ($40))|0;
 $151 = (($104) + ($48))|0;
 $152 = (($96) + ($56))|0;
 $153 = (($88) + ($64))|0;
 $154 = (($80) + ($72))|0;
 $155 = (($149) + ($151))|0;
 $156 = (($149) - ($151))|0;
 $157 = (($148) + ($152))|0;
 $158 = (($152) - ($148))|0;
 $159 = (($147) + ($153))|0;
 $160 = (($147) - ($153))|0;
 $161 = (($146) + ($154))|0;
 $162 = (($154) - ($146))|0;
 $163 = (($157) + ($155))|0;
 $164 = (($155) - ($157))|0;
 $165 = (($155) - ($161))|0;
 $166 = (($157) - ($161))|0;
 $167 = (($163) + ($161))|0;
 $168 = (($156) - ($158))|0;
 $169 = (($168) + ($162))|0;
 $170 = (($162) + ($158))|0;
 $171 = (($156) - ($162))|0;
 $172 = (($158) + ($156))|0;
 $173 = ($172|0)<(0);
 $174 = $173 << 31 >> 31;
 $175 = (___muldi3(($172|0),($174|0),-345093970,-1)|0);
 $176 = (getTempRet0() | 0);
 $177 = (_bitshift64Lshr(($175|0),($176|0),28)|0);
 $178 = (getTempRet0() | 0);
 $179 = ($171|0)<(0);
 $180 = $179 << 31 >> 31;
 $181 = (___muldi3(($171|0),($180|0),-528714637,-1)|0);
 $182 = (getTempRet0() | 0);
 $183 = (_bitshift64Lshr(($181|0),($182|0),28)|0);
 $184 = (getTempRet0() | 0);
 $185 = ($170|0)<(0);
 $186 = $185 << 31 >> 31;
 $187 = (___muldi3(($170|0),($186|0),-183620666,-1)|0);
 $188 = (getTempRet0() | 0);
 $189 = (_bitshift64Lshr(($187|0),($188|0),28)|0);
 $190 = (getTempRet0() | 0);
 $191 = ($169|0)<(0);
 $192 = $191 << 31 >> 31;
 $193 = (___muldi3(($169|0),($192|0),-464943848,-1)|0);
 $194 = (getTempRet0() | 0);
 $195 = (_bitshift64Lshr(($193|0),($194|0),28)|0);
 $196 = (getTempRet0() | 0);
 $197 = ($160|0)<(0);
 $198 = $197 << 31 >> 31;
 $199 = (___muldi3(($160|0),($198|0),-464943848,-1)|0);
 $200 = (getTempRet0() | 0);
 $201 = (_bitshift64Lshr(($199|0),($200|0),28)|0);
 $202 = (getTempRet0() | 0);
 $203 = ($166|0)<(0);
 $204 = $203 << 31 >> 31;
 $205 = (___muldi3(($166|0),($204|0),504493634,0)|0);
 $206 = (getTempRet0() | 0);
 $207 = (_bitshift64Lshr(($205|0),($206|0),28)|0);
 $208 = (getTempRet0() | 0);
 $209 = ($165|0)<(0);
 $210 = $209 << 31 >> 31;
 $211 = (___muldi3(($165|0),($210|0),-93226656,-1)|0);
 $212 = (getTempRet0() | 0);
 $213 = (_bitshift64Lshr(($211|0),($212|0),28)|0);
 $214 = (getTempRet0() | 0);
 $215 = ($164|0)<(0);
 $216 = $215 << 31 >> 31;
 $217 = (___muldi3(($164|0),($216|0),-411266979,-1)|0);
 $218 = (getTempRet0() | 0);
 $219 = (_bitshift64Lshr(($217|0),($218|0),28)|0);
 $220 = (getTempRet0() | 0);
 $221 = (($159) + ($150))|0;
 $222 = $150 << 1;
 $223 = (($222) - ($159))|0;
 $224 = (($223) - ($207))|0;
 $225 = (($201) - ($189))|0;
 $226 = (($167) + ($221))|0;
 $$neg156$i$i$i$i = (($177) - ($201))|0;
 $227 = (($$neg156$i$i$i$i) - ($183))|0;
 $$neg158$i$i$i$i = (($219) - ($223))|0;
 $228 = (($$neg158$i$i$i$i) - ($207))|0;
 $229 = (($224) - ($213))|0;
 $230 = (($225) - ($183))|0;
 $231 = $221 << 1;
 $232 = (($167) - ($231))|0;
 $233 = (($201) + ($177))|0;
 $234 = (($233) + ($189))|0;
 $235 = (($223) + ($219))|0;
 $236 = (($235) + ($213))|0;
 $237 = (($8) - ($144))|0;
 $238 = ($237|0)<(0);
 $239 = $238 << 31 >> 31;
 $240 = (___muldi3(($237|0),($239|0),534827956,0)|0);
 $241 = (getTempRet0() | 0);
 $242 = (_bitshift64Lshr(($240|0),($241|0),28)|0);
 $243 = (getTempRet0() | 0);
 $244 = (($16) - ($136))|0;
 $245 = ($244|0)<(0);
 $246 = $245 << 31 >> 31;
 $247 = (___muldi3(($244|0),($246|0),518577479,0)|0);
 $248 = (getTempRet0() | 0);
 $249 = (_bitshift64Lshr(($247|0),($248|0),28)|0);
 $250 = (getTempRet0() | 0);
 $251 = (($24) - ($128))|0;
 $252 = ($251|0)<(0);
 $253 = $252 << 31 >> 31;
 $254 = (___muldi3(($251|0),($253|0),486570288,0)|0);
 $255 = (getTempRet0() | 0);
 $256 = (_bitshift64Lshr(($254|0),($255|0),28)|0);
 $257 = (getTempRet0() | 0);
 $258 = (($32) - ($120))|0;
 $259 = ($258|0)<(0);
 $260 = $259 << 31 >> 31;
 $261 = (___muldi3(($258|0),($260|0),439778905,0)|0);
 $262 = (getTempRet0() | 0);
 $263 = (_bitshift64Lshr(($261|0),($262|0),28)|0);
 $264 = (getTempRet0() | 0);
 $265 = (($40) - ($112))|0;
 $266 = ($265|0)<(0);
 $267 = $266 << 31 >> 31;
 $268 = (___muldi3(($265|0),($267|0),379625062,0)|0);
 $269 = (getTempRet0() | 0);
 $270 = (_bitshift64Lshr(($268|0),($269|0),28)|0);
 $271 = (getTempRet0() | 0);
 $272 = (($48) - ($104))|0;
 $273 = ($272|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = (___muldi3(($272|0),($274|0),307936504,0)|0);
 $276 = (getTempRet0() | 0);
 $277 = (_bitshift64Lshr(($275|0),($276|0),28)|0);
 $278 = (getTempRet0() | 0);
 $279 = (($56) - ($96))|0;
 $280 = ($279|0)<(0);
 $281 = $280 << 31 >> 31;
 $282 = (___muldi3(($279|0),($281|0),226891452,0)|0);
 $283 = (getTempRet0() | 0);
 $284 = (_bitshift64Lshr(($282|0),($283|0),28)|0);
 $285 = (getTempRet0() | 0);
 $286 = (($64) - ($88))|0;
 $287 = ($286|0)<(0);
 $288 = $287 << 31 >> 31;
 $289 = (___muldi3(($286|0),($288|0),138952417,0)|0);
 $290 = (getTempRet0() | 0);
 $291 = (_bitshift64Lshr(($289|0),($290|0),28)|0);
 $292 = (getTempRet0() | 0);
 $293 = (($72) - ($80))|0;
 $294 = ($293|0)<(0);
 $295 = $294 << 31 >> 31;
 $296 = (___muldi3(($293|0),($295|0),46791383,0)|0);
 $297 = (getTempRet0() | 0);
 $298 = (_bitshift64Lshr(($296|0),($297|0),28)|0);
 $299 = (getTempRet0() | 0);
 $300 = (($263) + ($277))|0;
 $301 = (($263) - ($277))|0;
 $302 = (($256) + ($284))|0;
 $303 = (($284) - ($256))|0;
 $304 = (($249) + ($291))|0;
 $305 = (($249) - ($291))|0;
 $306 = (($242) + ($298))|0;
 $307 = (($298) - ($242))|0;
 $308 = (($302) + ($300))|0;
 $309 = (($300) - ($302))|0;
 $310 = (($300) - ($306))|0;
 $311 = (($302) - ($306))|0;
 $312 = (($308) + ($306))|0;
 $313 = (($301) - ($303))|0;
 $314 = (($313) + ($307))|0;
 $315 = (($307) + ($303))|0;
 $316 = (($301) - ($307))|0;
 $317 = (($303) + ($301))|0;
 $318 = ($317|0)<(0);
 $319 = $318 << 31 >> 31;
 $320 = (___muldi3(($317|0),($319|0),-345093970,-1)|0);
 $321 = (getTempRet0() | 0);
 $322 = (_bitshift64Lshr(($320|0),($321|0),28)|0);
 $323 = (getTempRet0() | 0);
 $324 = ($316|0)<(0);
 $325 = $324 << 31 >> 31;
 $326 = (___muldi3(($316|0),($325|0),-528714637,-1)|0);
 $327 = (getTempRet0() | 0);
 $328 = (_bitshift64Lshr(($326|0),($327|0),28)|0);
 $329 = (getTempRet0() | 0);
 $330 = ($315|0)<(0);
 $331 = $330 << 31 >> 31;
 $332 = (___muldi3(($315|0),($331|0),-183620666,-1)|0);
 $333 = (getTempRet0() | 0);
 $334 = (_bitshift64Lshr(($332|0),($333|0),28)|0);
 $335 = (getTempRet0() | 0);
 $336 = ($314|0)<(0);
 $337 = $336 << 31 >> 31;
 $338 = (___muldi3(($314|0),($337|0),-464943848,-1)|0);
 $339 = (getTempRet0() | 0);
 $340 = (_bitshift64Lshr(($338|0),($339|0),28)|0);
 $341 = (getTempRet0() | 0);
 $342 = ($305|0)<(0);
 $343 = $342 << 31 >> 31;
 $344 = (___muldi3(($305|0),($343|0),-464943848,-1)|0);
 $345 = (getTempRet0() | 0);
 $346 = (_bitshift64Lshr(($344|0),($345|0),28)|0);
 $347 = (getTempRet0() | 0);
 $348 = ($311|0)<(0);
 $349 = $348 << 31 >> 31;
 $350 = (___muldi3(($311|0),($349|0),504493634,0)|0);
 $351 = (getTempRet0() | 0);
 $352 = (_bitshift64Lshr(($350|0),($351|0),28)|0);
 $353 = (getTempRet0() | 0);
 $354 = ($310|0)<(0);
 $355 = $354 << 31 >> 31;
 $356 = (___muldi3(($310|0),($355|0),-93226656,-1)|0);
 $357 = (getTempRet0() | 0);
 $358 = (_bitshift64Lshr(($356|0),($357|0),28)|0);
 $359 = (getTempRet0() | 0);
 $360 = ($309|0)<(0);
 $361 = $360 << 31 >> 31;
 $362 = (___muldi3(($309|0),($361|0),-411266979,-1)|0);
 $363 = (getTempRet0() | 0);
 $364 = (_bitshift64Lshr(($362|0),($363|0),28)|0);
 $365 = (getTempRet0() | 0);
 $366 = (($304) + ($270))|0;
 $367 = (_bitshift64Shl(($270|0),($271|0),1)|0);
 $368 = (getTempRet0() | 0);
 $369 = (($367) - ($304))|0;
 $370 = (($369) - ($352))|0;
 $371 = (($346) - ($334))|0;
 $372 = (($312) + ($366))|0;
 $$neg158$i58$i$i$i = (($364) - ($369))|0;
 $373 = (($$neg158$i58$i$i$i) - ($352))|0;
 $374 = (($370) - ($358))|0;
 $375 = (($371) - ($328))|0;
 $376 = $366 << 1;
 $377 = (($312) - ($376))|0;
 $378 = (($346) + ($322))|0;
 $379 = (($378) + ($334))|0;
 $380 = (($369) + ($364))|0;
 $381 = (($380) + ($358))|0;
 $382 = (($372) + ($346))|0;
 $383 = (($322) - ($382))|0;
 $384 = (($383) - ($328))|0;
 $385 = (($373) - ($384))|0;
 $386 = (($340) - ($385))|0;
 $387 = (($374) - ($386))|0;
 $388 = (($375) - ($387))|0;
 $389 = (($377) - ($388))|0;
 $390 = (($379) - ($389))|0;
 $391 = (($381) - ($390))|0;
 $392 = (($226|0) / 2)&-1;
 $393 = (($372|0) / 2)&-1;
 $394 = (($393) - ($392))|0;
 $395 = (($227|0) / 2)&-1;
 $396 = (($395) - ($394))|0;
 $397 = (($384|0) / 2)&-1;
 $398 = (($397) - ($396))|0;
 $399 = (($228|0) / 2)&-1;
 $400 = (($399) - ($398))|0;
 $401 = (($385|0) / 2)&-1;
 $402 = (($401) - ($400))|0;
 $403 = (($195|0) / 2)&-1;
 $404 = (($403) - ($402))|0;
 $405 = (($386|0) / 2)&-1;
 $406 = (($405) - ($404))|0;
 $407 = (($229|0) / 2)&-1;
 $408 = (($407) - ($406))|0;
 $409 = (($387|0) / 2)&-1;
 $410 = (($409) - ($408))|0;
 $411 = (($230|0) / 2)&-1;
 $412 = (($411) - ($410))|0;
 $413 = (($388|0) / 2)&-1;
 $414 = (($413) - ($412))|0;
 $415 = (($232|0) / 2)&-1;
 $416 = (($415) - ($414))|0;
 $417 = (($389|0) / 2)&-1;
 $418 = (($417) - ($416))|0;
 $419 = (($234|0) / 2)&-1;
 $420 = (($419) - ($418))|0;
 $421 = (($390|0) / 2)&-1;
 $422 = (($421) - ($420))|0;
 $423 = (($236|0) / 2)&-1;
 $424 = (($423) - ($422))|0;
 $425 = (($391|0) / 2)&-1;
 $426 = (($425) - ($424))|0;
 HEAP32[$1>>2] = $410;
 $427 = ((($1)) + 4|0);
 HEAP32[$427>>2] = $412;
 $428 = ((($1)) + 8|0);
 HEAP32[$428>>2] = $414;
 $429 = ((($1)) + 12|0);
 HEAP32[$429>>2] = $416;
 $430 = ((($1)) + 16|0);
 HEAP32[$430>>2] = $418;
 $431 = ((($1)) + 20|0);
 HEAP32[$431>>2] = $420;
 $432 = ((($1)) + 24|0);
 HEAP32[$432>>2] = $422;
 $433 = ((($1)) + 28|0);
 HEAP32[$433>>2] = $424;
 $434 = ((($1)) + 32|0);
 HEAP32[$434>>2] = $426;
 $435 = (0 - ($426))|0;
 $436 = ((($1)) + 36|0);
 HEAP32[$436>>2] = $435;
 $437 = (0 - ($424))|0;
 $438 = ((($1)) + 40|0);
 HEAP32[$438>>2] = $437;
 $439 = (0 - ($422))|0;
 $440 = ((($1)) + 44|0);
 HEAP32[$440>>2] = $439;
 $441 = (0 - ($420))|0;
 $442 = ((($1)) + 48|0);
 HEAP32[$442>>2] = $441;
 $443 = (0 - ($418))|0;
 $444 = ((($1)) + 52|0);
 HEAP32[$444>>2] = $443;
 $445 = (0 - ($416))|0;
 $446 = ((($1)) + 56|0);
 HEAP32[$446>>2] = $445;
 $447 = (0 - ($414))|0;
 $448 = ((($1)) + 60|0);
 HEAP32[$448>>2] = $447;
 $449 = (0 - ($412))|0;
 $450 = ((($1)) + 64|0);
 HEAP32[$450>>2] = $449;
 $451 = (0 - ($410))|0;
 $452 = ((($1)) + 68|0);
 HEAP32[$452>>2] = $451;
 $453 = (0 - ($408))|0;
 $454 = ((($1)) + 72|0);
 HEAP32[$454>>2] = $453;
 $455 = (0 - ($406))|0;
 $456 = ((($1)) + 76|0);
 HEAP32[$456>>2] = $455;
 $457 = (0 - ($404))|0;
 $458 = ((($1)) + 80|0);
 HEAP32[$458>>2] = $457;
 $459 = (0 - ($402))|0;
 $460 = ((($1)) + 84|0);
 HEAP32[$460>>2] = $459;
 $461 = (0 - ($400))|0;
 $462 = ((($1)) + 88|0);
 HEAP32[$462>>2] = $461;
 $463 = (0 - ($398))|0;
 $464 = ((($1)) + 92|0);
 HEAP32[$464>>2] = $463;
 $465 = (0 - ($396))|0;
 $466 = ((($1)) + 96|0);
 HEAP32[$466>>2] = $465;
 $467 = (0 - ($394))|0;
 $468 = ((($1)) + 100|0);
 HEAP32[$468>>2] = $467;
 $469 = (0 - ($392))|0;
 $470 = ((($1)) + 104|0);
 HEAP32[$470>>2] = $469;
 $471 = ((($1)) + 108|0);
 HEAP32[$471>>2] = $469;
 $472 = ((($1)) + 112|0);
 HEAP32[$472>>2] = $467;
 $473 = ((($1)) + 116|0);
 HEAP32[$473>>2] = $465;
 $474 = ((($1)) + 120|0);
 HEAP32[$474>>2] = $463;
 $475 = ((($1)) + 124|0);
 HEAP32[$475>>2] = $461;
 $476 = ((($1)) + 128|0);
 HEAP32[$476>>2] = $459;
 $477 = ((($1)) + 132|0);
 HEAP32[$477>>2] = $457;
 $478 = ((($1)) + 136|0);
 HEAP32[$478>>2] = $455;
 $479 = ((($1)) + 140|0);
 HEAP32[$479>>2] = $453;
 switch ($2|0) {
 case 0:  {
  $480 = ($410|0)<(0);
  $481 = $480 << 31 >> 31;
  $482 = (___muldi3(($410|0),($481|0),11708990,0)|0);
  $483 = (getTempRet0() | 0);
  $484 = (_bitshift64Lshr(($482|0),($483|0),28)|0);
  $485 = (getTempRet0() | 0);
  HEAP32[$1>>2] = $484;
  $486 = ($412|0)<(0);
  $487 = $486 << 31 >> 31;
  $488 = (___muldi3(($412|0),($487|0),35037858,0)|0);
  $489 = (getTempRet0() | 0);
  $490 = (_bitshift64Lshr(($488|0),($489|0),28)|0);
  $491 = (getTempRet0() | 0);
  HEAP32[$427>>2] = $490;
  $492 = ($414|0)<(0);
  $493 = $492 << 31 >> 31;
  $494 = (___muldi3(($414|0),($493|0),58100066,0)|0);
  $495 = (getTempRet0() | 0);
  $496 = (_bitshift64Lshr(($494|0),($495|0),28)|0);
  $497 = (getTempRet0() | 0);
  HEAP32[$428>>2] = $496;
  $498 = ($416|0)<(0);
  $499 = $498 << 31 >> 31;
  $500 = (___muldi3(($416|0),($499|0),80720098,0)|0);
  $501 = (getTempRet0() | 0);
  $502 = (_bitshift64Lshr(($500|0),($501|0),28)|0);
  $503 = (getTempRet0() | 0);
  HEAP32[$429>>2] = $502;
  $504 = ($418|0)<(0);
  $505 = $504 << 31 >> 31;
  $506 = (___muldi3(($418|0),($505|0),102725802,0)|0);
  $507 = (getTempRet0() | 0);
  $508 = (_bitshift64Lshr(($506|0),($507|0),28)|0);
  $509 = (getTempRet0() | 0);
  HEAP32[$430>>2] = $508;
  $510 = ($420|0)<(0);
  $511 = $510 << 31 >> 31;
  $512 = (___muldi3(($420|0),($511|0),123949700,0)|0);
  $513 = (getTempRet0() | 0);
  $514 = (_bitshift64Lshr(($512|0),($513|0),28)|0);
  $515 = (getTempRet0() | 0);
  HEAP32[$431>>2] = $514;
  $516 = ($422|0)<(0);
  $517 = $516 << 31 >> 31;
  $518 = (___muldi3(($422|0),($517|0),144230265,0)|0);
  $519 = (getTempRet0() | 0);
  $520 = (_bitshift64Lshr(($518|0),($519|0),28)|0);
  $521 = (getTempRet0() | 0);
  HEAP32[$432>>2] = $520;
  $522 = ($424|0)<(0);
  $523 = $522 << 31 >> 31;
  $524 = (___muldi3(($424|0),($523|0),163413152,0)|0);
  $525 = (getTempRet0() | 0);
  $526 = (_bitshift64Lshr(($524|0),($525|0),28)|0);
  $527 = (getTempRet0() | 0);
  HEAP32[$433>>2] = $526;
  $528 = ($426|0)<(0);
  $529 = $528 << 31 >> 31;
  $530 = (___muldi3(($426|0),($529|0),181352365,0)|0);
  $531 = (getTempRet0() | 0);
  $532 = (_bitshift64Lshr(($530|0),($531|0),28)|0);
  $533 = (getTempRet0() | 0);
  HEAP32[$434>>2] = $532;
  $534 = ($435|0)<(0);
  $535 = $534 << 31 >> 31;
  $536 = (___muldi3(($435|0),($535|0),197911378,0)|0);
  $537 = (getTempRet0() | 0);
  $538 = (_bitshift64Lshr(($536|0),($537|0),28)|0);
  $539 = (getTempRet0() | 0);
  HEAP32[$436>>2] = $538;
  $540 = ($437|0)<(0);
  $541 = $540 << 31 >> 31;
  $542 = (___muldi3(($437|0),($541|0),212964166,0)|0);
  $543 = (getTempRet0() | 0);
  $544 = (_bitshift64Lshr(($542|0),($543|0),28)|0);
  $545 = (getTempRet0() | 0);
  HEAP32[$438>>2] = $544;
  $546 = ($439|0)<(0);
  $547 = $546 << 31 >> 31;
  $548 = (___muldi3(($439|0),($547|0),226396167,0)|0);
  $549 = (getTempRet0() | 0);
  $550 = (_bitshift64Lshr(($548|0),($549|0),28)|0);
  $551 = (getTempRet0() | 0);
  HEAP32[$440>>2] = $550;
  $552 = ($441|0)<(0);
  $553 = $552 << 31 >> 31;
  $554 = (___muldi3(($441|0),($553|0),238105157,0)|0);
  $555 = (getTempRet0() | 0);
  $556 = (_bitshift64Lshr(($554|0),($555|0),28)|0);
  $557 = (getTempRet0() | 0);
  HEAP32[$442>>2] = $556;
  $558 = ($443|0)<(0);
  $559 = $558 << 31 >> 31;
  $560 = (___muldi3(($443|0),($559|0),248002024,0)|0);
  $561 = (getTempRet0() | 0);
  $562 = (_bitshift64Lshr(($560|0),($561|0),28)|0);
  $563 = (getTempRet0() | 0);
  HEAP32[$444>>2] = $562;
  $564 = ($445|0)<(0);
  $565 = $564 << 31 >> 31;
  $566 = (___muldi3(($445|0),($565|0),256011445,0)|0);
  $567 = (getTempRet0() | 0);
  $568 = (_bitshift64Lshr(($566|0),($567|0),28)|0);
  $569 = (getTempRet0() | 0);
  HEAP32[$446>>2] = $568;
  $570 = ($447|0)<(0);
  $571 = $570 << 31 >> 31;
  $572 = (___muldi3(($447|0),($571|0),262072464,0)|0);
  $573 = (getTempRet0() | 0);
  $574 = (_bitshift64Lshr(($572|0),($573|0),28)|0);
  $575 = (getTempRet0() | 0);
  HEAP32[$448>>2] = $574;
  $576 = ($449|0)<(0);
  $577 = $576 << 31 >> 31;
  $578 = (___muldi3(($449|0),($577|0),266138953,0)|0);
  $579 = (getTempRet0() | 0);
  $580 = (_bitshift64Lshr(($578|0),($579|0),28)|0);
  $581 = (getTempRet0() | 0);
  HEAP32[$450>>2] = $580;
  $582 = ($451|0)<(0);
  $583 = $582 << 31 >> 31;
  $584 = (___muldi3(($451|0),($583|0),268179965,0)|0);
  $585 = (getTempRet0() | 0);
  $586 = (_bitshift64Lshr(($584|0),($585|0),28)|0);
  $587 = (getTempRet0() | 0);
  HEAP32[$452>>2] = $586;
  $588 = ($453|0)<(0);
  $589 = $588 << 31 >> 31;
  $590 = (___muldi3(($453|0),($589|0),268179965,0)|0);
  $591 = (getTempRet0() | 0);
  $592 = (_bitshift64Lshr(($590|0),($591|0),28)|0);
  $593 = (getTempRet0() | 0);
  HEAP32[$454>>2] = $592;
  $594 = ($455|0)<(0);
  $595 = $594 << 31 >> 31;
  $596 = (___muldi3(($455|0),($595|0),266138953,0)|0);
  $597 = (getTempRet0() | 0);
  $598 = (_bitshift64Lshr(($596|0),($597|0),28)|0);
  $599 = (getTempRet0() | 0);
  HEAP32[$456>>2] = $598;
  $600 = HEAP32[$458>>2]|0;
  $601 = ($600|0)<(0);
  $602 = $601 << 31 >> 31;
  $603 = (___muldi3(($600|0),($602|0),262072464,0)|0);
  $604 = (getTempRet0() | 0);
  $605 = (_bitshift64Lshr(($603|0),($604|0),28)|0);
  $606 = (getTempRet0() | 0);
  HEAP32[$458>>2] = $605;
  $607 = HEAP32[$460>>2]|0;
  $608 = ($607|0)<(0);
  $609 = $608 << 31 >> 31;
  $610 = (___muldi3(($607|0),($609|0),256011445,0)|0);
  $611 = (getTempRet0() | 0);
  $612 = (_bitshift64Lshr(($610|0),($611|0),28)|0);
  $613 = (getTempRet0() | 0);
  HEAP32[$460>>2] = $612;
  $614 = HEAP32[$462>>2]|0;
  $615 = ($614|0)<(0);
  $616 = $615 << 31 >> 31;
  $617 = (___muldi3(($614|0),($616|0),248002024,0)|0);
  $618 = (getTempRet0() | 0);
  $619 = (_bitshift64Lshr(($617|0),($618|0),28)|0);
  $620 = (getTempRet0() | 0);
  HEAP32[$462>>2] = $619;
  $621 = HEAP32[$464>>2]|0;
  $622 = ($621|0)<(0);
  $623 = $622 << 31 >> 31;
  $624 = (___muldi3(($621|0),($623|0),238105157,0)|0);
  $625 = (getTempRet0() | 0);
  $626 = (_bitshift64Lshr(($624|0),($625|0),28)|0);
  $627 = (getTempRet0() | 0);
  HEAP32[$464>>2] = $626;
  $628 = HEAP32[$466>>2]|0;
  $629 = ($628|0)<(0);
  $630 = $629 << 31 >> 31;
  $631 = (___muldi3(($628|0),($630|0),226396167,0)|0);
  $632 = (getTempRet0() | 0);
  $633 = (_bitshift64Lshr(($631|0),($632|0),28)|0);
  $634 = (getTempRet0() | 0);
  HEAP32[$466>>2] = $633;
  $635 = HEAP32[$468>>2]|0;
  $636 = ($635|0)<(0);
  $637 = $636 << 31 >> 31;
  $638 = (___muldi3(($635|0),($637|0),212964166,0)|0);
  $639 = (getTempRet0() | 0);
  $640 = (_bitshift64Lshr(($638|0),($639|0),28)|0);
  $641 = (getTempRet0() | 0);
  HEAP32[$468>>2] = $640;
  $642 = HEAP32[$470>>2]|0;
  $643 = ($642|0)<(0);
  $644 = $643 << 31 >> 31;
  $645 = (___muldi3(($642|0),($644|0),197911378,0)|0);
  $646 = (getTempRet0() | 0);
  $647 = (_bitshift64Lshr(($645|0),($646|0),28)|0);
  $648 = (getTempRet0() | 0);
  HEAP32[$470>>2] = $647;
  $649 = HEAP32[$471>>2]|0;
  $650 = ($649|0)<(0);
  $651 = $650 << 31 >> 31;
  $652 = (___muldi3(($649|0),($651|0),181352365,0)|0);
  $653 = (getTempRet0() | 0);
  $654 = (_bitshift64Lshr(($652|0),($653|0),28)|0);
  $655 = (getTempRet0() | 0);
  HEAP32[$471>>2] = $654;
  $656 = HEAP32[$472>>2]|0;
  $657 = ($656|0)<(0);
  $658 = $657 << 31 >> 31;
  $659 = (___muldi3(($656|0),($658|0),163413152,0)|0);
  $660 = (getTempRet0() | 0);
  $661 = (_bitshift64Lshr(($659|0),($660|0),28)|0);
  $662 = (getTempRet0() | 0);
  HEAP32[$472>>2] = $661;
  $663 = HEAP32[$473>>2]|0;
  $664 = ($663|0)<(0);
  $665 = $664 << 31 >> 31;
  $666 = (___muldi3(($663|0),($665|0),144230265,0)|0);
  $667 = (getTempRet0() | 0);
  $668 = (_bitshift64Lshr(($666|0),($667|0),28)|0);
  $669 = (getTempRet0() | 0);
  HEAP32[$473>>2] = $668;
  $670 = HEAP32[$474>>2]|0;
  $671 = ($670|0)<(0);
  $672 = $671 << 31 >> 31;
  $673 = (___muldi3(($670|0),($672|0),123949700,0)|0);
  $674 = (getTempRet0() | 0);
  $675 = (_bitshift64Lshr(($673|0),($674|0),28)|0);
  $676 = (getTempRet0() | 0);
  HEAP32[$474>>2] = $675;
  $677 = HEAP32[$475>>2]|0;
  $678 = ($677|0)<(0);
  $679 = $678 << 31 >> 31;
  $680 = (___muldi3(($677|0),($679|0),102725802,0)|0);
  $681 = (getTempRet0() | 0);
  $682 = (_bitshift64Lshr(($680|0),($681|0),28)|0);
  $683 = (getTempRet0() | 0);
  HEAP32[$475>>2] = $682;
  $684 = HEAP32[$476>>2]|0;
  $685 = ($684|0)<(0);
  $686 = $685 << 31 >> 31;
  $687 = (___muldi3(($684|0),($686|0),80720098,0)|0);
  $688 = (getTempRet0() | 0);
  $689 = (_bitshift64Lshr(($687|0),($688|0),28)|0);
  $690 = (getTempRet0() | 0);
  HEAP32[$476>>2] = $689;
  $691 = HEAP32[$477>>2]|0;
  $692 = ($691|0)<(0);
  $693 = $692 << 31 >> 31;
  $694 = (___muldi3(($691|0),($693|0),58100066,0)|0);
  $695 = (getTempRet0() | 0);
  $696 = (_bitshift64Lshr(($694|0),($695|0),28)|0);
  $697 = (getTempRet0() | 0);
  HEAP32[$477>>2] = $696;
  $698 = HEAP32[$478>>2]|0;
  $699 = ($698|0)<(0);
  $700 = $699 << 31 >> 31;
  $701 = (___muldi3(($698|0),($700|0),35037858,0)|0);
  $702 = (getTempRet0() | 0);
  $703 = (_bitshift64Lshr(($701|0),($702|0),28)|0);
  $704 = (getTempRet0() | 0);
  HEAP32[$478>>2] = $703;
  $705 = HEAP32[$479>>2]|0;
  $706 = ($705|0)<(0);
  $707 = $706 << 31 >> 31;
  $708 = (___muldi3(($705|0),($707|0),11708990,0)|0);
  $709 = (getTempRet0() | 0);
  $710 = (_bitshift64Lshr(($708|0),($709|0),28)|0);
  $711 = (getTempRet0() | 0);
  HEAP32[$479>>2] = $710;
  return;
  break;
 }
 case 1:  {
  $712 = ($410|0)<(0);
  $713 = $712 << 31 >> 31;
  $714 = (___muldi3(($410|0),($713|0),11708990,0)|0);
  $715 = (getTempRet0() | 0);
  $716 = (_bitshift64Lshr(($714|0),($715|0),28)|0);
  $717 = (getTempRet0() | 0);
  HEAP32[$1>>2] = $716;
  $718 = ($412|0)<(0);
  $719 = $718 << 31 >> 31;
  $720 = (___muldi3(($412|0),($719|0),35037858,0)|0);
  $721 = (getTempRet0() | 0);
  $722 = (_bitshift64Lshr(($720|0),($721|0),28)|0);
  $723 = (getTempRet0() | 0);
  HEAP32[$427>>2] = $722;
  $724 = ($414|0)<(0);
  $725 = $724 << 31 >> 31;
  $726 = (___muldi3(($414|0),($725|0),58100066,0)|0);
  $727 = (getTempRet0() | 0);
  $728 = (_bitshift64Lshr(($726|0),($727|0),28)|0);
  $729 = (getTempRet0() | 0);
  HEAP32[$428>>2] = $728;
  $730 = ($416|0)<(0);
  $731 = $730 << 31 >> 31;
  $732 = (___muldi3(($416|0),($731|0),80720098,0)|0);
  $733 = (getTempRet0() | 0);
  $734 = (_bitshift64Lshr(($732|0),($733|0),28)|0);
  $735 = (getTempRet0() | 0);
  HEAP32[$429>>2] = $734;
  $736 = ($418|0)<(0);
  $737 = $736 << 31 >> 31;
  $738 = (___muldi3(($418|0),($737|0),102725802,0)|0);
  $739 = (getTempRet0() | 0);
  $740 = (_bitshift64Lshr(($738|0),($739|0),28)|0);
  $741 = (getTempRet0() | 0);
  HEAP32[$430>>2] = $740;
  $742 = ($420|0)<(0);
  $743 = $742 << 31 >> 31;
  $744 = (___muldi3(($420|0),($743|0),123949700,0)|0);
  $745 = (getTempRet0() | 0);
  $746 = (_bitshift64Lshr(($744|0),($745|0),28)|0);
  $747 = (getTempRet0() | 0);
  HEAP32[$431>>2] = $746;
  $748 = ($422|0)<(0);
  $749 = $748 << 31 >> 31;
  $750 = (___muldi3(($422|0),($749|0),144230265,0)|0);
  $751 = (getTempRet0() | 0);
  $752 = (_bitshift64Lshr(($750|0),($751|0),28)|0);
  $753 = (getTempRet0() | 0);
  HEAP32[$432>>2] = $752;
  $754 = ($424|0)<(0);
  $755 = $754 << 31 >> 31;
  $756 = (___muldi3(($424|0),($755|0),163413152,0)|0);
  $757 = (getTempRet0() | 0);
  $758 = (_bitshift64Lshr(($756|0),($757|0),28)|0);
  $759 = (getTempRet0() | 0);
  HEAP32[$433>>2] = $758;
  $760 = ($426|0)<(0);
  $761 = $760 << 31 >> 31;
  $762 = (___muldi3(($426|0),($761|0),181352365,0)|0);
  $763 = (getTempRet0() | 0);
  $764 = (_bitshift64Lshr(($762|0),($763|0),28)|0);
  $765 = (getTempRet0() | 0);
  HEAP32[$434>>2] = $764;
  $766 = ($435|0)<(0);
  $767 = $766 << 31 >> 31;
  $768 = (___muldi3(($435|0),($767|0),197911378,0)|0);
  $769 = (getTempRet0() | 0);
  $770 = (_bitshift64Lshr(($768|0),($769|0),28)|0);
  $771 = (getTempRet0() | 0);
  HEAP32[$436>>2] = $770;
  $772 = ($437|0)<(0);
  $773 = $772 << 31 >> 31;
  $774 = (___muldi3(($437|0),($773|0),212964166,0)|0);
  $775 = (getTempRet0() | 0);
  $776 = (_bitshift64Lshr(($774|0),($775|0),28)|0);
  $777 = (getTempRet0() | 0);
  HEAP32[$438>>2] = $776;
  $778 = ($439|0)<(0);
  $779 = $778 << 31 >> 31;
  $780 = (___muldi3(($439|0),($779|0),226396167,0)|0);
  $781 = (getTempRet0() | 0);
  $782 = (_bitshift64Lshr(($780|0),($781|0),28)|0);
  $783 = (getTempRet0() | 0);
  HEAP32[$440>>2] = $782;
  $784 = ($441|0)<(0);
  $785 = $784 << 31 >> 31;
  $786 = (___muldi3(($441|0),($785|0),238105157,0)|0);
  $787 = (getTempRet0() | 0);
  $788 = (_bitshift64Lshr(($786|0),($787|0),28)|0);
  $789 = (getTempRet0() | 0);
  HEAP32[$442>>2] = $788;
  $790 = ($443|0)<(0);
  $791 = $790 << 31 >> 31;
  $792 = (___muldi3(($443|0),($791|0),248002024,0)|0);
  $793 = (getTempRet0() | 0);
  $794 = (_bitshift64Lshr(($792|0),($793|0),28)|0);
  $795 = (getTempRet0() | 0);
  HEAP32[$444>>2] = $794;
  $796 = ($445|0)<(0);
  $797 = $796 << 31 >> 31;
  $798 = (___muldi3(($445|0),($797|0),256011445,0)|0);
  $799 = (getTempRet0() | 0);
  $800 = (_bitshift64Lshr(($798|0),($799|0),28)|0);
  $801 = (getTempRet0() | 0);
  HEAP32[$446>>2] = $800;
  $802 = ($447|0)<(0);
  $803 = $802 << 31 >> 31;
  $804 = (___muldi3(($447|0),($803|0),262072464,0)|0);
  $805 = (getTempRet0() | 0);
  $806 = (_bitshift64Lshr(($804|0),($805|0),28)|0);
  $807 = (getTempRet0() | 0);
  HEAP32[$448>>2] = $806;
  $808 = ($449|0)<(0);
  $809 = $808 << 31 >> 31;
  $810 = (___muldi3(($449|0),($809|0),266138953,0)|0);
  $811 = (getTempRet0() | 0);
  $812 = (_bitshift64Lshr(($810|0),($811|0),28)|0);
  $813 = (getTempRet0() | 0);
  HEAP32[$450>>2] = $812;
  $814 = ($451|0)<(0);
  $815 = $814 << 31 >> 31;
  $816 = (___muldi3(($451|0),($815|0),268179965,0)|0);
  $817 = (getTempRet0() | 0);
  $818 = (_bitshift64Lshr(($816|0),($817|0),28)|0);
  $819 = (getTempRet0() | 0);
  HEAP32[$452>>2] = $818;
  $820 = ($465|0)<(0);
  $821 = $820 << 31 >> 31;
  $822 = (___muldi3(($465|0),($821|0),266138953,0)|0);
  $823 = (getTempRet0() | 0);
  $824 = (_bitshift64Lshr(($822|0),($823|0),28)|0);
  $825 = (getTempRet0() | 0);
  HEAP32[$466>>2] = $824;
  $826 = ($467|0)<(0);
  $827 = $826 << 31 >> 31;
  $828 = (___muldi3(($467|0),($827|0),248002024,0)|0);
  $829 = (getTempRet0() | 0);
  $830 = (_bitshift64Lshr(($828|0),($829|0),28)|0);
  $831 = (getTempRet0() | 0);
  HEAP32[$468>>2] = $830;
  $832 = HEAP32[$470>>2]|0;
  $833 = ($832|0)<(0);
  $834 = $833 << 31 >> 31;
  $835 = (___muldi3(($832|0),($834|0),212964166,0)|0);
  $836 = (getTempRet0() | 0);
  $837 = (_bitshift64Lshr(($835|0),($836|0),28)|0);
  $838 = (getTempRet0() | 0);
  HEAP32[$470>>2] = $837;
  $839 = HEAP32[$471>>2]|0;
  $840 = ($839|0)<(0);
  $841 = $840 << 31 >> 31;
  $842 = (___muldi3(($839|0),($841|0),163413152,0)|0);
  $843 = (getTempRet0() | 0);
  $844 = (_bitshift64Lshr(($842|0),($843|0),28)|0);
  $845 = (getTempRet0() | 0);
  HEAP32[$471>>2] = $844;
  $846 = HEAP32[$472>>2]|0;
  $847 = ($846|0)<(0);
  $848 = $847 << 31 >> 31;
  $849 = (___muldi3(($846|0),($848|0),102725802,0)|0);
  $850 = (getTempRet0() | 0);
  $851 = (_bitshift64Lshr(($849|0),($850|0),28)|0);
  $852 = (getTempRet0() | 0);
  HEAP32[$472>>2] = $851;
  $853 = HEAP32[$473>>2]|0;
  $854 = ($853|0)<(0);
  $855 = $854 << 31 >> 31;
  $856 = (___muldi3(($853|0),($855|0),35037858,0)|0);
  $857 = (getTempRet0() | 0);
  $858 = (_bitshift64Lshr(($856|0),($857|0),28)|0);
  $859 = (getTempRet0() | 0);
  HEAP32[$473>>2] = $858;
  ;HEAP32[$474>>2]=0|0;HEAP32[$474+4>>2]=0|0;HEAP32[$474+8>>2]=0|0;HEAP32[$474+12>>2]=0|0;HEAP32[$474+16>>2]=0|0;HEAP32[$474+20>>2]=0|0;
  return;
  break;
 }
 case 3:  {
  ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
  $860 = ($422|0)<(0);
  $861 = $860 << 31 >> 31;
  $862 = (___muldi3(($422|0),($861|0),35037858,0)|0);
  $863 = (getTempRet0() | 0);
  $864 = (_bitshift64Lshr(($862|0),($863|0),28)|0);
  $865 = (getTempRet0() | 0);
  HEAP32[$432>>2] = $864;
  $866 = ($424|0)<(0);
  $867 = $866 << 31 >> 31;
  $868 = (___muldi3(($424|0),($867|0),102725802,0)|0);
  $869 = (getTempRet0() | 0);
  $870 = (_bitshift64Lshr(($868|0),($869|0),28)|0);
  $871 = (getTempRet0() | 0);
  HEAP32[$433>>2] = $870;
  $872 = ($426|0)<(0);
  $873 = $872 << 31 >> 31;
  $874 = (___muldi3(($426|0),($873|0),163413152,0)|0);
  $875 = (getTempRet0() | 0);
  $876 = (_bitshift64Lshr(($874|0),($875|0),28)|0);
  $877 = (getTempRet0() | 0);
  HEAP32[$434>>2] = $876;
  $878 = ($435|0)<(0);
  $879 = $878 << 31 >> 31;
  $880 = (___muldi3(($435|0),($879|0),212964166,0)|0);
  $881 = (getTempRet0() | 0);
  $882 = (_bitshift64Lshr(($880|0),($881|0),28)|0);
  $883 = (getTempRet0() | 0);
  HEAP32[$436>>2] = $882;
  $884 = ($437|0)<(0);
  $885 = $884 << 31 >> 31;
  $886 = (___muldi3(($437|0),($885|0),248002024,0)|0);
  $887 = (getTempRet0() | 0);
  $888 = (_bitshift64Lshr(($886|0),($887|0),28)|0);
  $889 = (getTempRet0() | 0);
  HEAP32[$438>>2] = $888;
  $890 = ($439|0)<(0);
  $891 = $890 << 31 >> 31;
  $892 = (___muldi3(($439|0),($891|0),266138953,0)|0);
  $893 = (getTempRet0() | 0);
  $894 = (_bitshift64Lshr(($892|0),($893|0),28)|0);
  $895 = (getTempRet0() | 0);
  HEAP32[$440>>2] = $894;
  $896 = ($453|0)<(0);
  $897 = $896 << 31 >> 31;
  $898 = (___muldi3(($453|0),($897|0),268179965,0)|0);
  $899 = (getTempRet0() | 0);
  $900 = (_bitshift64Lshr(($898|0),($899|0),28)|0);
  $901 = (getTempRet0() | 0);
  HEAP32[$454>>2] = $900;
  $902 = ($455|0)<(0);
  $903 = $902 << 31 >> 31;
  $904 = (___muldi3(($455|0),($903|0),266138953,0)|0);
  $905 = (getTempRet0() | 0);
  $906 = (_bitshift64Lshr(($904|0),($905|0),28)|0);
  $907 = (getTempRet0() | 0);
  HEAP32[$456>>2] = $906;
  $908 = ($457|0)<(0);
  $909 = $908 << 31 >> 31;
  $910 = (___muldi3(($457|0),($909|0),262072464,0)|0);
  $911 = (getTempRet0() | 0);
  $912 = (_bitshift64Lshr(($910|0),($911|0),28)|0);
  $913 = (getTempRet0() | 0);
  HEAP32[$458>>2] = $912;
  $914 = ($459|0)<(0);
  $915 = $914 << 31 >> 31;
  $916 = (___muldi3(($459|0),($915|0),256011445,0)|0);
  $917 = (getTempRet0() | 0);
  $918 = (_bitshift64Lshr(($916|0),($917|0),28)|0);
  $919 = (getTempRet0() | 0);
  HEAP32[$460>>2] = $918;
  $920 = ($461|0)<(0);
  $921 = $920 << 31 >> 31;
  $922 = (___muldi3(($461|0),($921|0),248002024,0)|0);
  $923 = (getTempRet0() | 0);
  $924 = (_bitshift64Lshr(($922|0),($923|0),28)|0);
  $925 = (getTempRet0() | 0);
  HEAP32[$462>>2] = $924;
  $926 = ($463|0)<(0);
  $927 = $926 << 31 >> 31;
  $928 = (___muldi3(($463|0),($927|0),238105157,0)|0);
  $929 = (getTempRet0() | 0);
  $930 = (_bitshift64Lshr(($928|0),($929|0),28)|0);
  $931 = (getTempRet0() | 0);
  HEAP32[$464>>2] = $930;
  $932 = ($465|0)<(0);
  $933 = $932 << 31 >> 31;
  $934 = (___muldi3(($465|0),($933|0),226396167,0)|0);
  $935 = (getTempRet0() | 0);
  $936 = (_bitshift64Lshr(($934|0),($935|0),28)|0);
  $937 = (getTempRet0() | 0);
  HEAP32[$466>>2] = $936;
  $938 = ($467|0)<(0);
  $939 = $938 << 31 >> 31;
  $940 = (___muldi3(($467|0),($939|0),212964166,0)|0);
  $941 = (getTempRet0() | 0);
  $942 = (_bitshift64Lshr(($940|0),($941|0),28)|0);
  $943 = (getTempRet0() | 0);
  HEAP32[$468>>2] = $942;
  $944 = ($469|0)<(0);
  $945 = $944 << 31 >> 31;
  $946 = (___muldi3(($469|0),($945|0),197911378,0)|0);
  $947 = (getTempRet0() | 0);
  $948 = (_bitshift64Lshr(($946|0),($947|0),28)|0);
  $949 = (getTempRet0() | 0);
  HEAP32[$470>>2] = $948;
  $950 = (___muldi3(($469|0),($945|0),181352365,0)|0);
  $951 = (getTempRet0() | 0);
  $952 = (_bitshift64Lshr(($950|0),($951|0),28)|0);
  $953 = (getTempRet0() | 0);
  HEAP32[$471>>2] = $952;
  $954 = (___muldi3(($467|0),($939|0),163413152,0)|0);
  $955 = (getTempRet0() | 0);
  $956 = (_bitshift64Lshr(($954|0),($955|0),28)|0);
  $957 = (getTempRet0() | 0);
  HEAP32[$472>>2] = $956;
  $958 = (___muldi3(($465|0),($933|0),144230265,0)|0);
  $959 = (getTempRet0() | 0);
  $960 = (_bitshift64Lshr(($958|0),($959|0),28)|0);
  $961 = (getTempRet0() | 0);
  HEAP32[$473>>2] = $960;
  $962 = (___muldi3(($463|0),($927|0),123949700,0)|0);
  $963 = (getTempRet0() | 0);
  $964 = (_bitshift64Lshr(($962|0),($963|0),28)|0);
  $965 = (getTempRet0() | 0);
  HEAP32[$474>>2] = $964;
  $966 = (___muldi3(($461|0),($921|0),102725802,0)|0);
  $967 = (getTempRet0() | 0);
  $968 = (_bitshift64Lshr(($966|0),($967|0),28)|0);
  $969 = (getTempRet0() | 0);
  HEAP32[$475>>2] = $968;
  $970 = (___muldi3(($459|0),($915|0),80720098,0)|0);
  $971 = (getTempRet0() | 0);
  $972 = (_bitshift64Lshr(($970|0),($971|0),28)|0);
  $973 = (getTempRet0() | 0);
  HEAP32[$476>>2] = $972;
  $974 = HEAP32[$477>>2]|0;
  $975 = ($974|0)<(0);
  $976 = $975 << 31 >> 31;
  $977 = (___muldi3(($974|0),($976|0),58100066,0)|0);
  $978 = (getTempRet0() | 0);
  $979 = (_bitshift64Lshr(($977|0),($978|0),28)|0);
  $980 = (getTempRet0() | 0);
  HEAP32[$477>>2] = $979;
  $981 = HEAP32[$478>>2]|0;
  $982 = ($981|0)<(0);
  $983 = $982 << 31 >> 31;
  $984 = (___muldi3(($981|0),($983|0),35037858,0)|0);
  $985 = (getTempRet0() | 0);
  $986 = (_bitshift64Lshr(($984|0),($985|0),28)|0);
  $987 = (getTempRet0() | 0);
  HEAP32[$478>>2] = $986;
  $988 = HEAP32[$479>>2]|0;
  $989 = ($988|0)<(0);
  $990 = $989 << 31 >> 31;
  $991 = (___muldi3(($988|0),($990|0),11708990,0)|0);
  $992 = (getTempRet0() | 0);
  $993 = (_bitshift64Lshr(($991|0),($992|0),28)|0);
  $994 = (getTempRet0() | 0);
  HEAP32[$479>>2] = $993;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _III_imdct_s($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0105117 = 0, $$0107116 = 0, $$0109115 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $2 = sp;
 $$0105117 = 0;$$0107116 = $2;$$0109115 = $0;
 while(1) {
  $3 = ((($$0109115)) + 4|0);
  $4 = ((($$0109115)) + 8|0);
  $5 = ((($$0109115)) + 12|0);
  $6 = ((($$0109115)) + 16|0);
  $7 = ((($$0109115)) + 20|0);
  $8 = HEAP32[$$0109115>>2]|0;
  $9 = ($8|0)<(0);
  $10 = $9 << 31 >> 31;
  $11 = (___muldi3(($8|0),($10|0),163413152,0)|0);
  $12 = (getTempRet0() | 0);
  $13 = (_bitshift64Lshr(($11|0),($12|0),28)|0);
  $14 = (getTempRet0() | 0);
  $15 = HEAP32[$3>>2]|0;
  $16 = ($15|0)<(0);
  $17 = $16 << 31 >> 31;
  $18 = (___muldi3(($15|0),($17|0),-248002024,-1)|0);
  $19 = (getTempRet0() | 0);
  $20 = (_bitshift64Lshr(($18|0),($19|0),28)|0);
  $21 = (getTempRet0() | 0);
  $22 = (($20) + ($13))|0;
  $23 = HEAP32[$4>>2]|0;
  $24 = ($23|0)<(0);
  $25 = $24 << 31 >> 31;
  $26 = (___muldi3(($23|0),($25|0),-35037858,-1)|0);
  $27 = (getTempRet0() | 0);
  $28 = (_bitshift64Lshr(($26|0),($27|0),28)|0);
  $29 = (getTempRet0() | 0);
  $30 = (($22) + ($28))|0;
  $31 = HEAP32[$5>>2]|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = (___muldi3(($31|0),($33|0),266138953,0)|0);
  $35 = (getTempRet0() | 0);
  $36 = (_bitshift64Lshr(($34|0),($35|0),28)|0);
  $37 = (getTempRet0() | 0);
  $38 = (($30) + ($36))|0;
  $39 = HEAP32[$6>>2]|0;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = (___muldi3(($39|0),($41|0),-102725802,-1)|0);
  $43 = (getTempRet0() | 0);
  $44 = (_bitshift64Lshr(($42|0),($43|0),28)|0);
  $45 = (getTempRet0() | 0);
  $46 = (($38) + ($44))|0;
  $47 = HEAP32[$7>>2]|0;
  $48 = ($47|0)<(0);
  $49 = $48 << 31 >> 31;
  $50 = (___muldi3(($47|0),($49|0),-212964166,-1)|0);
  $51 = (getTempRet0() | 0);
  $52 = (_bitshift64Lshr(($50|0),($51|0),28)|0);
  $53 = (getTempRet0() | 0);
  $54 = (($46) + ($52))|0;
  HEAP32[$$0107116>>2] = $54;
  $55 = (0 - ($54))|0;
  $56 = ((($$0107116)) + 20|0);
  HEAP32[$56>>2] = $55;
  $57 = (___muldi3(($8|0),($10|0),-212964166,-1)|0);
  $58 = (getTempRet0() | 0);
  $59 = (_bitshift64Lshr(($57|0),($58|0),28)|0);
  $60 = (getTempRet0() | 0);
  $61 = (___muldi3(($15|0),($17|0),102725802,0)|0);
  $62 = (getTempRet0() | 0);
  $63 = (_bitshift64Lshr(($61|0),($62|0),28)|0);
  $64 = (getTempRet0() | 0);
  $65 = (($63) + ($59))|0;
  $66 = (___muldi3(($23|0),($25|0),266138953,0)|0);
  $67 = (getTempRet0() | 0);
  $68 = (_bitshift64Lshr(($66|0),($67|0),28)|0);
  $69 = (getTempRet0() | 0);
  $70 = (($65) + ($68))|0;
  $71 = (___muldi3(($31|0),($33|0),35037858,0)|0);
  $72 = (getTempRet0() | 0);
  $73 = (_bitshift64Lshr(($71|0),($72|0),28)|0);
  $74 = (getTempRet0() | 0);
  $75 = (($70) + ($73))|0;
  $76 = (___muldi3(($39|0),($41|0),-248002024,-1)|0);
  $77 = (getTempRet0() | 0);
  $78 = (_bitshift64Lshr(($76|0),($77|0),28)|0);
  $79 = (getTempRet0() | 0);
  $80 = (($75) + ($78))|0;
  $81 = (___muldi3(($47|0),($49|0),-163413152,-1)|0);
  $82 = (getTempRet0() | 0);
  $83 = (_bitshift64Lshr(($81|0),($82|0),28)|0);
  $84 = (getTempRet0() | 0);
  $85 = (($80) + ($83))|0;
  $86 = ((($$0107116)) + 24|0);
  HEAP32[$86>>2] = $85;
  $87 = ((($$0107116)) + 44|0);
  HEAP32[$87>>2] = $85;
  $88 = (___muldi3(($8|0),($10|0),102725802,0)|0);
  $89 = (getTempRet0() | 0);
  $90 = (_bitshift64Lshr(($88|0),($89|0),28)|0);
  $91 = (getTempRet0() | 0);
  $92 = (($20) + ($90))|0;
  $93 = (___muldi3(($23|0),($25|0),248002024,0)|0);
  $94 = (getTempRet0() | 0);
  $95 = (_bitshift64Lshr(($93|0),($94|0),28)|0);
  $96 = (getTempRet0() | 0);
  $97 = (($92) + ($95))|0;
  $98 = (___muldi3(($31|0),($33|0),-102725802,-1)|0);
  $99 = (getTempRet0() | 0);
  $100 = (_bitshift64Lshr(($98|0),($99|0),28)|0);
  $101 = (getTempRet0() | 0);
  $102 = (($97) + ($100))|0;
  $103 = (($102) + ($44))|0;
  $104 = (___muldi3(($47|0),($49|0),248002024,0)|0);
  $105 = (getTempRet0() | 0);
  $106 = (_bitshift64Lshr(($104|0),($105|0),28)|0);
  $107 = (getTempRet0() | 0);
  $108 = (($103) + ($106))|0;
  $109 = ((($$0107116)) + 4|0);
  HEAP32[$109>>2] = $108;
  $110 = (0 - ($108))|0;
  $111 = ((($$0107116)) + 16|0);
  HEAP32[$111>>2] = $110;
  $112 = (___muldi3(($8|0),($10|0),-248002024,-1)|0);
  $113 = (getTempRet0() | 0);
  $114 = (_bitshift64Lshr(($112|0),($113|0),28)|0);
  $115 = (getTempRet0() | 0);
  $116 = (___muldi3(($15|0),($17|0),-102725802,-1)|0);
  $117 = (getTempRet0() | 0);
  $118 = (_bitshift64Lshr(($116|0),($117|0),28)|0);
  $119 = (getTempRet0() | 0);
  $120 = (($118) + ($114))|0;
  $121 = (___muldi3(($23|0),($25|0),102725802,0)|0);
  $122 = (getTempRet0() | 0);
  $123 = (_bitshift64Lshr(($121|0),($122|0),28)|0);
  $124 = (getTempRet0() | 0);
  $125 = (($120) + ($123))|0;
  $126 = (___muldi3(($31|0),($33|0),248002024,0)|0);
  $127 = (getTempRet0() | 0);
  $128 = (_bitshift64Lshr(($126|0),($127|0),28)|0);
  $129 = (getTempRet0() | 0);
  $130 = (($125) + ($128))|0;
  $131 = (___muldi3(($39|0),($41|0),248002024,0)|0);
  $132 = (getTempRet0() | 0);
  $133 = (_bitshift64Lshr(($131|0),($132|0),28)|0);
  $134 = (getTempRet0() | 0);
  $135 = (($130) + ($133))|0;
  $136 = (___muldi3(($47|0),($49|0),102725802,0)|0);
  $137 = (getTempRet0() | 0);
  $138 = (_bitshift64Lshr(($136|0),($137|0),28)|0);
  $139 = (getTempRet0() | 0);
  $140 = (($135) + ($138))|0;
  $141 = ((($$0107116)) + 28|0);
  HEAP32[$141>>2] = $140;
  $142 = ((($$0107116)) + 40|0);
  HEAP32[$142>>2] = $140;
  $143 = HEAP32[$$0109115>>2]|0;
  $144 = ($143|0)<(0);
  $145 = $144 << 31 >> 31;
  $146 = (___muldi3(($143|0),($145|0),35037858,0)|0);
  $147 = (getTempRet0() | 0);
  $148 = (_bitshift64Lshr(($146|0),($147|0),28)|0);
  $149 = (getTempRet0() | 0);
  $150 = HEAP32[$3>>2]|0;
  $151 = ($150|0)<(0);
  $152 = $151 << 31 >> 31;
  $153 = (___muldi3(($150|0),($152|0),-102725802,-1)|0);
  $154 = (getTempRet0() | 0);
  $155 = (_bitshift64Lshr(($153|0),($154|0),28)|0);
  $156 = (getTempRet0() | 0);
  $157 = (($155) + ($148))|0;
  $158 = HEAP32[$4>>2]|0;
  $159 = ($158|0)<(0);
  $160 = $159 << 31 >> 31;
  $161 = (___muldi3(($158|0),($160|0),163413152,0)|0);
  $162 = (getTempRet0() | 0);
  $163 = (_bitshift64Lshr(($161|0),($162|0),28)|0);
  $164 = (getTempRet0() | 0);
  $165 = (($157) + ($163))|0;
  $166 = HEAP32[$5>>2]|0;
  $167 = ($166|0)<(0);
  $168 = $167 << 31 >> 31;
  $169 = (___muldi3(($166|0),($168|0),-212964166,-1)|0);
  $170 = (getTempRet0() | 0);
  $171 = (_bitshift64Lshr(($169|0),($170|0),28)|0);
  $172 = (getTempRet0() | 0);
  $173 = (($165) + ($171))|0;
  $174 = HEAP32[$6>>2]|0;
  $175 = ($174|0)<(0);
  $176 = $175 << 31 >> 31;
  $177 = (___muldi3(($174|0),($176|0),248002024,0)|0);
  $178 = (getTempRet0() | 0);
  $179 = (_bitshift64Lshr(($177|0),($178|0),28)|0);
  $180 = (getTempRet0() | 0);
  $181 = (($173) + ($179))|0;
  $182 = HEAP32[$7>>2]|0;
  $183 = ($182|0)<(0);
  $184 = $183 << 31 >> 31;
  $185 = (___muldi3(($182|0),($184|0),-266138953,-1)|0);
  $186 = (getTempRet0() | 0);
  $187 = (_bitshift64Lshr(($185|0),($186|0),28)|0);
  $188 = (getTempRet0() | 0);
  $189 = (($181) + ($187))|0;
  $190 = ((($$0107116)) + 8|0);
  HEAP32[$190>>2] = $189;
  $191 = (0 - ($189))|0;
  $192 = ((($$0107116)) + 12|0);
  HEAP32[$192>>2] = $191;
  $193 = (___muldi3(($143|0),($145|0),-266138953,-1)|0);
  $194 = (getTempRet0() | 0);
  $195 = (_bitshift64Lshr(($193|0),($194|0),28)|0);
  $196 = (getTempRet0() | 0);
  $197 = (___muldi3(($150|0),($152|0),-248002024,-1)|0);
  $198 = (getTempRet0() | 0);
  $199 = (_bitshift64Lshr(($197|0),($198|0),28)|0);
  $200 = (getTempRet0() | 0);
  $201 = (($199) + ($195))|0;
  $202 = (___muldi3(($158|0),($160|0),-212964166,-1)|0);
  $203 = (getTempRet0() | 0);
  $204 = (_bitshift64Lshr(($202|0),($203|0),28)|0);
  $205 = (getTempRet0() | 0);
  $206 = (($201) + ($204))|0;
  $207 = (___muldi3(($166|0),($168|0),-163413152,-1)|0);
  $208 = (getTempRet0() | 0);
  $209 = (_bitshift64Lshr(($207|0),($208|0),28)|0);
  $210 = (getTempRet0() | 0);
  $211 = (($206) + ($209))|0;
  $212 = (___muldi3(($174|0),($176|0),-102725802,-1)|0);
  $213 = (getTempRet0() | 0);
  $214 = (_bitshift64Lshr(($212|0),($213|0),28)|0);
  $215 = (getTempRet0() | 0);
  $216 = (($211) + ($214))|0;
  $217 = (___muldi3(($182|0),($184|0),-35037858,-1)|0);
  $218 = (getTempRet0() | 0);
  $219 = (_bitshift64Lshr(($217|0),($218|0),28)|0);
  $220 = (getTempRet0() | 0);
  $221 = (($216) + ($219))|0;
  $222 = ((($$0107116)) + 32|0);
  HEAP32[$222>>2] = $221;
  $223 = ((($$0107116)) + 36|0);
  HEAP32[$223>>2] = $221;
  $224 = ((($$0107116)) + 48|0);
  $225 = ((($$0109115)) + 24|0);
  $226 = (($$0105117) + 1)|0;
  $exitcond = ($226|0)==(3);
  if ($exitcond) {
   break;
  } else {
   $$0105117 = $226;$$0107116 = $224;$$0109115 = $225;
  }
 }
 HEAP32[$1>>2] = 0;
 $227 = HEAP32[$2>>2]|0;
 $228 = ($227|0)<(0);
 $229 = $228 << 31 >> 31;
 $230 = (___muldi3(($227|0),($229|0),35037858,0)|0);
 $231 = (getTempRet0() | 0);
 $232 = (_bitshift64Lshr(($230|0),($231|0),28)|0);
 $233 = (getTempRet0() | 0);
 $234 = ((($1)) + 24|0);
 HEAP32[$234>>2] = $232;
 $235 = ((($2)) + 24|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = ($236|0)<(0);
 $238 = $237 << 31 >> 31;
 $239 = (___muldi3(($236|0),($238|0),266138953,0)|0);
 $240 = (getTempRet0() | 0);
 $241 = (_bitshift64Lshr(($239|0),($240|0),28)|0);
 $242 = (getTempRet0() | 0);
 $243 = ((($2)) + 48|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = ($244|0)<(0);
 $246 = $245 << 31 >> 31;
 $247 = (___muldi3(($244|0),($246|0),35037858,0)|0);
 $248 = (getTempRet0() | 0);
 $249 = (_bitshift64Lshr(($247|0),($248|0),28)|0);
 $250 = (getTempRet0() | 0);
 $251 = (($249) + ($241))|0;
 $252 = ((($1)) + 48|0);
 HEAP32[$252>>2] = $251;
 $253 = ((($2)) + 72|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ($254|0)<(0);
 $256 = $255 << 31 >> 31;
 $257 = (___muldi3(($254|0),($256|0),266138953,0)|0);
 $258 = (getTempRet0() | 0);
 $259 = (_bitshift64Lshr(($257|0),($258|0),28)|0);
 $260 = (getTempRet0() | 0);
 $261 = ((($2)) + 96|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = ($262|0)<(0);
 $264 = $263 << 31 >> 31;
 $265 = (___muldi3(($262|0),($264|0),35037858,0)|0);
 $266 = (getTempRet0() | 0);
 $267 = (_bitshift64Lshr(($265|0),($266|0),28)|0);
 $268 = (getTempRet0() | 0);
 $269 = (($267) + ($259))|0;
 $270 = ((($1)) + 72|0);
 HEAP32[$270>>2] = $269;
 $271 = ((($2)) + 120|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = ($272|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = (___muldi3(($272|0),($274|0),266138953,0)|0);
 $276 = (getTempRet0() | 0);
 $277 = (_bitshift64Lshr(($275|0),($276|0),28)|0);
 $278 = (getTempRet0() | 0);
 $279 = ((($1)) + 96|0);
 HEAP32[$279>>2] = $277;
 $280 = ((($1)) + 120|0);
 HEAP32[$280>>2] = 0;
 $281 = ((($2)) + 4|0);
 $282 = ((($1)) + 4|0);
 HEAP32[$282>>2] = 0;
 $283 = HEAP32[$281>>2]|0;
 $284 = ($283|0)<(0);
 $285 = $284 << 31 >> 31;
 $286 = (___muldi3(($283|0),($285|0),102725802,0)|0);
 $287 = (getTempRet0() | 0);
 $288 = (_bitshift64Lshr(($286|0),($287|0),28)|0);
 $289 = (getTempRet0() | 0);
 $290 = ((($1)) + 28|0);
 HEAP32[$290>>2] = $288;
 $291 = ((($2)) + 28|0);
 $292 = HEAP32[$291>>2]|0;
 $293 = ($292|0)<(0);
 $294 = $293 << 31 >> 31;
 $295 = (___muldi3(($292|0),($294|0),248002024,0)|0);
 $296 = (getTempRet0() | 0);
 $297 = (_bitshift64Lshr(($295|0),($296|0),28)|0);
 $298 = (getTempRet0() | 0);
 $299 = ((($2)) + 52|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = ($300|0)<(0);
 $302 = $301 << 31 >> 31;
 $303 = (___muldi3(($300|0),($302|0),102725802,0)|0);
 $304 = (getTempRet0() | 0);
 $305 = (_bitshift64Lshr(($303|0),($304|0),28)|0);
 $306 = (getTempRet0() | 0);
 $307 = (($305) + ($297))|0;
 $308 = ((($1)) + 52|0);
 HEAP32[$308>>2] = $307;
 $309 = ((($2)) + 76|0);
 $310 = HEAP32[$309>>2]|0;
 $311 = ($310|0)<(0);
 $312 = $311 << 31 >> 31;
 $313 = (___muldi3(($310|0),($312|0),248002024,0)|0);
 $314 = (getTempRet0() | 0);
 $315 = (_bitshift64Lshr(($313|0),($314|0),28)|0);
 $316 = (getTempRet0() | 0);
 $317 = ((($2)) + 100|0);
 $318 = HEAP32[$317>>2]|0;
 $319 = ($318|0)<(0);
 $320 = $319 << 31 >> 31;
 $321 = (___muldi3(($318|0),($320|0),102725802,0)|0);
 $322 = (getTempRet0() | 0);
 $323 = (_bitshift64Lshr(($321|0),($322|0),28)|0);
 $324 = (getTempRet0() | 0);
 $325 = (($323) + ($315))|0;
 $326 = ((($1)) + 76|0);
 HEAP32[$326>>2] = $325;
 $327 = ((($2)) + 124|0);
 $328 = HEAP32[$327>>2]|0;
 $329 = ($328|0)<(0);
 $330 = $329 << 31 >> 31;
 $331 = (___muldi3(($328|0),($330|0),248002024,0)|0);
 $332 = (getTempRet0() | 0);
 $333 = (_bitshift64Lshr(($331|0),($332|0),28)|0);
 $334 = (getTempRet0() | 0);
 $335 = ((($1)) + 100|0);
 HEAP32[$335>>2] = $333;
 $336 = ((($1)) + 124|0);
 HEAP32[$336>>2] = 0;
 $337 = ((($2)) + 8|0);
 $338 = ((($1)) + 8|0);
 HEAP32[$338>>2] = 0;
 $339 = HEAP32[$337>>2]|0;
 $340 = ($339|0)<(0);
 $341 = $340 << 31 >> 31;
 $342 = (___muldi3(($339|0),($341|0),163413152,0)|0);
 $343 = (getTempRet0() | 0);
 $344 = (_bitshift64Lshr(($342|0),($343|0),28)|0);
 $345 = (getTempRet0() | 0);
 $346 = ((($1)) + 32|0);
 HEAP32[$346>>2] = $344;
 $347 = ((($2)) + 32|0);
 $348 = HEAP32[$347>>2]|0;
 $349 = ($348|0)<(0);
 $350 = $349 << 31 >> 31;
 $351 = (___muldi3(($348|0),($350|0),212964166,0)|0);
 $352 = (getTempRet0() | 0);
 $353 = (_bitshift64Lshr(($351|0),($352|0),28)|0);
 $354 = (getTempRet0() | 0);
 $355 = ((($2)) + 56|0);
 $356 = HEAP32[$355>>2]|0;
 $357 = ($356|0)<(0);
 $358 = $357 << 31 >> 31;
 $359 = (___muldi3(($356|0),($358|0),163413152,0)|0);
 $360 = (getTempRet0() | 0);
 $361 = (_bitshift64Lshr(($359|0),($360|0),28)|0);
 $362 = (getTempRet0() | 0);
 $363 = (($361) + ($353))|0;
 $364 = ((($1)) + 56|0);
 HEAP32[$364>>2] = $363;
 $365 = ((($2)) + 80|0);
 $366 = HEAP32[$365>>2]|0;
 $367 = ($366|0)<(0);
 $368 = $367 << 31 >> 31;
 $369 = (___muldi3(($366|0),($368|0),212964166,0)|0);
 $370 = (getTempRet0() | 0);
 $371 = (_bitshift64Lshr(($369|0),($370|0),28)|0);
 $372 = (getTempRet0() | 0);
 $373 = ((($2)) + 104|0);
 $374 = HEAP32[$373>>2]|0;
 $375 = ($374|0)<(0);
 $376 = $375 << 31 >> 31;
 $377 = (___muldi3(($374|0),($376|0),163413152,0)|0);
 $378 = (getTempRet0() | 0);
 $379 = (_bitshift64Lshr(($377|0),($378|0),28)|0);
 $380 = (getTempRet0() | 0);
 $381 = (($379) + ($371))|0;
 $382 = ((($1)) + 80|0);
 HEAP32[$382>>2] = $381;
 $383 = ((($2)) + 128|0);
 $384 = HEAP32[$383>>2]|0;
 $385 = ($384|0)<(0);
 $386 = $385 << 31 >> 31;
 $387 = (___muldi3(($384|0),($386|0),212964166,0)|0);
 $388 = (getTempRet0() | 0);
 $389 = (_bitshift64Lshr(($387|0),($388|0),28)|0);
 $390 = (getTempRet0() | 0);
 $391 = ((($1)) + 104|0);
 HEAP32[$391>>2] = $389;
 $392 = ((($1)) + 128|0);
 HEAP32[$392>>2] = 0;
 $393 = ((($2)) + 12|0);
 $394 = ((($1)) + 12|0);
 HEAP32[$394>>2] = 0;
 $395 = HEAP32[$393>>2]|0;
 $396 = ($395|0)<(0);
 $397 = $396 << 31 >> 31;
 $398 = (___muldi3(($395|0),($397|0),212964166,0)|0);
 $399 = (getTempRet0() | 0);
 $400 = (_bitshift64Lshr(($398|0),($399|0),28)|0);
 $401 = (getTempRet0() | 0);
 $402 = ((($1)) + 36|0);
 HEAP32[$402>>2] = $400;
 $403 = ((($2)) + 36|0);
 $404 = HEAP32[$403>>2]|0;
 $405 = ($404|0)<(0);
 $406 = $405 << 31 >> 31;
 $407 = (___muldi3(($404|0),($406|0),163413152,0)|0);
 $408 = (getTempRet0() | 0);
 $409 = (_bitshift64Lshr(($407|0),($408|0),28)|0);
 $410 = (getTempRet0() | 0);
 $411 = ((($2)) + 60|0);
 $412 = HEAP32[$411>>2]|0;
 $413 = ($412|0)<(0);
 $414 = $413 << 31 >> 31;
 $415 = (___muldi3(($412|0),($414|0),212964166,0)|0);
 $416 = (getTempRet0() | 0);
 $417 = (_bitshift64Lshr(($415|0),($416|0),28)|0);
 $418 = (getTempRet0() | 0);
 $419 = (($417) + ($409))|0;
 $420 = ((($1)) + 60|0);
 HEAP32[$420>>2] = $419;
 $421 = ((($2)) + 84|0);
 $422 = HEAP32[$421>>2]|0;
 $423 = ($422|0)<(0);
 $424 = $423 << 31 >> 31;
 $425 = (___muldi3(($422|0),($424|0),163413152,0)|0);
 $426 = (getTempRet0() | 0);
 $427 = (_bitshift64Lshr(($425|0),($426|0),28)|0);
 $428 = (getTempRet0() | 0);
 $429 = ((($2)) + 108|0);
 $430 = HEAP32[$429>>2]|0;
 $431 = ($430|0)<(0);
 $432 = $431 << 31 >> 31;
 $433 = (___muldi3(($430|0),($432|0),212964166,0)|0);
 $434 = (getTempRet0() | 0);
 $435 = (_bitshift64Lshr(($433|0),($434|0),28)|0);
 $436 = (getTempRet0() | 0);
 $437 = (($435) + ($427))|0;
 $438 = ((($1)) + 84|0);
 HEAP32[$438>>2] = $437;
 $439 = ((($2)) + 132|0);
 $440 = HEAP32[$439>>2]|0;
 $441 = ($440|0)<(0);
 $442 = $441 << 31 >> 31;
 $443 = (___muldi3(($440|0),($442|0),163413152,0)|0);
 $444 = (getTempRet0() | 0);
 $445 = (_bitshift64Lshr(($443|0),($444|0),28)|0);
 $446 = (getTempRet0() | 0);
 $447 = ((($1)) + 108|0);
 HEAP32[$447>>2] = $445;
 $448 = ((($1)) + 132|0);
 HEAP32[$448>>2] = 0;
 $449 = ((($2)) + 16|0);
 $450 = ((($1)) + 16|0);
 HEAP32[$450>>2] = 0;
 $451 = HEAP32[$449>>2]|0;
 $452 = ($451|0)<(0);
 $453 = $452 << 31 >> 31;
 $454 = (___muldi3(($451|0),($453|0),248002024,0)|0);
 $455 = (getTempRet0() | 0);
 $456 = (_bitshift64Lshr(($454|0),($455|0),28)|0);
 $457 = (getTempRet0() | 0);
 $458 = ((($1)) + 40|0);
 HEAP32[$458>>2] = $456;
 $459 = ((($2)) + 40|0);
 $460 = HEAP32[$459>>2]|0;
 $461 = ($460|0)<(0);
 $462 = $461 << 31 >> 31;
 $463 = (___muldi3(($460|0),($462|0),102725802,0)|0);
 $464 = (getTempRet0() | 0);
 $465 = (_bitshift64Lshr(($463|0),($464|0),28)|0);
 $466 = (getTempRet0() | 0);
 $467 = ((($2)) + 64|0);
 $468 = HEAP32[$467>>2]|0;
 $469 = ($468|0)<(0);
 $470 = $469 << 31 >> 31;
 $471 = (___muldi3(($468|0),($470|0),248002024,0)|0);
 $472 = (getTempRet0() | 0);
 $473 = (_bitshift64Lshr(($471|0),($472|0),28)|0);
 $474 = (getTempRet0() | 0);
 $475 = (($473) + ($465))|0;
 $476 = ((($1)) + 64|0);
 HEAP32[$476>>2] = $475;
 $477 = ((($2)) + 88|0);
 $478 = HEAP32[$477>>2]|0;
 $479 = ($478|0)<(0);
 $480 = $479 << 31 >> 31;
 $481 = (___muldi3(($478|0),($480|0),102725802,0)|0);
 $482 = (getTempRet0() | 0);
 $483 = (_bitshift64Lshr(($481|0),($482|0),28)|0);
 $484 = (getTempRet0() | 0);
 $485 = ((($2)) + 112|0);
 $486 = HEAP32[$485>>2]|0;
 $487 = ($486|0)<(0);
 $488 = $487 << 31 >> 31;
 $489 = (___muldi3(($486|0),($488|0),248002024,0)|0);
 $490 = (getTempRet0() | 0);
 $491 = (_bitshift64Lshr(($489|0),($490|0),28)|0);
 $492 = (getTempRet0() | 0);
 $493 = (($491) + ($483))|0;
 $494 = ((($1)) + 88|0);
 HEAP32[$494>>2] = $493;
 $495 = ((($2)) + 136|0);
 $496 = HEAP32[$495>>2]|0;
 $497 = ($496|0)<(0);
 $498 = $497 << 31 >> 31;
 $499 = (___muldi3(($496|0),($498|0),102725802,0)|0);
 $500 = (getTempRet0() | 0);
 $501 = (_bitshift64Lshr(($499|0),($500|0),28)|0);
 $502 = (getTempRet0() | 0);
 $503 = ((($1)) + 112|0);
 HEAP32[$503>>2] = $501;
 $504 = ((($1)) + 136|0);
 HEAP32[$504>>2] = 0;
 $505 = ((($2)) + 20|0);
 $506 = ((($1)) + 20|0);
 HEAP32[$506>>2] = 0;
 $507 = HEAP32[$505>>2]|0;
 $508 = ($507|0)<(0);
 $509 = $508 << 31 >> 31;
 $510 = (___muldi3(($507|0),($509|0),266138953,0)|0);
 $511 = (getTempRet0() | 0);
 $512 = (_bitshift64Lshr(($510|0),($511|0),28)|0);
 $513 = (getTempRet0() | 0);
 $514 = ((($1)) + 44|0);
 HEAP32[$514>>2] = $512;
 $515 = ((($2)) + 44|0);
 $516 = HEAP32[$515>>2]|0;
 $517 = ($516|0)<(0);
 $518 = $517 << 31 >> 31;
 $519 = (___muldi3(($516|0),($518|0),35037858,0)|0);
 $520 = (getTempRet0() | 0);
 $521 = (_bitshift64Lshr(($519|0),($520|0),28)|0);
 $522 = (getTempRet0() | 0);
 $523 = ((($2)) + 68|0);
 $524 = HEAP32[$523>>2]|0;
 $525 = ($524|0)<(0);
 $526 = $525 << 31 >> 31;
 $527 = (___muldi3(($524|0),($526|0),266138953,0)|0);
 $528 = (getTempRet0() | 0);
 $529 = (_bitshift64Lshr(($527|0),($528|0),28)|0);
 $530 = (getTempRet0() | 0);
 $531 = (($529) + ($521))|0;
 $532 = ((($1)) + 68|0);
 HEAP32[$532>>2] = $531;
 $533 = ((($2)) + 92|0);
 $534 = HEAP32[$533>>2]|0;
 $535 = ($534|0)<(0);
 $536 = $535 << 31 >> 31;
 $537 = (___muldi3(($534|0),($536|0),35037858,0)|0);
 $538 = (getTempRet0() | 0);
 $539 = (_bitshift64Lshr(($537|0),($538|0),28)|0);
 $540 = (getTempRet0() | 0);
 $541 = ((($2)) + 116|0);
 $542 = HEAP32[$541>>2]|0;
 $543 = ($542|0)<(0);
 $544 = $543 << 31 >> 31;
 $545 = (___muldi3(($542|0),($544|0),266138953,0)|0);
 $546 = (getTempRet0() | 0);
 $547 = (_bitshift64Lshr(($545|0),($546|0),28)|0);
 $548 = (getTempRet0() | 0);
 $549 = (($547) + ($539))|0;
 $550 = ((($1)) + 92|0);
 HEAP32[$550>>2] = $549;
 $551 = ((($2)) + 140|0);
 $552 = HEAP32[$551>>2]|0;
 $553 = ($552|0)<(0);
 $554 = $553 << 31 >> 31;
 $555 = (___muldi3(($552|0),($554|0),35037858,0)|0);
 $556 = (getTempRet0() | 0);
 $557 = (_bitshift64Lshr(($555|0),($556|0),28)|0);
 $558 = (getTempRet0() | 0);
 $559 = ((($1)) + 116|0);
 HEAP32[$559>>2] = $557;
 $560 = ((($1)) + 140|0);
 HEAP32[$560>>2] = 0;
 STACKTOP = sp;return;
}
function _III_overlap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($4))|0;
 $7 = (($2) + ($3<<2)|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 72|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$1>>2] = $9;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($11))|0;
 $15 = (((($2)) + 128|0) + ($3<<2)|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($0)) + 76|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$12>>2] = $17;
 $18 = ((($0)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($1)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($19))|0;
 $23 = (((($2)) + 256|0) + ($3<<2)|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($0)) + 80|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$20>>2] = $25;
 $26 = ((($0)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($1)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($27))|0;
 $31 = (((($2)) + 384|0) + ($3<<2)|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($0)) + 84|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$28>>2] = $33;
 $34 = ((($0)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($1)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + ($35))|0;
 $39 = (((($2)) + 512|0) + ($3<<2)|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($0)) + 88|0);
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$36>>2] = $41;
 $42 = ((($0)) + 20|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($1)) + 20|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($43))|0;
 $47 = (((($2)) + 640|0) + ($3<<2)|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($0)) + 92|0);
 $49 = HEAP32[$48>>2]|0;
 HEAP32[$44>>2] = $49;
 $50 = ((($0)) + 24|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($1)) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + ($51))|0;
 $55 = (((($2)) + 768|0) + ($3<<2)|0);
 HEAP32[$55>>2] = $54;
 $56 = ((($0)) + 96|0);
 $57 = HEAP32[$56>>2]|0;
 HEAP32[$52>>2] = $57;
 $58 = ((($0)) + 28|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($1)) + 28|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + ($59))|0;
 $63 = (((($2)) + 896|0) + ($3<<2)|0);
 HEAP32[$63>>2] = $62;
 $64 = ((($0)) + 100|0);
 $65 = HEAP32[$64>>2]|0;
 HEAP32[$60>>2] = $65;
 $66 = ((($0)) + 32|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($1)) + 32|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + ($67))|0;
 $71 = (((($2)) + 1024|0) + ($3<<2)|0);
 HEAP32[$71>>2] = $70;
 $72 = ((($0)) + 104|0);
 $73 = HEAP32[$72>>2]|0;
 HEAP32[$68>>2] = $73;
 $74 = ((($0)) + 36|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($1)) + 36|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) + ($75))|0;
 $79 = (((($2)) + 1152|0) + ($3<<2)|0);
 HEAP32[$79>>2] = $78;
 $80 = ((($0)) + 108|0);
 $81 = HEAP32[$80>>2]|0;
 HEAP32[$76>>2] = $81;
 $82 = ((($0)) + 40|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($1)) + 40|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + ($83))|0;
 $87 = (((($2)) + 1280|0) + ($3<<2)|0);
 HEAP32[$87>>2] = $86;
 $88 = ((($0)) + 112|0);
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$84>>2] = $89;
 $90 = ((($0)) + 44|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ((($1)) + 44|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + ($91))|0;
 $95 = (((($2)) + 1408|0) + ($3<<2)|0);
 HEAP32[$95>>2] = $94;
 $96 = ((($0)) + 116|0);
 $97 = HEAP32[$96>>2]|0;
 HEAP32[$92>>2] = $97;
 $98 = ((($0)) + 48|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ((($1)) + 48|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) + ($99))|0;
 $103 = (((($2)) + 1536|0) + ($3<<2)|0);
 HEAP32[$103>>2] = $102;
 $104 = ((($0)) + 120|0);
 $105 = HEAP32[$104>>2]|0;
 HEAP32[$100>>2] = $105;
 $106 = ((($0)) + 52|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ((($1)) + 52|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (($109) + ($107))|0;
 $111 = (((($2)) + 1664|0) + ($3<<2)|0);
 HEAP32[$111>>2] = $110;
 $112 = ((($0)) + 124|0);
 $113 = HEAP32[$112>>2]|0;
 HEAP32[$108>>2] = $113;
 $114 = ((($0)) + 56|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ((($1)) + 56|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($117) + ($115))|0;
 $119 = (((($2)) + 1792|0) + ($3<<2)|0);
 HEAP32[$119>>2] = $118;
 $120 = ((($0)) + 128|0);
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$116>>2] = $121;
 $122 = ((($0)) + 60|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($1)) + 60|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (($125) + ($123))|0;
 $127 = (((($2)) + 1920|0) + ($3<<2)|0);
 HEAP32[$127>>2] = $126;
 $128 = ((($0)) + 132|0);
 $129 = HEAP32[$128>>2]|0;
 HEAP32[$124>>2] = $129;
 $130 = ((($0)) + 64|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ((($1)) + 64|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = (($133) + ($131))|0;
 $135 = (((($2)) + 2048|0) + ($3<<2)|0);
 HEAP32[$135>>2] = $134;
 $136 = ((($0)) + 136|0);
 $137 = HEAP32[$136>>2]|0;
 HEAP32[$132>>2] = $137;
 $138 = ((($0)) + 68|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ((($1)) + 68|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = (($141) + ($139))|0;
 $143 = (((($2)) + 2176|0) + ($3<<2)|0);
 HEAP32[$143>>2] = $142;
 $144 = ((($0)) + 140|0);
 $145 = HEAP32[$144>>2]|0;
 HEAP32[$140>>2] = $145;
 return;
}
function __ZN7DecoderC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $18 = sp + 36|0;
 $20 = sp + 28|0;
 $23 = sp + 16|0;
 $25 = sp + 8|0;
 $26 = sp + 4|0;
 $27 = sp;
 $22 = $0;
 $28 = $22;
 HEAP32[$28>>2] = 0; //@line 5 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $29 = ((($28)) + 4|0); //@line 6 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$29>>2] = 0; //@line 6 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $30 = ((($28)) + 8|0); //@line 7 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP8[$30>>0] = 0; //@line 7 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $31 = ((($28)) + 12|0); //@line 8 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$31>>2] = 0; //@line 8 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $32 = ((($28)) + 16|0); //@line 9 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP16[$32>>1] = 0; //@line 9 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $33 = ((($28)) + 20|0); //@line 10 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $34 = (__Znam(10240)|0); //@line 10 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$33>>2] = $34; //@line 10 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $35 = ((($28)) + 24|0); //@line 11 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$35>>2] = 0; //@line 11 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $36 = ((($28)) + 28|0); //@line 12 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$36>>2] = 0; //@line 12 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $37 = ((($28)) + 32|0); //@line 13 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$37>>2] = 0; //@line 13 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $38 = ((($28)) + 36|0); //@line 14 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP8[$38>>0] = 0; //@line 14 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $39 = ((($28)) + 40|0); //@line 15 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 _memset(($39|0),0,13324)|0; //@line 15 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $40 = ((($28)) + 13364|0); //@line 16 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 dest=$40; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 16 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $41 = ((($28)) + 13428|0); //@line 17 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 _memset(($41|0),0,9268)|0; //@line 17 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $42 = ((($28)) + 22696|0); //@line 18 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$23>>2] = 0; //@line 18 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 __ZN10emscripten3valC2IiEEOT_($42,$23); //@line 18 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $43 = ((($28)) + 22700|0); //@line 19 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $21 = $43;
 $44 = $21;
 $19 = $44;
 $45 = $19;
 $17 = $45;
 $46 = $17;
 HEAP32[$46>>2] = 0; //@line 320 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $47 = ((($46)) + 4|0); //@line 320 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$47>>2] = 0; //@line 320 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $48 = ((($46)) + 8|0); //@line 320 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$48>>2] = 0; //@line 320 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $49 = ((($46)) + 12|0); //@line 320 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$18>>2] = 0; //@line 320 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $15 = $49;
 $16 = $18;
 $50 = $15;
 $51 = $16; //@line 2187 "/usr/lib/emscripten/system/include/libcxx/memory"
 $14 = $51;
 $52 = $14; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $10 = $50;
 $11 = $52;
 $53 = $10;
 $54 = $11; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
 $9 = $54;
 HEAP32[$53>>2] = 0; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
 $13 = $50;
 $55 = $13;
 $12 = $55;
 $56 = ((($45)) + 16|0); //@line 1095 "/usr/lib/emscripten/system/include/libcxx/deque"
 HEAP32[$56>>2] = 0; //@line 1095 "/usr/lib/emscripten/system/include/libcxx/deque"
 $57 = ((($45)) + 20|0); //@line 1095 "/usr/lib/emscripten/system/include/libcxx/deque"
 HEAP32[$20>>2] = 0; //@line 1095 "/usr/lib/emscripten/system/include/libcxx/deque"
 $7 = $57;
 $8 = $20;
 $58 = $7;
 $59 = $8; //@line 2187 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $59;
 $60 = $6; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $2 = $58;
 $3 = $60;
 $61 = $2;
 $62 = $3; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
 $1 = $62;
 $63 = $1; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $64 = HEAP32[$63>>2]|0; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$61>>2] = $64; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $58;
 $65 = $5;
 $4 = $65;
 $24 = 0; //@line 21 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 while(1) {
  $66 = $24; //@line 21 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $67 = ($66|0)<(10240); //@line 21 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  if (!($67)) {
   break;
  }
  $68 = ((($28)) + 20|0); //@line 22 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $69 = HEAP32[$68>>2]|0; //@line 22 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $70 = $24; //@line 22 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $71 = (($69) + ($70)|0); //@line 22 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  HEAP8[$71>>0] = 0; //@line 22 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $72 = $24; //@line 21 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $73 = (($72) + 1)|0; //@line 21 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $24 = $73; //@line 21 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 }
 $74 = ((($28)) + 13428|0); //@line 25 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 _mad_frame_init($74); //@line 25 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $75 = ((($28)) + 13364|0); //@line 26 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 _mad_stream_init($75); //@line 26 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $76 = ((($28)) + 40|0); //@line 27 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 _mad_synth_init($76); //@line 27 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 __ZN10emscripten3val6globalEPKc($25,57526); //@line 29 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $77 = (__ZNK10emscripten3val2asIbJEEET_DpT0_($25)|0); //@line 30 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 if ($77) {
  __ZNK10emscripten3val4new_IJEEES0_DpOT_($27,$25); //@line 34 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $78 = ((($28)) + 22696|0); //@line 34 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  (__ZN10emscripten3valaSEOS0_($78,$27)|0); //@line 34 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  __ZN10emscripten3valD2Ev($27); //@line 34 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  __ZN10emscripten3valD2Ev($25); //@line 35 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  STACKTOP = sp;return; //@line 35 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 }
 __ZN10emscripten3val6globalEPKc($26,57539); //@line 31 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 (__ZN10emscripten3valaSEOS0_($25,$26)|0); //@line 31 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 __ZN10emscripten3valD2Ev($26); //@line 31 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 __ZNK10emscripten3val4new_IJEEES0_DpOT_($27,$25); //@line 34 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $78 = ((($28)) + 22696|0); //@line 34 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 (__ZN10emscripten3valaSEOS0_($78,$27)|0); //@line 34 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 __ZN10emscripten3valD2Ev($27); //@line 34 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 __ZN10emscripten3valD2Ev($25); //@line 35 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 STACKTOP = sp;return; //@line 35 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
}
function __ZN10emscripten3valC2IiEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4; //@line 337 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $7;
 $8 = $2; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __ZN10emscripten8internal12WireTypePackIJiEEC2EOi($5,$8); //@line 337 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 339 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = (__ZNK10emscripten8internal12WireTypePackIJiEEcvPKvEv($5)|0); //@line 340 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = (__emval_take_value(($9|0),($10|0))|0); //@line 338 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$6>>2] = $11; //@line 338 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 341 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten3val6globalEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2; //@line 325 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $4 = (__emval_get_global(($3|0))|0); //@line 325 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$4); //@line 325 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 325 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNK10emscripten3val2asIbJEEET_DpT0_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $3 = sp + 12|0;
 $5 = sp + 8|0;
 $1 = $0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0; //@line 488 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbEE8getTypesEv($2)|0); //@line 489 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = HEAP32[$8>>2]|0; //@line 489 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = (+__emval_as(($7|0),($9|0),($3|0))); //@line 487 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $4 = $10; //@line 487 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = HEAP32[$3>>2]|0; //@line 491 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE($5,$11); //@line 491 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $12 = $4; //@line 492 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $13 = (__ZN10emscripten8internal19fromGenericWireTypeIbEET_d($12)|0); //@line 492 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal17DestructorsRunnerD2Ev($5); //@line 493 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return ($13|0); //@line 493 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten3valaSEOS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0; //@line 366 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __emval_decref(($5|0)); //@line 366 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = $3; //@line 367 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = HEAP32[$6>>2]|0; //@line 367 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$4>>2] = $7; //@line 367 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $3; //@line 368 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$8>>2] = 0; //@line 368 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return ($4|0); //@line 369 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten3valD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0; //@line 362 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __emval_decref(($3|0)); //@line 362 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 363 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNK10emscripten3val4new_IJEEES0_DpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 __ZNK10emscripten3val12internalCallIPFPNS_8internal7_EM_VALES4_jPKPKvS6_EJEEES0_T_DpOT0_($0,$3,346); //@line 449 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 449 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNSt3__25dequeIN7Decoder9RawBufferENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__212__deque_baseIN7Decoder9RawBufferENS_9allocatorIS2_EEED2Ev($2); //@line 1187 "/usr/lib/emscripten/system/include/libcxx/deque"
 STACKTOP = sp;return; //@line 1187 "/usr/lib/emscripten/system/include/libcxx/deque"
}
function __ZNSt3__212__deque_baseIN7Decoder9RawBufferENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = $0;
 $16 = $13;
 __ZNSt3__212__deque_baseIN7Decoder9RawBufferENS_9allocatorIS2_EEE5clearEv($16); //@line 1105 "/usr/lib/emscripten/system/include/libcxx/deque"
 $12 = $16;
 $17 = $12;
 $18 = ((($17)) + 4|0); //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $19 = HEAP32[$18>>2]|0; //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $14 = $19; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/deque"
 $11 = $16;
 $20 = $11;
 $21 = ((($20)) + 8|0); //@line 83 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $22 = HEAP32[$21>>2]|0; //@line 83 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $15 = $22; //@line 1107 "/usr/lib/emscripten/system/include/libcxx/deque"
 while(1) {
  $23 = $14; //@line 1108 "/usr/lib/emscripten/system/include/libcxx/deque"
  $24 = $15; //@line 1108 "/usr/lib/emscripten/system/include/libcxx/deque"
  $25 = ($23|0)!=($24|0); //@line 1108 "/usr/lib/emscripten/system/include/libcxx/deque"
  if (!($25)) {
   break;
  }
  $10 = $16;
  $26 = $10;
  $27 = ((($26)) + 20|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/deque"
  $9 = $27;
  $28 = $9;
  $8 = $28;
  $29 = $8;
  $30 = $14; //@line 1109 "/usr/lib/emscripten/system/include/libcxx/deque"
  $31 = HEAP32[$30>>2]|0; //@line 1109 "/usr/lib/emscripten/system/include/libcxx/deque"
  $5 = $29;
  $6 = $31;
  $7 = 256;
  $32 = $5; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
  $33 = $6; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
  $34 = $7; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
  $2 = $32;
  $3 = $33;
  $4 = $34;
  $35 = $3; //@line 1796 "/usr/lib/emscripten/system/include/libcxx/memory"
  $1 = $35;
  $36 = $1; //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
  __ZdlPv($36); //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
  $37 = $14; //@line 1108 "/usr/lib/emscripten/system/include/libcxx/deque"
  $38 = ((($37)) + 4|0); //@line 1108 "/usr/lib/emscripten/system/include/libcxx/deque"
  $14 = $38; //@line 1108 "/usr/lib/emscripten/system/include/libcxx/deque"
 }
 __ZNSt3__214__split_bufferIPN7Decoder9RawBufferENS_9allocatorIS3_EEED2Ev($16); //@line 1110 "/usr/lib/emscripten/system/include/libcxx/deque"
 STACKTOP = sp;return; //@line 1110 "/usr/lib/emscripten/system/include/libcxx/deque"
}
function __ZNSt3__212__deque_baseIN7Decoder9RawBufferENS_9allocatorIS2_EEE5clearEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $6 = sp + 8|0;
 $9 = sp + 177|0;
 $26 = sp;
 $29 = sp + 176|0;
 $41 = sp + 24|0;
 $42 = sp + 16|0;
 $39 = $0;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 20|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/deque"
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $40 = $47; //@line 1166 "/usr/lib/emscripten/system/include/libcxx/deque"
 __ZNSt3__212__deque_baseIN7Decoder9RawBufferENS_9allocatorIS2_EEE5beginEv($41,$43); //@line 1167 "/usr/lib/emscripten/system/include/libcxx/deque"
 __ZNSt3__212__deque_baseIN7Decoder9RawBufferENS_9allocatorIS2_EEE3endEv($42,$43); //@line 1167 "/usr/lib/emscripten/system/include/libcxx/deque"
 while(1) {
  $34 = $41;
  $35 = $42;
  $48 = $34; //@line 409 "/usr/lib/emscripten/system/include/libcxx/deque"
  $49 = $35; //@line 409 "/usr/lib/emscripten/system/include/libcxx/deque"
  $32 = $48;
  $33 = $49;
  $50 = $32; //@line 405 "/usr/lib/emscripten/system/include/libcxx/deque"
  $51 = ((($50)) + 4|0); //@line 405 "/usr/lib/emscripten/system/include/libcxx/deque"
  $52 = HEAP32[$51>>2]|0; //@line 405 "/usr/lib/emscripten/system/include/libcxx/deque"
  $53 = $33; //@line 405 "/usr/lib/emscripten/system/include/libcxx/deque"
  $54 = ((($53)) + 4|0); //@line 405 "/usr/lib/emscripten/system/include/libcxx/deque"
  $55 = HEAP32[$54>>2]|0; //@line 405 "/usr/lib/emscripten/system/include/libcxx/deque"
  $56 = ($52|0)==($55|0); //@line 405 "/usr/lib/emscripten/system/include/libcxx/deque"
  $57 = $56 ^ 1; //@line 409 "/usr/lib/emscripten/system/include/libcxx/deque"
  if (!($57)) {
   break;
  }
  $58 = $40; //@line 1168 "/usr/lib/emscripten/system/include/libcxx/deque"
  $16 = $41;
  $59 = $16;
  $60 = ((($59)) + 4|0); //@line 309 "/usr/lib/emscripten/system/include/libcxx/deque"
  $61 = HEAP32[$60>>2]|0; //@line 309 "/usr/lib/emscripten/system/include/libcxx/deque"
  $1 = $61;
  $62 = $1; //@line 451 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $7 = $58;
  $8 = $62;
  $63 = $7; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/memory"
  $64 = $8; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $63;
  $5 = $64;
  $65 = $4; //@line 1727 "/usr/lib/emscripten/system/include/libcxx/memory"
  $66 = $5; //@line 1727 "/usr/lib/emscripten/system/include/libcxx/memory"
  $2 = $65;
  $3 = $66;
  $10 = $41;
  $67 = $10;
  $68 = ((($67)) + 4|0); //@line 314 "/usr/lib/emscripten/system/include/libcxx/deque"
  $69 = HEAP32[$68>>2]|0; //@line 314 "/usr/lib/emscripten/system/include/libcxx/deque"
  $70 = ((($69)) + 16|0); //@line 314 "/usr/lib/emscripten/system/include/libcxx/deque"
  HEAP32[$68>>2] = $70; //@line 314 "/usr/lib/emscripten/system/include/libcxx/deque"
  $71 = HEAP32[$67>>2]|0; //@line 314 "/usr/lib/emscripten/system/include/libcxx/deque"
  $72 = HEAP32[$71>>2]|0; //@line 314 "/usr/lib/emscripten/system/include/libcxx/deque"
  $73 = $70; //@line 314 "/usr/lib/emscripten/system/include/libcxx/deque"
  $74 = $72; //@line 314 "/usr/lib/emscripten/system/include/libcxx/deque"
  $75 = (($73) - ($74))|0; //@line 314 "/usr/lib/emscripten/system/include/libcxx/deque"
  $76 = (($75|0) / 16)&-1; //@line 314 "/usr/lib/emscripten/system/include/libcxx/deque"
  $77 = ($76|0)==(256); //@line 314 "/usr/lib/emscripten/system/include/libcxx/deque"
  if ($77) {
   $78 = HEAP32[$67>>2]|0; //@line 316 "/usr/lib/emscripten/system/include/libcxx/deque"
   $79 = ((($78)) + 4|0); //@line 316 "/usr/lib/emscripten/system/include/libcxx/deque"
   HEAP32[$67>>2] = $79; //@line 316 "/usr/lib/emscripten/system/include/libcxx/deque"
   $80 = HEAP32[$67>>2]|0; //@line 317 "/usr/lib/emscripten/system/include/libcxx/deque"
   $81 = HEAP32[$80>>2]|0; //@line 317 "/usr/lib/emscripten/system/include/libcxx/deque"
   $82 = ((($67)) + 4|0); //@line 317 "/usr/lib/emscripten/system/include/libcxx/deque"
   HEAP32[$82>>2] = $81; //@line 317 "/usr/lib/emscripten/system/include/libcxx/deque"
  }
 }
 $13 = $43;
 $83 = $13;
 $84 = ((($83)) + 20|0); //@line 958 "/usr/lib/emscripten/system/include/libcxx/deque"
 $12 = $84;
 $85 = $12;
 $11 = $85;
 $86 = $11;
 HEAP32[$86>>2] = 0; //@line 1169 "/usr/lib/emscripten/system/include/libcxx/deque"
 while(1) {
  $14 = $43;
  $87 = $14;
  $88 = ((($87)) + 8|0); //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $89 = HEAP32[$88>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $90 = ((($87)) + 4|0); //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $91 = HEAP32[$90>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $92 = $89; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $93 = $91; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $94 = (($92) - ($93))|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $95 = (($94|0) / 4)&-1; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $96 = ($95>>>0)>(2); //@line 1170 "/usr/lib/emscripten/system/include/libcxx/deque"
  if (!($96)) {
   break;
  }
  $97 = $40; //@line 1172 "/usr/lib/emscripten/system/include/libcxx/deque"
  $15 = $43;
  $98 = $15;
  $99 = ((($98)) + 4|0); //@line 95 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $100 = HEAP32[$99>>2]|0; //@line 95 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $101 = HEAP32[$100>>2]|0; //@line 1172 "/usr/lib/emscripten/system/include/libcxx/deque"
  $21 = $97;
  $22 = $101;
  $23 = 256;
  $102 = $21; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
  $103 = $22; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
  $104 = $23; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
  $18 = $102;
  $19 = $103;
  $20 = $104;
  $105 = $19; //@line 1796 "/usr/lib/emscripten/system/include/libcxx/memory"
  $17 = $105;
  $106 = $17; //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
  __ZdlPv($106); //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
  $30 = $43;
  $107 = $30;
  $108 = ((($107)) + 4|0); //@line 111 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $109 = HEAP32[$108>>2]|0; //@line 111 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $110 = ((($109)) + 4|0); //@line 111 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $27 = $107;
  $28 = $110;
  $111 = $27;
  $112 = $28; //@line 133 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
  $24 = $111;
  $25 = $112;
  $113 = $24;
  $114 = $25; //@line 287 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $115 = ((($113)) + 4|0); //@line 287 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  HEAP32[$115>>2] = $114; //@line 287 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 }
 $31 = $43;
 $116 = $31;
 $117 = ((($116)) + 8|0); //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $118 = HEAP32[$117>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $119 = ((($116)) + 4|0); //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $120 = HEAP32[$119>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $121 = $118; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $122 = $120; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $123 = (($121) - ($122))|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $124 = (($123|0) / 4)&-1; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 switch ($124|0) {
 case 1:  {
  $125 = ((($43)) + 16|0); //@line 1178 "/usr/lib/emscripten/system/include/libcxx/deque"
  HEAP32[$125>>2] = 128; //@line 1178 "/usr/lib/emscripten/system/include/libcxx/deque"
  STACKTOP = sp;return; //@line 1184 "/usr/lib/emscripten/system/include/libcxx/deque"
  break;
 }
 case 2:  {
  $126 = ((($43)) + 16|0); //@line 1181 "/usr/lib/emscripten/system/include/libcxx/deque"
  HEAP32[$126>>2] = 256; //@line 1181 "/usr/lib/emscripten/system/include/libcxx/deque"
  STACKTOP = sp;return; //@line 1184 "/usr/lib/emscripten/system/include/libcxx/deque"
  break;
 }
 default: {
  STACKTOP = sp;return; //@line 1184 "/usr/lib/emscripten/system/include/libcxx/deque"
 }
 }
}
function __ZNSt3__214__split_bufferIPN7Decoder9RawBufferENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 8|0;
 $22 = sp + 133|0;
 $29 = sp;
 $32 = sp + 132|0;
 $34 = $0;
 $35 = $34;
 $33 = $35;
 $36 = $33;
 $37 = ((($36)) + 4|0); //@line 88 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $38 = HEAP32[$37>>2]|0; //@line 88 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $30 = $36;
 $31 = $38;
 $39 = $30;
 $40 = $31; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0;
 $27 = $39;
 $28 = $40;
 $41 = $27;
 while(1) {
  $42 = $28; //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $43 = ((($41)) + 8|0); //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $44 = HEAP32[$43>>2]|0; //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $45 = ($42|0)!=($44|0); //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  if (!($45)) {
   break;
  }
  $26 = $41;
  $46 = $26;
  $47 = ((($46)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $25 = $47;
  $48 = $25;
  $24 = $48;
  $49 = $24;
  $50 = ((($41)) + 8|0); //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $51 = HEAP32[$50>>2]|0; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $52 = ((($51)) + -4|0); //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  HEAP32[$50>>2] = $52; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $23 = $52;
  $53 = $23; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $49;
  $21 = $53;
  $54 = $20; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/memory"
  $55 = $21; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $54;
  $18 = $55;
  $56 = $17; //@line 1727 "/usr/lib/emscripten/system/include/libcxx/memory"
  $57 = $18; //@line 1727 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $56;
  $16 = $57;
 }
 $58 = HEAP32[$35>>2]|0; //@line 342 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $59 = ($58|0)!=(0|0); //@line 342 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 if (!($59)) {
  STACKTOP = sp;return; //@line 344 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 }
 $14 = $35;
 $60 = $14;
 $61 = ((($60)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $13 = $61;
 $62 = $13;
 $12 = $62;
 $63 = $12;
 $64 = HEAP32[$35>>2]|0; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $4 = $35;
 $65 = $4;
 $3 = $65;
 $66 = $3;
 $67 = ((($66)) + 12|0); //@line 59 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $2 = $67;
 $68 = $2;
 $1 = $68;
 $69 = $1;
 $70 = HEAP32[$69>>2]|0; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $71 = HEAP32[$65>>2]|0; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $72 = $70; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $73 = $71; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $74 = (($72) - ($73))|0; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $75 = (($74|0) / 4)&-1; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $9 = $63;
 $10 = $64;
 $11 = $75;
 $76 = $9; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
 $77 = $10; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
 $78 = $11; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $76;
 $7 = $77;
 $8 = $78;
 $79 = $7; //@line 1796 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $79;
 $80 = $5; //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($80); //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
 STACKTOP = sp;return; //@line 344 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__212__deque_baseIN7Decoder9RawBufferENS_9allocatorIS2_EEE5beginEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $1;
 $9 = $7;
 $6 = $9;
 $10 = $6;
 $11 = ((($10)) + 4|0); //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $12 = HEAP32[$11>>2]|0; //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $13 = ((($9)) + 16|0); //@line 1061 "/usr/lib/emscripten/system/include/libcxx/deque"
 $14 = HEAP32[$13>>2]|0; //@line 1061 "/usr/lib/emscripten/system/include/libcxx/deque"
 $15 = (($14>>>0) / 256)&-1; //@line 1061 "/usr/lib/emscripten/system/include/libcxx/deque"
 $16 = (($12) + ($15<<2)|0); //@line 1061 "/usr/lib/emscripten/system/include/libcxx/deque"
 $8 = $16; //@line 1061 "/usr/lib/emscripten/system/include/libcxx/deque"
 $17 = $8; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/deque"
 $5 = $9;
 $18 = $5;
 $19 = ((($18)) + 8|0); //@line 90 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $20 = HEAP32[$19>>2]|0; //@line 90 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $21 = ((($18)) + 4|0); //@line 90 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $22 = HEAP32[$21>>2]|0; //@line 90 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $23 = ($20|0)==($22|0); //@line 90 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 if ($23) {
  $30 = 0;
 } else {
  $24 = $8; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/deque"
  $25 = HEAP32[$24>>2]|0; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/deque"
  $26 = ((($9)) + 16|0); //@line 1062 "/usr/lib/emscripten/system/include/libcxx/deque"
  $27 = HEAP32[$26>>2]|0; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/deque"
  $28 = (($27>>>0) % 256)&-1; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/deque"
  $29 = (($25) + ($28<<4)|0); //@line 1062 "/usr/lib/emscripten/system/include/libcxx/deque"
  $30 = $29;
 }
 $2 = $0;
 $3 = $17;
 $4 = $30;
 $31 = $2;
 $32 = $3; //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
 HEAP32[$31>>2] = $32; //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
 $33 = ((($31)) + 4|0); //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
 $34 = $4; //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
 HEAP32[$33>>2] = $34; //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
 STACKTOP = sp;return; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/deque"
}
function __ZNSt3__212__deque_baseIN7Decoder9RawBufferENS_9allocatorIS2_EEE3endEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = $1;
 $13 = $10;
 $9 = $13;
 $14 = $9;
 $15 = ((($14)) + 20|0); //@line 958 "/usr/lib/emscripten/system/include/libcxx/deque"
 $8 = $15;
 $16 = $8;
 $7 = $16;
 $17 = $7;
 $18 = HEAP32[$17>>2]|0; //@line 1077 "/usr/lib/emscripten/system/include/libcxx/deque"
 $19 = ((($13)) + 16|0); //@line 1077 "/usr/lib/emscripten/system/include/libcxx/deque"
 $20 = HEAP32[$19>>2]|0; //@line 1077 "/usr/lib/emscripten/system/include/libcxx/deque"
 $21 = (($18) + ($20))|0; //@line 1077 "/usr/lib/emscripten/system/include/libcxx/deque"
 $11 = $21; //@line 1077 "/usr/lib/emscripten/system/include/libcxx/deque"
 $6 = $13;
 $22 = $6;
 $23 = ((($22)) + 4|0); //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $24 = HEAP32[$23>>2]|0; //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $25 = $11; //@line 1078 "/usr/lib/emscripten/system/include/libcxx/deque"
 $26 = (($25>>>0) / 256)&-1; //@line 1078 "/usr/lib/emscripten/system/include/libcxx/deque"
 $27 = (($24) + ($26<<2)|0); //@line 1078 "/usr/lib/emscripten/system/include/libcxx/deque"
 $12 = $27; //@line 1078 "/usr/lib/emscripten/system/include/libcxx/deque"
 $28 = $12; //@line 1079 "/usr/lib/emscripten/system/include/libcxx/deque"
 $2 = $13;
 $29 = $2;
 $30 = ((($29)) + 8|0); //@line 90 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $31 = HEAP32[$30>>2]|0; //@line 90 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $32 = ((($29)) + 4|0); //@line 90 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $33 = HEAP32[$32>>2]|0; //@line 90 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $34 = ($31|0)==($33|0); //@line 90 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 if ($34) {
  $40 = 0;
  $3 = $0;
  $4 = $28;
  $5 = $40;
  $41 = $3;
  $42 = $4; //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
  HEAP32[$41>>2] = $42; //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
  $43 = ((($41)) + 4|0); //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
  $44 = $5; //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
  HEAP32[$43>>2] = $44; //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
  STACKTOP = sp;return; //@line 1079 "/usr/lib/emscripten/system/include/libcxx/deque"
 }
 $35 = $12; //@line 1079 "/usr/lib/emscripten/system/include/libcxx/deque"
 $36 = HEAP32[$35>>2]|0; //@line 1079 "/usr/lib/emscripten/system/include/libcxx/deque"
 $37 = $11; //@line 1079 "/usr/lib/emscripten/system/include/libcxx/deque"
 $38 = (($37>>>0) % 256)&-1; //@line 1079 "/usr/lib/emscripten/system/include/libcxx/deque"
 $39 = (($36) + ($38<<4)|0); //@line 1079 "/usr/lib/emscripten/system/include/libcxx/deque"
 $40 = $39;
 $3 = $0;
 $4 = $28;
 $5 = $40;
 $41 = $3;
 $42 = $4; //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
 HEAP32[$41>>2] = $42; //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
 $43 = ((($41)) + 4|0); //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
 $44 = $5; //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
 HEAP32[$43>>2] = $44; //@line 430 "/usr/lib/emscripten/system/include/libcxx/deque"
 STACKTOP = sp;return; //@line 1079 "/usr/lib/emscripten/system/include/libcxx/deque"
}
function __ZNK10emscripten3val12internalCallIPFPNS_8internal7_EM_VALES4_jPKPKvS6_EJEEES0_T_DpOT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $6 = sp;
 $3 = $1;
 $4 = $2;
 $7 = $3;
 __ZN10emscripten8internal12WireTypePackIJEEC2Ev($6); //@line 542 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $4; //@line 544 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = HEAP32[$7>>2]|0; //@line 545 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJEE8getCountEv($5)|0); //@line 546 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJEE8getTypesEv($5)|0); //@line 547 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $12 = (__ZNK10emscripten8internal12WireTypePackIJEEcvPKvEv($6)|0); //@line 548 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $13 = (FUNCTION_TABLE_iiiii[$8 & 511]($9,$10,$11,$12)|0); //@line 544 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$13); //@line 543 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 543 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal12WireTypePackIJEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $1 = $4;
 $5 = $1;
 HEAP32[$3>>2] = $5; //@line 235 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($3); //@line 236 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 237 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 0; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WireTypePackIJEEcvPKvEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 STACKTOP = sp;return ($4|0); //@line 240 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 527 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$4>>2] = $5; //@line 527 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 528 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (69312|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return; //@line 224 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 136 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$4>>2] = $5; //@line 136 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 137 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal19fromGenericWireTypeIbEET_d($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1; //@line 166 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $4 = (__ZN10emscripten8internal24GenericWireTypeConverterIbE4fromEd($3)|0); //@line 166 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = $4&1; //@line 166 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $5; //@line 166 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = $2; //@line 167 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = $6&1; //@line 167 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = (__ZN10emscripten8internal11BindingTypeIbE12fromWireTypeEb($7)|0); //@line 167 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return ($8|0); //@line 167 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal17DestructorsRunnerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0; //@line 139 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __emval_run_destructors(($3|0)); //@line 139 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 140 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal24GenericWireTypeConverterIbE4fromEd($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 152 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = $2 != 0.0; //@line 152 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return ($3|0); //@line 152 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal11BindingTypeIbE12fromWireTypeEb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0&1;
 $1 = $2;
 $3 = $1; //@line 283 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $4 = $3&1; //@line 283 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($4|0); //@line 283 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52312|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal12WireTypePackIJiEEC2EOi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $7 = $0;
 $8 = $1;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 HEAP32[$9>>2] = $11; //@line 235 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $12 = $8; //@line 236 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $12;
 $13 = $2; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $4 = $9;
 $5 = $13;
 $14 = $4; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $15 = $5; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = $15;
 $16 = $3; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $17 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($16)|0); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($14,$17); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $18 = $4; //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($18); //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 237 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WireTypePackIJiEEcvPKvEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 STACKTOP = sp;return ($4|0); //@line 240 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52200|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 264 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $3 = HEAP32[$2>>2]|0; //@line 264 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($3|0); //@line 264 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 219 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = $2; //@line 219 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = HEAP32[$5>>2]|0; //@line 219 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$6>>2] = $4; //@line 219 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = $2; //@line 220 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = HEAP32[$7>>2]|0; //@line 220 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = ((($8)) + 8|0); //@line 220 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$7>>2] = $9; //@line 220 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 221 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN7DecoderD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 22696|0); //@line 39 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 __ZNK10emscripten3val4callIvJEEET_PKcDpOT0_($3,57558); //@line 39 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $4 = ((($2)) + 13364|0); //@line 42 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 _mad_stream_finish($4); //@line 42 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $5 = ((($2)) + 13428|0); //@line 43 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 _mad_frame_finish($5); //@line 43 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $6 = ((($2)) + 20|0); //@line 45 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $7 = HEAP32[$6>>2]|0; //@line 45 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $8 = ($7|0)==(0|0); //@line 45 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 if (!($8)) {
  __ZdaPv($7); //@line 45 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 }
 $9 = ((($2)) + 22700|0); //@line 46 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 __ZNSt3__25dequeIN7Decoder9RawBufferENS_9allocatorIS2_EEED2Ev($9); //@line 46 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $10 = ((($2)) + 22696|0); //@line 46 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 __ZN10emscripten3valD2Ev($10); //@line 46 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 STACKTOP = sp;return; //@line 46 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
}
function __ZNK10emscripten3val4callIvJEEET_PKcDpOT0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0; //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = $3; //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal12MethodCallerIvJEE4callEPNS0_7_EM_VALEPKc($5,$6); //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal12MethodCallerIvJEE4callEPNS0_7_EM_VALEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = (__ZN10emscripten8internal9SignatureIvJEE17get_method_callerEv()|0); //@line 268 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $4 = $6; //@line 268 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal12WireTypePackIJEEC2Ev($5); //@line 270 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = $4; //@line 272 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $2; //@line 273 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = $3; //@line 274 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = (__ZNK10emscripten8internal12WireTypePackIJEEcvPKvEv($5)|0); //@line 275 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __emval_call_void_method(($7|0),($8|0),($9|0),($10|0)); //@line 271 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 276 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal9SignatureIvJEE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[68624]|0; //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $1 = ($0<<24>>24)==(0); //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
 if ($1) {
  $2 = (___cxa_guard_acquire(68624)|0); //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
  $3 = ($2|0)!=(0); //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
  if ($3) {
   $4 = (__ZN10emscripten8internal9SignatureIvJEE18init_method_callerEv()|0); //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
   HEAP32[17328] = $4; //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
  }
 }
 $5 = HEAP32[17328]|0; //@line 123 "/usr/lib/emscripten/system/include/emscripten/val.h"
 return ($5|0); //@line 123 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal9SignatureIvJEE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv($0)|0); //@line 129 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv($0)|0); //@line 129 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = (__emval_get_method_caller(($1|0),($2|0))|0); //@line 129 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return ($3|0); //@line 129 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52316|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN7Decoder11addFragmentElj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp + 16|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $13 = $5;
 $14 = $7; //@line 50 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $15 = ($14>>>0)<(5120); //@line 50 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 if ($15) {
  (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,57564)|0); //@line 51 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  STACKTOP = sp;return; //@line 91 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 }
 $16 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,57638)|0); //@line 54 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $17 = $7; //@line 54 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $18 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj($16,$17)|0); //@line 54 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $19 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($18,57659)|0); //@line 54 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $3 = $19;
 $4 = 347;
 $20 = $3;
 $21 = $4; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
 (FUNCTION_TABLE_ii[$21 & 1023]($20)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $22 = $6; //@line 55 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $23 = $22; //@line 55 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $8 = $23; //@line 55 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $24 = $8; //@line 56 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$9>>2] = $24; //@line 56 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $25 = ((($9)) + 4|0); //@line 56 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $26 = $7; //@line 56 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$25>>2] = $26; //@line 56 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $27 = ((($9)) + 8|0); //@line 56 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$27>>2] = 0; //@line 56 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $28 = ((($9)) + 12|0); //@line 56 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$28>>2] = 0; //@line 56 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $29 = ((($13)) + 22700|0); //@line 57 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 __ZNSt3__25dequeIN7Decoder9RawBufferENS_9allocatorIS2_EEE9push_backERKS2_($29,$9); //@line 57 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $30 = HEAP32[$13>>2]|0; //@line 59 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 switch ($30|0) {
 case 0:  {
  $31 = ((($13)) + 13364|0); //@line 61 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $32 = $8; //@line 61 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $33 = $7; //@line 61 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  _mad_stream_buffer($31,$32,$33); //@line 61 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $10 = 0; //@line 63 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  while(1) {
   $34 = $10; //@line 63 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $35 = ($34|0)<(5120); //@line 63 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   if (!($35)) {
    break;
   }
   $36 = $8; //@line 64 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $37 = $7; //@line 64 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $38 = (($37) - 5120)|0; //@line 64 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $39 = $10; //@line 64 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $40 = (($38) + ($39))|0; //@line 64 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $41 = (($36) + ($40)|0); //@line 64 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $42 = HEAP8[$41>>0]|0; //@line 64 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $43 = ((($13)) + 20|0); //@line 64 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $44 = HEAP32[$43>>2]|0; //@line 64 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $45 = $10; //@line 64 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $46 = (($44) + ($45)|0); //@line 64 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   HEAP8[$46>>0] = $42; //@line 64 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $47 = $10; //@line 63 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $48 = (($47) + 1)|0; //@line 63 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $10 = $48; //@line 63 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  }
  HEAP32[$13>>2] = 1; //@line 67 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  __ZN7Decoder17prepareNextBufferEv($13); //@line 68 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  STACKTOP = sp;return; //@line 91 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  break;
 }
 case 1:  {
  $11 = 0; //@line 71 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  while(1) {
   $49 = $11; //@line 71 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $50 = ($49|0)<(5120); //@line 71 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   if (!($50)) {
    break;
   }
   $51 = $8; //@line 72 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $52 = $11; //@line 72 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $53 = (($51) + ($52)|0); //@line 72 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $54 = HEAP8[$53>>0]|0; //@line 72 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $55 = ((($13)) + 20|0); //@line 72 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $56 = HEAP32[$55>>2]|0; //@line 72 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $57 = $11; //@line 72 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $58 = (5120 + ($57))|0; //@line 72 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $59 = (($56) + ($58)|0); //@line 72 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   HEAP8[$59>>0] = $54; //@line 72 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $60 = $11; //@line 71 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $61 = (($60) + 1)|0; //@line 71 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $11 = $61; //@line 71 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  }
  HEAP32[$13>>2] = 2; //@line 75 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  STACKTOP = sp;return; //@line 91 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  break;
 }
 case 3:  {
  $12 = 0; //@line 80 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  while(1) {
   $62 = $12; //@line 80 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $63 = ($62|0)<(5120); //@line 80 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   if (!($63)) {
    break;
   }
   $64 = $8; //@line 81 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $65 = $12; //@line 81 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $66 = (($64) + ($65)|0); //@line 81 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $67 = HEAP8[$66>>0]|0; //@line 81 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $68 = ((($13)) + 20|0); //@line 81 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $69 = HEAP32[$68>>2]|0; //@line 81 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $70 = $12; //@line 81 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $71 = (5120 + ($70))|0; //@line 81 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $72 = (($69) + ($71)|0); //@line 81 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   HEAP8[$72>>0] = $67; //@line 81 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $73 = $12; //@line 80 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $74 = (($73) + 1)|0; //@line 80 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $12 = $74; //@line 80 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  }
  HEAP32[$13>>2] = 4; //@line 84 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $75 = ((($13)) + 36|0); //@line 85 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  HEAP8[$75>>0] = 0; //@line 85 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  __ZN7Decoder17prepareNextBufferEv($13); //@line 86 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  STACKTOP = sp;return; //@line 91 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  break;
 }
 default: {
  STACKTOP = sp;return; //@line 91 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 }
 }
}
function __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2; //@line 864 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $5 = $3; //@line 864 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $6 = $3; //@line 864 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $7 = (__ZNSt3__211char_traitsIcE6lengthEPKc($6)|0); //@line 864 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $8 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($4,$5,$7)|0); //@line 864 "/usr/lib/emscripten/system/include/libcxx/ostream"
 STACKTOP = sp;return ($8|0); //@line 864 "/usr/lib/emscripten/system/include/libcxx/ostream"
}
function __ZNSt3__24endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 4|0;
 $7 = $0;
 $8 = $7; //@line 1001 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $9 = $7; //@line 1001 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $10 = HEAP32[$9>>2]|0; //@line 1001 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $11 = ((($10)) + -12|0); //@line 1001 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $12 = HEAP32[$11>>2]|0; //@line 1001 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $13 = (($9) + ($12)|0); //@line 1001 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $4 = $13;
 $5 = 10;
 $14 = $4;
 __ZNKSt3__28ios_base6getlocEv($6,$14); //@line 756 "/usr/lib/emscripten/system/include/libcxx/ios"
 $3 = $6;
 $15 = $3; //@line 238 "/usr/lib/emscripten/system/include/libcxx/__locale"
 $16 = (__ZNKSt3__26locale9use_facetERNS0_2idE($15,70992)|0); //@line 238 "/usr/lib/emscripten/system/include/libcxx/__locale"
 $17 = $5; //@line 756 "/usr/lib/emscripten/system/include/libcxx/ios"
 $1 = $16;
 $2 = $17;
 $18 = $1;
 $19 = HEAP32[$18>>2]|0; //@line 653 "/usr/lib/emscripten/system/include/libcxx/__locale"
 $20 = ((($19)) + 28|0); //@line 653 "/usr/lib/emscripten/system/include/libcxx/__locale"
 $21 = HEAP32[$20>>2]|0; //@line 653 "/usr/lib/emscripten/system/include/libcxx/__locale"
 $22 = $2; //@line 653 "/usr/lib/emscripten/system/include/libcxx/__locale"
 $23 = (FUNCTION_TABLE_iii[$21 & 511]($18,$22)|0); //@line 653 "/usr/lib/emscripten/system/include/libcxx/__locale"
 __ZNSt3__26localeD2Ev($6); //@line 756 "/usr/lib/emscripten/system/include/libcxx/ios"
 (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($8,$23)|0); //@line 1001 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $24 = $7; //@line 1002 "/usr/lib/emscripten/system/include/libcxx/ostream"
 (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($24)|0); //@line 1002 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $25 = $7; //@line 1003 "/usr/lib/emscripten/system/include/libcxx/ostream"
 STACKTOP = sp;return ($25|0); //@line 1003 "/usr/lib/emscripten/system/include/libcxx/ostream"
}
function __ZNSt3__25dequeIN7Decoder9RawBufferENS_9allocatorIS2_EEE9push_backERKS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp;
 $24 = sp + 136|0;
 $34 = sp + 8|0;
 $31 = $0;
 $32 = $1;
 $35 = $31;
 $30 = $35;
 $36 = $30;
 $37 = ((($36)) + 20|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/deque"
 $29 = $37;
 $38 = $29;
 $28 = $38;
 $39 = $28;
 $33 = $39; //@line 1797 "/usr/lib/emscripten/system/include/libcxx/deque"
 $8 = $35;
 $40 = $8;
 $7 = $40;
 $41 = $7;
 $6 = $41;
 $42 = $6;
 $43 = ((($42)) + 8|0); //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $44 = HEAP32[$43>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $45 = ((($42)) + 4|0); //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $46 = HEAP32[$45>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $47 = $44; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $48 = $46; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $49 = (($47) - ($48))|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $50 = (($49|0) / 4)&-1; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $51 = ($50|0)==(0); //@line 1402 "/usr/lib/emscripten/system/include/libcxx/deque"
 if ($51) {
  $72 = 0;
 } else {
  $5 = $41;
  $52 = $5;
  $53 = ((($52)) + 8|0); //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $54 = HEAP32[$53>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $55 = ((($52)) + 4|0); //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $56 = HEAP32[$55>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $57 = $54; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $58 = $56; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $59 = (($57) - ($58))|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $60 = (($59|0) / 4)&-1; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $61 = $60<<8; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/deque"
  $62 = (($61) - 1)|0; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/deque"
  $72 = $62;
 }
 $63 = ((($40)) + 16|0); //@line 1412 "/usr/lib/emscripten/system/include/libcxx/deque"
 $64 = HEAP32[$63>>2]|0; //@line 1412 "/usr/lib/emscripten/system/include/libcxx/deque"
 $4 = $40;
 $65 = $4;
 $66 = ((($65)) + 20|0); //@line 960 "/usr/lib/emscripten/system/include/libcxx/deque"
 $3 = $66;
 $67 = $3;
 $2 = $67;
 $68 = $2;
 $69 = HEAP32[$68>>2]|0; //@line 1412 "/usr/lib/emscripten/system/include/libcxx/deque"
 $70 = (($64) + ($69))|0; //@line 1412 "/usr/lib/emscripten/system/include/libcxx/deque"
 $71 = (($72) - ($70))|0; //@line 1412 "/usr/lib/emscripten/system/include/libcxx/deque"
 $73 = ($71|0)==(0); //@line 1798 "/usr/lib/emscripten/system/include/libcxx/deque"
 if ($73) {
  __ZNSt3__25dequeIN7Decoder9RawBufferENS_9allocatorIS2_EEE19__add_back_capacityEv($35); //@line 1799 "/usr/lib/emscripten/system/include/libcxx/deque"
 }
 $74 = $33; //@line 1801 "/usr/lib/emscripten/system/include/libcxx/deque"
 __ZNSt3__212__deque_baseIN7Decoder9RawBufferENS_9allocatorIS2_EEE3endEv($34,$35); //@line 1801 "/usr/lib/emscripten/system/include/libcxx/deque"
 $9 = $34;
 $75 = $9;
 $76 = ((($75)) + 4|0); //@line 309 "/usr/lib/emscripten/system/include/libcxx/deque"
 $77 = HEAP32[$76>>2]|0; //@line 309 "/usr/lib/emscripten/system/include/libcxx/deque"
 $10 = $77;
 $78 = $10; //@line 451 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $79 = $32; //@line 1801 "/usr/lib/emscripten/system/include/libcxx/deque"
 $21 = $74;
 $22 = $78;
 $23 = $79;
 $80 = $21; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $81 = $22; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $82 = $23; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $20 = $82;
 $83 = $20; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 ;HEAP8[$19>>0]=HEAP8[$24>>0]|0;
 $16 = $80;
 $17 = $81;
 $18 = $83;
 $84 = $16; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $85 = $17; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $86 = $18; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $15 = $86;
 $87 = $15; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $12 = $84;
 $13 = $85;
 $14 = $87;
 $88 = $13; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $89 = $14; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $11 = $89;
 $90 = $11; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 ;HEAP32[$88>>2]=HEAP32[$90>>2]|0;HEAP32[$88+4>>2]=HEAP32[$90+4>>2]|0;HEAP32[$88+8>>2]=HEAP32[$90+8>>2]|0;HEAP32[$88+12>>2]=HEAP32[$90+12>>2]|0; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $27 = $35;
 $91 = $27;
 $92 = ((($91)) + 20|0); //@line 958 "/usr/lib/emscripten/system/include/libcxx/deque"
 $26 = $92;
 $93 = $26;
 $25 = $93;
 $94 = $25;
 $95 = HEAP32[$94>>2]|0; //@line 1802 "/usr/lib/emscripten/system/include/libcxx/deque"
 $96 = (($95) + 1)|0; //@line 1802 "/usr/lib/emscripten/system/include/libcxx/deque"
 HEAP32[$94>>2] = $96; //@line 1802 "/usr/lib/emscripten/system/include/libcxx/deque"
 STACKTOP = sp;return; //@line 1803 "/usr/lib/emscripten/system/include/libcxx/deque"
}
function __ZN7Decoder17prepareNextBufferEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 while(1) {
  $2 = 0; //@line 253 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  (__ZN7Decoder10framesLeftEj($3,-1)|0); //@line 254 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $4 = ((($3)) + 12|0); //@line 255 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $5 = HEAP32[$4>>2]|0; //@line 255 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $6 = ($5|0)==(0); //@line 255 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  if ($6) {
   $7 = HEAP32[$3>>2]|0; //@line 255 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $8 = ($7|0)!=(0); //@line 255 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   if ($8) {
    $9 = HEAP32[$3>>2]|0; //@line 255 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $10 = ($9|0)!=(3); //@line 255 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    if ($10) {
     __ZN7Decoder10pullBufferEv($3); //@line 256 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     __ZN7Decoder12changeBufferEv($3); //@line 257 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $2 = 1; //@line 258 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    }
   }
  }
  $11 = $2; //@line 260 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $12 = $11&1; //@line 260 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  if (!($12)) {
   break;
  }
 }
 STACKTOP = sp;return; //@line 261 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
}
function __ZN7Decoder10framesLeftEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $7 = sp;
 $10 = sp + 168|0;
 $17 = sp + 112|0;
 $18 = sp + 48|0;
 $19 = sp + 4|0;
 $16 = $0;
 HEAP32[$17>>2] = $1;
 $20 = $16;
 $21 = HEAP32[$20>>2]|0; //@line 155 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $22 = ($21|0)==(0); //@line 155 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 if (!($22)) {
  $23 = HEAP32[$20>>2]|0; //@line 155 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $24 = ($23|0)==(3); //@line 155 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  if (!($24)) {
   $25 = ((($20)) + 36|0); //@line 159 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $26 = HEAP8[$25>>0]|0; //@line 159 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $27 = $26&1; //@line 159 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $28 = $27&1; //@line 159 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $29 = ($28|0)==(0); //@line 159 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   if ($29) {
    __ZN7Decoder15initializeProbeER10mad_stream($20,$18); //@line 162 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    _mad_header_init($19); //@line 163 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    while(1) {
     $30 = ((($20)) + 12|0); //@line 165 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $31 = HEAP32[$30>>2]|0; //@line 165 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $32 = HEAP32[$17>>2]|0; //@line 165 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $33 = ($31>>>0)<($32>>>0); //@line 165 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     if (!($33)) {
      break;
     }
     $34 = (_mad_header_decode($19,$18)|0); //@line 166 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $35 = ($34|0)==(0); //@line 166 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     if ($35) {
      $36 = ((($20)) + 4|0); //@line 167 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $37 = HEAP32[$36>>2]|0; //@line 167 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $38 = ($37|0)==(0); //@line 167 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      if ($38) {
       $39 = ((($19)) + 20|0); //@line 168 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $40 = HEAP32[$39>>2]|0; //@line 168 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $41 = ((($20)) + 4|0); //@line 168 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       HEAP32[$41>>2] = $40; //@line 168 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $42 = ((($19)) + 4|0); //@line 169 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $43 = HEAP32[$42>>2]|0; //@line 169 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $44 = ($43|0)!=(0); //@line 169 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $45 = $44 ? 2 : 1; //@line 169 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $46 = $45&255; //@line 169 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $47 = ((($20)) + 8|0); //@line 169 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       HEAP8[$47>>0] = $46; //@line 169 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $48 = HEAP32[$19>>2]|0; //@line 170 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $49 = ($48|0)==(1); //@line 170 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       if ($49) {
        $59 = 12;
       } else {
        $50 = HEAP32[$19>>2]|0; //@line 170 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
        $51 = ($50|0)==(3); //@line 170 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
        if ($51) {
         $52 = ((($19)) + 28|0); //@line 170 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
         $53 = HEAP32[$52>>2]|0; //@line 170 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
         $54 = $53 & 4096; //@line 170 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
         $55 = ($54|0)!=(0); //@line 170 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
         $57 = $55;
        } else {
         $57 = 0;
        }
        $56 = $57 ? 18 : 36; //@line 170 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
        $59 = $56;
       }
       $58 = $59<<5; //@line 170 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $60 = $58&65535; //@line 170 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $61 = ((($20)) + 16|0); //@line 170 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       HEAP16[$61>>1] = $60; //@line 170 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      } else {
       $62 = ((($20)) + 4|0); //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $63 = HEAP32[$62>>2]|0; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $64 = ((($19)) + 20|0); //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $65 = HEAP32[$64>>2]|0; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $66 = ($63|0)!=($65|0); //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       if ($66) {
        break;
       }
       $67 = ((($20)) + 8|0); //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $68 = HEAP8[$67>>0]|0; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $69 = $68&255; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $70 = ((($19)) + 4|0); //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $71 = HEAP32[$70>>2]|0; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $72 = ($71|0)!=(0); //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $73 = $72 ? 2 : 1; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $74 = ($69|0)!=($73|0); //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       if ($74) {
        break;
       }
       $75 = ((($20)) + 16|0); //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $76 = HEAP16[$75>>1]|0; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $77 = $76&65535; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $78 = HEAP32[$19>>2]|0; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $79 = ($78|0)==(1); //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       if ($79) {
        $89 = 12;
       } else {
        $80 = HEAP32[$19>>2]|0; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
        $81 = ($80|0)==(3); //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
        if ($81) {
         $82 = ((($19)) + 28|0); //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
         $83 = HEAP32[$82>>2]|0; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
         $84 = $83 & 4096; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
         $85 = ($84|0)!=(0); //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
         $87 = $85;
        } else {
         $87 = 0;
        }
        $86 = $87 ? 18 : 36; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
        $89 = $86;
       }
       $88 = $89<<5; //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $90 = ($77|0)!=($88|0); //@line 172 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       if ($90) {
        break;
       }
      }
      $91 = ((($18)) + 24|0); //@line 176 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $92 = HEAP32[$91>>2]|0; //@line 176 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $93 = ((($18)) + 20|0); //@line 176 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $94 = HEAP32[$93>>2]|0; //@line 176 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $95 = ($92>>>0)>($94>>>0); //@line 176 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      if ($95) {
       $96 = ((($20)) + 12|0); //@line 177 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $97 = HEAP32[$96>>2]|0; //@line 177 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $98 = (($97) + 1)|0; //@line 177 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       HEAP32[$96>>2] = $98; //@line 177 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      }
     } else {
      $99 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,58061)|0); //@line 180 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $100 = (_mad_stream_errorstr($18)|0); //@line 180 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $101 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($99,$100)|0); //@line 180 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $13 = $101;
      $14 = 347;
      $102 = $13;
      $103 = $14; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
      (FUNCTION_TABLE_ii[$103 & 1023]($102)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
      $104 = ((($18)) + 60|0); //@line 181 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $105 = HEAP32[$104>>2]|0; //@line 181 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $106 = $105 & 65280; //@line 181 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $107 = ($106|0)!=(0); //@line 181 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      if (!($107)) {
       break;
      }
     }
    }
    $108 = ((($18)) + 24|0); //@line 187 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $109 = HEAP32[$108>>2]|0; //@line 187 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $110 = ((($20)) + 24|0); //@line 187 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    HEAP32[$110>>2] = $109; //@line 187 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $111 = ((($18)) + 20|0); //@line 188 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $112 = HEAP32[$111>>2]|0; //@line 188 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $113 = ((($20)) + 28|0); //@line 188 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    HEAP32[$113>>2] = $112; //@line 188 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $114 = ((($18)) + 60|0); //@line 189 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $115 = HEAP32[$114>>2]|0; //@line 189 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $116 = ((($20)) + 32|0); //@line 189 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    HEAP32[$116>>2] = $115; //@line 189 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    _mad_stream_finish($18); //@line 191 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $117 = ((($20)) + 12|0); //@line 192 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $118 = HEAP32[$117>>2]|0; //@line 192 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $119 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj(70120,$118)|0); //@line 192 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $120 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($119,58080)|0); //@line 192 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    $11 = $120;
    $12 = 347;
    $121 = $11;
    $122 = $12; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
    (FUNCTION_TABLE_ii[$122 & 1023]($121)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
    $123 = ((($20)) + 36|0); //@line 193 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
    HEAP8[$123>>0] = 1; //@line 193 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   }
   $124 = ((($20)) + 12|0); //@line 196 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $8 = $124;
   $9 = $17;
   $125 = $8; //@line 2654 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $126 = $9; //@line 2654 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   ;HEAP8[$7>>0]=HEAP8[$10>>0]|0;
   $5 = $125;
   $6 = $126;
   $127 = $6; //@line 2646 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $128 = $5; //@line 2646 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $2 = $7;
   $3 = $127;
   $4 = $128;
   $129 = $3; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $130 = HEAP32[$129>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $131 = $4; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $132 = HEAP32[$131>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $133 = ($130>>>0)<($132>>>0); //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $134 = $6; //@line 2646 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $135 = $5; //@line 2646 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $136 = $133 ? $134 : $135; //@line 2646 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $137 = HEAP32[$136>>2]|0; //@line 196 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $15 = $137; //@line 196 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $138 = $15; //@line 197 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   STACKTOP = sp;return ($138|0); //@line 197 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  }
 }
 $15 = 0; //@line 156 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $138 = $15; //@line 197 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 STACKTOP = sp;return ($138|0); //@line 197 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
}
function __ZN7Decoder10pullBufferEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $3;
 $5 = ((($4)) + 36|0); //@line 201 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $6 = HEAP8[$5>>0]|0; //@line 201 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $7 = $6&1; //@line 201 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $8 = $7&1; //@line 201 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $9 = ($8|0)==(0); //@line 201 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 if ($9) {
  $10 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,58033)|0); //@line 202 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $1 = $10;
  $2 = 347;
  $11 = $1;
  $12 = $2; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
  (FUNCTION_TABLE_ii[$12 & 1023]($11)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
 }
 $13 = ((($4)) + 28|0); //@line 204 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $14 = HEAP32[$13>>2]|0; //@line 204 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $15 = ((($4)) + 13364|0); //@line 204 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $16 = ((($15)) + 20|0); //@line 204 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$16>>2] = $14; //@line 204 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $17 = ((($4)) + 24|0); //@line 205 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $18 = HEAP32[$17>>2]|0; //@line 205 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $19 = ((($4)) + 13364|0); //@line 205 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $20 = ((($19)) + 24|0); //@line 205 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$20>>2] = $18; //@line 205 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $21 = ((($4)) + 32|0); //@line 206 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $22 = HEAP32[$21>>2]|0; //@line 206 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $23 = ((($4)) + 13364|0); //@line 206 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $24 = ((($23)) + 60|0); //@line 206 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$24>>2] = $22; //@line 206 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 STACKTOP = sp;return; //@line 207 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
}
function __ZN7Decoder12changeBufferEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $35 = $0;
 $38 = $35;
 $39 = HEAP32[$38>>2]|0; //@line 212 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 switch ($39|0) {
 case 0:  {
  $40 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,57671)|0); //@line 214 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $33 = $40;
  $34 = 347;
  $41 = $33;
  $42 = $34; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
  (FUNCTION_TABLE_ii[$42 & 1023]($41)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
  break;
 }
 case 1:  {
  break;
 }
 case 2:  {
  __ZN7Decoder12switchToGlueEv($38); //@line 220 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  HEAP32[$38>>2] = 4; //@line 221 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $189 = ((($38)) + 36|0); //@line 246 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  HEAP8[$189>>0] = 0; //@line 246 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  STACKTOP = sp;return; //@line 247 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  break;
 }
 case 3:  {
  $43 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,57724)|0); //@line 224 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $31 = $43;
  $32 = 347;
  $44 = $31;
  $45 = $32; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
  (FUNCTION_TABLE_ii[$45 & 1023]($44)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
  $189 = ((($38)) + 36|0); //@line 246 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  HEAP8[$189>>0] = 0; //@line 246 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  STACKTOP = sp;return; //@line 247 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  break;
 }
 case 4:  {
  $46 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,57782)|0); //@line 227 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $47 = ((($38)) + 22700|0); //@line 227 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $28 = $47;
  $29 = 0;
  $48 = $28;
  $49 = ((($48)) + 16|0); //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $50 = HEAP32[$49>>2]|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $51 = $29; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $52 = (($50) + ($51))|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $30 = $52; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $27 = $48;
  $53 = $27;
  $54 = ((($53)) + 4|0); //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $55 = HEAP32[$54>>2]|0; //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $56 = $30; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $57 = (($56>>>0) / 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $58 = (($55) + ($57<<2)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $59 = HEAP32[$58>>2]|0; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $60 = $30; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $61 = (($60>>>0) % 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $62 = (($59) + ($61<<4)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $63 = ((($62)) + 4|0); //@line 227 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $64 = HEAP32[$63>>2]|0; //@line 227 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $65 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj($46,$64)|0); //@line 227 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $66 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($65,57659)|0); //@line 227 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $9 = $66;
  $10 = 347;
  $67 = $9;
  $68 = $10; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
  (FUNCTION_TABLE_ii[$68 & 1023]($67)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
  $69 = ((($38)) + 22700|0); //@line 229 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $6 = $69;
  $7 = 0;
  $70 = $6;
  $71 = ((($70)) + 16|0); //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $72 = HEAP32[$71>>2]|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $73 = $7; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $74 = (($72) + ($73))|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $8 = $74; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $5 = $70;
  $75 = $5;
  $76 = ((($75)) + 4|0); //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $77 = HEAP32[$76>>2]|0; //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $78 = $8; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $79 = (($78>>>0) / 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $80 = (($77) + ($79<<2)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $81 = HEAP32[$80>>2]|0; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $82 = $8; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $83 = (($82>>>0) % 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $84 = (($81) + ($83<<4)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $85 = HEAP32[$84>>2]|0; //@line 229 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $86 = ((($38)) + 22700|0); //@line 229 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $2 = $86;
  $3 = 0;
  $87 = $2;
  $88 = ((($87)) + 16|0); //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $89 = HEAP32[$88>>2]|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $90 = $3; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $91 = (($89) + ($90))|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $4 = $91; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
  $1 = $87;
  $92 = $1;
  $93 = ((($92)) + 4|0); //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $94 = HEAP32[$93>>2]|0; //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $95 = $4; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $96 = (($95>>>0) / 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $97 = (($94) + ($96<<2)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $98 = HEAP32[$97>>2]|0; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $99 = $4; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $100 = (($99>>>0) % 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $101 = (($98) + ($100<<4)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
  $102 = ((($101)) + 4|0); //@line 229 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $103 = HEAP32[$102>>2]|0; //@line 229 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  __ZN7Decoder12switchBufferEPhj($38,$85,$103); //@line 229 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $36 = 0; //@line 231 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  while(1) {
   $104 = $36; //@line 231 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $105 = ($104|0)<(5120); //@line 231 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   if (!($105)) {
    break;
   }
   $106 = ((($38)) + 22700|0); //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $12 = $106;
   $13 = 0;
   $107 = $12;
   $108 = ((($107)) + 16|0); //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $109 = HEAP32[$108>>2]|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $110 = $13; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $111 = (($109) + ($110))|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $14 = $111; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $11 = $107;
   $112 = $11;
   $113 = ((($112)) + 4|0); //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $114 = HEAP32[$113>>2]|0; //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $115 = $14; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $116 = (($115>>>0) / 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $117 = (($114) + ($116<<2)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $118 = HEAP32[$117>>2]|0; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $119 = $14; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $120 = (($119>>>0) % 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $121 = (($118) + ($120<<4)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $122 = HEAP32[$121>>2]|0; //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $123 = ((($38)) + 22700|0); //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $16 = $123;
   $17 = 0;
   $124 = $16;
   $125 = ((($124)) + 16|0); //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $126 = HEAP32[$125>>2]|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $127 = $17; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $128 = (($126) + ($127))|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $18 = $128; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $15 = $124;
   $129 = $15;
   $130 = ((($129)) + 4|0); //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $131 = HEAP32[$130>>2]|0; //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $132 = $18; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $133 = (($132>>>0) / 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $134 = (($131) + ($133<<2)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $135 = HEAP32[$134>>2]|0; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $136 = $18; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $137 = (($136>>>0) % 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $138 = (($135) + ($137<<4)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $139 = ((($138)) + 4|0); //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $140 = HEAP32[$139>>2]|0; //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $141 = (($140) - 5120)|0; //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $142 = $36; //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $143 = (($141) + ($142))|0; //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $144 = (($122) + ($143)|0); //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $145 = HEAP8[$144>>0]|0; //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $146 = ((($38)) + 20|0); //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $147 = HEAP32[$146>>2]|0; //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $148 = $36; //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $149 = (($147) + ($148)|0); //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   HEAP8[$149>>0] = $145; //@line 232 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $150 = $36; //@line 231 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $151 = (($150) + 1)|0; //@line 231 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $36 = $151; //@line 231 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  }
  HEAP32[$38>>2] = 1; //@line 235 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $152 = ((($38)) + 22700|0); //@line 237 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $22 = $152;
  $153 = $22;
  $21 = $153;
  $154 = $21;
  $155 = ((($154)) + 20|0); //@line 960 "/usr/lib/emscripten/system/include/libcxx/deque"
  $20 = $155;
  $156 = $20;
  $19 = $156;
  $157 = $19;
  $158 = HEAP32[$157>>2]|0; //@line 1308 "/usr/lib/emscripten/system/include/libcxx/deque"
  $159 = ($158>>>0)>(1); //@line 237 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  if (!($159)) {
   $189 = ((($38)) + 36|0); //@line 246 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   HEAP8[$189>>0] = 0; //@line 246 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   STACKTOP = sp;return; //@line 247 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  }
  $37 = 0; //@line 238 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  while(1) {
   $160 = $37; //@line 238 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $161 = ($160|0)<(5120); //@line 238 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   if (!($161)) {
    break;
   }
   $162 = ((($38)) + 22700|0); //@line 239 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $24 = $162;
   $25 = 1;
   $163 = $24;
   $164 = ((($163)) + 16|0); //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $165 = HEAP32[$164>>2]|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $166 = $25; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $167 = (($165) + ($166))|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $26 = $167; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
   $23 = $163;
   $168 = $23;
   $169 = ((($168)) + 4|0); //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $170 = HEAP32[$169>>2]|0; //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $171 = $26; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $172 = (($171>>>0) / 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $173 = (($170) + ($172<<2)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $174 = HEAP32[$173>>2]|0; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $175 = $26; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $176 = (($175>>>0) % 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $177 = (($174) + ($176<<4)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
   $178 = HEAP32[$177>>2]|0; //@line 239 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $179 = $37; //@line 239 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $180 = (($178) + ($179)|0); //@line 239 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $181 = HEAP8[$180>>0]|0; //@line 239 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $182 = ((($38)) + 20|0); //@line 239 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $183 = HEAP32[$182>>2]|0; //@line 239 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $184 = $37; //@line 239 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $185 = (5120 + ($184))|0; //@line 239 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $186 = (($183) + ($185)|0); //@line 239 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   HEAP8[$186>>0] = $181; //@line 239 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $187 = $37; //@line 238 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $188 = (($187) + 1)|0; //@line 238 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $37 = $188; //@line 238 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  }
  HEAP32[$38>>2] = 2; //@line 242 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $189 = ((($38)) + 36|0); //@line 246 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  HEAP8[$189>>0] = 0; //@line 246 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  STACKTOP = sp;return; //@line 247 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  break;
 }
 default: {
  $189 = ((($38)) + 36|0); //@line 246 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  HEAP8[$189>>0] = 0; //@line 246 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  STACKTOP = sp;return; //@line 247 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 }
 }
 __ZN7Decoder12switchToGlueEv($38); //@line 216 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$38>>2] = 3; //@line 217 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $189 = ((($38)) + 36|0); //@line 246 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP8[$189>>0] = 0; //@line 246 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 STACKTOP = sp;return; //@line 247 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
}
function __ZN7Decoder12switchToGlueEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $9;
 $11 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,57986)|0); //@line 289 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $7 = $11;
 $8 = 347;
 $12 = $7;
 $13 = $8; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
 (FUNCTION_TABLE_ii[$13 & 1023]($12)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $14 = ((($10)) + 20|0); //@line 291 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $15 = HEAP32[$14>>2]|0; //@line 291 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 __ZN7Decoder12switchBufferEPhj($10,$15,10240); //@line 291 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $16 = ((($10)) + 13364|0); //@line 292 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $17 = ((($16)) + 60|0); //@line 292 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$17>>2] = 0; //@line 292 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $18 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,58004)|0); //@line 294 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $5 = $18;
 $6 = 347;
 $19 = $5;
 $20 = $6; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
 (FUNCTION_TABLE_ii[$20 & 1023]($19)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $21 = ((($10)) + 22700|0); //@line 295 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $2 = $21;
 $3 = 0;
 $22 = $2;
 $23 = ((($22)) + 16|0); //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
 $24 = HEAP32[$23>>2]|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
 $25 = $3; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
 $26 = (($24) + ($25))|0; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
 $4 = $26; //@line 1722 "/usr/lib/emscripten/system/include/libcxx/deque"
 $1 = $22;
 $27 = $1;
 $28 = ((($27)) + 4|0); //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $29 = HEAP32[$28>>2]|0; //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $30 = $4; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
 $31 = (($30>>>0) / 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
 $32 = (($29) + ($31<<2)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
 $33 = HEAP32[$32>>2]|0; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
 $34 = $4; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
 $35 = (($34>>>0) % 256)&-1; //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
 $36 = (($33) + ($35<<4)|0); //@line 1723 "/usr/lib/emscripten/system/include/libcxx/deque"
 $37 = HEAP32[$36>>2]|0; //@line 295 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 _free($37); //@line 295 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $38 = ((($10)) + 22700|0); //@line 296 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 __ZNSt3__25dequeIN7Decoder9RawBufferENS_9allocatorIS2_EEE9pop_frontEv($38); //@line 296 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 STACKTOP = sp;return; //@line 297 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
}
function __ZN7Decoder12switchBufferEPhj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $13 = $9;
 $14 = ((($13)) + 13364|0); //@line 303 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $15 = ((($14)) + 60|0); //@line 303 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $16 = HEAP32[$15>>2]|0; //@line 303 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $17 = ($16|0)!=(1); //@line 303 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 if ($17) {
  $18 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,57807)|0); //@line 304 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $19 = ((($13)) + 13364|0); //@line 304 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $20 = (_mad_stream_errorstr($19)|0); //@line 304 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $21 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($18,$20)|0); //@line 304 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $7 = $21;
  $8 = 347;
  $22 = $7;
  $23 = $8; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
  (FUNCTION_TABLE_ii[$23 & 1023]($22)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
 }
 $24 = ((($13)) + 13364|0); //@line 306 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $25 = ((($24)) + 24|0); //@line 306 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $26 = HEAP32[$25>>2]|0; //@line 306 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $27 = ($26|0)!=(0|0); //@line 306 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 if ($27) {
  $28 = ((($13)) + 13364|0); //@line 307 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $29 = ((($28)) + 4|0); //@line 307 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $30 = HEAP32[$29>>2]|0; //@line 307 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $31 = ((($13)) + 13364|0); //@line 307 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $32 = ((($31)) + 24|0); //@line 307 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $33 = HEAP32[$32>>2]|0; //@line 307 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $34 = $30; //@line 307 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $35 = $33; //@line 307 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $36 = (($34) - ($35))|0; //@line 307 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $12 = $36; //@line 307 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 } else {
  $37 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,57881)|0); //@line 309 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $5 = $37;
  $6 = 347;
  $38 = $5;
  $39 = $6; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
  (FUNCTION_TABLE_ii[$39 & 1023]($38)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
 }
 $40 = $12; //@line 312 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $41 = ($40>>>0)>(5120); //@line 312 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 if ($41) {
  $42 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,57913)|0); //@line 313 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $43 = $12; //@line 313 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $44 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj($42,$43)|0); //@line 313 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $45 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($44,57984)|0); //@line 313 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $3 = $45;
  $4 = 347;
  $46 = $3;
  $47 = $4; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
  (FUNCTION_TABLE_ii[$47 & 1023]($46)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
  $48 = (___cxa_allocate_exception(4)|0); //@line 314 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  HEAP32[$48>>2] = 1; //@line 314 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  ___cxa_throw(($48|0),(52200|0),(0|0)); //@line 314 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  // unreachable; //@line 314 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 }
 $49 = ((($13)) + 13364|0); //@line 317 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $50 = $10; //@line 317 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $51 = ((($50)) + 5120|0); //@line 317 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $52 = $12; //@line 317 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $53 = (0 - ($52))|0; //@line 317 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $54 = (($51) + ($53)|0); //@line 317 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $55 = $11; //@line 317 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $56 = $12; //@line 317 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $57 = (5120 - ($56))|0; //@line 317 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $58 = (($55) - ($57))|0; //@line 317 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 _mad_stream_buffer($49,$54,$58); //@line 317 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $59 = ((($13)) + 13364|0); //@line 318 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $60 = ((($59)) + 60|0); //@line 318 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$60>>2] = 0; //@line 318 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 while(1) {
  $61 = ((($13)) + 13428|0); //@line 320 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $62 = ((($13)) + 13364|0); //@line 320 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $63 = (_mad_header_decode($61,$62)|0); //@line 320 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $64 = ($63|0)!=(0); //@line 320 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  if (!($64)) {
   label = 12;
   break;
  }
  $65 = ((($13)) + 13364|0); //@line 320 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $66 = ((($65)) + 60|0); //@line 320 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $67 = HEAP32[$66>>2]|0; //@line 320 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $68 = ($67|0)!=(1); //@line 320 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  if (!($68)) {
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return; //@line 321 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 }
}
function __ZNSt3__25dequeIN7Decoder9RawBufferENS_9allocatorIS2_EEE9pop_frontEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $6 = sp + 8|0;
 $9 = sp + 129|0;
 $24 = sp;
 $27 = sp + 128|0;
 $32 = $0;
 $34 = $32;
 $31 = $34;
 $35 = $31;
 $36 = ((($35)) + 20|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/deque"
 $30 = $36;
 $37 = $30;
 $29 = $37;
 $38 = $29;
 $33 = $38; //@line 2566 "/usr/lib/emscripten/system/include/libcxx/deque"
 $39 = $33; //@line 2567 "/usr/lib/emscripten/system/include/libcxx/deque"
 $14 = $34;
 $40 = $14;
 $41 = ((($40)) + 4|0); //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $42 = HEAP32[$41>>2]|0; //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $43 = ((($34)) + 16|0); //@line 2568 "/usr/lib/emscripten/system/include/libcxx/deque"
 $44 = HEAP32[$43>>2]|0; //@line 2568 "/usr/lib/emscripten/system/include/libcxx/deque"
 $45 = (($44>>>0) / 256)&-1; //@line 2568 "/usr/lib/emscripten/system/include/libcxx/deque"
 $46 = (($42) + ($45<<2)|0); //@line 2567 "/usr/lib/emscripten/system/include/libcxx/deque"
 $47 = HEAP32[$46>>2]|0; //@line 2567 "/usr/lib/emscripten/system/include/libcxx/deque"
 $48 = ((($34)) + 16|0); //@line 2569 "/usr/lib/emscripten/system/include/libcxx/deque"
 $49 = HEAP32[$48>>2]|0; //@line 2569 "/usr/lib/emscripten/system/include/libcxx/deque"
 $50 = (($49>>>0) % 256)&-1; //@line 2569 "/usr/lib/emscripten/system/include/libcxx/deque"
 $51 = (($47) + ($50<<4)|0); //@line 2568 "/usr/lib/emscripten/system/include/libcxx/deque"
 $1 = $51;
 $52 = $1; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $39;
 $8 = $52;
 $53 = $7; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/memory"
 $54 = $8; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $53;
 $5 = $54;
 $55 = $4; //@line 1727 "/usr/lib/emscripten/system/include/libcxx/memory"
 $56 = $5; //@line 1727 "/usr/lib/emscripten/system/include/libcxx/memory"
 $2 = $55;
 $3 = $56;
 $12 = $34;
 $57 = $12;
 $58 = ((($57)) + 20|0); //@line 958 "/usr/lib/emscripten/system/include/libcxx/deque"
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0; //@line 2570 "/usr/lib/emscripten/system/include/libcxx/deque"
 $62 = (($61) + -1)|0; //@line 2570 "/usr/lib/emscripten/system/include/libcxx/deque"
 HEAP32[$60>>2] = $62; //@line 2570 "/usr/lib/emscripten/system/include/libcxx/deque"
 $63 = ((($34)) + 16|0); //@line 2571 "/usr/lib/emscripten/system/include/libcxx/deque"
 $64 = HEAP32[$63>>2]|0; //@line 2571 "/usr/lib/emscripten/system/include/libcxx/deque"
 $65 = (($64) + 1)|0; //@line 2571 "/usr/lib/emscripten/system/include/libcxx/deque"
 HEAP32[$63>>2] = $65; //@line 2571 "/usr/lib/emscripten/system/include/libcxx/deque"
 $66 = ($65>>>0)>=(512); //@line 2571 "/usr/lib/emscripten/system/include/libcxx/deque"
 if (!($66)) {
  STACKTOP = sp;return; //@line 2577 "/usr/lib/emscripten/system/include/libcxx/deque"
 }
 $67 = $33; //@line 2573 "/usr/lib/emscripten/system/include/libcxx/deque"
 $13 = $34;
 $68 = $13;
 $69 = ((($68)) + 4|0); //@line 95 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $70 = HEAP32[$69>>2]|0; //@line 95 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $71 = HEAP32[$70>>2]|0; //@line 2573 "/usr/lib/emscripten/system/include/libcxx/deque"
 $19 = $67;
 $20 = $71;
 $21 = 256;
 $72 = $19; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = $20; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
 $74 = $21; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
 $16 = $72;
 $17 = $73;
 $18 = $74;
 $75 = $17; //@line 1796 "/usr/lib/emscripten/system/include/libcxx/memory"
 $15 = $75;
 $76 = $15; //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($76); //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
 $28 = $34;
 $77 = $28;
 $78 = ((($77)) + 4|0); //@line 111 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $79 = HEAP32[$78>>2]|0; //@line 111 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $80 = ((($79)) + 4|0); //@line 111 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $25 = $77;
 $26 = $80;
 $81 = $25;
 $82 = $26; //@line 133 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
 $22 = $81;
 $23 = $82;
 $83 = $22;
 $84 = $23; //@line 287 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $85 = ((($83)) + 4|0); //@line 287 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$85>>2] = $84; //@line 287 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $86 = ((($34)) + 16|0); //@line 2575 "/usr/lib/emscripten/system/include/libcxx/deque"
 $87 = HEAP32[$86>>2]|0; //@line 2575 "/usr/lib/emscripten/system/include/libcxx/deque"
 $88 = (($87) - 256)|0; //@line 2575 "/usr/lib/emscripten/system/include/libcxx/deque"
 HEAP32[$86>>2] = $88; //@line 2575 "/usr/lib/emscripten/system/include/libcxx/deque"
 STACKTOP = sp;return; //@line 2577 "/usr/lib/emscripten/system/include/libcxx/deque"
}
function __ZN7Decoder15initializeProbeER10mad_stream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 265 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 _mad_stream_init($5); //@line 265 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $6 = ((($4)) + 13364|0); //@line 267 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $7 = HEAP32[$6>>2]|0; //@line 267 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $8 = $3; //@line 267 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$8>>2] = $7; //@line 267 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $9 = ((($4)) + 13364|0); //@line 268 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $10 = ((($9)) + 4|0); //@line 268 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $11 = HEAP32[$10>>2]|0; //@line 268 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $12 = $3; //@line 268 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $13 = ((($12)) + 4|0); //@line 268 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$13>>2] = $11; //@line 268 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $14 = ((($4)) + 13364|0); //@line 269 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $15 = ((($14)) + 8|0); //@line 269 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $16 = HEAP32[$15>>2]|0; //@line 269 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $17 = $3; //@line 269 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $18 = ((($17)) + 8|0); //@line 269 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$18>>2] = $16; //@line 269 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $19 = ((($4)) + 13364|0); //@line 270 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $20 = ((($19)) + 12|0); //@line 270 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $21 = HEAP32[$20>>2]|0; //@line 270 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $22 = $3; //@line 270 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $23 = ((($22)) + 12|0); //@line 270 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$23>>2] = $21; //@line 270 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $24 = ((($4)) + 13364|0); //@line 271 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $25 = ((($24)) + 16|0); //@line 271 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $26 = HEAP32[$25>>2]|0; //@line 271 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $27 = $3; //@line 271 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $28 = ((($27)) + 16|0); //@line 271 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$28>>2] = $26; //@line 271 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $29 = ((($4)) + 13364|0); //@line 272 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $30 = ((($29)) + 20|0); //@line 272 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $31 = HEAP32[$30>>2]|0; //@line 272 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $32 = $3; //@line 272 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $33 = ((($32)) + 20|0); //@line 272 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$33>>2] = $31; //@line 272 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $34 = ((($4)) + 13364|0); //@line 273 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $35 = ((($34)) + 24|0); //@line 273 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $36 = HEAP32[$35>>2]|0; //@line 273 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $37 = $3; //@line 273 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $38 = ((($37)) + 24|0); //@line 273 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$38>>2] = $36; //@line 273 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $39 = ((($4)) + 13364|0); //@line 274 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $40 = ((($39)) + 28|0); //@line 274 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $41 = HEAP32[$40>>2]|0; //@line 274 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $42 = $3; //@line 274 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $43 = ((($42)) + 28|0); //@line 274 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$43>>2] = $41; //@line 274 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $44 = ((($4)) + 13364|0); //@line 275 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $45 = ((($44)) + 28|0); //@line 275 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $46 = ((($45)) + 4|0); //@line 275 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $47 = HEAP16[$46>>1]|0; //@line 275 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $48 = $3; //@line 275 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $49 = ((($48)) + 28|0); //@line 275 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $50 = ((($49)) + 4|0); //@line 275 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP16[$50>>1] = $47; //@line 275 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $51 = ((($4)) + 13364|0); //@line 276 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $52 = ((($51)) + 28|0); //@line 276 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $53 = ((($52)) + 4|0); //@line 276 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $54 = HEAP16[$53>>1]|0; //@line 276 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $55 = $3; //@line 276 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $56 = ((($55)) + 28|0); //@line 276 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $57 = ((($56)) + 4|0); //@line 276 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP16[$57>>1] = $54; //@line 276 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $58 = ((($4)) + 13364|0); //@line 277 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $59 = ((($58)) + 36|0); //@line 277 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $60 = HEAP32[$59>>2]|0; //@line 277 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $61 = $3; //@line 277 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $62 = ((($61)) + 36|0); //@line 277 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$62>>2] = $60; //@line 277 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $63 = ((($4)) + 13364|0); //@line 278 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $64 = ((($63)) + 36|0); //@line 278 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $65 = ((($64)) + 4|0); //@line 278 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $66 = HEAP16[$65>>1]|0; //@line 278 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $67 = $3; //@line 278 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $68 = ((($67)) + 36|0); //@line 278 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $69 = ((($68)) + 4|0); //@line 278 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP16[$69>>1] = $66; //@line 278 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $70 = ((($4)) + 13364|0); //@line 279 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $71 = ((($70)) + 36|0); //@line 279 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $72 = ((($71)) + 4|0); //@line 279 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $73 = HEAP16[$72>>1]|0; //@line 279 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $74 = $3; //@line 279 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $75 = ((($74)) + 36|0); //@line 279 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $76 = ((($75)) + 4|0); //@line 279 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP16[$76>>1] = $73; //@line 279 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $77 = ((($4)) + 13364|0); //@line 280 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $78 = ((($77)) + 44|0); //@line 280 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $79 = HEAP32[$78>>2]|0; //@line 280 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $80 = $3; //@line 280 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $81 = ((($80)) + 44|0); //@line 280 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$81>>2] = $79; //@line 280 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $82 = ((($4)) + 13364|0); //@line 283 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $83 = ((($82)) + 56|0); //@line 283 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $84 = HEAP32[$83>>2]|0; //@line 283 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $85 = $3; //@line 283 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $86 = ((($85)) + 56|0); //@line 283 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$86>>2] = $84; //@line 283 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $87 = ((($4)) + 13364|0); //@line 284 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $88 = ((($87)) + 60|0); //@line 284 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $89 = HEAP32[$88>>2]|0; //@line 284 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $90 = $3; //@line 284 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $91 = ((($90)) + 60|0); //@line 284 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP32[$91>>2] = $89; //@line 284 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 STACKTOP = sp;return; //@line 285 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
}
function __ZNSt3__25dequeIN7Decoder9RawBufferENS_9allocatorIS2_EEE19__add_back_capacityEv($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1472|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1472|0);
 $$byval_copy3 = sp + 1452|0;
 $$byval_copy2 = sp + 1448|0;
 $$byval_copy1 = sp + 1444|0;
 $$byval_copy = sp + 1440|0;
 $25 = sp + 1340|0;
 $49 = sp + 48|0;
 $52 = sp + 1462|0;
 $69 = sp + 40|0;
 $72 = sp + 1461|0;
 $78 = sp + 1144|0;
 $84 = sp + 1120|0;
 $90 = sp + 1096|0;
 $102 = sp + 1048|0;
 $128 = sp + 32|0;
 $133 = sp + 1460|0;
 $141 = sp + 900|0;
 $142 = sp + 896|0;
 $143 = sp + 876|0;
 $144 = sp + 872|0;
 $145 = sp + 868|0;
 $148 = sp + 24|0;
 $151 = sp + 1459|0;
 $195 = sp + 16|0;
 $198 = sp + 1458|0;
 $204 = sp + 648|0;
 $210 = sp + 624|0;
 $216 = sp + 600|0;
 $228 = sp + 552|0;
 $254 = sp + 8|0;
 $259 = sp + 1457|0;
 $267 = sp + 404|0;
 $268 = sp + 400|0;
 $269 = sp + 380|0;
 $270 = sp + 376|0;
 $271 = sp + 372|0;
 $277 = sp + 348|0;
 $283 = sp + 324|0;
 $289 = sp + 300|0;
 $301 = sp + 252|0;
 $304 = sp;
 $307 = sp + 1456|0;
 $335 = sp + 124|0;
 $336 = sp + 120|0;
 $337 = sp + 116|0;
 $338 = sp + 112|0;
 $339 = sp + 92|0;
 $340 = sp + 88|0;
 $341 = sp + 84|0;
 $342 = sp + 72|0;
 $343 = sp + 64|0;
 $344 = sp + 56|0;
 $333 = $0;
 $346 = $333;
 $332 = $346;
 $347 = $332;
 $348 = ((($347)) + 20|0); //@line 961 "/usr/lib/emscripten/system/include/libcxx/deque"
 $331 = $348;
 $349 = $331;
 $330 = $349;
 $350 = $330;
 $334 = $350; //@line 2426 "/usr/lib/emscripten/system/include/libcxx/deque"
 $329 = $346;
 $351 = $329;
 $352 = ((($351)) + 16|0); //@line 1407 "/usr/lib/emscripten/system/include/libcxx/deque"
 $353 = HEAP32[$352>>2]|0; //@line 1407 "/usr/lib/emscripten/system/include/libcxx/deque"
 $354 = ($353>>>0)>=(256); //@line 2427 "/usr/lib/emscripten/system/include/libcxx/deque"
 if ($354) {
  $355 = ((($346)) + 16|0); //@line 2429 "/usr/lib/emscripten/system/include/libcxx/deque"
  $356 = HEAP32[$355>>2]|0; //@line 2429 "/usr/lib/emscripten/system/include/libcxx/deque"
  $357 = (($356) - 256)|0; //@line 2429 "/usr/lib/emscripten/system/include/libcxx/deque"
  HEAP32[$355>>2] = $357; //@line 2429 "/usr/lib/emscripten/system/include/libcxx/deque"
  $328 = $346;
  $358 = $328;
  $359 = ((($358)) + 4|0); //@line 95 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $360 = HEAP32[$359>>2]|0; //@line 95 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $361 = HEAP32[$360>>2]|0; //@line 2430 "/usr/lib/emscripten/system/include/libcxx/deque"
  HEAP32[$335>>2] = $361; //@line 2430 "/usr/lib/emscripten/system/include/libcxx/deque"
  $308 = $346;
  $362 = $308;
  $363 = ((($362)) + 4|0); //@line 111 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $364 = HEAP32[$363>>2]|0; //@line 111 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $365 = ((($364)) + 4|0); //@line 111 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $305 = $362;
  $306 = $365;
  $366 = $305;
  $367 = $306; //@line 133 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  ;HEAP8[$304>>0]=HEAP8[$307>>0]|0;
  $302 = $366;
  $303 = $367;
  $368 = $302;
  $369 = $303; //@line 287 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $370 = ((($368)) + 4|0); //@line 287 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  HEAP32[$370>>2] = $369; //@line 287 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $263 = $346;
  $264 = $335;
  $371 = $263;
  $372 = ((($371)) + 8|0); //@line 534 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $373 = HEAP32[$372>>2]|0; //@line 534 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $262 = $371;
  $374 = $262;
  $375 = ((($374)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $261 = $375;
  $376 = $261;
  $260 = $376;
  $377 = $260;
  $378 = HEAP32[$377>>2]|0; //@line 534 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $379 = ($373|0)==($378|0); //@line 534 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  do {
   if ($379) {
    $380 = ((($371)) + 4|0); //@line 536 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $381 = HEAP32[$380>>2]|0; //@line 536 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $382 = HEAP32[$371>>2]|0; //@line 536 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $383 = ($381>>>0)>($382>>>0); //@line 536 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    if (!($383)) {
     $231 = $371;
     $430 = $231;
     $431 = ((($430)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $230 = $431;
     $432 = $230;
     $229 = $432;
     $433 = $229;
     $434 = HEAP32[$433>>2]|0; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $435 = HEAP32[$371>>2]|0; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $436 = $434; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $437 = $435; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $438 = (($436) - ($437))|0; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $439 = (($438|0) / 4)&-1; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $440 = $439<<1; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     HEAP32[$267>>2] = $440; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     HEAP32[$268>>2] = 1; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $196 = $267;
     $197 = $268;
     $441 = $196; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $442 = $197; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     ;HEAP8[$195>>0]=HEAP8[$198>>0]|0;
     $193 = $441;
     $194 = $442;
     $443 = $193; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $444 = $194; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $190 = $195;
     $191 = $443;
     $192 = $444;
     $445 = $191; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $446 = HEAP32[$445>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $447 = $192; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $448 = HEAP32[$447>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $449 = ($446>>>0)<($448>>>0); //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $450 = $194; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $451 = $193; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $452 = $449 ? $450 : $451; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $453 = HEAP32[$452>>2]|0; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $266 = $453; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $454 = $266; //@line 546 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $455 = $266; //@line 546 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $456 = (($455>>>0) / 4)&-1; //@line 546 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $185 = $371;
     $457 = $185;
     $458 = ((($457)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $184 = $458;
     $459 = $184;
     $183 = $459;
     $460 = $183;
     __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEEC2EmmS6_($269,$454,$456,$460); //@line 546 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $461 = ((($371)) + 4|0); //@line 547 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $462 = HEAP32[$461>>2]|0; //@line 547 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $186 = $270;
     $187 = $462;
     $463 = $186;
     $464 = $187; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
     HEAP32[$463>>2] = $464; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
     $465 = ((($371)) + 8|0); //@line 548 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $466 = HEAP32[$465>>2]|0; //@line 548 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $188 = $271;
     $189 = $466;
     $467 = $188;
     $468 = $189; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
     HEAP32[$467>>2] = $468; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
     ;HEAP32[$$byval_copy>>2]=HEAP32[$270>>2]|0; //@line 547 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$271>>2]|0; //@line 547 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_($269,$$byval_copy,$$byval_copy1); //@line 547 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $202 = $371;
     $203 = $269;
     $469 = $202; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $201 = $469;
     $470 = $201; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $471 = HEAP32[$470>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     HEAP32[$204>>2] = $471; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $472 = $203; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $199 = $472;
     $473 = $199; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $474 = HEAP32[$473>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $475 = $202; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     HEAP32[$475>>2] = $474; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $200 = $204;
     $476 = $200; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $477 = HEAP32[$476>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $478 = $203; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     HEAP32[$478>>2] = $477; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $479 = ((($371)) + 4|0); //@line 550 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $480 = ((($269)) + 4|0); //@line 550 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $208 = $479;
     $209 = $480;
     $481 = $208; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $207 = $481;
     $482 = $207; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $483 = HEAP32[$482>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     HEAP32[$210>>2] = $483; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $484 = $209; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $205 = $484;
     $485 = $205; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $486 = HEAP32[$485>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $487 = $208; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     HEAP32[$487>>2] = $486; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $206 = $210;
     $488 = $206; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $489 = HEAP32[$488>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $490 = $209; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     HEAP32[$490>>2] = $489; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $491 = ((($371)) + 8|0); //@line 551 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $492 = ((($269)) + 8|0); //@line 551 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $214 = $491;
     $215 = $492;
     $493 = $214; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $213 = $493;
     $494 = $213; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $495 = HEAP32[$494>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     HEAP32[$216>>2] = $495; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $496 = $215; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $211 = $496;
     $497 = $211; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $498 = HEAP32[$497>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $499 = $214; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     HEAP32[$499>>2] = $498; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $212 = $216;
     $500 = $212; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $501 = HEAP32[$500>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $502 = $215; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     HEAP32[$502>>2] = $501; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $219 = $371;
     $503 = $219;
     $504 = ((($503)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $218 = $504;
     $505 = $218;
     $217 = $505;
     $506 = $217;
     $222 = $269;
     $507 = $222;
     $508 = ((($507)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     $221 = $508;
     $509 = $221;
     $220 = $509;
     $510 = $220;
     $226 = $506;
     $227 = $510;
     $511 = $226; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $225 = $511;
     $512 = $225; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $513 = HEAP32[$512>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     HEAP32[$228>>2] = $513; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $514 = $227; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $223 = $514;
     $515 = $223; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $516 = HEAP32[$515>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $517 = $226; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     HEAP32[$517>>2] = $516; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $224 = $228;
     $518 = $224; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $519 = HEAP32[$518>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     $520 = $227; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     HEAP32[$520>>2] = $519; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
     __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEED2Ev($269); //@line 553 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
     break;
    }
    $384 = ((($371)) + 4|0); //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $385 = HEAP32[$384>>2]|0; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $386 = HEAP32[$371>>2]|0; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $387 = $385; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $388 = $386; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $389 = (($387) - ($388))|0; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $390 = (($389|0) / 4)&-1; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $265 = $390; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $391 = $265; //@line 539 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $392 = (($391) + 1)|0; //@line 539 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $393 = (($392|0) / 2)&-1; //@line 539 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $265 = $393; //@line 539 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $394 = ((($371)) + 4|0); //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $395 = HEAP32[$394>>2]|0; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $396 = ((($371)) + 8|0); //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $397 = HEAP32[$396>>2]|0; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $398 = ((($371)) + 4|0); //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $399 = HEAP32[$398>>2]|0; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $400 = $265; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $401 = (0 - ($400))|0; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $402 = (($399) + ($401<<2)|0); //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $239 = $395;
    $240 = $397;
    $241 = $402;
    $403 = $239; //@line 1976 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $238 = $403;
    $404 = $238; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $405 = $240; //@line 1976 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $232 = $405;
    $406 = $232; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $407 = $241; //@line 1976 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $233 = $407;
    $408 = $233; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $234 = $404;
    $235 = $406;
    $236 = $408;
    $409 = $235; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $410 = $234; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $411 = $409; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $412 = $410; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $413 = (($411) - ($412))|0; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $414 = (($413|0) / 4)&-1; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $237 = $414; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $415 = $237; //@line 1966 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $416 = ($415>>>0)>(0); //@line 1966 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    if ($416) {
     $417 = $236; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $418 = $234; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $419 = $237; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     $420 = $419<<2; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
     _memmove(($417|0),($418|0),($420|0))|0; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    }
    $421 = $236; //@line 1968 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $422 = $237; //@line 1968 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $423 = (($421) + ($422<<2)|0); //@line 1968 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $424 = ((($371)) + 8|0); //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    HEAP32[$424>>2] = $423; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $425 = $265; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $426 = ((($371)) + 4|0); //@line 541 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $427 = HEAP32[$426>>2]|0; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $428 = (0 - ($425))|0; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $429 = (($427) + ($428<<2)|0); //@line 541 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    HEAP32[$426>>2] = $429; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   }
  } while(0);
  $244 = $371;
  $521 = $244;
  $522 = ((($521)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $243 = $522;
  $523 = $243;
  $242 = $523;
  $524 = $242;
  $525 = ((($371)) + 8|0); //@line 555 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $526 = HEAP32[$525>>2]|0; //@line 555 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $245 = $526;
  $527 = $245; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
  $528 = $264; //@line 555 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $256 = $524;
  $257 = $527;
  $258 = $528;
  $529 = $256; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
  $530 = $257; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
  $531 = $258; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
  $255 = $531;
  $532 = $255; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  ;HEAP8[$254>>0]=HEAP8[$259>>0]|0;
  $251 = $529;
  $252 = $530;
  $253 = $532;
  $533 = $251; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
  $534 = $252; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
  $535 = $253; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
  $250 = $535;
  $536 = $250; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $247 = $533;
  $248 = $534;
  $249 = $536;
  $537 = $248; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
  $538 = $249; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
  $246 = $538;
  $539 = $246; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $540 = HEAP32[$539>>2]|0; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$537>>2] = $540; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
  $541 = ((($371)) + 8|0); //@line 556 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $542 = HEAP32[$541>>2]|0; //@line 556 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $543 = ((($542)) + 4|0); //@line 556 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  HEAP32[$541>>2] = $543; //@line 556 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  STACKTOP = sp;return; //@line 2473 "/usr/lib/emscripten/system/include/libcxx/deque"
 }
 $182 = $346;
 $544 = $182;
 $545 = ((($544)) + 8|0); //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $546 = HEAP32[$545>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $547 = ((($544)) + 4|0); //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $548 = HEAP32[$547>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $549 = $546; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $550 = $548; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $551 = (($549) - ($550))|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $552 = (($551|0) / 4)&-1; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $181 = $346;
 $553 = $181;
 $180 = $553;
 $554 = $180;
 $555 = ((($554)) + 12|0); //@line 59 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $179 = $555;
 $556 = $179;
 $178 = $556;
 $557 = $178;
 $558 = HEAP32[$557>>2]|0; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $559 = HEAP32[$553>>2]|0; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $560 = $558; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $561 = $559; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $562 = (($560) - ($561))|0; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $563 = (($562|0) / 4)&-1; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $564 = ($552>>>0)<($563>>>0); //@line 2435 "/usr/lib/emscripten/system/include/libcxx/deque"
 if (!($564)) {
  $56 = $346;
  $791 = $56;
  $55 = $791;
  $792 = $55;
  $793 = ((($792)) + 12|0); //@line 59 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $54 = $793;
  $794 = $54;
  $53 = $794;
  $795 = $53;
  $796 = HEAP32[$795>>2]|0; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $797 = HEAP32[$791>>2]|0; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $798 = $796; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $799 = $797; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $800 = (($798) - ($799))|0; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $801 = (($800|0) / 4)&-1; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $802 = $801<<1; //@line 2454 "/usr/lib/emscripten/system/include/libcxx/deque"
  HEAP32[$340>>2] = $802; //@line 2454 "/usr/lib/emscripten/system/include/libcxx/deque"
  HEAP32[$341>>2] = 1; //@line 2454 "/usr/lib/emscripten/system/include/libcxx/deque"
  $50 = $340;
  $51 = $341;
  $803 = $50; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $804 = $51; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  ;HEAP8[$49>>0]=HEAP8[$52>>0]|0;
  $47 = $803;
  $48 = $804;
  $805 = $47; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $806 = $48; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $44 = $49;
  $45 = $805;
  $46 = $806;
  $807 = $45; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $808 = HEAP32[$807>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $809 = $46; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $810 = HEAP32[$809>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $811 = ($808>>>0)<($810>>>0); //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $812 = $48; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $813 = $47; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $814 = $811 ? $812 : $813; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
  $815 = HEAP32[$814>>2]|0; //@line 2454 "/usr/lib/emscripten/system/include/libcxx/deque"
  $43 = $346;
  $816 = $43;
  $817 = ((($816)) + 8|0); //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $818 = HEAP32[$817>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $819 = ((($816)) + 4|0); //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $820 = HEAP32[$819>>2]|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $821 = $818; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $822 = $820; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $823 = (($821) - ($822))|0; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $824 = (($823|0) / 4)&-1; //@line 89 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $42 = $346;
  $825 = $42;
  $826 = ((($825)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $41 = $826;
  $827 = $41;
  $40 = $827;
  $828 = $40;
  __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEEC2EmmS6_($339,$815,$824,$828); //@line 2454 "/usr/lib/emscripten/system/include/libcxx/deque"
  $829 = $334; //@line 2460 "/usr/lib/emscripten/system/include/libcxx/deque"
  $38 = $829;
  $39 = 256;
  $830 = $38; //@line 1547 "/usr/lib/emscripten/system/include/libcxx/memory"
  $831 = $39; //@line 1547 "/usr/lib/emscripten/system/include/libcxx/memory"
  $35 = $830;
  $36 = $831;
  $37 = 0;
  $832 = $35;
  $833 = $36; //@line 1790 "/usr/lib/emscripten/system/include/libcxx/memory"
  $34 = $832;
  $834 = ($833>>>0)>(268435455); //@line 1790 "/usr/lib/emscripten/system/include/libcxx/memory"
  if ($834) {
   $32 = 58115;
   $835 = (___cxa_allocate_exception(8)|0); //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
   $836 = $32; //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
   $30 = $835;
   $31 = $836;
   $837 = $30;
   $838 = $31; //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
   __ZNSt11logic_errorC2EPKc($837,$838); //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
   HEAP32[$837>>2] = (56676); //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
   ___cxa_throw(($835|0),(52056|0),(330|0)); //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
   // unreachable;
  }
  $839 = $36; //@line 1793 "/usr/lib/emscripten/system/include/libcxx/memory"
  $840 = $839<<4; //@line 1793 "/usr/lib/emscripten/system/include/libcxx/memory"
  $33 = $840;
  $841 = $33; //@line 228 "/usr/lib/emscripten/system/include/libcxx/new"
  $842 = (__Znwm($841)|0); //@line 228 "/usr/lib/emscripten/system/include/libcxx/new"
  $843 = $334; //@line 2461 "/usr/lib/emscripten/system/include/libcxx/deque"
  $27 = $343;
  $28 = $843;
  $29 = 256;
  $844 = $27;
  $845 = $28; //@line 3166 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$844>>2] = $845; //@line 3166 "/usr/lib/emscripten/system/include/libcxx/memory"
  $846 = ((($844)) + 4|0); //@line 3166 "/usr/lib/emscripten/system/include/libcxx/memory"
  $847 = $29; //@line 3166 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$846>>2] = $847; //@line 3166 "/usr/lib/emscripten/system/include/libcxx/memory"
  $24 = $342;
  HEAP32[$25>>2] = $842;
  $26 = $343;
  $848 = $24;
  $849 = $26; //@line 2429 "/usr/lib/emscripten/system/include/libcxx/memory"
  $23 = $849;
  $850 = $23; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $20 = $848;
  $21 = $25;
  $22 = $850;
  $851 = $20;
  $852 = $21; //@line 2197 "/usr/lib/emscripten/system/include/libcxx/memory"
  $19 = $852;
  $853 = $19; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $13 = $851;
  $14 = $853;
  $854 = $13;
  $855 = $14; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
  $12 = $855;
  $856 = $12; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $857 = HEAP32[$856>>2]|0; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$854>>2] = $857; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
  $858 = ((($851)) + 4|0); //@line 2197 "/usr/lib/emscripten/system/include/libcxx/memory"
  $859 = $22; //@line 2197 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $859;
  $860 = $15; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $17 = $858;
  $18 = $860;
  $861 = $17;
  $862 = $18; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $862;
  $863 = $16; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  ;HEAP32[$861>>2]=HEAP32[$863>>2]|0;HEAP32[$861+4>>2]=HEAP32[$863+4>>2]|0; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = $342;
  $864 = $11;
  $10 = $864;
  $865 = $10;
  $9 = $865;
  $866 = $9;
  $867 = HEAP32[$866>>2]|0; //@line 2571 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$344>>2] = $867; //@line 2462 "/usr/lib/emscripten/system/include/libcxx/deque"
  __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEE9push_backEOS3_($339,$344); //@line 2462 "/usr/lib/emscripten/system/include/libcxx/deque"
  $7 = $342;
  $868 = $7;
  $6 = $868;
  $869 = $6;
  $5 = $869;
  $870 = $5;
  $871 = HEAP32[$870>>2]|0; //@line 2588 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $871; //@line 2588 "/usr/lib/emscripten/system/include/libcxx/memory"
  $4 = $868;
  $872 = $4;
  $3 = $872;
  $873 = $3;
  HEAP32[$873>>2] = 0; //@line 2589 "/usr/lib/emscripten/system/include/libcxx/memory"
  $2 = $346;
  $874 = $2;
  $875 = ((($874)) + 8|0); //@line 83 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $876 = HEAP32[$875>>2]|0; //@line 83 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $345 = $876; //@line 2465 "/usr/lib/emscripten/system/include/libcxx/deque"
  while(1) {
   $877 = $345; //@line 2466 "/usr/lib/emscripten/system/include/libcxx/deque"
   $1 = $346;
   $878 = $1;
   $879 = ((($878)) + 4|0); //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $880 = HEAP32[$879>>2]|0; //@line 81 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $881 = ($877|0)!=($880|0); //@line 2466 "/usr/lib/emscripten/system/include/libcxx/deque"
   if (!($881)) {
    break;
   }
   $882 = $345; //@line 2467 "/usr/lib/emscripten/system/include/libcxx/deque"
   $883 = ((($882)) + -4|0); //@line 2467 "/usr/lib/emscripten/system/include/libcxx/deque"
   $345 = $883; //@line 2467 "/usr/lib/emscripten/system/include/libcxx/deque"
   __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEE10push_frontERKS3_($339,$883); //@line 2467 "/usr/lib/emscripten/system/include/libcxx/deque"
  }
  $275 = $346;
  $276 = $339;
  $884 = $275; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $274 = $884;
  $885 = $274; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $886 = HEAP32[$885>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  HEAP32[$277>>2] = $886; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $887 = $276; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $272 = $887;
  $888 = $272; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $889 = HEAP32[$888>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $890 = $275; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  HEAP32[$890>>2] = $889; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $273 = $277;
  $891 = $273; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $892 = HEAP32[$891>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $893 = $276; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  HEAP32[$893>>2] = $892; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $894 = ((($346)) + 4|0); //@line 2469 "/usr/lib/emscripten/system/include/libcxx/deque"
  $895 = ((($339)) + 4|0); //@line 2469 "/usr/lib/emscripten/system/include/libcxx/deque"
  $281 = $894;
  $282 = $895;
  $896 = $281; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $280 = $896;
  $897 = $280; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $898 = HEAP32[$897>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  HEAP32[$283>>2] = $898; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $899 = $282; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $278 = $899;
  $900 = $278; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $901 = HEAP32[$900>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $902 = $281; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  HEAP32[$902>>2] = $901; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $279 = $283;
  $903 = $279; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $904 = HEAP32[$903>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $905 = $282; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  HEAP32[$905>>2] = $904; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $906 = ((($346)) + 8|0); //@line 2470 "/usr/lib/emscripten/system/include/libcxx/deque"
  $907 = ((($339)) + 8|0); //@line 2470 "/usr/lib/emscripten/system/include/libcxx/deque"
  $287 = $906;
  $288 = $907;
  $908 = $287; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $286 = $908;
  $909 = $286; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $910 = HEAP32[$909>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  HEAP32[$289>>2] = $910; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $911 = $288; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $284 = $911;
  $912 = $284; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $913 = HEAP32[$912>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $914 = $287; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  HEAP32[$914>>2] = $913; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $285 = $289;
  $915 = $285; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $916 = HEAP32[$915>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $917 = $288; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  HEAP32[$917>>2] = $916; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $292 = $346;
  $918 = $292;
  $919 = ((($918)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $291 = $919;
  $920 = $291;
  $290 = $920;
  $921 = $290;
  $295 = $339;
  $922 = $295;
  $923 = ((($922)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $294 = $923;
  $924 = $294;
  $293 = $924;
  $925 = $293;
  $299 = $921;
  $300 = $925;
  $926 = $299; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $298 = $926;
  $927 = $298; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $928 = HEAP32[$927>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  HEAP32[$301>>2] = $928; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $929 = $300; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $296 = $929;
  $930 = $296; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $931 = HEAP32[$930>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $932 = $299; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  HEAP32[$932>>2] = $931; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $297 = $301;
  $933 = $297; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $934 = HEAP32[$933>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $935 = $300; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  HEAP32[$935>>2] = $934; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $327 = $342;
  $936 = $327;
  $324 = $936;
  $325 = 0;
  $937 = $324;
  $323 = $937;
  $938 = $323;
  $322 = $938;
  $939 = $322;
  $940 = HEAP32[$939>>2]|0; //@line 2595 "/usr/lib/emscripten/system/include/libcxx/memory"
  $326 = $940; //@line 2595 "/usr/lib/emscripten/system/include/libcxx/memory"
  $941 = $325; //@line 2596 "/usr/lib/emscripten/system/include/libcxx/memory"
  $312 = $937;
  $942 = $312;
  $311 = $942;
  $943 = $311;
  HEAP32[$943>>2] = $941; //@line 2596 "/usr/lib/emscripten/system/include/libcxx/memory"
  $944 = $326; //@line 2597 "/usr/lib/emscripten/system/include/libcxx/memory"
  $945 = ($944|0)!=(0|0); //@line 2597 "/usr/lib/emscripten/system/include/libcxx/memory"
  if ($945) {
   $310 = $937;
   $946 = $310;
   $947 = ((($946)) + 4|0); //@line 2236 "/usr/lib/emscripten/system/include/libcxx/memory"
   $309 = $947;
   $948 = $309;
   $949 = $326; //@line 2598 "/usr/lib/emscripten/system/include/libcxx/memory"
   $320 = $948;
   $321 = $949;
   $950 = $320;
   $951 = HEAP32[$950>>2]|0; //@line 3169 "/usr/lib/emscripten/system/include/libcxx/memory"
   $952 = $321; //@line 3169 "/usr/lib/emscripten/system/include/libcxx/memory"
   $953 = ((($950)) + 4|0); //@line 3169 "/usr/lib/emscripten/system/include/libcxx/memory"
   $954 = HEAP32[$953>>2]|0; //@line 3169 "/usr/lib/emscripten/system/include/libcxx/memory"
   $317 = $951;
   $318 = $952;
   $319 = $954;
   $955 = $317; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
   $956 = $318; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
   $957 = $319; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
   $314 = $955;
   $315 = $956;
   $316 = $957;
   $958 = $315; //@line 1796 "/usr/lib/emscripten/system/include/libcxx/memory"
   $313 = $958;
   $959 = $313; //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
   __ZdlPv($959); //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
  }
  __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEED2Ev($339); //@line 2472 "/usr/lib/emscripten/system/include/libcxx/deque"
  STACKTOP = sp;return; //@line 2473 "/usr/lib/emscripten/system/include/libcxx/deque"
 }
 $177 = $346;
 $565 = $177;
 $176 = $565;
 $566 = $176;
 $567 = ((($566)) + 12|0); //@line 59 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $175 = $567;
 $568 = $175;
 $174 = $568;
 $569 = $174;
 $570 = HEAP32[$569>>2]|0; //@line 93 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $571 = ((($565)) + 8|0); //@line 93 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $572 = HEAP32[$571>>2]|0; //@line 93 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $573 = $570; //@line 93 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $574 = $572; //@line 93 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $575 = (($573) - ($574))|0; //@line 93 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $576 = (($575|0) / 4)&-1; //@line 93 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $577 = ($576|0)!=(0); //@line 2439 "/usr/lib/emscripten/system/include/libcxx/deque"
 $578 = $334;
 if ($577) {
  $172 = $578;
  $173 = 256;
  $579 = $172; //@line 1547 "/usr/lib/emscripten/system/include/libcxx/memory"
  $580 = $173; //@line 1547 "/usr/lib/emscripten/system/include/libcxx/memory"
  $169 = $579;
  $170 = $580;
  $171 = 0;
  $581 = $169;
  $582 = $170; //@line 1790 "/usr/lib/emscripten/system/include/libcxx/memory"
  $168 = $581;
  $583 = ($582>>>0)>(268435455); //@line 1790 "/usr/lib/emscripten/system/include/libcxx/memory"
  if ($583) {
   $166 = 58115;
   $584 = (___cxa_allocate_exception(8)|0); //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
   $585 = $166; //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
   $164 = $584;
   $165 = $585;
   $586 = $164;
   $587 = $165; //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
   __ZNSt11logic_errorC2EPKc($586,$587); //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
   HEAP32[$586>>2] = (56676); //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
   ___cxa_throw(($584|0),(52056|0),(330|0)); //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
   // unreachable; //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
  }
  $588 = $170; //@line 1793 "/usr/lib/emscripten/system/include/libcxx/memory"
  $589 = $588<<4; //@line 1793 "/usr/lib/emscripten/system/include/libcxx/memory"
  $167 = $589;
  $590 = $167; //@line 228 "/usr/lib/emscripten/system/include/libcxx/new"
  $591 = (__Znwm($590)|0); //@line 228 "/usr/lib/emscripten/system/include/libcxx/new"
  HEAP32[$336>>2] = $591; //@line 2440 "/usr/lib/emscripten/system/include/libcxx/deque"
  __ZNSt3__214__split_bufferIPN7Decoder9RawBufferENS_9allocatorIS3_EEE9push_backEOS3_($346,$336); //@line 2440 "/usr/lib/emscripten/system/include/libcxx/deque"
  STACKTOP = sp;return; //@line 2473 "/usr/lib/emscripten/system/include/libcxx/deque"
 }
 $162 = $578;
 $163 = 256;
 $592 = $162; //@line 1547 "/usr/lib/emscripten/system/include/libcxx/memory"
 $593 = $163; //@line 1547 "/usr/lib/emscripten/system/include/libcxx/memory"
 $159 = $592;
 $160 = $593;
 $161 = 0;
 $594 = $159;
 $595 = $160; //@line 1790 "/usr/lib/emscripten/system/include/libcxx/memory"
 $158 = $594;
 $596 = ($595>>>0)>(268435455); //@line 1790 "/usr/lib/emscripten/system/include/libcxx/memory"
 if ($596) {
  $156 = 58115;
  $597 = (___cxa_allocate_exception(8)|0); //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
  $598 = $156; //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
  $154 = $597;
  $155 = $598;
  $599 = $154;
  $600 = $155; //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
  __ZNSt11logic_errorC2EPKc($599,$600); //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
  HEAP32[$599>>2] = (56676); //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
  ___cxa_throw(($597|0),(52056|0),(330|0)); //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
  // unreachable; //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
 }
 $601 = $160; //@line 1793 "/usr/lib/emscripten/system/include/libcxx/memory"
 $602 = $601<<4; //@line 1793 "/usr/lib/emscripten/system/include/libcxx/memory"
 $157 = $602;
 $603 = $157; //@line 228 "/usr/lib/emscripten/system/include/libcxx/new"
 $604 = (__Znwm($603)|0); //@line 228 "/usr/lib/emscripten/system/include/libcxx/new"
 HEAP32[$337>>2] = $604; //@line 2443 "/usr/lib/emscripten/system/include/libcxx/deque"
 __ZNSt3__214__split_bufferIPN7Decoder9RawBufferENS_9allocatorIS3_EEE10push_frontEOS3_($346,$337); //@line 2443 "/usr/lib/emscripten/system/include/libcxx/deque"
 $153 = $346;
 $605 = $153;
 $606 = ((($605)) + 4|0); //@line 95 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $607 = HEAP32[$606>>2]|0; //@line 95 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $608 = HEAP32[$607>>2]|0; //@line 2445 "/usr/lib/emscripten/system/include/libcxx/deque"
 HEAP32[$338>>2] = $608; //@line 2445 "/usr/lib/emscripten/system/include/libcxx/deque"
 $152 = $346;
 $609 = $152;
 $610 = ((($609)) + 4|0); //@line 111 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $611 = HEAP32[$610>>2]|0; //@line 111 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $612 = ((($611)) + 4|0); //@line 111 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $149 = $609;
 $150 = $612;
 $613 = $149;
 $614 = $150; //@line 133 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 ;HEAP8[$148>>0]=HEAP8[$151>>0]|0;
 $146 = $613;
 $147 = $614;
 $615 = $146;
 $616 = $147; //@line 287 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $617 = ((($615)) + 4|0); //@line 287 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$617>>2] = $616; //@line 287 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $137 = $346;
 $138 = $338;
 $618 = $137;
 $619 = ((($618)) + 8|0); //@line 534 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $620 = HEAP32[$619>>2]|0; //@line 534 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $136 = $618;
 $621 = $136;
 $622 = ((($621)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $135 = $622;
 $623 = $135;
 $134 = $623;
 $624 = $134;
 $625 = HEAP32[$624>>2]|0; //@line 534 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $626 = ($620|0)==($625|0); //@line 534 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 do {
  if ($626) {
   $627 = ((($618)) + 4|0); //@line 536 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $628 = HEAP32[$627>>2]|0; //@line 536 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $629 = HEAP32[$618>>2]|0; //@line 536 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $630 = ($628>>>0)>($629>>>0); //@line 536 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   if (!($630)) {
    $105 = $618;
    $677 = $105;
    $678 = ((($677)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $104 = $678;
    $679 = $104;
    $103 = $679;
    $680 = $103;
    $681 = HEAP32[$680>>2]|0; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $682 = HEAP32[$618>>2]|0; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $683 = $681; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $684 = $682; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $685 = (($683) - ($684))|0; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $686 = (($685|0) / 4)&-1; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $687 = $686<<1; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    HEAP32[$141>>2] = $687; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    HEAP32[$142>>2] = 1; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $70 = $141;
    $71 = $142;
    $688 = $70; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $689 = $71; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    ;HEAP8[$69>>0]=HEAP8[$72>>0]|0;
    $67 = $688;
    $68 = $689;
    $690 = $67; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $691 = $68; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $64 = $69;
    $65 = $690;
    $66 = $691;
    $692 = $65; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $693 = HEAP32[$692>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $694 = $66; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $695 = HEAP32[$694>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $696 = ($693>>>0)<($695>>>0); //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $697 = $68; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $698 = $67; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $699 = $696 ? $697 : $698; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $700 = HEAP32[$699>>2]|0; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $140 = $700; //@line 545 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $701 = $140; //@line 546 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $702 = $140; //@line 546 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $703 = (($702>>>0) / 4)&-1; //@line 546 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $59 = $618;
    $704 = $59;
    $705 = ((($704)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $58 = $705;
    $706 = $58;
    $57 = $706;
    $707 = $57;
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEEC2EmmS6_($143,$701,$703,$707); //@line 546 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $708 = ((($618)) + 4|0); //@line 547 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $709 = HEAP32[$708>>2]|0; //@line 547 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $60 = $144;
    $61 = $709;
    $710 = $60;
    $711 = $61; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    HEAP32[$710>>2] = $711; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $712 = ((($618)) + 8|0); //@line 548 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $713 = HEAP32[$712>>2]|0; //@line 548 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $62 = $145;
    $63 = $713;
    $714 = $62;
    $715 = $63; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    HEAP32[$714>>2] = $715; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$144>>2]|0; //@line 547 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$145>>2]|0; //@line 547 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_($143,$$byval_copy2,$$byval_copy3); //@line 547 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $76 = $618;
    $77 = $143;
    $716 = $76; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $75 = $716;
    $717 = $75; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $718 = HEAP32[$717>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$78>>2] = $718; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $719 = $77; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $73 = $719;
    $720 = $73; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $721 = HEAP32[$720>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $722 = $76; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$722>>2] = $721; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $74 = $78;
    $723 = $74; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $724 = HEAP32[$723>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $725 = $77; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$725>>2] = $724; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $726 = ((($618)) + 4|0); //@line 550 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $727 = ((($143)) + 4|0); //@line 550 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $82 = $726;
    $83 = $727;
    $728 = $82; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $81 = $728;
    $729 = $81; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $730 = HEAP32[$729>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$84>>2] = $730; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $731 = $83; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $79 = $731;
    $732 = $79; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $733 = HEAP32[$732>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $734 = $82; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$734>>2] = $733; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $80 = $84;
    $735 = $80; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $736 = HEAP32[$735>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $737 = $83; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$737>>2] = $736; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $738 = ((($618)) + 8|0); //@line 551 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $739 = ((($143)) + 8|0); //@line 551 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $88 = $738;
    $89 = $739;
    $740 = $88; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $87 = $740;
    $741 = $87; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $742 = HEAP32[$741>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$90>>2] = $742; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $743 = $89; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $85 = $743;
    $744 = $85; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $745 = HEAP32[$744>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $746 = $88; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$746>>2] = $745; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $86 = $90;
    $747 = $86; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $748 = HEAP32[$747>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $749 = $89; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$749>>2] = $748; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $93 = $618;
    $750 = $93;
    $751 = ((($750)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $92 = $751;
    $752 = $92;
    $91 = $752;
    $753 = $91;
    $96 = $143;
    $754 = $96;
    $755 = ((($754)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $95 = $755;
    $756 = $95;
    $94 = $756;
    $757 = $94;
    $100 = $753;
    $101 = $757;
    $758 = $100; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $99 = $758;
    $759 = $99; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $760 = HEAP32[$759>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$102>>2] = $760; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $761 = $101; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $97 = $761;
    $762 = $97; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $763 = HEAP32[$762>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $764 = $100; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$764>>2] = $763; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $98 = $102;
    $765 = $98; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $766 = HEAP32[$765>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $767 = $101; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$767>>2] = $766; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEED2Ev($143); //@line 553 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    break;
   }
   $631 = ((($618)) + 4|0); //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $632 = HEAP32[$631>>2]|0; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $633 = HEAP32[$618>>2]|0; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $634 = $632; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $635 = $633; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $636 = (($634) - ($635))|0; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $637 = (($636|0) / 4)&-1; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $139 = $637; //@line 538 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $638 = $139; //@line 539 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $639 = (($638) + 1)|0; //@line 539 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $640 = (($639|0) / 2)&-1; //@line 539 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $139 = $640; //@line 539 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $641 = ((($618)) + 4|0); //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $642 = HEAP32[$641>>2]|0; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $643 = ((($618)) + 8|0); //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $644 = HEAP32[$643>>2]|0; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $645 = ((($618)) + 4|0); //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $646 = HEAP32[$645>>2]|0; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $647 = $139; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $648 = (0 - ($647))|0; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $649 = (($646) + ($648<<2)|0); //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $113 = $642;
   $114 = $644;
   $115 = $649;
   $650 = $113; //@line 1976 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $112 = $650;
   $651 = $112; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $652 = $114; //@line 1976 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $106 = $652;
   $653 = $106; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $654 = $115; //@line 1976 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $107 = $654;
   $655 = $107; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $108 = $651;
   $109 = $653;
   $110 = $655;
   $656 = $109; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $657 = $108; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $658 = $656; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $659 = $657; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $660 = (($658) - ($659))|0; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $661 = (($660|0) / 4)&-1; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $111 = $661; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $662 = $111; //@line 1966 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $663 = ($662>>>0)>(0); //@line 1966 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   if ($663) {
    $664 = $110; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $665 = $108; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $666 = $111; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $667 = $666<<2; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    _memmove(($664|0),($665|0),($667|0))|0; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   }
   $668 = $110; //@line 1968 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $669 = $111; //@line 1968 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $670 = (($668) + ($669<<2)|0); //@line 1968 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $671 = ((($618)) + 8|0); //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   HEAP32[$671>>2] = $670; //@line 540 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $672 = $139; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $673 = ((($618)) + 4|0); //@line 541 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $674 = HEAP32[$673>>2]|0; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $675 = (0 - ($672))|0; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $676 = (($674) + ($675<<2)|0); //@line 541 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   HEAP32[$673>>2] = $676; //@line 541 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  }
 } while(0);
 $118 = $618;
 $768 = $118;
 $769 = ((($768)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $117 = $769;
 $770 = $117;
 $116 = $770;
 $771 = $116;
 $772 = ((($618)) + 8|0); //@line 555 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $773 = HEAP32[$772>>2]|0; //@line 555 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $119 = $773;
 $774 = $119; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
 $775 = $138; //@line 555 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $130 = $771;
 $131 = $774;
 $132 = $775;
 $776 = $130; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $777 = $131; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $778 = $132; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $129 = $778;
 $779 = $129; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 ;HEAP8[$128>>0]=HEAP8[$133>>0]|0;
 $125 = $776;
 $126 = $777;
 $127 = $779;
 $780 = $125; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $781 = $126; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $782 = $127; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $124 = $782;
 $783 = $124; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $121 = $780;
 $122 = $781;
 $123 = $783;
 $784 = $122; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $785 = $123; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $120 = $785;
 $786 = $120; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $787 = HEAP32[$786>>2]|0; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$784>>2] = $787; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $788 = ((($618)) + 8|0); //@line 556 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $789 = HEAP32[$788>>2]|0; //@line 556 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $790 = ((($789)) + 4|0); //@line 556 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$788>>2] = $790; //@line 556 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 STACKTOP = sp;return; //@line 2473 "/usr/lib/emscripten/system/include/libcxx/deque"
}
function __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEEC2EmmS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $35 = sp;
 $31 = $0;
 $32 = $1;
 $33 = $2;
 $34 = $3;
 $36 = $31;
 $37 = ((($36)) + 12|0); //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$35>>2] = 0; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $38 = $34; //@line 309 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $28 = $37;
 $29 = $35;
 $30 = $38;
 $39 = $28;
 $40 = $29; //@line 2197 "/usr/lib/emscripten/system/include/libcxx/memory"
 $27 = $40;
 $41 = $27; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $21 = $39;
 $22 = $41;
 $42 = $21;
 $43 = $22; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
 $20 = $43;
 HEAP32[$42>>2] = 0; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
 $44 = ((($39)) + 4|0); //@line 2197 "/usr/lib/emscripten/system/include/libcxx/memory"
 $45 = $30; //@line 2197 "/usr/lib/emscripten/system/include/libcxx/memory"
 $23 = $45;
 $46 = $23; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $25 = $44;
 $26 = $46;
 $47 = $25;
 $48 = $26; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
 $24 = $48;
 $49 = $24; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 HEAP32[$47>>2] = $49; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
 $50 = $32; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $51 = ($50|0)!=(0); //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 do {
  if ($51) {
   $6 = $36;
   $52 = $6;
   $53 = ((($52)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $5 = $53;
   $54 = $5;
   $55 = ((($54)) + 4|0); //@line 2236 "/usr/lib/emscripten/system/include/libcxx/memory"
   $4 = $55;
   $56 = $4;
   $57 = HEAP32[$56>>2]|0; //@line 2110 "/usr/lib/emscripten/system/include/libcxx/memory"
   $58 = $32; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $15 = $57;
   $16 = $58;
   $59 = $15; //@line 1547 "/usr/lib/emscripten/system/include/libcxx/memory"
   $60 = $16; //@line 1547 "/usr/lib/emscripten/system/include/libcxx/memory"
   $12 = $59;
   $13 = $60;
   $14 = 0;
   $61 = $12;
   $62 = $13; //@line 1790 "/usr/lib/emscripten/system/include/libcxx/memory"
   $11 = $61;
   $63 = ($62>>>0)>(1073741823); //@line 1790 "/usr/lib/emscripten/system/include/libcxx/memory"
   if ($63) {
    $9 = 58115;
    $64 = (___cxa_allocate_exception(8)|0); //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
    $65 = $9; //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
    $7 = $64;
    $8 = $65;
    $66 = $7;
    $67 = $8; //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
    __ZNSt11logic_errorC2EPKc($66,$67); //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
    HEAP32[$66>>2] = (56676); //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
    ___cxa_throw(($64|0),(52056|0),(330|0)); //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
    // unreachable; //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
   } else {
    $68 = $13; //@line 1793 "/usr/lib/emscripten/system/include/libcxx/memory"
    $69 = $68<<2; //@line 1793 "/usr/lib/emscripten/system/include/libcxx/memory"
    $10 = $69;
    $70 = $10; //@line 228 "/usr/lib/emscripten/system/include/libcxx/new"
    $71 = (__Znwm($70)|0); //@line 228 "/usr/lib/emscripten/system/include/libcxx/new"
    $72 = $71;
    break;
   }
  } else {
   $72 = 0;
  }
 } while(0);
 HEAP32[$36>>2] = $72; //@line 311 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $73 = HEAP32[$36>>2]|0; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $74 = $33; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $75 = (($73) + ($74<<2)|0); //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $76 = ((($36)) + 8|0); //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$76>>2] = $75; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $77 = ((($36)) + 4|0); //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$77>>2] = $75; //@line 312 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $78 = HEAP32[$36>>2]|0; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $79 = $32; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $80 = (($78) + ($79<<2)|0); //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $19 = $36;
 $81 = $19;
 $82 = ((($81)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $18 = $82;
 $83 = $18;
 $17 = $83;
 $84 = $17;
 HEAP32[$84>>2] = $80; //@line 313 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 STACKTOP = sp;return; //@line 314 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $17 = sp;
 $22 = sp + 100|0;
 $27 = $0;
 $29 = $27;
 $26 = $29;
 $30 = $26;
 $31 = ((($30)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $25 = $31;
 $32 = $25;
 $33 = ((($32)) + 4|0); //@line 2236 "/usr/lib/emscripten/system/include/libcxx/memory"
 $24 = $33;
 $34 = $24;
 $35 = HEAP32[$34>>2]|0; //@line 2110 "/usr/lib/emscripten/system/include/libcxx/memory"
 $28 = $35; //@line 265 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 while(1) {
  $5 = $1;
  $6 = $2;
  $36 = $5; //@line 1153 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $4 = $36;
  $37 = $4;
  $38 = HEAP32[$37>>2]|0; //@line 1107 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $39 = $6; //@line 1153 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $3 = $39;
  $40 = $3;
  $41 = HEAP32[$40>>2]|0; //@line 1107 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $42 = ($38|0)!=($41|0); //@line 1153 "/usr/lib/emscripten/system/include/libcxx/iterator"
  if (!($42)) {
   break;
  }
  $43 = $28; //@line 268 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $44 = ((($29)) + 8|0); //@line 268 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $45 = HEAP32[$44>>2]|0; //@line 268 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $7 = $45;
  $46 = $7; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
  $8 = $1;
  $47 = $8;
  $48 = HEAP32[$47>>2]|0; //@line 1109 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $19 = $43;
  $20 = $46;
  $21 = $48;
  $49 = $19; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
  $50 = $20; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = $21; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
  $18 = $51;
  $52 = $18; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  ;HEAP8[$17>>0]=HEAP8[$22>>0]|0;
  $14 = $49;
  $15 = $50;
  $16 = $52;
  $53 = $14; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
  $54 = $15; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
  $55 = $16; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
  $13 = $55;
  $56 = $13; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $10 = $53;
  $11 = $54;
  $12 = $56;
  $57 = $11; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
  $58 = $12; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
  $9 = $58;
  $59 = $9; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $60 = HEAP32[$59>>2]|0; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
  HEAP32[$57>>2] = $60; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
  $61 = ((($29)) + 8|0); //@line 269 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $62 = HEAP32[$61>>2]|0; //@line 269 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $63 = ((($62)) + 4|0); //@line 269 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  HEAP32[$61>>2] = $63; //@line 269 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $23 = $1;
  $64 = $23;
  $65 = HEAP32[$64>>2]|0; //@line 1113 "/usr/lib/emscripten/system/include/libcxx/iterator"
  $66 = ((($65)) + 4|0); //@line 1113 "/usr/lib/emscripten/system/include/libcxx/iterator"
  HEAP32[$64>>2] = $66; //@line 1113 "/usr/lib/emscripten/system/include/libcxx/iterator"
 }
 STACKTOP = sp;return; //@line 271 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 8|0;
 $22 = sp + 133|0;
 $29 = sp;
 $32 = sp + 132|0;
 $34 = $0;
 $35 = $34;
 $33 = $35;
 $36 = $33;
 $37 = ((($36)) + 4|0); //@line 88 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $38 = HEAP32[$37>>2]|0; //@line 88 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $30 = $36;
 $31 = $38;
 $39 = $30;
 $40 = $31; //@line 141 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0;
 $27 = $39;
 $28 = $40;
 $41 = $27;
 while(1) {
  $42 = $28; //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $43 = ((($41)) + 8|0); //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $44 = HEAP32[$43>>2]|0; //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $45 = ($42|0)!=($44|0); //@line 295 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  if (!($45)) {
   break;
  }
  $26 = $41;
  $46 = $26;
  $47 = ((($46)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $25 = $47;
  $48 = $25;
  $49 = ((($48)) + 4|0); //@line 2236 "/usr/lib/emscripten/system/include/libcxx/memory"
  $24 = $49;
  $50 = $24;
  $51 = HEAP32[$50>>2]|0; //@line 2110 "/usr/lib/emscripten/system/include/libcxx/memory"
  $52 = ((($41)) + 8|0); //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $53 = HEAP32[$52>>2]|0; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $54 = ((($53)) + -4|0); //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  HEAP32[$52>>2] = $54; //@line 296 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  $23 = $54;
  $55 = $23; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $51;
  $21 = $55;
  $56 = $20; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/memory"
  $57 = $21; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $56;
  $18 = $57;
  $58 = $17; //@line 1727 "/usr/lib/emscripten/system/include/libcxx/memory"
  $59 = $18; //@line 1727 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $58;
  $16 = $59;
 }
 $60 = HEAP32[$35>>2]|0; //@line 342 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $61 = ($60|0)!=(0|0); //@line 342 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 if (!($61)) {
  STACKTOP = sp;return; //@line 344 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 }
 $14 = $35;
 $62 = $14;
 $63 = ((($62)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $13 = $63;
 $64 = $13;
 $65 = ((($64)) + 4|0); //@line 2236 "/usr/lib/emscripten/system/include/libcxx/memory"
 $12 = $65;
 $66 = $12;
 $67 = HEAP32[$66>>2]|0; //@line 2110 "/usr/lib/emscripten/system/include/libcxx/memory"
 $68 = HEAP32[$35>>2]|0; //@line 343 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $4 = $35;
 $69 = $4;
 $3 = $69;
 $70 = $3;
 $71 = ((($70)) + 12|0); //@line 59 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $2 = $71;
 $72 = $2;
 $1 = $72;
 $73 = $1;
 $74 = HEAP32[$73>>2]|0; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $75 = HEAP32[$69>>2]|0; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $76 = $74; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $77 = $75; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $78 = (($76) - ($77))|0; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $79 = (($78|0) / 4)&-1; //@line 91 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $9 = $67;
 $10 = $68;
 $11 = $79;
 $80 = $9; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
 $81 = $10; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
 $82 = $11; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $80;
 $7 = $81;
 $8 = $82;
 $83 = $7; //@line 1796 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $83;
 $84 = $5; //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($84); //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
 STACKTOP = sp;return; //@line 344 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNSt3__214__split_bufferIPN7Decoder9RawBufferENS_9allocatorIS3_EEE9push_backEOS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $$byval_copy1 = sp + 376|0;
 $$byval_copy = sp + 372|0;
 $14 = sp + 8|0;
 $17 = sp + 381|0;
 $23 = sp + 292|0;
 $29 = sp + 268|0;
 $35 = sp + 244|0;
 $47 = sp + 196|0;
 $74 = sp;
 $79 = sp + 380|0;
 $87 = sp + 44|0;
 $88 = sp + 40|0;
 $89 = sp + 20|0;
 $90 = sp + 16|0;
 $91 = sp + 12|0;
 $83 = $0;
 $84 = $1;
 $92 = $83;
 $93 = ((($92)) + 8|0); //@line 565 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $94 = HEAP32[$93>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $82 = $92;
 $95 = $82;
 $96 = ((($95)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $81 = $96;
 $97 = $81;
 $80 = $97;
 $98 = $80;
 $99 = HEAP32[$98>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $100 = ($94|0)==($99|0); //@line 565 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 do {
  if ($100) {
   $101 = ((($92)) + 4|0); //@line 567 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $102 = HEAP32[$101>>2]|0; //@line 567 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $103 = HEAP32[$92>>2]|0; //@line 567 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $104 = ($102>>>0)>($103>>>0); //@line 567 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   if (!($104)) {
    $50 = $92;
    $151 = $50;
    $152 = ((($151)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $49 = $152;
    $153 = $49;
    $48 = $153;
    $154 = $48;
    $155 = HEAP32[$154>>2]|0; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $156 = HEAP32[$92>>2]|0; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $157 = $155; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $158 = $156; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $159 = (($157) - ($158))|0; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $160 = (($159|0) / 4)&-1; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $161 = $160<<1; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    HEAP32[$87>>2] = $161; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    HEAP32[$88>>2] = 1; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $15 = $87;
    $16 = $88;
    $162 = $15; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $163 = $16; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
    $12 = $162;
    $13 = $163;
    $164 = $12; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $165 = $13; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $9 = $14;
    $10 = $164;
    $11 = $165;
    $166 = $10; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $167 = HEAP32[$166>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $168 = $11; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $169 = HEAP32[$168>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $170 = ($167>>>0)<($169>>>0); //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $171 = $13; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $172 = $12; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $173 = $170 ? $171 : $172; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $174 = HEAP32[$173>>2]|0; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $86 = $174; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $175 = $86; //@line 577 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $176 = $86; //@line 577 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $177 = (($176>>>0) / 4)&-1; //@line 577 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $4 = $92;
    $178 = $4;
    $179 = ((($178)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $3 = $179;
    $180 = $3;
    $2 = $180;
    $181 = $2;
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEEC2EmmS6_($89,$175,$177,$181); //@line 577 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $182 = ((($92)) + 4|0); //@line 578 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $183 = HEAP32[$182>>2]|0; //@line 578 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $5 = $90;
    $6 = $183;
    $184 = $5;
    $185 = $6; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    HEAP32[$184>>2] = $185; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $186 = ((($92)) + 8|0); //@line 579 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $187 = HEAP32[$186>>2]|0; //@line 579 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $7 = $91;
    $8 = $187;
    $188 = $7;
    $189 = $8; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    HEAP32[$188>>2] = $189; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    ;HEAP32[$$byval_copy>>2]=HEAP32[$90>>2]|0; //@line 578 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$91>>2]|0; //@line 578 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_($89,$$byval_copy,$$byval_copy1); //@line 578 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $21 = $92;
    $22 = $89;
    $190 = $21; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $20 = $190;
    $191 = $20; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $192 = HEAP32[$191>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$23>>2] = $192; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $193 = $22; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $18 = $193;
    $194 = $18; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $195 = HEAP32[$194>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $196 = $21; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$196>>2] = $195; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $19 = $23;
    $197 = $19; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $198 = HEAP32[$197>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $199 = $22; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$199>>2] = $198; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $200 = ((($92)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $201 = ((($89)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $27 = $200;
    $28 = $201;
    $202 = $27; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $26 = $202;
    $203 = $26; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $204 = HEAP32[$203>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$29>>2] = $204; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $205 = $28; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $24 = $205;
    $206 = $24; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $207 = HEAP32[$206>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $208 = $27; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$208>>2] = $207; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $25 = $29;
    $209 = $25; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $210 = HEAP32[$209>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $211 = $28; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$211>>2] = $210; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $212 = ((($92)) + 8|0); //@line 582 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $213 = ((($89)) + 8|0); //@line 582 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $33 = $212;
    $34 = $213;
    $214 = $33; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $32 = $214;
    $215 = $32; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $216 = HEAP32[$215>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$35>>2] = $216; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $217 = $34; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $30 = $217;
    $218 = $30; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $219 = HEAP32[$218>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $220 = $33; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$220>>2] = $219; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $31 = $35;
    $221 = $31; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $222 = HEAP32[$221>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $223 = $34; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$223>>2] = $222; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $38 = $92;
    $224 = $38;
    $225 = ((($224)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $37 = $225;
    $226 = $37;
    $36 = $226;
    $227 = $36;
    $41 = $89;
    $228 = $41;
    $229 = ((($228)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $40 = $229;
    $230 = $40;
    $39 = $230;
    $231 = $39;
    $45 = $227;
    $46 = $231;
    $232 = $45; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $44 = $232;
    $233 = $44; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $234 = HEAP32[$233>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$47>>2] = $234; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $235 = $46; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $42 = $235;
    $236 = $42; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $237 = HEAP32[$236>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $238 = $45; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$238>>2] = $237; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $43 = $47;
    $239 = $43; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $240 = HEAP32[$239>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $241 = $46; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$241>>2] = $240; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEED2Ev($89); //@line 584 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    break;
   }
   $105 = ((($92)) + 4|0); //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $106 = HEAP32[$105>>2]|0; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $107 = HEAP32[$92>>2]|0; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $108 = $106; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $109 = $107; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $110 = (($108) - ($109))|0; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $111 = (($110|0) / 4)&-1; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $85 = $111; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $112 = $85; //@line 570 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $113 = (($112) + 1)|0; //@line 570 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $114 = (($113|0) / 2)&-1; //@line 570 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $85 = $114; //@line 570 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $115 = ((($92)) + 4|0); //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $116 = HEAP32[$115>>2]|0; //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $117 = ((($92)) + 8|0); //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $118 = HEAP32[$117>>2]|0; //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $119 = ((($92)) + 4|0); //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $120 = HEAP32[$119>>2]|0; //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $121 = $85; //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $122 = (0 - ($121))|0; //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $123 = (($120) + ($122<<2)|0); //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $58 = $116;
   $59 = $118;
   $60 = $123;
   $124 = $58; //@line 1976 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $57 = $124;
   $125 = $57; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $126 = $59; //@line 1976 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $51 = $126;
   $127 = $51; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $128 = $60; //@line 1976 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $52 = $128;
   $129 = $52; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $53 = $125;
   $54 = $127;
   $55 = $129;
   $130 = $54; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $131 = $53; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $132 = $130; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $133 = $131; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $134 = (($132) - ($133))|0; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $135 = (($134|0) / 4)&-1; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $56 = $135; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $136 = $56; //@line 1966 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $137 = ($136>>>0)>(0); //@line 1966 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   if ($137) {
    $138 = $55; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $139 = $53; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $140 = $56; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $141 = $140<<2; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    _memmove(($138|0),($139|0),($141|0))|0; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   }
   $142 = $55; //@line 1968 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $143 = $56; //@line 1968 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $144 = (($142) + ($143<<2)|0); //@line 1968 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $145 = ((($92)) + 8|0); //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   HEAP32[$145>>2] = $144; //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $146 = $85; //@line 572 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $147 = ((($92)) + 4|0); //@line 572 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $148 = HEAP32[$147>>2]|0; //@line 572 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $149 = (0 - ($146))|0; //@line 572 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $150 = (($148) + ($149<<2)|0); //@line 572 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   HEAP32[$147>>2] = $150; //@line 572 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  }
 } while(0);
 $63 = $92;
 $242 = $63;
 $243 = ((($242)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $62 = $243;
 $244 = $62;
 $61 = $244;
 $245 = $61;
 $246 = ((($92)) + 8|0); //@line 586 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $247 = HEAP32[$246>>2]|0; //@line 586 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $64 = $247;
 $248 = $64; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
 $249 = $84; //@line 587 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $65 = $249;
 $250 = $65; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $76 = $245;
 $77 = $248;
 $78 = $250;
 $251 = $76; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $252 = $77; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $253 = $78; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $75 = $253;
 $254 = $75; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 ;HEAP8[$74>>0]=HEAP8[$79>>0]|0;
 $71 = $251;
 $72 = $252;
 $73 = $254;
 $255 = $71; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $256 = $72; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $257 = $73; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $70 = $257;
 $258 = $70; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $67 = $255;
 $68 = $256;
 $69 = $258;
 $259 = $68; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $260 = $69; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $66 = $260;
 $261 = $66; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $262 = HEAP32[$261>>2]|0; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$259>>2] = $262; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $263 = ((($92)) + 8|0); //@line 588 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $264 = HEAP32[$263>>2]|0; //@line 588 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $265 = ((($264)) + 4|0); //@line 588 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$263>>2] = $265; //@line 588 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 STACKTOP = sp;return; //@line 589 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNSt3__214__split_bufferIPN7Decoder9RawBufferENS_9allocatorIS3_EEE10push_frontEOS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $$byval_copy1 = sp + 388|0;
 $$byval_copy = sp + 384|0;
 $10 = sp + 8|0;
 $13 = sp + 393|0;
 $26 = sp + 292|0;
 $32 = sp + 268|0;
 $38 = sp + 244|0;
 $50 = sp + 196|0;
 $77 = sp;
 $82 = sp + 392|0;
 $90 = sp + 44|0;
 $91 = sp + 40|0;
 $92 = sp + 20|0;
 $93 = sp + 16|0;
 $94 = sp + 12|0;
 $86 = $0;
 $87 = $1;
 $95 = $86;
 $96 = ((($95)) + 4|0); //@line 501 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $97 = HEAP32[$96>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $98 = HEAP32[$95>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $99 = ($97|0)==($98|0); //@line 501 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 do {
  if ($99) {
   $100 = ((($95)) + 8|0); //@line 503 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $101 = HEAP32[$100>>2]|0; //@line 503 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $85 = $95;
   $102 = $85;
   $103 = ((($102)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $84 = $103;
   $104 = $84;
   $83 = $104;
   $105 = $83;
   $106 = HEAP32[$105>>2]|0; //@line 503 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $107 = ($101>>>0)<($106>>>0); //@line 503 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   if (!($107)) {
    $20 = $95;
    $158 = $20;
    $159 = ((($158)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $19 = $159;
    $160 = $19;
    $18 = $160;
    $161 = $18;
    $162 = HEAP32[$161>>2]|0; //@line 512 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $163 = HEAP32[$95>>2]|0; //@line 512 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $164 = $162; //@line 512 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $165 = $163; //@line 512 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $166 = (($164) - ($165))|0; //@line 512 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $167 = (($166|0) / 4)&-1; //@line 512 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $168 = $167<<1; //@line 512 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    HEAP32[$90>>2] = $168; //@line 512 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    HEAP32[$91>>2] = 1; //@line 512 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $11 = $90;
    $12 = $91;
    $169 = $11; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $170 = $12; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
    $8 = $169;
    $9 = $170;
    $171 = $8; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $172 = $9; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $5 = $10;
    $6 = $171;
    $7 = $172;
    $173 = $6; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $174 = HEAP32[$173>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $175 = $7; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $176 = HEAP32[$175>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $177 = ($174>>>0)<($176>>>0); //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $178 = $9; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $179 = $8; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $180 = $177 ? $178 : $179; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $181 = HEAP32[$180>>2]|0; //@line 512 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $89 = $181; //@line 512 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $182 = $89; //@line 513 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $183 = $89; //@line 513 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $184 = (($183) + 3)|0; //@line 513 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $185 = (($184>>>0) / 4)&-1; //@line 513 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $4 = $95;
    $186 = $4;
    $187 = ((($186)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $3 = $187;
    $188 = $3;
    $2 = $188;
    $189 = $2;
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEEC2EmmS6_($92,$182,$185,$189); //@line 513 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $190 = ((($95)) + 4|0); //@line 514 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $191 = HEAP32[$190>>2]|0; //@line 514 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $14 = $93;
    $15 = $191;
    $192 = $14;
    $193 = $15; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    HEAP32[$192>>2] = $193; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $194 = ((($95)) + 8|0); //@line 515 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $195 = HEAP32[$194>>2]|0; //@line 515 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $16 = $94;
    $17 = $195;
    $196 = $16;
    $197 = $17; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    HEAP32[$196>>2] = $197; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    ;HEAP32[$$byval_copy>>2]=HEAP32[$93>>2]|0; //@line 514 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$94>>2]|0; //@line 514 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_($92,$$byval_copy,$$byval_copy1); //@line 514 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $24 = $95;
    $25 = $92;
    $198 = $24; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $23 = $198;
    $199 = $23; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $200 = HEAP32[$199>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$26>>2] = $200; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $201 = $25; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $21 = $201;
    $202 = $21; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $203 = HEAP32[$202>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $204 = $24; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$204>>2] = $203; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $22 = $26;
    $205 = $22; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $206 = HEAP32[$205>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $207 = $25; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$207>>2] = $206; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $208 = ((($95)) + 4|0); //@line 517 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $209 = ((($92)) + 4|0); //@line 517 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $30 = $208;
    $31 = $209;
    $210 = $30; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $29 = $210;
    $211 = $29; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $212 = HEAP32[$211>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$32>>2] = $212; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $213 = $31; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $27 = $213;
    $214 = $27; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $215 = HEAP32[$214>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $216 = $30; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$216>>2] = $215; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $28 = $32;
    $217 = $28; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $218 = HEAP32[$217>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $219 = $31; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$219>>2] = $218; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $220 = ((($95)) + 8|0); //@line 518 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $221 = ((($92)) + 8|0); //@line 518 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $36 = $220;
    $37 = $221;
    $222 = $36; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $35 = $222;
    $223 = $35; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $224 = HEAP32[$223>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$38>>2] = $224; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $225 = $37; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $33 = $225;
    $226 = $33; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $227 = HEAP32[$226>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $228 = $36; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$228>>2] = $227; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $34 = $38;
    $229 = $34; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $230 = HEAP32[$229>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $231 = $37; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$231>>2] = $230; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $41 = $95;
    $232 = $41;
    $233 = ((($232)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $40 = $233;
    $234 = $40;
    $39 = $234;
    $235 = $39;
    $44 = $92;
    $236 = $44;
    $237 = ((($236)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $43 = $237;
    $238 = $43;
    $42 = $238;
    $239 = $42;
    $48 = $235;
    $49 = $239;
    $240 = $48; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $47 = $240;
    $241 = $47; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $242 = HEAP32[$241>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$50>>2] = $242; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $243 = $49; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $45 = $243;
    $244 = $45; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $245 = HEAP32[$244>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $246 = $48; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$246>>2] = $245; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $46 = $50;
    $247 = $46; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $248 = HEAP32[$247>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $249 = $49; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$249>>2] = $248; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEED2Ev($92); //@line 520 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    break;
   }
   $63 = $95;
   $108 = $63;
   $109 = ((($108)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $62 = $109;
   $110 = $62;
   $61 = $110;
   $111 = $61;
   $112 = HEAP32[$111>>2]|0; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $113 = ((($95)) + 8|0); //@line 505 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $114 = HEAP32[$113>>2]|0; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $115 = $112; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $116 = $114; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $117 = (($115) - ($116))|0; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $118 = (($117|0) / 4)&-1; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $88 = $118; //@line 505 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $119 = $88; //@line 506 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $120 = (($119) + 1)|0; //@line 506 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $121 = (($120|0) / 2)&-1; //@line 506 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $88 = $121; //@line 506 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $122 = ((($95)) + 4|0); //@line 507 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $123 = HEAP32[$122>>2]|0; //@line 507 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $124 = ((($95)) + 8|0); //@line 507 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $125 = HEAP32[$124>>2]|0; //@line 507 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $126 = ((($95)) + 8|0); //@line 507 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $127 = HEAP32[$126>>2]|0; //@line 507 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $128 = $88; //@line 507 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $129 = (($127) + ($128<<2)|0); //@line 507 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $58 = $123;
   $59 = $125;
   $60 = $129;
   $130 = $58; //@line 2016 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $57 = $130;
   $131 = $57; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $132 = $59; //@line 2016 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $51 = $132;
   $133 = $51; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $134 = $60; //@line 2016 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $52 = $134;
   $135 = $52; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $53 = $131;
   $54 = $133;
   $55 = $135;
   $136 = $54; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $137 = $53; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $138 = $136; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $139 = $137; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $140 = (($138) - ($139))|0; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $141 = (($140|0) / 4)&-1; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $56 = $141; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $142 = $56; //@line 2002 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $143 = ($142>>>0)>(0); //@line 2002 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   if ($143) {
    $144 = $56; //@line 2004 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $145 = $55; //@line 2004 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $146 = (0 - ($144))|0; //@line 2004 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $147 = (($145) + ($146<<2)|0); //@line 2004 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $55 = $147; //@line 2004 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $148 = $55; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $149 = $53; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $150 = $56; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $151 = $150<<2; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    _memmove(($148|0),($149|0),($151|0))|0; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   }
   $152 = $55; //@line 2007 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $153 = ((($95)) + 4|0); //@line 507 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   HEAP32[$153>>2] = $152; //@line 507 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $154 = $88; //@line 508 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $155 = ((($95)) + 8|0); //@line 508 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $156 = HEAP32[$155>>2]|0; //@line 508 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $157 = (($156) + ($154<<2)|0); //@line 508 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   HEAP32[$155>>2] = $157; //@line 508 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  }
 } while(0);
 $66 = $95;
 $250 = $66;
 $251 = ((($250)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $65 = $251;
 $252 = $65;
 $64 = $252;
 $253 = $64;
 $254 = ((($95)) + 4|0); //@line 522 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $255 = HEAP32[$254>>2]|0; //@line 522 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $256 = ((($255)) + -4|0); //@line 522 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $67 = $256;
 $257 = $67; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
 $258 = $87; //@line 523 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $68 = $258;
 $259 = $68; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $79 = $253;
 $80 = $257;
 $81 = $259;
 $260 = $79; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $261 = $80; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $262 = $81; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $78 = $262;
 $263 = $78; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 ;HEAP8[$77>>0]=HEAP8[$82>>0]|0;
 $74 = $260;
 $75 = $261;
 $76 = $263;
 $264 = $74; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $265 = $75; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $266 = $76; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $73 = $266;
 $267 = $73; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $70 = $264;
 $71 = $265;
 $72 = $267;
 $268 = $71; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $269 = $72; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $69 = $269;
 $270 = $69; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $271 = HEAP32[$270>>2]|0; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$268>>2] = $271; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $272 = ((($95)) + 4|0); //@line 524 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $273 = HEAP32[$272>>2]|0; //@line 524 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $274 = ((($273)) + -4|0); //@line 524 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$272>>2] = $274; //@line 524 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 STACKTOP = sp;return; //@line 525 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEE9push_backEOS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $$byval_copy1 = sp + 376|0;
 $$byval_copy = sp + 372|0;
 $14 = sp + 8|0;
 $17 = sp + 381|0;
 $23 = sp + 292|0;
 $29 = sp + 268|0;
 $35 = sp + 244|0;
 $47 = sp + 196|0;
 $74 = sp;
 $79 = sp + 380|0;
 $87 = sp + 44|0;
 $88 = sp + 40|0;
 $89 = sp + 20|0;
 $90 = sp + 16|0;
 $91 = sp + 12|0;
 $83 = $0;
 $84 = $1;
 $92 = $83;
 $93 = ((($92)) + 8|0); //@line 565 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $94 = HEAP32[$93>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $82 = $92;
 $95 = $82;
 $96 = ((($95)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $81 = $96;
 $97 = $81;
 $80 = $97;
 $98 = $80;
 $99 = HEAP32[$98>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $100 = ($94|0)==($99|0); //@line 565 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 do {
  if ($100) {
   $101 = ((($92)) + 4|0); //@line 567 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $102 = HEAP32[$101>>2]|0; //@line 567 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $103 = HEAP32[$92>>2]|0; //@line 567 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $104 = ($102>>>0)>($103>>>0); //@line 567 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   if (!($104)) {
    $50 = $92;
    $151 = $50;
    $152 = ((($151)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $49 = $152;
    $153 = $49;
    $48 = $153;
    $154 = $48;
    $155 = HEAP32[$154>>2]|0; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $156 = HEAP32[$92>>2]|0; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $157 = $155; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $158 = $156; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $159 = (($157) - ($158))|0; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $160 = (($159|0) / 4)&-1; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $161 = $160<<1; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    HEAP32[$87>>2] = $161; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    HEAP32[$88>>2] = 1; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $15 = $87;
    $16 = $88;
    $162 = $15; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $163 = $16; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
    $12 = $162;
    $13 = $163;
    $164 = $12; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $165 = $13; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $9 = $14;
    $10 = $164;
    $11 = $165;
    $166 = $10; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $167 = HEAP32[$166>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $168 = $11; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $169 = HEAP32[$168>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $170 = ($167>>>0)<($169>>>0); //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $171 = $13; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $172 = $12; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $173 = $170 ? $171 : $172; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $174 = HEAP32[$173>>2]|0; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $86 = $174; //@line 576 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $175 = $86; //@line 577 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $176 = $86; //@line 577 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $177 = (($176>>>0) / 4)&-1; //@line 577 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $4 = $92;
    $178 = $4;
    $179 = ((($178)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $3 = $179;
    $180 = $3;
    $181 = ((($180)) + 4|0); //@line 2236 "/usr/lib/emscripten/system/include/libcxx/memory"
    $2 = $181;
    $182 = $2;
    $183 = HEAP32[$182>>2]|0; //@line 2110 "/usr/lib/emscripten/system/include/libcxx/memory"
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEEC2EmmS6_($89,$175,$177,$183); //@line 577 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $184 = ((($92)) + 4|0); //@line 578 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $185 = HEAP32[$184>>2]|0; //@line 578 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $5 = $90;
    $6 = $185;
    $186 = $5;
    $187 = $6; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    HEAP32[$186>>2] = $187; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $188 = ((($92)) + 8|0); //@line 579 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $189 = HEAP32[$188>>2]|0; //@line 579 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $7 = $91;
    $8 = $189;
    $190 = $7;
    $191 = $8; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    HEAP32[$190>>2] = $191; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    ;HEAP32[$$byval_copy>>2]=HEAP32[$90>>2]|0; //@line 578 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$91>>2]|0; //@line 578 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_($89,$$byval_copy,$$byval_copy1); //@line 578 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $21 = $92;
    $22 = $89;
    $192 = $21; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $20 = $192;
    $193 = $20; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $194 = HEAP32[$193>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$23>>2] = $194; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $195 = $22; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $18 = $195;
    $196 = $18; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $197 = HEAP32[$196>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $198 = $21; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$198>>2] = $197; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $19 = $23;
    $199 = $19; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $200 = HEAP32[$199>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $201 = $22; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$201>>2] = $200; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $202 = ((($92)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $203 = ((($89)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $27 = $202;
    $28 = $203;
    $204 = $27; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $26 = $204;
    $205 = $26; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $206 = HEAP32[$205>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$29>>2] = $206; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $207 = $28; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $24 = $207;
    $208 = $24; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $209 = HEAP32[$208>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $210 = $27; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$210>>2] = $209; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $25 = $29;
    $211 = $25; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $212 = HEAP32[$211>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $213 = $28; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$213>>2] = $212; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $214 = ((($92)) + 8|0); //@line 582 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $215 = ((($89)) + 8|0); //@line 582 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $33 = $214;
    $34 = $215;
    $216 = $33; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $32 = $216;
    $217 = $32; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $218 = HEAP32[$217>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$35>>2] = $218; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $219 = $34; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $30 = $219;
    $220 = $30; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $221 = HEAP32[$220>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $222 = $33; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$222>>2] = $221; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $31 = $35;
    $223 = $31; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $224 = HEAP32[$223>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $225 = $34; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$225>>2] = $224; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $38 = $92;
    $226 = $38;
    $227 = ((($226)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $37 = $227;
    $228 = $37;
    $36 = $228;
    $229 = $36;
    $41 = $89;
    $230 = $41;
    $231 = ((($230)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $40 = $231;
    $232 = $40;
    $39 = $232;
    $233 = $39;
    $45 = $229;
    $46 = $233;
    $234 = $45; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $44 = $234;
    $235 = $44; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $236 = HEAP32[$235>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$47>>2] = $236; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $237 = $46; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $42 = $237;
    $238 = $42; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $239 = HEAP32[$238>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $240 = $45; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$240>>2] = $239; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $43 = $47;
    $241 = $43; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $242 = HEAP32[$241>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $243 = $46; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$243>>2] = $242; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEED2Ev($89); //@line 584 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    break;
   }
   $105 = ((($92)) + 4|0); //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $106 = HEAP32[$105>>2]|0; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $107 = HEAP32[$92>>2]|0; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $108 = $106; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $109 = $107; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $110 = (($108) - ($109))|0; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $111 = (($110|0) / 4)&-1; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $85 = $111; //@line 569 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $112 = $85; //@line 570 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $113 = (($112) + 1)|0; //@line 570 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $114 = (($113|0) / 2)&-1; //@line 570 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $85 = $114; //@line 570 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $115 = ((($92)) + 4|0); //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $116 = HEAP32[$115>>2]|0; //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $117 = ((($92)) + 8|0); //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $118 = HEAP32[$117>>2]|0; //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $119 = ((($92)) + 4|0); //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $120 = HEAP32[$119>>2]|0; //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $121 = $85; //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $122 = (0 - ($121))|0; //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $123 = (($120) + ($122<<2)|0); //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $58 = $116;
   $59 = $118;
   $60 = $123;
   $124 = $58; //@line 1976 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $57 = $124;
   $125 = $57; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $126 = $59; //@line 1976 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $51 = $126;
   $127 = $51; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $128 = $60; //@line 1976 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $52 = $128;
   $129 = $52; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $53 = $125;
   $54 = $127;
   $55 = $129;
   $130 = $54; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $131 = $53; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $132 = $130; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $133 = $131; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $134 = (($132) - ($133))|0; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $135 = (($134|0) / 4)&-1; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $56 = $135; //@line 1965 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $136 = $56; //@line 1966 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $137 = ($136>>>0)>(0); //@line 1966 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   if ($137) {
    $138 = $55; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $139 = $53; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $140 = $56; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $141 = $140<<2; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    _memmove(($138|0),($139|0),($141|0))|0; //@line 1967 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   }
   $142 = $55; //@line 1968 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $143 = $56; //@line 1968 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $144 = (($142) + ($143<<2)|0); //@line 1968 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $145 = ((($92)) + 8|0); //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   HEAP32[$145>>2] = $144; //@line 571 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $146 = $85; //@line 572 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $147 = ((($92)) + 4|0); //@line 572 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $148 = HEAP32[$147>>2]|0; //@line 572 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $149 = (0 - ($146))|0; //@line 572 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $150 = (($148) + ($149<<2)|0); //@line 572 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   HEAP32[$147>>2] = $150; //@line 572 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  }
 } while(0);
 $63 = $92;
 $244 = $63;
 $245 = ((($244)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $62 = $245;
 $246 = $62;
 $247 = ((($246)) + 4|0); //@line 2236 "/usr/lib/emscripten/system/include/libcxx/memory"
 $61 = $247;
 $248 = $61;
 $249 = HEAP32[$248>>2]|0; //@line 2110 "/usr/lib/emscripten/system/include/libcxx/memory"
 $250 = ((($92)) + 8|0); //@line 586 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $251 = HEAP32[$250>>2]|0; //@line 586 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $64 = $251;
 $252 = $64; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
 $253 = $84; //@line 587 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $65 = $253;
 $254 = $65; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $76 = $249;
 $77 = $252;
 $78 = $254;
 $255 = $76; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $256 = $77; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $257 = $78; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $75 = $257;
 $258 = $75; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 ;HEAP8[$74>>0]=HEAP8[$79>>0]|0;
 $71 = $255;
 $72 = $256;
 $73 = $258;
 $259 = $71; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $260 = $72; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $261 = $73; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $70 = $261;
 $262 = $70; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $67 = $259;
 $68 = $260;
 $69 = $262;
 $263 = $68; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $264 = $69; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $66 = $264;
 $265 = $66; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $266 = HEAP32[$265>>2]|0; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$263>>2] = $266; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $267 = ((($92)) + 8|0); //@line 588 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $268 = HEAP32[$267>>2]|0; //@line 588 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $269 = ((($268)) + 4|0); //@line 588 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$267>>2] = $269; //@line 588 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 STACKTOP = sp;return; //@line 589 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEE10push_frontERKS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $$byval_copy1 = sp + 384|0;
 $$byval_copy = sp + 380|0;
 $10 = sp + 8|0;
 $13 = sp + 389|0;
 $26 = sp + 288|0;
 $32 = sp + 264|0;
 $38 = sp + 240|0;
 $50 = sp + 192|0;
 $76 = sp;
 $81 = sp + 388|0;
 $89 = sp + 44|0;
 $90 = sp + 40|0;
 $91 = sp + 20|0;
 $92 = sp + 16|0;
 $93 = sp + 12|0;
 $85 = $0;
 $86 = $1;
 $94 = $85;
 $95 = ((($94)) + 4|0); //@line 470 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $96 = HEAP32[$95>>2]|0; //@line 470 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $97 = HEAP32[$94>>2]|0; //@line 470 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $98 = ($96|0)==($97|0); //@line 470 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 do {
  if ($98) {
   $99 = ((($94)) + 8|0); //@line 472 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $100 = HEAP32[$99>>2]|0; //@line 472 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $84 = $94;
   $101 = $84;
   $102 = ((($101)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $83 = $102;
   $103 = $83;
   $82 = $103;
   $104 = $82;
   $105 = HEAP32[$104>>2]|0; //@line 472 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $106 = ($100>>>0)<($105>>>0); //@line 472 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   if (!($106)) {
    $20 = $94;
    $157 = $20;
    $158 = ((($157)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $19 = $158;
    $159 = $19;
    $18 = $159;
    $160 = $18;
    $161 = HEAP32[$160>>2]|0; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $162 = HEAP32[$94>>2]|0; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $163 = $161; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $164 = $162; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $165 = (($163) - ($164))|0; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $166 = (($165|0) / 4)&-1; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $167 = $166<<1; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    HEAP32[$89>>2] = $167; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    HEAP32[$90>>2] = 1; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $11 = $89;
    $12 = $90;
    $168 = $11; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $169 = $12; //@line 2719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
    $8 = $168;
    $9 = $169;
    $170 = $8; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $171 = $9; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $5 = $10;
    $6 = $170;
    $7 = $171;
    $172 = $6; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $173 = HEAP32[$172>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $174 = $7; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $175 = HEAP32[$174>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $176 = ($173>>>0)<($175>>>0); //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $177 = $9; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $178 = $8; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $179 = $176 ? $177 : $178; //@line 2711 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $180 = HEAP32[$179>>2]|0; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $88 = $180; //@line 481 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $181 = $88; //@line 482 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $182 = $88; //@line 482 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $183 = (($182) + 3)|0; //@line 482 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $184 = (($183>>>0) / 4)&-1; //@line 482 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $4 = $94;
    $185 = $4;
    $186 = ((($185)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $3 = $186;
    $187 = $3;
    $188 = ((($187)) + 4|0); //@line 2236 "/usr/lib/emscripten/system/include/libcxx/memory"
    $2 = $188;
    $189 = $2;
    $190 = HEAP32[$189>>2]|0; //@line 2110 "/usr/lib/emscripten/system/include/libcxx/memory"
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEEC2EmmS6_($91,$181,$184,$190); //@line 482 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $191 = ((($94)) + 4|0); //@line 483 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $192 = HEAP32[$191>>2]|0; //@line 483 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $14 = $92;
    $15 = $192;
    $193 = $14;
    $194 = $15; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    HEAP32[$193>>2] = $194; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    $195 = ((($94)) + 8|0); //@line 484 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $196 = HEAP32[$195>>2]|0; //@line 484 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $16 = $93;
    $17 = $196;
    $197 = $16;
    $198 = $17; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    HEAP32[$197>>2] = $198; //@line 1103 "/usr/lib/emscripten/system/include/libcxx/iterator"
    ;HEAP32[$$byval_copy>>2]=HEAP32[$92>>2]|0; //@line 483 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$93>>2]|0; //@line 483 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_($91,$$byval_copy,$$byval_copy1); //@line 483 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $24 = $94;
    $25 = $91;
    $199 = $24; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $23 = $199;
    $200 = $23; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $201 = HEAP32[$200>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$26>>2] = $201; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $202 = $25; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $21 = $202;
    $203 = $21; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $204 = HEAP32[$203>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $205 = $24; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$205>>2] = $204; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $22 = $26;
    $206 = $22; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $207 = HEAP32[$206>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $208 = $25; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$208>>2] = $207; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $209 = ((($94)) + 4|0); //@line 486 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $210 = ((($91)) + 4|0); //@line 486 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $30 = $209;
    $31 = $210;
    $211 = $30; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $29 = $211;
    $212 = $29; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $213 = HEAP32[$212>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$32>>2] = $213; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $214 = $31; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $27 = $214;
    $215 = $27; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $216 = HEAP32[$215>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $217 = $30; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$217>>2] = $216; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $28 = $32;
    $218 = $28; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $219 = HEAP32[$218>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $220 = $31; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$220>>2] = $219; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $221 = ((($94)) + 8|0); //@line 487 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $222 = ((($91)) + 8|0); //@line 487 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $36 = $221;
    $37 = $222;
    $223 = $36; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $35 = $223;
    $224 = $35; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $225 = HEAP32[$224>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$38>>2] = $225; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $226 = $37; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $33 = $226;
    $227 = $33; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $228 = HEAP32[$227>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $229 = $36; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$229>>2] = $228; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $34 = $38;
    $230 = $34; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $231 = HEAP32[$230>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $232 = $37; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$232>>2] = $231; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $41 = $94;
    $233 = $41;
    $234 = ((($233)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $40 = $234;
    $235 = $40;
    $39 = $235;
    $236 = $39;
    $44 = $91;
    $237 = $44;
    $238 = ((($237)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    $43 = $238;
    $239 = $43;
    $42 = $239;
    $240 = $42;
    $48 = $236;
    $49 = $240;
    $241 = $48; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $47 = $241;
    $242 = $47; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $243 = HEAP32[$242>>2]|0; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$50>>2] = $243; //@line 4646 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $244 = $49; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $45 = $244;
    $245 = $45; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $246 = HEAP32[$245>>2]|0; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $247 = $48; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$247>>2] = $246; //@line 4647 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $46 = $50;
    $248 = $46; //@line 2293 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $249 = HEAP32[$248>>2]|0; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    $250 = $49; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    HEAP32[$250>>2] = $249; //@line 4648 "/usr/lib/emscripten/system/include/libcxx/type_traits"
    __ZNSt3__214__split_bufferIPN7Decoder9RawBufferERNS_9allocatorIS3_EEED2Ev($91); //@line 489 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
    break;
   }
   $63 = $94;
   $107 = $63;
   $108 = ((($107)) + 12|0); //@line 58 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $62 = $108;
   $109 = $62;
   $61 = $109;
   $110 = $61;
   $111 = HEAP32[$110>>2]|0; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $112 = ((($94)) + 8|0); //@line 474 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $113 = HEAP32[$112>>2]|0; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $114 = $111; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $115 = $113; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $116 = (($114) - ($115))|0; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $117 = (($116|0) / 4)&-1; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $87 = $117; //@line 474 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $118 = $87; //@line 475 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $119 = (($118) + 1)|0; //@line 475 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $120 = (($119|0) / 2)&-1; //@line 475 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $87 = $120; //@line 475 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $121 = ((($94)) + 4|0); //@line 476 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $122 = HEAP32[$121>>2]|0; //@line 476 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $123 = ((($94)) + 8|0); //@line 476 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $124 = HEAP32[$123>>2]|0; //@line 476 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $125 = ((($94)) + 8|0); //@line 476 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $126 = HEAP32[$125>>2]|0; //@line 476 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $127 = $87; //@line 476 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $128 = (($126) + ($127<<2)|0); //@line 476 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $58 = $122;
   $59 = $124;
   $60 = $128;
   $129 = $58; //@line 2016 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $57 = $129;
   $130 = $57; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $131 = $59; //@line 2016 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $51 = $131;
   $132 = $51; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $133 = $60; //@line 2016 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $52 = $133;
   $134 = $52; //@line 1761 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $53 = $130;
   $54 = $132;
   $55 = $134;
   $135 = $54; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $136 = $53; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $137 = $135; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $138 = $136; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $139 = (($137) - ($138))|0; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $140 = (($139|0) / 4)&-1; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $56 = $140; //@line 2001 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $141 = $56; //@line 2002 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $142 = ($141>>>0)>(0); //@line 2002 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   if ($142) {
    $143 = $56; //@line 2004 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $144 = $55; //@line 2004 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $145 = (0 - ($143))|0; //@line 2004 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $146 = (($144) + ($145<<2)|0); //@line 2004 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $55 = $146; //@line 2004 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $147 = $55; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $148 = $53; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $149 = $56; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    $150 = $149<<2; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/algorithm"
    _memmove(($147|0),($148|0),($150|0))|0; //@line 2005 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   }
   $151 = $55; //@line 2007 "/usr/lib/emscripten/system/include/libcxx/algorithm"
   $152 = ((($94)) + 4|0); //@line 476 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   HEAP32[$152>>2] = $151; //@line 476 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $153 = $87; //@line 477 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $154 = ((($94)) + 8|0); //@line 477 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $155 = HEAP32[$154>>2]|0; //@line 477 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   $156 = (($155) + ($153<<2)|0); //@line 477 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
   HEAP32[$154>>2] = $156; //@line 477 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
  }
 } while(0);
 $66 = $94;
 $251 = $66;
 $252 = ((($251)) + 12|0); //@line 56 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $65 = $252;
 $253 = $65;
 $254 = ((($253)) + 4|0); //@line 2236 "/usr/lib/emscripten/system/include/libcxx/memory"
 $64 = $254;
 $255 = $64;
 $256 = HEAP32[$255>>2]|0; //@line 2110 "/usr/lib/emscripten/system/include/libcxx/memory"
 $257 = ((($94)) + 4|0); //@line 491 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $258 = HEAP32[$257>>2]|0; //@line 491 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $259 = ((($258)) + -4|0); //@line 491 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $67 = $259;
 $260 = $67; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
 $261 = $86; //@line 491 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $78 = $256;
 $79 = $260;
 $80 = $261;
 $262 = $78; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $263 = $79; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $264 = $80; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
 $77 = $264;
 $265 = $77; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 ;HEAP8[$76>>0]=HEAP8[$81>>0]|0;
 $73 = $262;
 $74 = $263;
 $75 = $265;
 $266 = $73; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $267 = $74; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $268 = $75; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
 $72 = $268;
 $269 = $72; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $69 = $266;
 $70 = $267;
 $71 = $269;
 $270 = $70; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $271 = $71; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $68 = $271;
 $272 = $68; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $273 = HEAP32[$272>>2]|0; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 HEAP32[$270>>2] = $273; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
 $274 = ((($94)) + 4|0); //@line 492 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $275 = HEAP32[$274>>2]|0; //@line 492 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 $276 = ((($275)) + -4|0); //@line 492 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 HEAP32[$274>>2] = $276; //@line 492 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
 STACKTOP = sp;return; //@line 493 "/usr/lib/emscripten/system/include/libcxx/__split_buffer"
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 217 "/usr/lib/emscripten/system/include/libcxx/__string"
 $3 = (_strlen($2)|0); //@line 217 "/usr/lib/emscripten/system/include/libcxx/__string"
 STACKTOP = sp;return ($3|0); //@line 217 "/usr/lib/emscripten/system/include/libcxx/__string"
}
function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 92|0;
 $8 = sp + 76|0;
 $24 = sp + 8|0;
 $25 = sp + 4|0;
 $26 = sp;
 $21 = $0;
 $22 = $1;
 $23 = $2;
 $27 = $21; //@line 721 "/usr/lib/emscripten/system/include/libcxx/ostream"
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($24,$27); //@line 721 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $20 = $24;
 $28 = $20;
 $29 = HEAP8[$28>>0]|0; //@line 254 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $30 = $29&1; //@line 254 "/usr/lib/emscripten/system/include/libcxx/ostream"
 if (!($30)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($24); //@line 736 "/usr/lib/emscripten/system/include/libcxx/ostream"
  $107 = $21; //@line 742 "/usr/lib/emscripten/system/include/libcxx/ostream"
  STACKTOP = sp;return ($107|0); //@line 742 "/usr/lib/emscripten/system/include/libcxx/ostream"
 }
 $31 = $21; //@line 725 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $18 = $26;
 $19 = $31;
 $32 = $18;
 $33 = $19; //@line 1050 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $34 = HEAP32[$33>>2]|0; //@line 1050 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $35 = ((($34)) + -12|0); //@line 1050 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $36 = HEAP32[$35>>2]|0; //@line 1050 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $37 = (($33) + ($36)|0); //@line 1050 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $17 = $37;
 $38 = $17;
 $16 = $38;
 $39 = $16;
 $40 = ((($39)) + 24|0); //@line 340 "/usr/lib/emscripten/system/include/libcxx/ios"
 $41 = HEAP32[$40>>2]|0; //@line 340 "/usr/lib/emscripten/system/include/libcxx/ios"
 HEAP32[$32>>2] = $41; //@line 1050 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $42 = $22; //@line 726 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $43 = $21; //@line 727 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $44 = HEAP32[$43>>2]|0; //@line 727 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $45 = ((($44)) + -12|0); //@line 727 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $46 = HEAP32[$45>>2]|0; //@line 727 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $47 = (($43) + ($46)|0); //@line 727 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $11 = $47;
 $48 = $11;
 $49 = ((($48)) + 4|0); //@line 442 "/usr/lib/emscripten/system/include/libcxx/ios"
 $50 = HEAP32[$49>>2]|0; //@line 442 "/usr/lib/emscripten/system/include/libcxx/ios"
 $51 = $50 & 176; //@line 727 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $52 = ($51|0)==(32); //@line 727 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $53 = $22; //@line 728 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $54 = $23; //@line 728 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $55 = (($53) + ($54)|0); //@line 728 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $56 = $22; //@line 729 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $57 = $52 ? $55 : $56; //@line 727 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $58 = $22; //@line 730 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $59 = $23; //@line 730 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $60 = (($58) + ($59)|0); //@line 730 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $61 = $21; //@line 731 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $62 = HEAP32[$61>>2]|0; //@line 731 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $63 = ((($62)) + -12|0); //@line 731 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $64 = HEAP32[$63>>2]|0; //@line 731 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $65 = (($61) + ($64)|0); //@line 731 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $66 = $21; //@line 732 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $67 = HEAP32[$66>>2]|0; //@line 732 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $68 = ((($67)) + -12|0); //@line 732 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $69 = HEAP32[$68>>2]|0; //@line 732 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $70 = (($66) + ($69)|0); //@line 732 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $9 = $70;
 $71 = $9;
 $72 = (__ZNSt3__211char_traitsIcE3eofEv()|0); //@line 764 "/usr/lib/emscripten/system/include/libcxx/ios"
 $73 = ((($71)) + 76|0); //@line 764 "/usr/lib/emscripten/system/include/libcxx/ios"
 $74 = HEAP32[$73>>2]|0; //@line 764 "/usr/lib/emscripten/system/include/libcxx/ios"
 $75 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($72,$74)|0); //@line 764 "/usr/lib/emscripten/system/include/libcxx/ios"
 if ($75) {
  $6 = $71;
  $7 = 32;
  $76 = $6;
  __ZNKSt3__28ios_base6getlocEv($8,$76); //@line 756 "/usr/lib/emscripten/system/include/libcxx/ios"
  $5 = $8;
  $77 = $5; //@line 238 "/usr/lib/emscripten/system/include/libcxx/__locale"
  $78 = (__ZNKSt3__26locale9use_facetERNS0_2idE($77,70992)|0); //@line 238 "/usr/lib/emscripten/system/include/libcxx/__locale"
  $79 = $7; //@line 756 "/usr/lib/emscripten/system/include/libcxx/ios"
  $3 = $78;
  $4 = $79;
  $80 = $3;
  $81 = HEAP32[$80>>2]|0; //@line 653 "/usr/lib/emscripten/system/include/libcxx/__locale"
  $82 = ((($81)) + 28|0); //@line 653 "/usr/lib/emscripten/system/include/libcxx/__locale"
  $83 = HEAP32[$82>>2]|0; //@line 653 "/usr/lib/emscripten/system/include/libcxx/__locale"
  $84 = $4; //@line 653 "/usr/lib/emscripten/system/include/libcxx/__locale"
  $85 = (FUNCTION_TABLE_iii[$83 & 511]($80,$84)|0); //@line 653 "/usr/lib/emscripten/system/include/libcxx/__locale"
  __ZNSt3__26localeD2Ev($8); //@line 756 "/usr/lib/emscripten/system/include/libcxx/ios"
  $86 = $85 << 24 >> 24; //@line 765 "/usr/lib/emscripten/system/include/libcxx/ios"
  $87 = ((($71)) + 76|0); //@line 765 "/usr/lib/emscripten/system/include/libcxx/ios"
  HEAP32[$87>>2] = $86; //@line 765 "/usr/lib/emscripten/system/include/libcxx/ios"
 }
 $88 = ((($71)) + 76|0); //@line 766 "/usr/lib/emscripten/system/include/libcxx/ios"
 $89 = HEAP32[$88>>2]|0; //@line 766 "/usr/lib/emscripten/system/include/libcxx/ios"
 $90 = $89&255; //@line 766 "/usr/lib/emscripten/system/include/libcxx/ios"
 ;HEAP32[$$byval_copy>>2]=HEAP32[$26>>2]|0; //@line 725 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $91 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$42,$57,$60,$65,$90)|0); //@line 725 "/usr/lib/emscripten/system/include/libcxx/ostream"
 HEAP32[$25>>2] = $91; //@line 725 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $10 = $25;
 $92 = $10;
 $93 = HEAP32[$92>>2]|0; //@line 1062 "/usr/lib/emscripten/system/include/libcxx/iterator"
 $94 = ($93|0)==(0|0); //@line 1062 "/usr/lib/emscripten/system/include/libcxx/iterator"
 if (!($94)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($24); //@line 736 "/usr/lib/emscripten/system/include/libcxx/ostream"
  $107 = $21; //@line 742 "/usr/lib/emscripten/system/include/libcxx/ostream"
  STACKTOP = sp;return ($107|0); //@line 742 "/usr/lib/emscripten/system/include/libcxx/ostream"
 }
 $95 = $21; //@line 733 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $96 = HEAP32[$95>>2]|0; //@line 733 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $97 = ((($96)) + -12|0); //@line 733 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $98 = HEAP32[$97>>2]|0; //@line 733 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $99 = (($95) + ($98)|0); //@line 733 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $14 = $99;
 $15 = 5;
 $100 = $14;
 $101 = $15; //@line 611 "/usr/lib/emscripten/system/include/libcxx/ios"
 $12 = $100;
 $13 = $101;
 $102 = $12;
 $103 = ((($102)) + 16|0); //@line 529 "/usr/lib/emscripten/system/include/libcxx/ios"
 $104 = HEAP32[$103>>2]|0; //@line 529 "/usr/lib/emscripten/system/include/libcxx/ios"
 $105 = $13; //@line 529 "/usr/lib/emscripten/system/include/libcxx/ios"
 $106 = $104 | $105; //@line 529 "/usr/lib/emscripten/system/include/libcxx/ios"
 __ZNSt3__28ios_base5clearEj($102,$106); //@line 529 "/usr/lib/emscripten/system/include/libcxx/ios"
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($24); //@line 736 "/usr/lib/emscripten/system/include/libcxx/ostream"
 $107 = $21; //@line 742 "/usr/lib/emscripten/system/include/libcxx/ostream"
 STACKTOP = sp;return ($107|0); //@line 742 "/usr/lib/emscripten/system/include/libcxx/ostream"
}
function __ZNSt3__211char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1; //@line 239 "/usr/lib/emscripten/system/include/libcxx/__string"
}
function __ZNSt3__211char_traitsIcE11eq_int_typeEii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2; //@line 237 "/usr/lib/emscripten/system/include/libcxx/__string"
 $5 = $3; //@line 237 "/usr/lib/emscripten/system/include/libcxx/__string"
 $6 = ($4|0)==($5|0); //@line 237 "/usr/lib/emscripten/system/include/libcxx/__string"
 STACKTOP = sp;return ($6|0); //@line 237 "/usr/lib/emscripten/system/include/libcxx/__string"
}
function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $40 = sp + 44|0;
 $49 = sp + 4|0;
 $41 = $1;
 $42 = $2;
 $43 = $3;
 $44 = $4;
 $45 = $5;
 $51 = HEAP32[$0>>2]|0; //@line 1385 "/usr/lib/emscripten/system/include/libcxx/locale"
 $52 = ($51|0)==(0|0); //@line 1385 "/usr/lib/emscripten/system/include/libcxx/locale"
 if ($52) {
  ;HEAP32[$40>>2]=HEAP32[$0>>2]|0; //@line 1386 "/usr/lib/emscripten/system/include/libcxx/locale"
  $155 = HEAP32[$40>>2]|0; //@line 1422 "/usr/lib/emscripten/system/include/libcxx/locale"
  STACKTOP = sp;return ($155|0); //@line 1422 "/usr/lib/emscripten/system/include/libcxx/locale"
 }
 $53 = $43; //@line 1387 "/usr/lib/emscripten/system/include/libcxx/locale"
 $54 = $41; //@line 1387 "/usr/lib/emscripten/system/include/libcxx/locale"
 $55 = $53; //@line 1387 "/usr/lib/emscripten/system/include/libcxx/locale"
 $56 = $54; //@line 1387 "/usr/lib/emscripten/system/include/libcxx/locale"
 $57 = (($55) - ($56))|0; //@line 1387 "/usr/lib/emscripten/system/include/libcxx/locale"
 $46 = $57; //@line 1387 "/usr/lib/emscripten/system/include/libcxx/locale"
 $58 = $44; //@line 1388 "/usr/lib/emscripten/system/include/libcxx/locale"
 $39 = $58;
 $59 = $39;
 $60 = ((($59)) + 12|0); //@line 504 "/usr/lib/emscripten/system/include/libcxx/ios"
 $61 = HEAP32[$60>>2]|0; //@line 504 "/usr/lib/emscripten/system/include/libcxx/ios"
 $47 = $61; //@line 1388 "/usr/lib/emscripten/system/include/libcxx/locale"
 $62 = $47; //@line 1389 "/usr/lib/emscripten/system/include/libcxx/locale"
 $63 = $46; //@line 1389 "/usr/lib/emscripten/system/include/libcxx/locale"
 $64 = ($62|0)>($63|0); //@line 1389 "/usr/lib/emscripten/system/include/libcxx/locale"
 if ($64) {
  $65 = $46; //@line 1390 "/usr/lib/emscripten/system/include/libcxx/locale"
  $66 = $47; //@line 1390 "/usr/lib/emscripten/system/include/libcxx/locale"
  $67 = (($66) - ($65))|0; //@line 1390 "/usr/lib/emscripten/system/include/libcxx/locale"
  $47 = $67; //@line 1390 "/usr/lib/emscripten/system/include/libcxx/locale"
 } else {
  $47 = 0; //@line 1392 "/usr/lib/emscripten/system/include/libcxx/locale"
 }
 $68 = $42; //@line 1393 "/usr/lib/emscripten/system/include/libcxx/locale"
 $69 = $41; //@line 1393 "/usr/lib/emscripten/system/include/libcxx/locale"
 $70 = $68; //@line 1393 "/usr/lib/emscripten/system/include/libcxx/locale"
 $71 = $69; //@line 1393 "/usr/lib/emscripten/system/include/libcxx/locale"
 $72 = (($70) - ($71))|0; //@line 1393 "/usr/lib/emscripten/system/include/libcxx/locale"
 $48 = $72; //@line 1393 "/usr/lib/emscripten/system/include/libcxx/locale"
 $73 = $48; //@line 1394 "/usr/lib/emscripten/system/include/libcxx/locale"
 $74 = ($73|0)>(0); //@line 1394 "/usr/lib/emscripten/system/include/libcxx/locale"
 if ($74) {
  $75 = HEAP32[$0>>2]|0; //@line 1396 "/usr/lib/emscripten/system/include/libcxx/locale"
  $76 = $41; //@line 1396 "/usr/lib/emscripten/system/include/libcxx/locale"
  $77 = $48; //@line 1396 "/usr/lib/emscripten/system/include/libcxx/locale"
  $30 = $75;
  $31 = $76;
  $32 = $77;
  $78 = $30;
  $79 = HEAP32[$78>>2]|0; //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $80 = ((($79)) + 48|0); //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $81 = HEAP32[$80>>2]|0; //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $82 = $31; //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $83 = $32; //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $84 = (FUNCTION_TABLE_iiii[$81 & 1023]($78,$82,$83)|0); //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $85 = $48; //@line 1396 "/usr/lib/emscripten/system/include/libcxx/locale"
  $86 = ($84|0)!=($85|0); //@line 1396 "/usr/lib/emscripten/system/include/libcxx/locale"
  if ($86) {
   HEAP32[$0>>2] = 0; //@line 1398 "/usr/lib/emscripten/system/include/libcxx/locale"
   ;HEAP32[$40>>2]=HEAP32[$0>>2]|0; //@line 1399 "/usr/lib/emscripten/system/include/libcxx/locale"
   $155 = HEAP32[$40>>2]|0; //@line 1422 "/usr/lib/emscripten/system/include/libcxx/locale"
   STACKTOP = sp;return ($155|0); //@line 1422 "/usr/lib/emscripten/system/include/libcxx/locale"
  }
 }
 $87 = $47; //@line 1402 "/usr/lib/emscripten/system/include/libcxx/locale"
 $88 = ($87|0)>(0); //@line 1402 "/usr/lib/emscripten/system/include/libcxx/locale"
 if ($88) {
  $89 = $47; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/locale"
  $90 = $45; //@line 1404 "/usr/lib/emscripten/system/include/libcxx/locale"
  $27 = $49;
  $28 = $89;
  $29 = $90;
  $91 = $27;
  $26 = $91;
  $92 = $26;
  $25 = $92;
  $93 = $25;
  ;HEAP32[$93>>2]=0|0;HEAP32[$93+4>>2]=0|0;HEAP32[$93+8>>2]=0|0; //@line 2089 "/usr/lib/emscripten/system/include/libcxx/memory"
  $24 = $92;
  $94 = $24;
  $23 = $94;
  $95 = $28; //@line 1742 "/usr/lib/emscripten/system/include/libcxx/string"
  $96 = $29; //@line 1742 "/usr/lib/emscripten/system/include/libcxx/string"
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($91,$95,$96); //@line 1742 "/usr/lib/emscripten/system/include/libcxx/string"
  $97 = HEAP32[$0>>2]|0; //@line 1405 "/usr/lib/emscripten/system/include/libcxx/locale"
  $22 = $49;
  $98 = $22;
  $21 = $98;
  $99 = $21;
  $20 = $99;
  $100 = $20;
  $19 = $100;
  $101 = $19;
  $18 = $101;
  $102 = $18;
  $103 = ((($102)) + 11|0); //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
  $104 = HEAP8[$103>>0]|0; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
  $105 = $104&255; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
  $106 = $105 & 128; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
  $107 = ($106|0)!=(0); //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
  if ($107) {
   $12 = $99;
   $108 = $12;
   $11 = $108;
   $109 = $11;
   $10 = $109;
   $110 = $10;
   $111 = HEAP32[$110>>2]|0; //@line 1337 "/usr/lib/emscripten/system/include/libcxx/string"
   $117 = $111;
  } else {
   $17 = $99;
   $112 = $17;
   $16 = $112;
   $113 = $16;
   $15 = $113;
   $114 = $15;
   $14 = $114;
   $115 = $14; //@line 988 "/usr/lib/emscripten/system/include/libcxx/memory"
   $13 = $115;
   $116 = $13; //@line 451 "/usr/lib/emscripten/system/include/libcxx/type_traits"
   $117 = $116;
  }
  $9 = $117;
  $118 = $9; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
  $119 = $47; //@line 1405 "/usr/lib/emscripten/system/include/libcxx/locale"
  $6 = $97;
  $7 = $118;
  $8 = $119;
  $120 = $6;
  $121 = HEAP32[$120>>2]|0; //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $122 = ((($121)) + 48|0); //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $123 = HEAP32[$122>>2]|0; //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $124 = $7; //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $125 = $8; //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $126 = (FUNCTION_TABLE_iiii[$123 & 1023]($120,$124,$125)|0); //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $127 = $47; //@line 1405 "/usr/lib/emscripten/system/include/libcxx/locale"
  $128 = ($126|0)!=($127|0); //@line 1405 "/usr/lib/emscripten/system/include/libcxx/locale"
  if ($128) {
   HEAP32[$0>>2] = 0; //@line 1407 "/usr/lib/emscripten/system/include/libcxx/locale"
   ;HEAP32[$40>>2]=HEAP32[$0>>2]|0; //@line 1408 "/usr/lib/emscripten/system/include/libcxx/locale"
   $50 = 1;
  } else {
   $50 = 0; //@line 1410 "/usr/lib/emscripten/system/include/libcxx/locale"
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($49); //@line 1410 "/usr/lib/emscripten/system/include/libcxx/locale"
  $129 = $50;
  $switch = ($129>>>0)<(1);
  if (!($switch)) {
   $155 = HEAP32[$40>>2]|0; //@line 1422 "/usr/lib/emscripten/system/include/libcxx/locale"
   STACKTOP = sp;return ($155|0); //@line 1422 "/usr/lib/emscripten/system/include/libcxx/locale"
  }
 }
 $130 = $43; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/locale"
 $131 = $42; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/locale"
 $132 = $130; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/locale"
 $133 = $131; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/locale"
 $134 = (($132) - ($133))|0; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/locale"
 $48 = $134; //@line 1411 "/usr/lib/emscripten/system/include/libcxx/locale"
 $135 = $48; //@line 1412 "/usr/lib/emscripten/system/include/libcxx/locale"
 $136 = ($135|0)>(0); //@line 1412 "/usr/lib/emscripten/system/include/libcxx/locale"
 if ($136) {
  $137 = HEAP32[$0>>2]|0; //@line 1414 "/usr/lib/emscripten/system/include/libcxx/locale"
  $138 = $42; //@line 1414 "/usr/lib/emscripten/system/include/libcxx/locale"
  $139 = $48; //@line 1414 "/usr/lib/emscripten/system/include/libcxx/locale"
  $33 = $137;
  $34 = $138;
  $35 = $139;
  $140 = $33;
  $141 = HEAP32[$140>>2]|0; //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $142 = ((($141)) + 48|0); //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $143 = HEAP32[$142>>2]|0; //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $144 = $34; //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $145 = $35; //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $146 = (FUNCTION_TABLE_iiii[$143 & 1023]($140,$144,$145)|0); //@line 227 "/usr/lib/emscripten/system/include/libcxx/streambuf"
  $147 = $48; //@line 1414 "/usr/lib/emscripten/system/include/libcxx/locale"
  $148 = ($146|0)!=($147|0); //@line 1414 "/usr/lib/emscripten/system/include/libcxx/locale"
  if ($148) {
   HEAP32[$0>>2] = 0; //@line 1416 "/usr/lib/emscripten/system/include/libcxx/locale"
   ;HEAP32[$40>>2]=HEAP32[$0>>2]|0; //@line 1417 "/usr/lib/emscripten/system/include/libcxx/locale"
   $155 = HEAP32[$40>>2]|0; //@line 1422 "/usr/lib/emscripten/system/include/libcxx/locale"
   STACKTOP = sp;return ($155|0); //@line 1422 "/usr/lib/emscripten/system/include/libcxx/locale"
  }
 }
 $149 = $44; //@line 1420 "/usr/lib/emscripten/system/include/libcxx/locale"
 $36 = $149;
 $37 = 0;
 $150 = $36;
 $151 = ((($150)) + 12|0); //@line 511 "/usr/lib/emscripten/system/include/libcxx/ios"
 $152 = HEAP32[$151>>2]|0; //@line 511 "/usr/lib/emscripten/system/include/libcxx/ios"
 $38 = $152; //@line 511 "/usr/lib/emscripten/system/include/libcxx/ios"
 $153 = $37; //@line 512 "/usr/lib/emscripten/system/include/libcxx/ios"
 $154 = ((($150)) + 12|0); //@line 512 "/usr/lib/emscripten/system/include/libcxx/ios"
 HEAP32[$154>>2] = $153; //@line 512 "/usr/lib/emscripten/system/include/libcxx/ios"
 ;HEAP32[$40>>2]=HEAP32[$0>>2]|0; //@line 1421 "/usr/lib/emscripten/system/include/libcxx/locale"
 $155 = HEAP32[$40>>2]|0; //@line 1422 "/usr/lib/emscripten/system/include/libcxx/locale"
 STACKTOP = sp;return ($155|0); //@line 1422 "/usr/lib/emscripten/system/include/libcxx/locale"
}
function __ZN7Decoder6decodeEj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $13 = sp + 116|0;
 $16 = sp + 64|0;
 $17 = sp + 60|0;
 $18 = sp + 48|0;
 $19 = sp + 44|0;
 $20 = sp + 40|0;
 $21 = sp + 36|0;
 $26 = sp + 16|0;
 $27 = sp + 4|0;
 $28 = sp;
 $11 = $1;
 $12 = $2;
 $29 = $11;
 $$expand_i1_val = 0; //@line 95 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP8[$13>>0] = $$expand_i1_val; //@line 95 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 __ZN10emscripten3val9undefinedEv($0); //@line 95 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $30 = $12; //@line 97 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $31 = (__ZN7Decoder10framesLeftEj($29,$30)|0); //@line 97 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $14 = $31; //@line 97 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $15 = 0; //@line 98 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $32 = $14; //@line 99 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $33 = ($32|0)>(0); //@line 99 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 if ($33) {
  $34 = ((($29)) + 22696|0); //@line 100 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $35 = ((($29)) + 8|0); //@line 100 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $36 = $14; //@line 100 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $37 = ((($29)) + 16|0); //@line 100 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $38 = HEAP16[$37>>1]|0; //@line 100 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $39 = $38&65535; //@line 100 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $40 = Math_imul($36, $39)|0; //@line 100 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  HEAP32[$17>>2] = $40; //@line 100 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $41 = ((($29)) + 4|0); //@line 100 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  __ZNK10emscripten3val4callIS0_JRhiRjEEET_PKcDpOT0_($16,$34,58183,$35,$17,$41); //@line 100 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  (__ZN10emscripten3valaSEOS0_($0,$16)|0); //@line 100 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  __ZN10emscripten3valD2Ev($16); //@line 100 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $42 = ((($29)) + 8|0); //@line 102 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $43 = HEAP8[$42>>0]|0; //@line 102 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $44 = $43&255; //@line 102 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  __ZN10emscripten3val9undefinedEv($19); //@line 102 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  __ZNSt3__26vectorIN10emscripten3valENS_9allocatorIS2_EEEC2EmRKS2_($18,$44,$19); //@line 102 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  __ZN10emscripten3valD2Ev($19); //@line 102 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  HEAP32[$20>>2] = 0; //@line 103 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  while(1) {
   $45 = HEAP32[$20>>2]|0; //@line 103 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $46 = ((($29)) + 8|0); //@line 103 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $47 = HEAP8[$46>>0]|0; //@line 103 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $48 = $47&255; //@line 103 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $49 = ($45|0)<($48|0); //@line 103 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   if (!($49)) {
    break;
   }
   __ZNK10emscripten3val4callIS0_JRiEEET_PKcDpOT0_($21,$0,58196,$20); //@line 104 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $50 = HEAP32[$20>>2]|0; //@line 104 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $9 = $18;
   $10 = $50;
   $51 = $9;
   $52 = HEAP32[$51>>2]|0; //@line 1504 "/usr/lib/emscripten/system/include/libcxx/vector"
   $53 = $10; //@line 1504 "/usr/lib/emscripten/system/include/libcxx/vector"
   $54 = (($52) + ($53<<2)|0); //@line 1504 "/usr/lib/emscripten/system/include/libcxx/vector"
   (__ZN10emscripten3valaSEOS0_($54,$21)|0); //@line 104 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   __ZN10emscripten3valD2Ev($21); //@line 104 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $55 = HEAP32[$20>>2]|0; //@line 103 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $56 = (($55) + 1)|0; //@line 103 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   HEAP32[$20>>2] = $56; //@line 103 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  }
  $22 = 0; //@line 107 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  L7: while(1) {
   $57 = $15; //@line 107 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $58 = $14; //@line 107 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $59 = ($57|0)<($58|0); //@line 107 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   if (!($59)) {
    break;
   }
   $60 = ((($29)) + 13428|0); //@line 108 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $61 = ((($29)) + 13364|0); //@line 108 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $62 = (_mad_frame_decode($60,$61)|0); //@line 108 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $23 = $62; //@line 108 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $63 = $23; //@line 110 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $64 = ($63|0)==(0); //@line 110 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   L10: do {
    if ($64) {
     $65 = $15; //@line 111 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $66 = (($65) + 1)|0; //@line 111 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $15 = $66; //@line 111 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $67 = ((($29)) + 40|0); //@line 122 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $68 = ((($29)) + 13428|0); //@line 122 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     _mad_synth_frame($67,$68); //@line 122 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $24 = 0; //@line 124 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     while(1) {
      $80 = $24; //@line 124 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $81 = ((($29)) + 16|0); //@line 124 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $82 = HEAP16[$81>>1]|0; //@line 124 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $83 = $82&65535; //@line 124 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $84 = ($80|0)<($83|0); //@line 124 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      if (!($84)) {
       break L10;
      }
      $25 = 0; //@line 125 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      while(1) {
       $85 = $25; //@line 125 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $86 = ((($29)) + 8|0); //@line 125 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $87 = HEAP8[$86>>0]|0; //@line 125 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $88 = $87&255; //@line 125 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $89 = ($85|0)<($88|0); //@line 125 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       if (!($89)) {
        break;
       }
       $90 = ((($29)) + 40|0); //@line 126 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $91 = ((($90)) + 4100|0); //@line 126 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $92 = ((($91)) + 8|0); //@line 126 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $93 = $25; //@line 126 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $94 = (($92) + (($93*4608)|0)|0); //@line 126 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $95 = $24; //@line 126 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $96 = (($94) + ($95<<2)|0); //@line 126 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $97 = HEAP32[$96>>2]|0; //@line 126 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $98 = (+($97|0)); //@line 126 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $99 = $98 / 268435456.0; //@line 126 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $100 = $99; //@line 126 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       HEAPF32[$26>>2] = $100; //@line 126 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $101 = $25; //@line 127 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $5 = $18;
       $6 = $101;
       $102 = $5;
       $103 = HEAP32[$102>>2]|0; //@line 1504 "/usr/lib/emscripten/system/include/libcxx/vector"
       $104 = $6; //@line 1504 "/usr/lib/emscripten/system/include/libcxx/vector"
       $105 = (($103) + ($104<<2)|0); //@line 1504 "/usr/lib/emscripten/system/include/libcxx/vector"
       $106 = $15; //@line 127 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $107 = ((($29)) + 16|0); //@line 127 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $108 = HEAP16[$107>>1]|0; //@line 127 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $109 = $108&65535; //@line 127 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $110 = Math_imul($106, $109)|0; //@line 127 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $111 = $24; //@line 127 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $112 = (($110) + ($111))|0; //@line 127 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       __ZNSt3__29to_stringEi($27,$112); //@line 127 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       __ZN10emscripten3valC2IRfEEOT_($28,$26); //@line 127 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       __ZN10emscripten3val3setINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRKT_RKS0_($105,$27,$28); //@line 127 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       __ZN10emscripten3valD2Ev($28); //@line 127 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27); //@line 127 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $113 = $25; //@line 125 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $114 = (($113) + 1)|0; //@line 125 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
       $25 = $114; //@line 125 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      }
      $115 = $24; //@line 124 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $116 = (($115) + 1)|0; //@line 124 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
      $24 = $116; //@line 124 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     }
    } else {
     $69 = ((($29)) + 13364|0); //@line 113 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $70 = ((($69)) + 60|0); //@line 113 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $71 = HEAP32[$70>>2]|0; //@line 113 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $72 = $71 & 65280; //@line 113 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $73 = ($72|0)!=(0); //@line 113 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     if (!($73)) {
      break L7;
     }
     $74 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,58211)|0); //@line 115 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $75 = ((($29)) + 13364|0); //@line 115 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $76 = (_mad_stream_errorstr($75)|0); //@line 115 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $77 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($74,$76)|0); //@line 115 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
     $7 = $77;
     $8 = 347;
     $78 = $7;
     $79 = $8; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
     (FUNCTION_TABLE_ii[$79 & 1023]($78)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
    }
   } while(0);
   $117 = $22; //@line 107 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $118 = (($117) + 1)|0; //@line 107 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   $22 = $118; //@line 107 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  }
  $119 = $14; //@line 132 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $120 = ((($29)) + 12|0); //@line 132 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $121 = HEAP32[$120>>2]|0; //@line 132 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $122 = (($121) - ($119))|0; //@line 132 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  HEAP32[$120>>2] = $122; //@line 132 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $123 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(70120,58258)|0); //@line 133 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $124 = $14; //@line 133 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $125 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($123,$124)|0); //@line 133 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $126 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($125,58269)|0); //@line 133 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $127 = $15; //@line 133 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $128 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($126,$127)|0); //@line 133 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $129 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($128,58279)|0); //@line 133 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $130 = ((($29)) + 13364|0); //@line 133 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $131 = (_mad_stream_errorstr($130)|0); //@line 133 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $132 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($129,$131)|0); //@line 133 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $3 = $132;
  $4 = 347;
  $133 = $3;
  $134 = $4; //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
  (FUNCTION_TABLE_ii[$134 & 1023]($133)|0); //@line 195 "/usr/lib/emscripten/system/include/libcxx/ostream"
  $135 = ((($29)) + 12|0); //@line 135 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $136 = HEAP32[$135>>2]|0; //@line 135 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $137 = ($136|0)==(0); //@line 135 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  if ($137) {
   $138 = ((($29)) + 36|0); //@line 136 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   HEAP8[$138>>0] = 0; //@line 136 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
   __ZN7Decoder17prepareNextBufferEv($29); //@line 137 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  }
  __ZNSt3__26vectorIN10emscripten3valENS_9allocatorIS2_EEED2Ev($18); //@line 139 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 }
 $$expand_i1_val2 = 1; //@line 141 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 HEAP8[$13>>0] = $$expand_i1_val2; //@line 141 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $$pre_trunc = HEAP8[$13>>0]|0; //@line 142 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $139 = $$pre_trunc&1; //@line 142 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 if ($139) {
  STACKTOP = sp;return; //@line 142 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 }
 __ZN10emscripten3valD2Ev($0); //@line 142 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 STACKTOP = sp;return; //@line 142 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
}
function __ZN10emscripten3val9undefinedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,(1)); //@line 313 "/usr/lib/emscripten/system/include/emscripten/val.h"
 return; //@line 313 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNK10emscripten3val4callIS0_JRhiRjEEET_PKcDpOT0_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $9;
 $15 = HEAP32[$14>>2]|0; //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $16 = $10; //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $17 = $11; //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $17;
 $18 = $8; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $19 = $12; //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = $19;
 $20 = $7; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $21 = $13; //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = $21;
 $22 = $6; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __ZN10emscripten8internal12MethodCallerINS_3valEJRhiRjEE4callEPNS0_7_EM_VALEPKcS3_OiS4_($0,$15,$16,$18,$20,$22); //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNSt3__26vectorIN10emscripten3valENS_9allocatorIS2_EEEC2EmRKS2_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $15 = sp;
 $20 = sp + 157|0;
 $29 = sp + 156|0;
 $40 = sp + 16|0;
 $41 = $0;
 $42 = $1;
 $43 = $2;
 $44 = $41;
 $39 = $44;
 $45 = $39;
 $38 = $45;
 HEAP32[$45>>2] = 0; //@line 421 "/usr/lib/emscripten/system/include/libcxx/vector"
 $46 = ((($45)) + 4|0); //@line 422 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$46>>2] = 0; //@line 422 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = ((($45)) + 8|0); //@line 423 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$40>>2] = 0; //@line 423 "/usr/lib/emscripten/system/include/libcxx/vector"
 $36 = $47;
 $37 = $40;
 $48 = $36;
 $49 = $37; //@line 2187 "/usr/lib/emscripten/system/include/libcxx/memory"
 $35 = $49;
 $50 = $35; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $31 = $48;
 $32 = $50;
 $51 = $31;
 $52 = $32; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
 $30 = $52;
 HEAP32[$51>>2] = 0; //@line 2097 "/usr/lib/emscripten/system/include/libcxx/memory"
 $34 = $48;
 $53 = $34;
 $33 = $53;
 $54 = $42; //@line 1107 "/usr/lib/emscripten/system/include/libcxx/vector"
 $55 = ($54>>>0)>(0); //@line 1107 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($55)) {
  STACKTOP = sp;return; //@line 1112 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $56 = $42; //@line 1109 "/usr/lib/emscripten/system/include/libcxx/vector"
 __ZNSt3__26vectorIN10emscripten3valENS_9allocatorIS2_EEE8allocateEm($44,$56); //@line 1109 "/usr/lib/emscripten/system/include/libcxx/vector"
 $57 = $42; //@line 1110 "/usr/lib/emscripten/system/include/libcxx/vector"
 $58 = $43; //@line 1110 "/usr/lib/emscripten/system/include/libcxx/vector"
 $25 = $44;
 $26 = $57;
 $27 = $58;
 $59 = $25;
 $24 = $59;
 $60 = $24;
 $61 = ((($60)) + 8|0); //@line 338 "/usr/lib/emscripten/system/include/libcxx/vector"
 $23 = $61;
 $62 = $23;
 $22 = $62;
 $63 = $22;
 $28 = $63; //@line 1008 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $4 = $29;
  $5 = $59;
  $6 = 1;
  $64 = $28; //@line 1012 "/usr/lib/emscripten/system/include/libcxx/vector"
  $65 = ((($59)) + 4|0); //@line 1012 "/usr/lib/emscripten/system/include/libcxx/vector"
  $66 = HEAP32[$65>>2]|0; //@line 1012 "/usr/lib/emscripten/system/include/libcxx/vector"
  $3 = $66;
  $67 = $3; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
  $68 = $27; //@line 1012 "/usr/lib/emscripten/system/include/libcxx/vector"
  $17 = $64;
  $18 = $67;
  $19 = $68;
  $69 = $17; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
  $70 = $18; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
  $71 = $19; //@line 1562 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $71;
  $72 = $16; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  ;HEAP8[$15>>0]=HEAP8[$20>>0]|0;
  $12 = $69;
  $13 = $70;
  $14 = $72;
  $73 = $12; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
  $74 = $13; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
  $75 = $14; //@line 1715 "/usr/lib/emscripten/system/include/libcxx/memory"
  $11 = $75;
  $76 = $11; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $8 = $73;
  $9 = $74;
  $10 = $76;
  $77 = $9; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
  $78 = $10; //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
  $7 = $78;
  $79 = $7; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  __ZN10emscripten3valC2ERKS0_($77,$79); //@line 1805 "/usr/lib/emscripten/system/include/libcxx/memory"
  $80 = ((($59)) + 4|0); //@line 1013 "/usr/lib/emscripten/system/include/libcxx/vector"
  $81 = HEAP32[$80>>2]|0; //@line 1013 "/usr/lib/emscripten/system/include/libcxx/vector"
  $82 = ((($81)) + 4|0); //@line 1013 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$80>>2] = $82; //@line 1013 "/usr/lib/emscripten/system/include/libcxx/vector"
  $83 = $26; //@line 1014 "/usr/lib/emscripten/system/include/libcxx/vector"
  $84 = (($83) + -1)|0; //@line 1014 "/usr/lib/emscripten/system/include/libcxx/vector"
  $26 = $84; //@line 1014 "/usr/lib/emscripten/system/include/libcxx/vector"
  $21 = $29;
  $85 = $26; //@line 1016 "/usr/lib/emscripten/system/include/libcxx/vector"
  $86 = ($85>>>0)>(0); //@line 1016 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($86)) {
   break;
  }
 }
 STACKTOP = sp;return; //@line 1112 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNK10emscripten3val4callIS0_JRiEEET_PKcDpOT0_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP32[$8>>2]|0; //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = $6; //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = $7; //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $4 = $11;
 $12 = $4; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __ZN10emscripten8internal12MethodCallerINS_3valEJRiEE4callEPNS0_7_EM_VALEPKcS3_($0,$9,$10,$12); //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 476 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten3valC2IRfEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4; //@line 337 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $7;
 $8 = $2; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __ZN10emscripten8internal12WireTypePackIJRfEEC2ES2_($5,$8); //@line 337 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = (__ZN10emscripten8internal6TypeIDIRfE3getEv()|0); //@line 339 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = (__ZNK10emscripten8internal12WireTypePackIJRfEEcvPKvEv($5)|0); //@line 340 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = (__emval_take_value(($9|0),($10|0))|0); //@line 338 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$6>>2] = $11; //@line 338 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 341 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten3val3setINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvRKT_RKS0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0; //@line 459 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = $4; //@line 459 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten3valC2IRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEOT_($6,$9); //@line 459 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = HEAP32[$6>>2]|0; //@line 459 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = $5; //@line 459 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $12 = HEAP32[$11>>2]|0; //@line 459 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __emval_set_property(($8|0),($10|0),($12|0)); //@line 459 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten3valD2Ev($6); //@line 459 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNSt3__26vectorIN10emscripten3valENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseIN10emscripten3valENS_9allocatorIS2_EEED2Ev($2); //@line 447 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return; //@line 447 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZNSt3__213__vector_baseIN10emscripten3valENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 120|0;
 $31 = $0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0; //@line 439 "/usr/lib/emscripten/system/include/libcxx/vector"
 $34 = ($33|0)!=(0|0); //@line 439 "/usr/lib/emscripten/system/include/libcxx/vector"
 if (!($34)) {
  STACKTOP = sp;return; //@line 444 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $30 = $32;
 $35 = $30;
 $36 = HEAP32[$35>>2]|0; //@line 356 "/usr/lib/emscripten/system/include/libcxx/vector"
 $27 = $35;
 $28 = $36;
 $37 = $27;
 $38 = ((($37)) + 4|0); //@line 411 "/usr/lib/emscripten/system/include/libcxx/vector"
 $39 = HEAP32[$38>>2]|0; //@line 411 "/usr/lib/emscripten/system/include/libcxx/vector"
 $29 = $39; //@line 411 "/usr/lib/emscripten/system/include/libcxx/vector"
 while(1) {
  $40 = $28; //@line 412 "/usr/lib/emscripten/system/include/libcxx/vector"
  $41 = $29; //@line 412 "/usr/lib/emscripten/system/include/libcxx/vector"
  $42 = ($40|0)!=($41|0); //@line 412 "/usr/lib/emscripten/system/include/libcxx/vector"
  if (!($42)) {
   break;
  }
  $26 = $37;
  $43 = $26;
  $44 = ((($43)) + 8|0); //@line 338 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = $44;
  $45 = $25;
  $24 = $45;
  $46 = $24;
  $47 = $29; //@line 413 "/usr/lib/emscripten/system/include/libcxx/vector"
  $48 = ((($47)) + -4|0); //@line 413 "/usr/lib/emscripten/system/include/libcxx/vector"
  $29 = $48; //@line 413 "/usr/lib/emscripten/system/include/libcxx/vector"
  $23 = $48;
  $49 = $23; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
  $20 = $46;
  $21 = $49;
  $50 = $20; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/memory"
  $51 = $21; //@line 1595 "/usr/lib/emscripten/system/include/libcxx/memory"
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $50;
  $18 = $51;
  $52 = $17; //@line 1727 "/usr/lib/emscripten/system/include/libcxx/memory"
  $53 = $18; //@line 1727 "/usr/lib/emscripten/system/include/libcxx/memory"
  $15 = $52;
  $16 = $53;
  $54 = $16; //@line 1860 "/usr/lib/emscripten/system/include/libcxx/memory"
  __ZN10emscripten3valD2Ev($54); //@line 1860 "/usr/lib/emscripten/system/include/libcxx/memory"
 }
 $55 = $28; //@line 414 "/usr/lib/emscripten/system/include/libcxx/vector"
 $56 = ((($37)) + 4|0); //@line 414 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$56>>2] = $55; //@line 414 "/usr/lib/emscripten/system/include/libcxx/vector"
 $14 = $32;
 $57 = $14;
 $58 = ((($57)) + 8|0); //@line 338 "/usr/lib/emscripten/system/include/libcxx/vector"
 $13 = $58;
 $59 = $13;
 $12 = $59;
 $60 = $12;
 $61 = HEAP32[$32>>2]|0; //@line 442 "/usr/lib/emscripten/system/include/libcxx/vector"
 $4 = $32;
 $62 = $4;
 $3 = $62;
 $63 = $3;
 $64 = ((($63)) + 8|0); //@line 347 "/usr/lib/emscripten/system/include/libcxx/vector"
 $2 = $64;
 $65 = $2;
 $1 = $65;
 $66 = $1;
 $67 = HEAP32[$66>>2]|0; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
 $68 = HEAP32[$62>>2]|0; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
 $69 = $67; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
 $70 = $68; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
 $71 = (($69) - ($70))|0; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
 $72 = (($71|0) / 4)&-1; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
 $9 = $60;
 $10 = $61;
 $11 = $72;
 $73 = $9; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
 $74 = $10; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
 $75 = $11; //@line 1555 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $73;
 $7 = $74;
 $8 = $75;
 $76 = $7; //@line 1796 "/usr/lib/emscripten/system/include/libcxx/memory"
 $5 = $76;
 $77 = $5; //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
 __ZdlPv($77); //@line 236 "/usr/lib/emscripten/system/include/libcxx/new"
 STACKTOP = sp;return; //@line 444 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZN10emscripten3valC2IRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4; //@line 337 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $7;
 $8 = $2; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __ZN10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2ESA_($5,$8); //@line 337 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = (__ZN10emscripten8internal6TypeIDIRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0); //@line 339 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = (__ZNK10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($5)|0); //@line 340 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = (__emval_take_value(($9|0),($10|0))|0); //@line 338 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$6>>2] = $11; //@line 338 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 341 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2ESA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $7 = $0;
 $8 = $1;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 HEAP32[$9>>2] = $11; //@line 235 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $12 = $8; //@line 236 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $12;
 $13 = $2; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $4 = $9;
 $5 = $13;
 $14 = $4; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $15 = $5; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = $15;
 $16 = $3; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $17 = (__ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($16)|0); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal20writeGenericWireTypeINS0_11BindingTypeINSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUt_EEEvRPNS0_15GenericWireTypeEPT_($14,$17); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $18 = $4; //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($18); //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 237 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal6TypeIDIRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 STACKTOP = sp;return ($4|0); //@line 240 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal11LightTypeIDIRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (49888|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $48 = $0;
 $50 = $48; //@line 294 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $47 = $50;
 $51 = $47;
 $46 = $51;
 $52 = $46;
 $45 = $52;
 $53 = $45;
 $44 = $53;
 $54 = $44;
 $43 = $54;
 $55 = $43;
 $56 = ((($55)) + 11|0); //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $57 = HEAP8[$56>>0]|0; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $58 = $57&255; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $59 = $58 & 128; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $60 = ($59|0)!=(0); //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 if ($60) {
  $39 = $52;
  $61 = $39;
  $38 = $61;
  $62 = $38;
  $37 = $62;
  $63 = $37;
  $64 = ((($63)) + 4|0); //@line 1317 "/usr/lib/emscripten/system/include/libcxx/string"
  $65 = HEAP32[$64>>2]|0; //@line 1317 "/usr/lib/emscripten/system/include/libcxx/string"
  $73 = $65;
 } else {
  $42 = $52;
  $66 = $42;
  $41 = $66;
  $67 = $41;
  $40 = $67;
  $68 = $40;
  $69 = ((($68)) + 11|0); //@line 1289 "/usr/lib/emscripten/system/include/libcxx/string"
  $70 = HEAP8[$69>>0]|0; //@line 1289 "/usr/lib/emscripten/system/include/libcxx/string"
  $71 = $70&255; //@line 1289 "/usr/lib/emscripten/system/include/libcxx/string"
  $73 = $71;
 }
 $72 = (4 + ($73))|0; //@line 294 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $74 = (_malloc($72)|0); //@line 294 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $49 = $74; //@line 294 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $75 = $48; //@line 295 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $11 = $75;
 $76 = $11;
 $10 = $76;
 $77 = $10;
 $9 = $77;
 $78 = $9;
 $8 = $78;
 $79 = $8;
 $7 = $79;
 $80 = $7;
 $81 = ((($80)) + 11|0); //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $82 = HEAP8[$81>>0]|0; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $83 = $82&255; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $84 = $83 & 128; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $85 = ($84|0)!=(0); //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 if ($85) {
  $3 = $77;
  $86 = $3;
  $2 = $86;
  $87 = $2;
  $1 = $87;
  $88 = $1;
  $89 = ((($88)) + 4|0); //@line 1317 "/usr/lib/emscripten/system/include/libcxx/string"
  $90 = HEAP32[$89>>2]|0; //@line 1317 "/usr/lib/emscripten/system/include/libcxx/string"
  $98 = $90;
 } else {
  $6 = $77;
  $91 = $6;
  $5 = $91;
  $92 = $5;
  $4 = $92;
  $93 = $4;
  $94 = ((($93)) + 11|0); //@line 1289 "/usr/lib/emscripten/system/include/libcxx/string"
  $95 = HEAP8[$94>>0]|0; //@line 1289 "/usr/lib/emscripten/system/include/libcxx/string"
  $96 = $95&255; //@line 1289 "/usr/lib/emscripten/system/include/libcxx/string"
  $98 = $96;
 }
 $97 = $49; //@line 295 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 HEAP32[$97>>2] = $98; //@line 295 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $99 = $49; //@line 296 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $100 = ((($99)) + 4|0); //@line 296 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $101 = $48; //@line 296 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $25 = $101;
 $102 = $25;
 $24 = $102;
 $103 = $24;
 $23 = $103;
 $104 = $23;
 $22 = $104;
 $105 = $22;
 $21 = $105;
 $106 = $21;
 $107 = ((($106)) + 11|0); //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $108 = HEAP8[$107>>0]|0; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $109 = $108&255; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $110 = $109 & 128; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $111 = ($110|0)!=(0); //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 if ($111) {
  $15 = $103;
  $112 = $15;
  $14 = $112;
  $113 = $14;
  $13 = $113;
  $114 = $13;
  $115 = HEAP32[$114>>2]|0; //@line 1337 "/usr/lib/emscripten/system/include/libcxx/string"
  $121 = $115;
 } else {
  $20 = $103;
  $116 = $20;
  $19 = $116;
  $117 = $19;
  $18 = $117;
  $118 = $18;
  $17 = $118;
  $119 = $17; //@line 988 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $119;
  $120 = $16; //@line 451 "/usr/lib/emscripten/system/include/libcxx/type_traits"
  $121 = $120;
 }
 $12 = $121;
 $122 = $12; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
 $123 = $48; //@line 296 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $36 = $123;
 $124 = $36;
 $35 = $124;
 $125 = $35;
 $34 = $125;
 $126 = $34;
 $33 = $126;
 $127 = $33;
 $32 = $127;
 $128 = $32;
 $129 = ((($128)) + 11|0); //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $130 = HEAP8[$129>>0]|0; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $131 = $130&255; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $132 = $131 & 128; //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 $133 = ($132|0)!=(0); //@line 1255 "/usr/lib/emscripten/system/include/libcxx/string"
 if ($133) {
  $28 = $125;
  $134 = $28;
  $27 = $134;
  $135 = $27;
  $26 = $135;
  $136 = $26;
  $137 = ((($136)) + 4|0); //@line 1317 "/usr/lib/emscripten/system/include/libcxx/string"
  $138 = HEAP32[$137>>2]|0; //@line 1317 "/usr/lib/emscripten/system/include/libcxx/string"
  $145 = $138;
  _memcpy(($100|0),($122|0),($145|0))|0; //@line 296 "/usr/lib/emscripten/system/include/emscripten/wire.h"
  $146 = $49; //@line 297 "/usr/lib/emscripten/system/include/emscripten/wire.h"
  STACKTOP = sp;return ($146|0); //@line 297 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 } else {
  $31 = $125;
  $139 = $31;
  $30 = $139;
  $140 = $30;
  $29 = $140;
  $141 = $29;
  $142 = ((($141)) + 11|0); //@line 1289 "/usr/lib/emscripten/system/include/libcxx/string"
  $143 = HEAP8[$142>>0]|0; //@line 1289 "/usr/lib/emscripten/system/include/libcxx/string"
  $144 = $143&255; //@line 1289 "/usr/lib/emscripten/system/include/libcxx/string"
  $145 = $144;
  _memcpy(($100|0),($122|0),($145|0))|0; //@line 296 "/usr/lib/emscripten/system/include/emscripten/wire.h"
  $146 = $49; //@line 297 "/usr/lib/emscripten/system/include/emscripten/wire.h"
  STACKTOP = sp;return ($146|0); //@line 297 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 }
 return (0)|0;
}
function __ZN10emscripten8internal20writeGenericWireTypeINS0_11BindingTypeINSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUt_EEEvRPNS0_15GenericWireTypeEPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 206 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = $2; //@line 206 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = HEAP32[$5>>2]|0; //@line 206 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$6>>2] = $4; //@line 206 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = $2; //@line 207 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = HEAP32[$7>>2]|0; //@line 207 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = ((($8)) + 8|0); //@line 207 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$7>>2] = $9; //@line 207 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 208 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal12WireTypePackIJRfEEC2ES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $7 = $0;
 $8 = $1;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 HEAP32[$9>>2] = $11; //@line 235 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $12 = $8; //@line 236 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $12;
 $13 = $2; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $4 = $9;
 $5 = $13;
 $14 = $4; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $15 = $5; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = $15;
 $16 = $3; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $17 = (+__ZN10emscripten8internal11BindingTypeIfE10toWireTypeERKf($16)); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEf($14,$17); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $18 = $4; //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($18); //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 237 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal6TypeIDIRfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRfE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WireTypePackIJRfEEcvPKvEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 STACKTOP = sp;return ($4|0); //@line 240 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal11LightTypeIDIRfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52232|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIfE10toWireTypeERKf($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 268 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $3 = +HEAPF32[$2>>2]; //@line 268 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return (+$3); //@line 268 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 195 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = $2; //@line 195 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = HEAP32[$5>>2]|0; //@line 195 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAPF32[$6>>2] = $4; //@line 195 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = $2; //@line 196 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = HEAP32[$7>>2]|0; //@line 196 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = ((($8)) + 8|0); //@line 196 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$7>>2] = $9; //@line 196 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 197 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal12MethodCallerINS_3valEJRiEE4callEPNS0_7_EM_VALEPKcS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp + 8|0;
 $10 = sp + 20|0;
 $12 = sp + 16|0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = (__ZN10emscripten8internal9SignatureINS_3valEJRiEE17get_method_callerEv()|0); //@line 250 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $13; //@line 250 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $14 = $7; //@line 252 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $4 = $14;
 $15 = $4; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __ZN10emscripten8internal12WireTypePackIJRiEEC2ES2_($9,$15); //@line 252 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $16 = $8; //@line 255 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $17 = $5; //@line 256 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $18 = $6; //@line 257 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $19 = (__ZNK10emscripten8internal12WireTypePackIJRiEEcvPKvEv($9)|0); //@line 259 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $20 = (+__emval_call_method(($16|0),($17|0),($18|0),($10|0),($19|0))); //@line 254 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = $20; //@line 254 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $21 = HEAP32[$10>>2]|0; //@line 260 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE($12,$21); //@line 260 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $22 = $11; //@line 261 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal19fromGenericWireTypeINS_3valEEET_d($0,$22); //@line 261 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal17DestructorsRunnerD2Ev($12); //@line 262 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 262 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal9SignatureINS_3valEJRiEE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[68632]|0; //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $1 = ($0<<24>>24)==(0); //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
 if ($1) {
  $2 = (___cxa_guard_acquire(68632)|0); //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
  $3 = ($2|0)!=(0); //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
  if ($3) {
   $4 = (__ZN10emscripten8internal9SignatureINS_3valEJRiEE18init_method_callerEv()|0); //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
   HEAP32[17329] = $4; //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
  }
 }
 $5 = HEAP32[17329]|0; //@line 123 "/usr/lib/emscripten/system/include/emscripten/val.h"
 return ($5|0); //@line 123 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal12WireTypePackIJRiEEC2ES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $7 = $0;
 $8 = $1;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 HEAP32[$9>>2] = $11; //@line 235 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $12 = $8; //@line 236 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $12;
 $13 = $2; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $4 = $9;
 $5 = $13;
 $14 = $4; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $15 = $5; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = $15;
 $16 = $3; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $17 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($16)|0); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($14,$17); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $18 = $4; //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($18); //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 237 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNK10emscripten8internal12WireTypePackIJRiEEcvPKvEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 STACKTOP = sp;return ($4|0); //@line 240 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal19fromGenericWireTypeINS_3valEEET_d($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $4 = $2; //@line 166 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = (__ZN10emscripten8internal24GenericWireTypeConverterIPNS0_7_EM_VALEE4fromEd($4)|0); //@line 166 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = $5; //@line 166 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = $3; //@line 167 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE($0,$6); //@line 167 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 167 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal24GenericWireTypeConverterIPNS0_7_EM_VALEE4fromEd($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 159 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = (~~(($2))>>>0); //@line 159 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $4 = $3; //@line 159 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return ($4|0); //@line 159 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($0,$3); //@line 565 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 565 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2; //@line 321 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$3); //@line 321 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 321 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal9SignatureINS_3valEJRiEE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERiEE8getCountEv($0)|0); //@line 129 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERiEE8getTypesEv($0)|0); //@line 129 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = (__emval_get_method_caller(($1|0),($2|0))|0); //@line 129 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return ($3|0); //@line 129 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERiEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERiEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52320|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNSt3__26vectorIN10emscripten3valENS_9allocatorIS2_EEE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $43 = $0;
 $44 = $1;
 $45 = $43;
 $46 = $44; //@line 935 "/usr/lib/emscripten/system/include/libcxx/vector"
 $47 = (__ZNKSt3__26vectorIN10emscripten3valENS_9allocatorIS2_EEE8max_sizeEv($45)|0); //@line 935 "/usr/lib/emscripten/system/include/libcxx/vector"
 $48 = ($46>>>0)>($47>>>0); //@line 935 "/usr/lib/emscripten/system/include/libcxx/vector"
 if ($48) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($45); //@line 936 "/usr/lib/emscripten/system/include/libcxx/vector"
  // unreachable; //@line 936 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
 $42 = $45;
 $49 = $42;
 $50 = ((($49)) + 8|0); //@line 338 "/usr/lib/emscripten/system/include/libcxx/vector"
 $41 = $50;
 $51 = $41;
 $40 = $51;
 $52 = $40;
 $53 = $44; //@line 937 "/usr/lib/emscripten/system/include/libcxx/vector"
 $10 = $52;
 $11 = $53;
 $54 = $10; //@line 1547 "/usr/lib/emscripten/system/include/libcxx/memory"
 $55 = $11; //@line 1547 "/usr/lib/emscripten/system/include/libcxx/memory"
 $7 = $54;
 $8 = $55;
 $9 = 0;
 $56 = $7;
 $57 = $8; //@line 1790 "/usr/lib/emscripten/system/include/libcxx/memory"
 $6 = $56;
 $58 = ($57>>>0)>(1073741823); //@line 1790 "/usr/lib/emscripten/system/include/libcxx/memory"
 if ($58) {
  $4 = 58115;
  $59 = (___cxa_allocate_exception(8)|0); //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
  $60 = $4; //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
  $2 = $59;
  $3 = $60;
  $61 = $2;
  $62 = $3; //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
  __ZNSt11logic_errorC2EPKc($61,$62); //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
  HEAP32[$61>>2] = (56676); //@line 136 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
  ___cxa_throw(($59|0),(52056|0),(330|0)); //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
  // unreachable; //@line 225 "/usr/lib/emscripten/system/include/libcxx/stdexcept"
 } else {
  $63 = $8; //@line 1793 "/usr/lib/emscripten/system/include/libcxx/memory"
  $64 = $63<<2; //@line 1793 "/usr/lib/emscripten/system/include/libcxx/memory"
  $5 = $64;
  $65 = $5; //@line 228 "/usr/lib/emscripten/system/include/libcxx/new"
  $66 = (__Znwm($65)|0); //@line 228 "/usr/lib/emscripten/system/include/libcxx/new"
  $67 = ((($45)) + 4|0); //@line 937 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$67>>2] = $66; //@line 937 "/usr/lib/emscripten/system/include/libcxx/vector"
  HEAP32[$45>>2] = $66; //@line 937 "/usr/lib/emscripten/system/include/libcxx/vector"
  $68 = HEAP32[$45>>2]|0; //@line 938 "/usr/lib/emscripten/system/include/libcxx/vector"
  $69 = $44; //@line 938 "/usr/lib/emscripten/system/include/libcxx/vector"
  $70 = (($68) + ($69<<2)|0); //@line 938 "/usr/lib/emscripten/system/include/libcxx/vector"
  $14 = $45;
  $71 = $14;
  $72 = ((($71)) + 8|0); //@line 344 "/usr/lib/emscripten/system/include/libcxx/vector"
  $13 = $72;
  $73 = $13;
  $12 = $73;
  $74 = $12;
  HEAP32[$74>>2] = $70; //@line 938 "/usr/lib/emscripten/system/include/libcxx/vector"
  $38 = $45;
  $39 = 0;
  $75 = $38;
  $37 = $75;
  $76 = $37;
  $77 = HEAP32[$76>>2]|0; //@line 675 "/usr/lib/emscripten/system/include/libcxx/vector"
  $36 = $77;
  $78 = $36; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
  $16 = $75;
  $79 = $16;
  $80 = HEAP32[$79>>2]|0; //@line 675 "/usr/lib/emscripten/system/include/libcxx/vector"
  $15 = $80;
  $81 = $15; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
  $21 = $75;
  $82 = $21;
  $20 = $82;
  $83 = $20;
  $19 = $83;
  $84 = $19;
  $85 = ((($84)) + 8|0); //@line 347 "/usr/lib/emscripten/system/include/libcxx/vector"
  $18 = $85;
  $86 = $18;
  $17 = $86;
  $87 = $17;
  $88 = HEAP32[$87>>2]|0; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
  $89 = HEAP32[$83>>2]|0; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
  $90 = $88; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
  $91 = $89; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
  $92 = (($90) - ($91))|0; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
  $93 = (($92|0) / 4)&-1; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
  $94 = (($81) + ($93<<2)|0); //@line 843 "/usr/lib/emscripten/system/include/libcxx/vector"
  $23 = $75;
  $95 = $23;
  $96 = HEAP32[$95>>2]|0; //@line 675 "/usr/lib/emscripten/system/include/libcxx/vector"
  $22 = $96;
  $97 = $22; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
  $28 = $75;
  $98 = $28;
  $27 = $98;
  $99 = $27;
  $26 = $99;
  $100 = $26;
  $101 = ((($100)) + 8|0); //@line 347 "/usr/lib/emscripten/system/include/libcxx/vector"
  $25 = $101;
  $102 = $25;
  $24 = $102;
  $103 = $24;
  $104 = HEAP32[$103>>2]|0; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
  $105 = HEAP32[$99>>2]|0; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
  $106 = $104; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
  $107 = $105; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
  $108 = (($106) - ($107))|0; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
  $109 = (($108|0) / 4)&-1; //@line 359 "/usr/lib/emscripten/system/include/libcxx/vector"
  $110 = (($97) + ($109<<2)|0); //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
  $30 = $75;
  $111 = $30;
  $112 = HEAP32[$111>>2]|0; //@line 675 "/usr/lib/emscripten/system/include/libcxx/vector"
  $29 = $112;
  $113 = $29; //@line 1106 "/usr/lib/emscripten/system/include/libcxx/memory"
  $114 = $39; //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
  $115 = (($113) + ($114<<2)|0); //@line 844 "/usr/lib/emscripten/system/include/libcxx/vector"
  $31 = $75;
  $32 = $78;
  $33 = $94;
  $34 = $110;
  $35 = $115;
  STACKTOP = sp;return; //@line 940 "/usr/lib/emscripten/system/include/libcxx/vector"
 }
}
function __ZN10emscripten3valC2ERKS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 356 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = HEAP32[$5>>2]|0; //@line 356 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$4>>2] = $6; //@line 356 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = HEAP32[$4>>2]|0; //@line 358 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __emval_incref(($7|0)); //@line 358 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 359 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNKSt3__26vectorIN10emscripten3valENS_9allocatorIS2_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0); //@line 341 "/usr/lib/emscripten/system/include/libcxx/vector"
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13; //@line 1599 "/usr/lib/emscripten/system/include/libcxx/memory"
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0;
 $11 = $26;
 $27 = $11; //@line 1737 "/usr/lib/emscripten/system/include/libcxx/memory"
 $10 = $27;
 HEAP32[$19>>2] = 1073741823; //@line 958 "/usr/lib/emscripten/system/include/libcxx/vector"
 HEAP32[$20>>2] = 2147483647; //@line 959 "/usr/lib/emscripten/system/include/libcxx/vector"
 $7 = $19;
 $8 = $20;
 $28 = $7; //@line 2654 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $29 = $8; //@line 2654 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $28;
 $5 = $29;
 $30 = $5; //@line 2646 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $31 = $4; //@line 2646 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $1 = $6;
 $2 = $30;
 $3 = $31;
 $32 = $2; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $33 = HEAP32[$32>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $34 = $3; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $35 = HEAP32[$34>>2]|0; //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $36 = ($33>>>0)<($35>>>0); //@line 719 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $37 = $5; //@line 2646 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $38 = $4; //@line 2646 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $39 = $36 ? $37 : $38; //@line 2646 "/usr/lib/emscripten/system/include/libcxx/algorithm"
 $40 = HEAP32[$39>>2]|0; //@line 958 "/usr/lib/emscripten/system/include/libcxx/vector"
 STACKTOP = sp;return ($40|0); //@line 958 "/usr/lib/emscripten/system/include/libcxx/vector"
}
function __ZN10emscripten8internal12MethodCallerINS_3valEJRhiRjEE4callEPNS0_7_EM_VALEPKcS3_OiS4_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $15 = sp + 8|0;
 $16 = sp + 36|0;
 $18 = sp + 32|0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $19 = (__ZN10emscripten8internal9SignatureINS_3valEJRhiRjEE17get_method_callerEv()|0); //@line 250 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $14 = $19; //@line 250 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $20 = $11; //@line 252 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $20;
 $21 = $8; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $22 = $12; //@line 252 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = $22;
 $23 = $7; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $24 = $13; //@line 252 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = $24;
 $25 = $6; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __ZN10emscripten8internal12WireTypePackIJRhiRjEEC2ES2_OiS3_($15,$21,$23,$25); //@line 252 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $26 = $14; //@line 255 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $27 = $9; //@line 256 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $28 = $10; //@line 257 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $29 = (__ZNK10emscripten8internal12WireTypePackIJRhiRjEEcvPKvEv($15)|0); //@line 259 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $30 = (+__emval_call_method(($26|0),($27|0),($28|0),($16|0),($29|0))); //@line 254 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $17 = $30; //@line 254 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $31 = HEAP32[$16>>2]|0; //@line 260 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE($18,$31); //@line 260 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $32 = $17; //@line 261 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal19fromGenericWireTypeINS_3valEEET_d($0,$32); //@line 261 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal17DestructorsRunnerD2Ev($18); //@line 262 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 262 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal9SignatureINS_3valEJRhiRjEE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[68640]|0; //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $1 = ($0<<24>>24)==(0); //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
 if ($1) {
  $2 = (___cxa_guard_acquire(68640)|0); //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
  $3 = ($2|0)!=(0); //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
  if ($3) {
   $4 = (__ZN10emscripten8internal9SignatureINS_3valEJRhiRjEE18init_method_callerEv()|0); //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
   HEAP32[17330] = $4; //@line 122 "/usr/lib/emscripten/system/include/emscripten/val.h"
  }
 }
 $5 = HEAP32[17330]|0; //@line 123 "/usr/lib/emscripten/system/include/emscripten/val.h"
 return ($5|0); //@line 123 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal12WireTypePackIJRhiRjEEC2ES2_OiS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $27 = sp;
 $23 = $0;
 $24 = $1;
 $25 = $2;
 $26 = $3;
 $28 = $23;
 $22 = $28;
 $29 = $22;
 HEAP32[$27>>2] = $29; //@line 235 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $30 = $24; //@line 236 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = $30;
 $31 = $6; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $32 = $25; //@line 236 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = $32;
 $33 = $5; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $34 = $26; //@line 236 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $4 = $34;
 $35 = $4; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $18 = $27;
 $19 = $31;
 $20 = $33;
 $21 = $35;
 $36 = $18; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $37 = $19; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $17 = $37;
 $38 = $17; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $39 = (__ZN10emscripten8internal11BindingTypeIhE10toWireTypeERKh($38)|0); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal20writeGenericWireTypeIhEEvRPNS0_15GenericWireTypeET_($36,$39); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $40 = $18; //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $41 = $20; //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $41;
 $42 = $8; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $43 = $21; //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = $43;
 $44 = $7; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $14 = $40;
 $15 = $42;
 $16 = $44;
 $45 = $14; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $46 = $15; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $13 = $46;
 $47 = $13; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $48 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($47)|0); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($45,$48); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $49 = $14; //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $50 = $16; //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = $50;
 $51 = $9; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $11 = $49;
 $12 = $51;
 $52 = $11; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $53 = $12; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = $53;
 $54 = $10; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $55 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($54)|0); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal20writeGenericWireTypeIjEEvRPNS0_15GenericWireTypeET_($52,$55); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $56 = $11; //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($56); //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 237 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNK10emscripten8internal12WireTypePackIJRhiRjEEcvPKvEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 STACKTOP = sp;return ($4|0); //@line 240 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal11BindingTypeIhE10toWireTypeERKh($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 261 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $3 = HEAP8[$2>>0]|0; //@line 261 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($3|0); //@line 261 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal20writeGenericWireTypeIhEEvRPNS0_15GenericWireTypeET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 219 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = $4&255; //@line 219 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = $2; //@line 219 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = HEAP32[$6>>2]|0; //@line 219 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$7>>2] = $5; //@line 219 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $2; //@line 220 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = HEAP32[$8>>2]|0; //@line 220 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = ((($9)) + 8|0); //@line 220 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$8>>2] = $10; //@line 220 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 221 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 265 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $3 = HEAP32[$2>>2]|0; //@line 265 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($3|0); //@line 265 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal20writeGenericWireTypeIjEEvRPNS0_15GenericWireTypeET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 219 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = $2; //@line 219 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = HEAP32[$5>>2]|0; //@line 219 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$6>>2] = $4; //@line 219 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = $2; //@line 220 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = HEAP32[$7>>2]|0; //@line 220 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = ((($8)) + 8|0); //@line 220 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$7>>2] = $9; //@line 220 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 221 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal9SignatureINS_3valEJRhiRjEE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERhiRjEE8getCountEv($0)|0); //@line 129 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERhiRjEE8getTypesEv($0)|0); //@line 129 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = (__emval_get_method_caller(($1|0),($2|0))|0); //@line 129 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return ($3|0); //@line 129 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERhiRjEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERhiRjEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERhiRjEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERhiRjEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (42720|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK7Decoder7hasMoreEv($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 20|0;
 $6 = $0;
 $7 = $6;
 $8 = ((($7)) + 22700|0); //@line 146 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = ((($10)) + 20|0); //@line 960 "/usr/lib/emscripten/system/include/libcxx/deque"
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $14 = HEAP32[$13>>2]|0; //@line 1308 "/usr/lib/emscripten/system/include/libcxx/deque"
 $15 = ($14|0)==(1); //@line 146 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 if ($15) {
  $16 = ((($7)) + 13364|0); //@line 147 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $17 = ((($16)) + 60|0); //@line 147 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $18 = HEAP32[$17>>2]|0; //@line 147 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $19 = ($18|0)!=(1); //@line 147 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $$expand_i1_val = $19&1; //@line 147 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  HEAP8[$5>>0] = $$expand_i1_val; //@line 147 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $$pre_trunc = HEAP8[$5>>0]|0; //@line 151 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $20 = $$pre_trunc&1; //@line 151 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  STACKTOP = sp;return ($20|0); //@line 151 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 } else {
  $$expand_i1_val2 = 1; //@line 149 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  HEAP8[$5>>0] = $$expand_i1_val2; //@line 149 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $$pre_trunc = HEAP8[$5>>0]|0; //@line 151 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  $20 = $$pre_trunc&1; //@line 151 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
  STACKTOP = sp;return ($20|0); //@line 151 "/home/betrayer/development/macaw/jsmad/decoder.cpp"
 }
 return (0)|0;
}
function __GLOBAL__sub_I_wrapper_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN34EmscriptenBindingInitializer_jsmadC2Ev(71432); //@line 124 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 return; //@line 124 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN34EmscriptenBindingInitializer_jsmadC2Ev($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy884 = 0, $$byval_copy885 = 0, $$byval_copy886 = 0, $$byval_copy887 = 0, $$byval_copy888 = 0, $$byval_copy889 = 0, $$byval_copy890 = 0, $$byval_copy891 = 0, $$byval_copy892 = 0, $$byval_copy893 = 0, $$byval_copy894 = 0, $$byval_copy895 = 0, $$byval_copy896 = 0, $$byval_copy897 = 0, $$byval_copy898 = 0, $$byval_copy899 = 0, $$byval_copy900 = 0, $$byval_copy901 = 0, $$byval_copy902 = 0;
 var $$byval_copy903 = 0, $$byval_copy904 = 0, $$byval_copy905 = 0, $$byval_copy906 = 0, $$byval_copy907 = 0, $$byval_copy908 = 0, $$byval_copy909 = 0, $$byval_copy910 = 0, $$byval_copy911 = 0, $$byval_copy912 = 0, $$byval_copy913 = 0, $$byval_copy914 = 0, $$byval_copy915 = 0, $$byval_copy916 = 0, $$byval_copy917 = 0, $$byval_copy918 = 0, $$byval_copy919 = 0, $$byval_copy920 = 0, $$byval_copy921 = 0, $$byval_copy922 = 0;
 var $$byval_copy923 = 0, $$byval_copy924 = 0, $$byval_copy925 = 0, $$byval_copy926 = 0, $$byval_copy927 = 0, $$byval_copy928 = 0, $$byval_copy929 = 0, $$byval_copy930 = 0, $$byval_copy931 = 0, $$byval_copy932 = 0, $$byval_copy933 = 0, $$field = 0, $$field102 = 0, $$field111 = 0, $$field114 = 0, $$field117 = 0, $$field12 = 0, $$field120 = 0, $$field127 = 0, $$field130 = 0;
 var $$field135 = 0, $$field138 = 0, $$field147 = 0, $$field150 = 0, $$field153 = 0, $$field156 = 0, $$field163 = 0, $$field166 = 0, $$field171 = 0, $$field174 = 0, $$field183 = 0, $$field186 = 0, $$field189 = 0, $$field19 = 0, $$field192 = 0, $$field199 = 0, $$field202 = 0, $$field207 = 0, $$field210 = 0, $$field219 = 0;
 var $$field22 = 0, $$field222 = 0, $$field225 = 0, $$field228 = 0, $$field235 = 0, $$field238 = 0, $$field243 = 0, $$field246 = 0, $$field255 = 0, $$field258 = 0, $$field261 = 0, $$field264 = 0, $$field27 = 0, $$field271 = 0, $$field274 = 0, $$field279 = 0, $$field282 = 0, $$field291 = 0, $$field294 = 0, $$field297 = 0;
 var $$field30 = 0, $$field300 = 0, $$field307 = 0, $$field310 = 0, $$field315 = 0, $$field318 = 0, $$field327 = 0, $$field330 = 0, $$field333 = 0, $$field336 = 0, $$field343 = 0, $$field346 = 0, $$field351 = 0, $$field354 = 0, $$field363 = 0, $$field366 = 0, $$field369 = 0, $$field372 = 0, $$field379 = 0, $$field382 = 0;
 var $$field387 = 0, $$field39 = 0, $$field390 = 0, $$field399 = 0, $$field402 = 0, $$field405 = 0, $$field408 = 0, $$field415 = 0, $$field418 = 0, $$field42 = 0, $$field423 = 0, $$field426 = 0, $$field433 = 0, $$field436 = 0, $$field443 = 0, $$field446 = 0, $$field45 = 0, $$field453 = 0, $$field456 = 0, $$field463 = 0;
 var $$field466 = 0, $$field475 = 0, $$field478 = 0, $$field48 = 0, $$field481 = 0, $$field484 = 0, $$field491 = 0, $$field494 = 0, $$field499 = 0, $$field502 = 0, $$field511 = 0, $$field514 = 0, $$field517 = 0, $$field520 = 0, $$field527 = 0, $$field530 = 0, $$field535 = 0, $$field538 = 0, $$field547 = 0, $$field55 = 0;
 var $$field550 = 0, $$field553 = 0, $$field556 = 0, $$field563 = 0, $$field566 = 0, $$field571 = 0, $$field574 = 0, $$field58 = 0, $$field583 = 0, $$field586 = 0, $$field589 = 0, $$field592 = 0, $$field599 = 0, $$field6 = 0, $$field602 = 0, $$field607 = 0, $$field610 = 0, $$field619 = 0, $$field622 = 0, $$field625 = 0;
 var $$field628 = 0, $$field63 = 0, $$field635 = 0, $$field638 = 0, $$field643 = 0, $$field646 = 0, $$field653 = 0, $$field656 = 0, $$field66 = 0, $$field663 = 0, $$field666 = 0, $$field675 = 0, $$field678 = 0, $$field681 = 0, $$field684 = 0, $$field691 = 0, $$field694 = 0, $$field699 = 0, $$field702 = 0, $$field711 = 0;
 var $$field714 = 0, $$field717 = 0, $$field720 = 0, $$field727 = 0, $$field730 = 0, $$field735 = 0, $$field738 = 0, $$field747 = 0, $$field75 = 0, $$field750 = 0, $$field753 = 0, $$field756 = 0, $$field763 = 0, $$field766 = 0, $$field771 = 0, $$field774 = 0, $$field78 = 0, $$field781 = 0, $$field784 = 0, $$field793 = 0;
 var $$field796 = 0, $$field799 = 0, $$field802 = 0, $$field809 = 0, $$field81 = 0, $$field812 = 0, $$field817 = 0, $$field820 = 0, $$field827 = 0, $$field830 = 0, $$field837 = 0, $$field84 = 0, $$field840 = 0, $$field847 = 0, $$field850 = 0, $$field857 = 0, $$field860 = 0, $$field867 = 0, $$field870 = 0, $$field877 = 0;
 var $$field880 = 0, $$field9 = 0, $$field91 = 0, $$field94 = 0, $$field99 = 0, $$index1 = 0, $$index101 = 0, $$index105 = 0, $$index107 = 0, $$index109 = 0, $$index11 = 0, $$index113 = 0, $$index119 = 0, $$index123 = 0, $$index125 = 0, $$index129 = 0, $$index133 = 0, $$index137 = 0, $$index141 = 0, $$index143 = 0;
 var $$index145 = 0, $$index149 = 0, $$index15 = 0, $$index155 = 0, $$index159 = 0, $$index161 = 0, $$index165 = 0, $$index169 = 0, $$index17 = 0, $$index173 = 0, $$index177 = 0, $$index179 = 0, $$index181 = 0, $$index185 = 0, $$index191 = 0, $$index195 = 0, $$index197 = 0, $$index201 = 0, $$index205 = 0, $$index209 = 0;
 var $$index21 = 0, $$index213 = 0, $$index215 = 0, $$index217 = 0, $$index221 = 0, $$index227 = 0, $$index231 = 0, $$index233 = 0, $$index237 = 0, $$index241 = 0, $$index245 = 0, $$index249 = 0, $$index25 = 0, $$index251 = 0, $$index253 = 0, $$index257 = 0, $$index263 = 0, $$index267 = 0, $$index269 = 0, $$index273 = 0;
 var $$index277 = 0, $$index281 = 0, $$index285 = 0, $$index287 = 0, $$index289 = 0, $$index29 = 0, $$index293 = 0, $$index299 = 0, $$index3 = 0, $$index303 = 0, $$index305 = 0, $$index309 = 0, $$index313 = 0, $$index317 = 0, $$index321 = 0, $$index323 = 0, $$index325 = 0, $$index329 = 0, $$index33 = 0, $$index335 = 0;
 var $$index339 = 0, $$index341 = 0, $$index345 = 0, $$index349 = 0, $$index35 = 0, $$index353 = 0, $$index357 = 0, $$index359 = 0, $$index361 = 0, $$index365 = 0, $$index37 = 0, $$index371 = 0, $$index375 = 0, $$index377 = 0, $$index381 = 0, $$index385 = 0, $$index389 = 0, $$index393 = 0, $$index395 = 0, $$index397 = 0;
 var $$index401 = 0, $$index407 = 0, $$index41 = 0, $$index411 = 0, $$index413 = 0, $$index417 = 0, $$index421 = 0, $$index425 = 0, $$index429 = 0, $$index431 = 0, $$index435 = 0, $$index439 = 0, $$index441 = 0, $$index445 = 0, $$index449 = 0, $$index451 = 0, $$index455 = 0, $$index459 = 0, $$index461 = 0, $$index465 = 0;
 var $$index469 = 0, $$index47 = 0, $$index471 = 0, $$index473 = 0, $$index477 = 0, $$index483 = 0, $$index487 = 0, $$index489 = 0, $$index493 = 0, $$index497 = 0, $$index5 = 0, $$index501 = 0, $$index505 = 0, $$index507 = 0, $$index509 = 0, $$index51 = 0, $$index513 = 0, $$index519 = 0, $$index523 = 0, $$index525 = 0;
 var $$index529 = 0, $$index53 = 0, $$index533 = 0, $$index537 = 0, $$index541 = 0, $$index543 = 0, $$index545 = 0, $$index549 = 0, $$index555 = 0, $$index559 = 0, $$index561 = 0, $$index565 = 0, $$index569 = 0, $$index57 = 0, $$index573 = 0, $$index577 = 0, $$index579 = 0, $$index581 = 0, $$index585 = 0, $$index591 = 0;
 var $$index595 = 0, $$index597 = 0, $$index601 = 0, $$index605 = 0, $$index609 = 0, $$index61 = 0, $$index613 = 0, $$index615 = 0, $$index617 = 0, $$index621 = 0, $$index627 = 0, $$index631 = 0, $$index633 = 0, $$index637 = 0, $$index641 = 0, $$index645 = 0, $$index649 = 0, $$index65 = 0, $$index651 = 0, $$index655 = 0;
 var $$index659 = 0, $$index661 = 0, $$index665 = 0, $$index669 = 0, $$index671 = 0, $$index673 = 0, $$index677 = 0, $$index683 = 0, $$index687 = 0, $$index689 = 0, $$index69 = 0, $$index693 = 0, $$index697 = 0, $$index701 = 0, $$index705 = 0, $$index707 = 0, $$index709 = 0, $$index71 = 0, $$index713 = 0, $$index719 = 0;
 var $$index723 = 0, $$index725 = 0, $$index729 = 0, $$index73 = 0, $$index733 = 0, $$index737 = 0, $$index741 = 0, $$index743 = 0, $$index745 = 0, $$index749 = 0, $$index755 = 0, $$index759 = 0, $$index761 = 0, $$index765 = 0, $$index769 = 0, $$index77 = 0, $$index773 = 0, $$index777 = 0, $$index779 = 0, $$index783 = 0;
 var $$index787 = 0, $$index789 = 0, $$index791 = 0, $$index795 = 0, $$index801 = 0, $$index805 = 0, $$index807 = 0, $$index811 = 0, $$index815 = 0, $$index819 = 0, $$index823 = 0, $$index825 = 0, $$index829 = 0, $$index83 = 0, $$index833 = 0, $$index835 = 0, $$index839 = 0, $$index843 = 0, $$index845 = 0, $$index849 = 0;
 var $$index853 = 0, $$index855 = 0, $$index859 = 0, $$index863 = 0, $$index865 = 0, $$index869 = 0, $$index87 = 0, $$index873 = 0, $$index875 = 0, $$index879 = 0, $$index883 = 0, $$index89 = 0, $$index93 = 0, $$index97 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0;
 var $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0;
 var $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0;
 var $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0;
 var $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0;
 var $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0;
 var $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0;
 var $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0;
 var $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0;
 var $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0;
 var $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0;
 var $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0;
 var $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3488|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3488|0);
 $$byval_copy933 = sp + 3408|0;
 $$byval_copy932 = sp + 3400|0;
 $$byval_copy931 = sp + 3480|0;
 $$byval_copy930 = sp + 3479|0;
 $$byval_copy929 = sp + 3392|0;
 $$byval_copy928 = sp + 3384|0;
 $$byval_copy927 = sp + 3376|0;
 $$byval_copy926 = sp + 3368|0;
 $$byval_copy925 = sp + 3360|0;
 $$byval_copy924 = sp + 3352|0;
 $$byval_copy923 = sp + 3478|0;
 $$byval_copy922 = sp + 3477|0;
 $$byval_copy921 = sp + 3476|0;
 $$byval_copy920 = sp + 3475|0;
 $$byval_copy919 = sp + 3344|0;
 $$byval_copy918 = sp + 3336|0;
 $$byval_copy917 = sp + 3328|0;
 $$byval_copy916 = sp + 3320|0;
 $$byval_copy915 = sp + 3312|0;
 $$byval_copy914 = sp + 3304|0;
 $$byval_copy913 = sp + 3296|0;
 $$byval_copy912 = sp + 3288|0;
 $$byval_copy911 = sp + 3280|0;
 $$byval_copy910 = sp + 3272|0;
 $$byval_copy909 = sp + 3474|0;
 $$byval_copy908 = sp + 3473|0;
 $$byval_copy907 = sp + 3264|0;
 $$byval_copy906 = sp + 3256|0;
 $$byval_copy905 = sp + 3472|0;
 $$byval_copy904 = sp + 3248|0;
 $$byval_copy903 = sp + 3240|0;
 $$byval_copy902 = sp + 3232|0;
 $$byval_copy901 = sp + 3224|0;
 $$byval_copy900 = sp + 3216|0;
 $$byval_copy899 = sp + 3208|0;
 $$byval_copy898 = sp + 3200|0;
 $$byval_copy897 = sp + 3192|0;
 $$byval_copy896 = sp + 3184|0;
 $$byval_copy895 = sp + 3176|0;
 $$byval_copy894 = sp + 3168|0;
 $$byval_copy893 = sp + 3160|0;
 $$byval_copy892 = sp + 3152|0;
 $$byval_copy891 = sp + 3144|0;
 $$byval_copy890 = sp + 3136|0;
 $$byval_copy889 = sp + 3128|0;
 $$byval_copy888 = sp + 3120|0;
 $$byval_copy887 = sp + 3112|0;
 $$byval_copy886 = sp + 3104|0;
 $$byval_copy885 = sp + 3096|0;
 $$byval_copy884 = sp + 3088|0;
 $$byval_copy = sp + 3080|0;
 $4 = sp + 3056|0;
 $6 = sp + 3471|0;
 $7 = sp + 520|0;
 $11 = sp + 3032|0;
 $13 = sp + 3470|0;
 $14 = sp + 512|0;
 $18 = sp + 3008|0;
 $20 = sp + 3469|0;
 $21 = sp + 504|0;
 $25 = sp + 2984|0;
 $27 = sp + 3468|0;
 $28 = sp + 496|0;
 $32 = sp + 3467|0;
 $48 = sp + 2896|0;
 $50 = sp + 3466|0;
 $51 = sp + 488|0;
 $52 = sp + 480|0;
 $56 = sp + 2872|0;
 $58 = sp + 3465|0;
 $59 = sp + 472|0;
 $60 = sp + 464|0;
 $65 = sp + 2840|0;
 $66 = sp + 2832|0;
 $69 = sp + 2816|0;
 $70 = sp + 2808|0;
 $71 = sp + 456|0;
 $72 = sp + 448|0;
 $76 = sp + 3464|0;
 $78 = sp + 440|0;
 $102 = sp + 2688|0;
 $104 = sp + 3463|0;
 $105 = sp + 432|0;
 $106 = sp + 424|0;
 $111 = sp + 2656|0;
 $112 = sp + 2648|0;
 $115 = sp + 2632|0;
 $116 = sp + 2624|0;
 $117 = sp + 416|0;
 $118 = sp + 408|0;
 $123 = sp + 2600|0;
 $124 = sp + 2592|0;
 $127 = sp + 2576|0;
 $128 = sp + 2568|0;
 $129 = sp + 400|0;
 $130 = sp + 392|0;
 $135 = sp + 2544|0;
 $136 = sp + 2536|0;
 $139 = sp + 2520|0;
 $140 = sp + 2512|0;
 $141 = sp + 384|0;
 $142 = sp + 376|0;
 $146 = sp + 3462|0;
 $148 = sp + 368|0;
 $172 = sp + 2392|0;
 $174 = sp + 3461|0;
 $175 = sp + 360|0;
 $176 = sp + 352|0;
 $180 = sp + 2368|0;
 $182 = sp + 3460|0;
 $183 = sp + 344|0;
 $188 = sp + 2336|0;
 $189 = sp + 2328|0;
 $192 = sp + 2312|0;
 $193 = sp + 2304|0;
 $194 = sp + 336|0;
 $195 = sp + 328|0;
 $200 = sp + 2280|0;
 $201 = sp + 2272|0;
 $204 = sp + 2256|0;
 $205 = sp + 2248|0;
 $206 = sp + 320|0;
 $207 = sp + 312|0;
 $212 = sp + 2224|0;
 $213 = sp + 2216|0;
 $216 = sp + 2200|0;
 $217 = sp + 2192|0;
 $218 = sp + 304|0;
 $219 = sp + 296|0;
 $224 = sp + 2168|0;
 $225 = sp + 2160|0;
 $228 = sp + 2144|0;
 $229 = sp + 2136|0;
 $230 = sp + 288|0;
 $231 = sp + 280|0;
 $236 = sp + 2112|0;
 $237 = sp + 2104|0;
 $240 = sp + 2088|0;
 $241 = sp + 2080|0;
 $242 = sp + 272|0;
 $243 = sp + 264|0;
 $247 = sp + 3459|0;
 $249 = sp + 256|0;
 $283 = sp + 1920|0;
 $285 = sp + 3458|0;
 $286 = sp + 248|0;
 $287 = sp + 240|0;
 $291 = sp + 1896|0;
 $293 = sp + 3457|0;
 $294 = sp + 232|0;
 $298 = sp + 1872|0;
 $300 = sp + 3456|0;
 $301 = sp + 224|0;
 $305 = sp + 1848|0;
 $307 = sp + 3455|0;
 $308 = sp + 216|0;
 $309 = sp + 208|0;
 $314 = sp + 1816|0;
 $315 = sp + 1808|0;
 $318 = sp + 1792|0;
 $319 = sp + 1784|0;
 $320 = sp + 200|0;
 $321 = sp + 192|0;
 $325 = sp + 3454|0;
 $327 = sp + 184|0;
 $352 = sp + 1664|0;
 $353 = sp + 1656|0;
 $356 = sp + 1640|0;
 $357 = sp + 1632|0;
 $358 = sp + 176|0;
 $359 = sp + 168|0;
 $364 = sp + 1608|0;
 $365 = sp + 1600|0;
 $368 = sp + 1584|0;
 $369 = sp + 1576|0;
 $370 = sp + 160|0;
 $371 = sp + 152|0;
 $376 = sp + 1552|0;
 $377 = sp + 1544|0;
 $380 = sp + 1528|0;
 $381 = sp + 1520|0;
 $382 = sp + 144|0;
 $383 = sp + 136|0;
 $388 = sp + 1496|0;
 $389 = sp + 1488|0;
 $392 = sp + 1472|0;
 $393 = sp + 1464|0;
 $394 = sp + 128|0;
 $395 = sp + 120|0;
 $400 = sp + 1440|0;
 $401 = sp + 1432|0;
 $404 = sp + 1416|0;
 $405 = sp + 1408|0;
 $406 = sp + 112|0;
 $407 = sp + 104|0;
 $412 = sp + 1384|0;
 $413 = sp + 1376|0;
 $416 = sp + 1360|0;
 $417 = sp + 1352|0;
 $418 = sp + 96|0;
 $419 = sp + 88|0;
 $424 = sp + 1328|0;
 $425 = sp + 1320|0;
 $428 = sp + 1304|0;
 $429 = sp + 1296|0;
 $430 = sp + 80|0;
 $431 = sp + 72|0;
 $436 = sp + 1272|0;
 $437 = sp + 1264|0;
 $440 = sp + 1248|0;
 $441 = sp + 1240|0;
 $442 = sp + 64|0;
 $443 = sp + 56|0;
 $448 = sp + 1216|0;
 $449 = sp + 1208|0;
 $452 = sp + 1192|0;
 $453 = sp + 1184|0;
 $454 = sp + 48|0;
 $455 = sp + 40|0;
 $460 = sp + 1160|0;
 $461 = sp + 1152|0;
 $464 = sp + 1136|0;
 $465 = sp + 1128|0;
 $466 = sp + 32|0;
 $467 = sp + 24|0;
 $472 = sp + 1104|0;
 $473 = sp + 1096|0;
 $476 = sp + 1080|0;
 $477 = sp + 1072|0;
 $478 = sp + 16|0;
 $479 = sp + 8|0;
 $483 = sp + 3453|0;
 $485 = sp;
 $507 = sp + 3452|0;
 $508 = sp + 3451|0;
 $509 = sp + 3450|0;
 $510 = sp + 3449|0;
 $511 = sp + 3448|0;
 $512 = sp + 3447|0;
 $513 = sp + 3446|0;
 $514 = sp + 960|0;
 $515 = sp + 952|0;
 $516 = sp + 944|0;
 $517 = sp + 936|0;
 $518 = sp + 928|0;
 $519 = sp + 920|0;
 $520 = sp + 912|0;
 $521 = sp + 904|0;
 $522 = sp + 896|0;
 $523 = sp + 888|0;
 $524 = sp + 880|0;
 $525 = sp + 872|0;
 $526 = sp + 864|0;
 $527 = sp + 856|0;
 $528 = sp + 848|0;
 $529 = sp + 840|0;
 $530 = sp + 832|0;
 $531 = sp + 824|0;
 $532 = sp + 816|0;
 $533 = sp + 808|0;
 $534 = sp + 800|0;
 $535 = sp + 792|0;
 $536 = sp + 3445|0;
 $537 = sp + 3444|0;
 $538 = sp + 3443|0;
 $539 = sp + 3442|0;
 $540 = sp + 784|0;
 $541 = sp + 776|0;
 $542 = sp + 3441|0;
 $543 = sp + 768|0;
 $544 = sp + 760|0;
 $545 = sp + 752|0;
 $546 = sp + 3440|0;
 $547 = sp + 744|0;
 $548 = sp + 3439|0;
 $549 = sp + 3438|0;
 $550 = sp + 3437|0;
 $551 = sp + 3436|0;
 $552 = sp + 3435|0;
 $553 = sp + 3434|0;
 $554 = sp + 3433|0;
 $555 = sp + 736|0;
 $556 = sp + 728|0;
 $557 = sp + 720|0;
 $558 = sp + 712|0;
 $559 = sp + 704|0;
 $560 = sp + 696|0;
 $561 = sp + 688|0;
 $562 = sp + 680|0;
 $563 = sp + 672|0;
 $564 = sp + 664|0;
 $565 = sp + 656|0;
 $566 = sp + 3432|0;
 $567 = sp + 648|0;
 $568 = sp + 3431|0;
 $569 = sp + 3430|0;
 $570 = sp + 3429|0;
 $571 = sp + 3428|0;
 $572 = sp + 3427|0;
 $573 = sp + 3426|0;
 $574 = sp + 3425|0;
 $575 = sp + 640|0;
 $576 = sp + 632|0;
 $577 = sp + 624|0;
 $578 = sp + 616|0;
 $579 = sp + 608|0;
 $580 = sp + 600|0;
 $581 = sp + 3424|0;
 $582 = sp + 592|0;
 $583 = sp + 3423|0;
 $584 = sp + 3422|0;
 $585 = sp + 3421|0;
 $586 = sp + 3420|0;
 $587 = sp + 3419|0;
 $588 = sp + 584|0;
 $589 = sp + 576|0;
 $590 = sp + 3418|0;
 $591 = sp + 568|0;
 $592 = sp + 3417|0;
 $593 = sp + 560|0;
 $594 = sp + 3416|0;
 $595 = sp + 552|0;
 $596 = sp + 544|0;
 $597 = sp + 536|0;
 $598 = sp + 528|0;
 $506 = $0;
 __ZN10emscripten5enum_I9mad_layerEC2EPKc($507,58426); //@line 125 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $599 = (__ZN10emscripten5enum_I9mad_layerE5valueEPKcS1_($507,58436,1)|0); //@line 126 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $600 = (__ZN10emscripten5enum_I9mad_layerE5valueEPKcS1_($599,58448,2)|0); //@line 127 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 (__ZN10emscripten5enum_I9mad_layerE5valueEPKcS1_($600,58461,3)|0); //@line 128 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 __ZN10emscripten5enum_I8mad_modeEC2EPKc($508,58475); //@line 130 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $601 = (__ZN10emscripten5enum_I8mad_modeE5valueEPKcS1_($508,58484,1)|0); //@line 131 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $602 = (__ZN10emscripten5enum_I8mad_modeE5valueEPKcS1_($601,58506,2)|0); //@line 132 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $603 = (__ZN10emscripten5enum_I8mad_modeE5valueEPKcS1_($602,58528,0)|0); //@line 133 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 (__ZN10emscripten5enum_I8mad_modeE5valueEPKcS1_($603,58552,3)|0); //@line 134 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 __ZN10emscripten5enum_I12mad_emphasisEC2EPKc($509,58568); //@line 136 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $604 = (__ZN10emscripten5enum_I12mad_emphasisE5valueEPKcS1_($509,58581,1)|0); //@line 137 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $605 = (__ZN10emscripten5enum_I12mad_emphasisE5valueEPKcS1_($604,58603,3)|0); //@line 138 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $606 = (__ZN10emscripten5enum_I12mad_emphasisE5valueEPKcS1_($605,58627,0)|0); //@line 139 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 (__ZN10emscripten5enum_I12mad_emphasisE5valueEPKcS1_($606,58645,2)|0); //@line 140 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 __ZN10emscripten5enum_I9mad_errorEC2EPKc($510,58667); //@line 142 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $607 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($510,58677,0)|0); //@line 143 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $608 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($607,58692,1)|0); //@line 145 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $609 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($608,58709,2)|0); //@line 146 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $610 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($609,58726,49)|0); //@line 148 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $611 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($610,58742,257)|0); //@line 150 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $612 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($611,58761,258)|0); //@line 151 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $613 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($612,58780,259)|0); //@line 152 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $614 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($613,58801,260)|0); //@line 153 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $615 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($614,58825,261)|0); //@line 154 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $616 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($615,58847,513)|0); //@line 156 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $617 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($616,58864,529)|0); //@line 157 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $618 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($617,58886,545)|0); //@line 158 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $619 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($618,58911,546)|0); //@line 159 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $620 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($619,58929,561)|0); //@line 160 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $621 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($620,58951,562)|0); //@line 161 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $622 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($621,58974,563)|0); //@line 162 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $623 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($622,58997,564)|0); //@line 163 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $624 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($623,59016,565)|0); //@line 164 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $625 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($624,59037,566)|0); //@line 165 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $626 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($625,59059,567)|0); //@line 166 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $627 = (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($626,59082,568)|0); //@line 167 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 (__ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($627,59104,569)|0); //@line 168 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $500 = $511;
 $501 = 59124;
 __ZN10emscripten8internal11NoBaseClass6verifyI10mad_headerEEvv(); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $502 = 348; //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $628 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI10mad_headerEEPFvvEv()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $503 = $628; //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $629 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI10mad_headerEEPFvvEv()|0); //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $504 = $629; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $505 = 349; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $630 = (__ZN10emscripten8internal6TypeIDI10mad_headerE3getEv()|0); //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $631 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10mad_headerEEE3getEv()|0); //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $632 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10mad_headerEEE3getEv()|0); //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $633 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0); //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $634 = $502; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $499 = $634;
 $635 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $636 = $502; //@line 1141 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $637 = $503; //@line 1142 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $498 = $637;
 $638 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $639 = $503; //@line 1143 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $640 = $504; //@line 1144 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $497 = $640;
 $641 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $642 = $504; //@line 1145 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $643 = $501; //@line 1146 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $644 = $505; //@line 1147 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $496 = $644;
 $645 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $646 = $505; //@line 1148 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($630|0),($631|0),($632|0),($633|0),($635|0),($636|0),($638|0),($639|0),($641|0),($642|0),($643|0),($645|0),($646|0)); //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $490 = $512;
 $491 = 59135;
 __ZN10emscripten4baseI10mad_headerE6verifyI9MadHeaderEEvv(); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $492 = 350; //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $647 = (__ZN10emscripten4baseI10mad_headerE11getUpcasterI9MadHeaderEEPFPS1_PT_Ev()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $493 = $647; //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $648 = (__ZN10emscripten4baseI10mad_headerE13getDowncasterI9MadHeaderEEPFPT_PS1_Ev()|0); //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $494 = $648; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $495 = 351; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $649 = (__ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv()|0); //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $650 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI9MadHeaderEEE3getEv()|0); //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $651 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK9MadHeaderEEE3getEv()|0); //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $652 = (__ZN10emscripten4baseI10mad_headerE3getEv()|0); //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $653 = $492; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $489 = $653;
 $654 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $655 = $492; //@line 1141 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $656 = $493; //@line 1142 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $488 = $656;
 $657 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $658 = $493; //@line 1143 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $659 = $494; //@line 1144 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $487 = $659;
 $660 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $661 = $494; //@line 1145 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $662 = $491; //@line 1146 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $663 = $495; //@line 1147 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $486 = $663;
 $664 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $665 = $495; //@line 1148 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($649|0),($650|0),($651|0),($652|0),($654|0),($655|0),($657|0),($658|0),($660|0),($661|0),($662|0),($664|0),($665|0)); //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$485>>0]=HEAP8[$513>>0]|0;
 $481 = $512;
 $482 = 352;
 $666 = $481;
 $484 = 353; //@line 1194 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $667 = (__ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv()|0); //@line 1196 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $668 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP9MadHeaderEE8getCountEv($483)|0); //@line 1197 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $669 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP9MadHeaderEE8getTypesEv($483)|0); //@line 1198 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $670 = $484; //@line 1199 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $480 = $670;
 $671 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $672 = $484; //@line 1200 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $673 = $482; //@line 1201 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_constructor(($667|0),($668|0),($669|0),($671|0),($672|0),($673|0)); //@line 1195 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$514>>2] = (354); //@line 173 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index1 = ((($514)) + 4|0); //@line 173 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index1>>2] = 0; //@line 173 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$515>>2] = (355); //@line 173 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index3 = ((($515)) + 4|0); //@line 173 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index3>>2] = 0; //@line 173 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$478>>0]=HEAP8[$515>>0]|0;HEAP8[$478+1>>0]=HEAP8[$515+1>>0]|0;HEAP8[$478+2>>0]=HEAP8[$515+2>>0]|0;HEAP8[$478+3>>0]=HEAP8[$515+3>>0]|0;HEAP8[$478+4>>0]=HEAP8[$515+4>>0]|0;HEAP8[$478+5>>0]=HEAP8[$515+5>>0]|0;HEAP8[$478+6>>0]=HEAP8[$515+6>>0]|0;HEAP8[$478+7>>0]=HEAP8[$515+7>>0]|0;
 ;HEAP8[$479>>0]=HEAP8[$514>>0]|0;HEAP8[$479+1>>0]=HEAP8[$514+1>>0]|0;HEAP8[$479+2>>0]=HEAP8[$514+2>>0]|0;HEAP8[$479+3>>0]=HEAP8[$514+3>>0]|0;HEAP8[$479+4>>0]=HEAP8[$514+4>>0]|0;HEAP8[$479+5>>0]=HEAP8[$514+5>>0]|0;HEAP8[$479+6>>0]=HEAP8[$514+6>>0]|0;HEAP8[$479+7>>0]=HEAP8[$514+7>>0]|0;
 $$field = HEAP32[$479>>2]|0;
 $$index5 = ((($479)) + 4|0);
 $$field6 = HEAP32[$$index5>>2]|0;
 $$field9 = HEAP32[$478>>2]|0;
 $$index11 = ((($478)) + 4|0);
 $$field12 = HEAP32[$$index11>>2]|0;
 $470 = $666;
 $471 = 59145;
 HEAP32[$472>>2] = $$field;
 $$index15 = ((($472)) + 4|0);
 HEAP32[$$index15>>2] = $$field6;
 HEAP32[$473>>2] = $$field9;
 $$index17 = ((($473)) + 4|0);
 HEAP32[$$index17>>2] = $$field12;
 $674 = $470;
 $474 = 356; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $475 = 357; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $675 = (__ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $676 = $471; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $677 = (__ZN10emscripten8internal6TypeIDI9mad_layerE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $678 = $474; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $469 = $678;
 $679 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $680 = $474; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field19 = HEAP32[$472>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index21 = ((($472)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field22 = HEAP32[$$index21>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$476>>2] = $$field19; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index25 = ((($476)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index25>>2] = $$field22; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy>>2]=HEAP32[$476>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$476+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $681 = (__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF9mad_layervEE10getContextES5_($$byval_copy)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $682 = (__ZN10emscripten8internal6TypeIDI9mad_layerE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $683 = $475; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $468 = $683;
 $684 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $685 = $475; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field27 = HEAP32[$473>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index29 = ((($473)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field30 = HEAP32[$$index29>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$477>>2] = $$field27; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index33 = ((($477)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index33>>2] = $$field30; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy884>>2]=HEAP32[$477>>2]|0;HEAP32[$$byval_copy884+4>>2]=HEAP32[$477+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $686 = (__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv9mad_layerEE10getContextES5_($$byval_copy884)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($675|0),($676|0),($677|0),($679|0),($680|0),($681|0),($682|0),($684|0),($685|0),($686|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$516>>2] = (358); //@line 174 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index35 = ((($516)) + 4|0); //@line 174 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index35>>2] = 0; //@line 174 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$517>>2] = (359); //@line 174 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index37 = ((($517)) + 4|0); //@line 174 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index37>>2] = 0; //@line 174 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$466>>0]=HEAP8[$517>>0]|0;HEAP8[$466+1>>0]=HEAP8[$517+1>>0]|0;HEAP8[$466+2>>0]=HEAP8[$517+2>>0]|0;HEAP8[$466+3>>0]=HEAP8[$517+3>>0]|0;HEAP8[$466+4>>0]=HEAP8[$517+4>>0]|0;HEAP8[$466+5>>0]=HEAP8[$517+5>>0]|0;HEAP8[$466+6>>0]=HEAP8[$517+6>>0]|0;HEAP8[$466+7>>0]=HEAP8[$517+7>>0]|0;
 ;HEAP8[$467>>0]=HEAP8[$516>>0]|0;HEAP8[$467+1>>0]=HEAP8[$516+1>>0]|0;HEAP8[$467+2>>0]=HEAP8[$516+2>>0]|0;HEAP8[$467+3>>0]=HEAP8[$516+3>>0]|0;HEAP8[$467+4>>0]=HEAP8[$516+4>>0]|0;HEAP8[$467+5>>0]=HEAP8[$516+5>>0]|0;HEAP8[$467+6>>0]=HEAP8[$516+6>>0]|0;HEAP8[$467+7>>0]=HEAP8[$516+7>>0]|0;
 $$field39 = HEAP32[$467>>2]|0;
 $$index41 = ((($467)) + 4|0);
 $$field42 = HEAP32[$$index41>>2]|0;
 $$field45 = HEAP32[$466>>2]|0;
 $$index47 = ((($466)) + 4|0);
 $$field48 = HEAP32[$$index47>>2]|0;
 $458 = $674;
 $459 = 59151;
 HEAP32[$460>>2] = $$field39;
 $$index51 = ((($460)) + 4|0);
 HEAP32[$$index51>>2] = $$field42;
 HEAP32[$461>>2] = $$field45;
 $$index53 = ((($461)) + 4|0);
 HEAP32[$$index53>>2] = $$field48;
 $687 = $458;
 $462 = 360; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $463 = 361; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $688 = (__ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $689 = $459; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $690 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $691 = $462; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $457 = $691;
 $692 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $693 = $462; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field55 = HEAP32[$460>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index57 = ((($460)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field58 = HEAP32[$$index57>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$464>>2] = $$field55; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index61 = ((($464)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index61>>2] = $$field58; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy885>>2]=HEAP32[$464>>2]|0;HEAP32[$$byval_copy885+4>>2]=HEAP32[$464+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $694 = (__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFivEE10getContextES4_($$byval_copy885)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $695 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $696 = $463; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $456 = $696;
 $697 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $698 = $463; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field63 = HEAP32[$461>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index65 = ((($461)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field66 = HEAP32[$$index65>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$465>>2] = $$field63; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index69 = ((($465)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index69>>2] = $$field66; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy886>>2]=HEAP32[$465>>2]|0;HEAP32[$$byval_copy886+4>>2]=HEAP32[$465+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $699 = (__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFviEE10getContextES4_($$byval_copy886)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($688|0),($689|0),($690|0),($692|0),($693|0),($694|0),($695|0),($697|0),($698|0),($699|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$518>>2] = (362); //@line 175 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index71 = ((($518)) + 4|0); //@line 175 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index71>>2] = 0; //@line 175 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$519>>2] = (363); //@line 175 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index73 = ((($519)) + 4|0); //@line 175 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index73>>2] = 0; //@line 175 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$454>>0]=HEAP8[$519>>0]|0;HEAP8[$454+1>>0]=HEAP8[$519+1>>0]|0;HEAP8[$454+2>>0]=HEAP8[$519+2>>0]|0;HEAP8[$454+3>>0]=HEAP8[$519+3>>0]|0;HEAP8[$454+4>>0]=HEAP8[$519+4>>0]|0;HEAP8[$454+5>>0]=HEAP8[$519+5>>0]|0;HEAP8[$454+6>>0]=HEAP8[$519+6>>0]|0;HEAP8[$454+7>>0]=HEAP8[$519+7>>0]|0;
 ;HEAP8[$455>>0]=HEAP8[$518>>0]|0;HEAP8[$455+1>>0]=HEAP8[$518+1>>0]|0;HEAP8[$455+2>>0]=HEAP8[$518+2>>0]|0;HEAP8[$455+3>>0]=HEAP8[$518+3>>0]|0;HEAP8[$455+4>>0]=HEAP8[$518+4>>0]|0;HEAP8[$455+5>>0]=HEAP8[$518+5>>0]|0;HEAP8[$455+6>>0]=HEAP8[$518+6>>0]|0;HEAP8[$455+7>>0]=HEAP8[$518+7>>0]|0;
 $$field75 = HEAP32[$455>>2]|0;
 $$index77 = ((($455)) + 4|0);
 $$field78 = HEAP32[$$index77>>2]|0;
 $$field81 = HEAP32[$454>>2]|0;
 $$index83 = ((($454)) + 4|0);
 $$field84 = HEAP32[$$index83>>2]|0;
 $446 = $687;
 $447 = 59166;
 HEAP32[$448>>2] = $$field75;
 $$index87 = ((($448)) + 4|0);
 HEAP32[$$index87>>2] = $$field78;
 HEAP32[$449>>2] = $$field81;
 $$index89 = ((($449)) + 4|0);
 HEAP32[$$index89>>2] = $$field84;
 $700 = $446;
 $450 = 364; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $451 = 365; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $701 = (__ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $702 = $447; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $703 = (__ZN10emscripten8internal6TypeIDI8mad_modeE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $704 = $450; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $445 = $704;
 $705 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $706 = $450; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field91 = HEAP32[$448>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index93 = ((($448)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field94 = HEAP32[$$index93>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$452>>2] = $$field91; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index97 = ((($452)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index97>>2] = $$field94; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy887>>2]=HEAP32[$452>>2]|0;HEAP32[$$byval_copy887+4>>2]=HEAP32[$452+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $707 = (__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF8mad_modevEE10getContextES5_($$byval_copy887)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $708 = (__ZN10emscripten8internal6TypeIDI8mad_modeE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $709 = $451; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $444 = $709;
 $710 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $711 = $451; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field99 = HEAP32[$449>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index101 = ((($449)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field102 = HEAP32[$$index101>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$453>>2] = $$field99; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index105 = ((($453)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index105>>2] = $$field102; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy888>>2]=HEAP32[$453>>2]|0;HEAP32[$$byval_copy888+4>>2]=HEAP32[$453+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $712 = (__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv8mad_modeEE10getContextES5_($$byval_copy888)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($701|0),($702|0),($703|0),($705|0),($706|0),($707|0),($708|0),($710|0),($711|0),($712|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$520>>2] = (366); //@line 176 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index107 = ((($520)) + 4|0); //@line 176 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index107>>2] = 0; //@line 176 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$521>>2] = (367); //@line 176 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index109 = ((($521)) + 4|0); //@line 176 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index109>>2] = 0; //@line 176 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$442>>0]=HEAP8[$521>>0]|0;HEAP8[$442+1>>0]=HEAP8[$521+1>>0]|0;HEAP8[$442+2>>0]=HEAP8[$521+2>>0]|0;HEAP8[$442+3>>0]=HEAP8[$521+3>>0]|0;HEAP8[$442+4>>0]=HEAP8[$521+4>>0]|0;HEAP8[$442+5>>0]=HEAP8[$521+5>>0]|0;HEAP8[$442+6>>0]=HEAP8[$521+6>>0]|0;HEAP8[$442+7>>0]=HEAP8[$521+7>>0]|0;
 ;HEAP8[$443>>0]=HEAP8[$520>>0]|0;HEAP8[$443+1>>0]=HEAP8[$520+1>>0]|0;HEAP8[$443+2>>0]=HEAP8[$520+2>>0]|0;HEAP8[$443+3>>0]=HEAP8[$520+3>>0]|0;HEAP8[$443+4>>0]=HEAP8[$520+4>>0]|0;HEAP8[$443+5>>0]=HEAP8[$520+5>>0]|0;HEAP8[$443+6>>0]=HEAP8[$520+6>>0]|0;HEAP8[$443+7>>0]=HEAP8[$520+7>>0]|0;
 $$field111 = HEAP32[$443>>2]|0;
 $$index113 = ((($443)) + 4|0);
 $$field114 = HEAP32[$$index113>>2]|0;
 $$field117 = HEAP32[$442>>2]|0;
 $$index119 = ((($442)) + 4|0);
 $$field120 = HEAP32[$$index119>>2]|0;
 $434 = $700;
 $435 = 59171;
 HEAP32[$436>>2] = $$field111;
 $$index123 = ((($436)) + 4|0);
 HEAP32[$$index123>>2] = $$field114;
 HEAP32[$437>>2] = $$field117;
 $$index125 = ((($437)) + 4|0);
 HEAP32[$$index125>>2] = $$field120;
 $713 = $434;
 $438 = 368; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $439 = 369; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $714 = (__ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $715 = $435; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $716 = (__ZN10emscripten8internal6TypeIDI12mad_emphasisE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $717 = $438; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $433 = $717;
 $718 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $719 = $438; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field127 = HEAP32[$436>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index129 = ((($436)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field130 = HEAP32[$$index129>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$440>>2] = $$field127; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index133 = ((($440)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index133>>2] = $$field130; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy889>>2]=HEAP32[$440>>2]|0;HEAP32[$$byval_copy889+4>>2]=HEAP32[$440+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $720 = (__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF12mad_emphasisvEE10getContextES5_($$byval_copy889)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $721 = (__ZN10emscripten8internal6TypeIDI12mad_emphasisE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $722 = $439; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $432 = $722;
 $723 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $724 = $439; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field135 = HEAP32[$437>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index137 = ((($437)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field138 = HEAP32[$$index137>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$441>>2] = $$field135; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index141 = ((($441)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index141>>2] = $$field138; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy890>>2]=HEAP32[$441>>2]|0;HEAP32[$$byval_copy890+4>>2]=HEAP32[$441+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $725 = (__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv12mad_emphasisEE10getContextES5_($$byval_copy890)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($714|0),($715|0),($716|0),($718|0),($719|0),($720|0),($721|0),($723|0),($724|0),($725|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$522>>2] = (370); //@line 177 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index143 = ((($522)) + 4|0); //@line 177 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index143>>2] = 0; //@line 177 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$523>>2] = (371); //@line 177 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index145 = ((($523)) + 4|0); //@line 177 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index145>>2] = 0; //@line 177 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$430>>0]=HEAP8[$523>>0]|0;HEAP8[$430+1>>0]=HEAP8[$523+1>>0]|0;HEAP8[$430+2>>0]=HEAP8[$523+2>>0]|0;HEAP8[$430+3>>0]=HEAP8[$523+3>>0]|0;HEAP8[$430+4>>0]=HEAP8[$523+4>>0]|0;HEAP8[$430+5>>0]=HEAP8[$523+5>>0]|0;HEAP8[$430+6>>0]=HEAP8[$523+6>>0]|0;HEAP8[$430+7>>0]=HEAP8[$523+7>>0]|0;
 ;HEAP8[$431>>0]=HEAP8[$522>>0]|0;HEAP8[$431+1>>0]=HEAP8[$522+1>>0]|0;HEAP8[$431+2>>0]=HEAP8[$522+2>>0]|0;HEAP8[$431+3>>0]=HEAP8[$522+3>>0]|0;HEAP8[$431+4>>0]=HEAP8[$522+4>>0]|0;HEAP8[$431+5>>0]=HEAP8[$522+5>>0]|0;HEAP8[$431+6>>0]=HEAP8[$522+6>>0]|0;HEAP8[$431+7>>0]=HEAP8[$522+7>>0]|0;
 $$field147 = HEAP32[$431>>2]|0;
 $$index149 = ((($431)) + 4|0);
 $$field150 = HEAP32[$$index149>>2]|0;
 $$field153 = HEAP32[$430>>2]|0;
 $$index155 = ((($430)) + 4|0);
 $$field156 = HEAP32[$$index155>>2]|0;
 $422 = $713;
 $423 = 59180;
 HEAP32[$424>>2] = $$field147;
 $$index159 = ((($424)) + 4|0);
 HEAP32[$$index159>>2] = $$field150;
 HEAP32[$425>>2] = $$field153;
 $$index161 = ((($425)) + 4|0);
 HEAP32[$$index161>>2] = $$field156;
 $726 = $422;
 $426 = 372; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $427 = 373; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $727 = (__ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $728 = $423; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $729 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $730 = $426; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $421 = $730;
 $731 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $732 = $426; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field163 = HEAP32[$424>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index165 = ((($424)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field166 = HEAP32[$$index165>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$428>>2] = $$field163; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index169 = ((($428)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index169>>2] = $$field166; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy891>>2]=HEAP32[$428>>2]|0;HEAP32[$$byval_copy891+4>>2]=HEAP32[$428+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $733 = (__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFmvEE10getContextES4_($$byval_copy891)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $734 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $735 = $427; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $420 = $735;
 $736 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $737 = $427; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field171 = HEAP32[$425>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index173 = ((($425)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field174 = HEAP32[$$index173>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$429>>2] = $$field171; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index177 = ((($429)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index177>>2] = $$field174; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy892>>2]=HEAP32[$429>>2]|0;HEAP32[$$byval_copy892+4>>2]=HEAP32[$429+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $738 = (__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFvmEE10getContextES4_($$byval_copy892)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($727|0),($728|0),($729|0),($731|0),($732|0),($733|0),($734|0),($736|0),($737|0),($738|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$524>>2] = (374); //@line 178 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index179 = ((($524)) + 4|0); //@line 178 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index179>>2] = 0; //@line 178 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$525>>2] = (375); //@line 178 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index181 = ((($525)) + 4|0); //@line 178 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index181>>2] = 0; //@line 178 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$418>>0]=HEAP8[$525>>0]|0;HEAP8[$418+1>>0]=HEAP8[$525+1>>0]|0;HEAP8[$418+2>>0]=HEAP8[$525+2>>0]|0;HEAP8[$418+3>>0]=HEAP8[$525+3>>0]|0;HEAP8[$418+4>>0]=HEAP8[$525+4>>0]|0;HEAP8[$418+5>>0]=HEAP8[$525+5>>0]|0;HEAP8[$418+6>>0]=HEAP8[$525+6>>0]|0;HEAP8[$418+7>>0]=HEAP8[$525+7>>0]|0;
 ;HEAP8[$419>>0]=HEAP8[$524>>0]|0;HEAP8[$419+1>>0]=HEAP8[$524+1>>0]|0;HEAP8[$419+2>>0]=HEAP8[$524+2>>0]|0;HEAP8[$419+3>>0]=HEAP8[$524+3>>0]|0;HEAP8[$419+4>>0]=HEAP8[$524+4>>0]|0;HEAP8[$419+5>>0]=HEAP8[$524+5>>0]|0;HEAP8[$419+6>>0]=HEAP8[$524+6>>0]|0;HEAP8[$419+7>>0]=HEAP8[$524+7>>0]|0;
 $$field183 = HEAP32[$419>>2]|0;
 $$index185 = ((($419)) + 4|0);
 $$field186 = HEAP32[$$index185>>2]|0;
 $$field189 = HEAP32[$418>>2]|0;
 $$index191 = ((($418)) + 4|0);
 $$field192 = HEAP32[$$index191>>2]|0;
 $410 = $726;
 $411 = 59188;
 HEAP32[$412>>2] = $$field183;
 $$index195 = ((($412)) + 4|0);
 HEAP32[$$index195>>2] = $$field186;
 HEAP32[$413>>2] = $$field189;
 $$index197 = ((($413)) + 4|0);
 HEAP32[$$index197>>2] = $$field192;
 $739 = $410;
 $414 = 376; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $415 = 377; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $740 = (__ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $741 = $411; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $742 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $743 = $414; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $409 = $743;
 $744 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $745 = $414; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field199 = HEAP32[$412>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index201 = ((($412)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field202 = HEAP32[$$index201>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$416>>2] = $$field199; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index205 = ((($416)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index205>>2] = $$field202; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy893>>2]=HEAP32[$416>>2]|0;HEAP32[$$byval_copy893+4>>2]=HEAP32[$416+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $746 = (__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFjvEE10getContextES4_($$byval_copy893)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $747 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $748 = $415; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $408 = $748;
 $749 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $750 = $415; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field207 = HEAP32[$413>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index209 = ((($413)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field210 = HEAP32[$$index209>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$417>>2] = $$field207; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index213 = ((($417)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index213>>2] = $$field210; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy894>>2]=HEAP32[$417>>2]|0;HEAP32[$$byval_copy894+4>>2]=HEAP32[$417+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $751 = (__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFvjEE10getContextES4_($$byval_copy894)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($740|0),($741|0),($742|0),($744|0),($745|0),($746|0),($747|0),($749|0),($750|0),($751|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$526>>2] = (378); //@line 179 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index215 = ((($526)) + 4|0); //@line 179 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index215>>2] = 0; //@line 179 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$527>>2] = (379); //@line 179 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index217 = ((($527)) + 4|0); //@line 179 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index217>>2] = 0; //@line 179 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$406>>0]=HEAP8[$527>>0]|0;HEAP8[$406+1>>0]=HEAP8[$527+1>>0]|0;HEAP8[$406+2>>0]=HEAP8[$527+2>>0]|0;HEAP8[$406+3>>0]=HEAP8[$527+3>>0]|0;HEAP8[$406+4>>0]=HEAP8[$527+4>>0]|0;HEAP8[$406+5>>0]=HEAP8[$527+5>>0]|0;HEAP8[$406+6>>0]=HEAP8[$527+6>>0]|0;HEAP8[$406+7>>0]=HEAP8[$527+7>>0]|0;
 ;HEAP8[$407>>0]=HEAP8[$526>>0]|0;HEAP8[$407+1>>0]=HEAP8[$526+1>>0]|0;HEAP8[$407+2>>0]=HEAP8[$526+2>>0]|0;HEAP8[$407+3>>0]=HEAP8[$526+3>>0]|0;HEAP8[$407+4>>0]=HEAP8[$526+4>>0]|0;HEAP8[$407+5>>0]=HEAP8[$526+5>>0]|0;HEAP8[$407+6>>0]=HEAP8[$526+6>>0]|0;HEAP8[$407+7>>0]=HEAP8[$526+7>>0]|0;
 $$field219 = HEAP32[$407>>2]|0;
 $$index221 = ((($407)) + 4|0);
 $$field222 = HEAP32[$$index221>>2]|0;
 $$field225 = HEAP32[$406>>2]|0;
 $$index227 = ((($406)) + 4|0);
 $$field228 = HEAP32[$$index227>>2]|0;
 $398 = $739;
 $399 = 59199;
 HEAP32[$400>>2] = $$field219;
 $$index231 = ((($400)) + 4|0);
 HEAP32[$$index231>>2] = $$field222;
 HEAP32[$401>>2] = $$field225;
 $$index233 = ((($401)) + 4|0);
 HEAP32[$$index233>>2] = $$field228;
 $752 = $398;
 $402 = 380; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $403 = 381; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $753 = (__ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $754 = $399; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $755 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $756 = $402; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $397 = $756;
 $757 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $758 = $402; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field235 = HEAP32[$400>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index237 = ((($400)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field238 = HEAP32[$$index237>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$404>>2] = $$field235; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index241 = ((($404)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index241>>2] = $$field238; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy895>>2]=HEAP32[$404>>2]|0;HEAP32[$$byval_copy895+4>>2]=HEAP32[$404+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $759 = (__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFtvEE10getContextES4_($$byval_copy895)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $760 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $761 = $403; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $396 = $761;
 $762 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $763 = $403; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field243 = HEAP32[$401>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index245 = ((($401)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field246 = HEAP32[$$index245>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$405>>2] = $$field243; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index249 = ((($405)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index249>>2] = $$field246; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy896>>2]=HEAP32[$405>>2]|0;HEAP32[$$byval_copy896+4>>2]=HEAP32[$405+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $764 = (__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFvtEE10getContextES4_($$byval_copy896)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($753|0),($754|0),($755|0),($757|0),($758|0),($759|0),($760|0),($762|0),($763|0),($764|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$528>>2] = (382); //@line 180 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index251 = ((($528)) + 4|0); //@line 180 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index251>>2] = 0; //@line 180 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$529>>2] = (383); //@line 180 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index253 = ((($529)) + 4|0); //@line 180 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index253>>2] = 0; //@line 180 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$394>>0]=HEAP8[$529>>0]|0;HEAP8[$394+1>>0]=HEAP8[$529+1>>0]|0;HEAP8[$394+2>>0]=HEAP8[$529+2>>0]|0;HEAP8[$394+3>>0]=HEAP8[$529+3>>0]|0;HEAP8[$394+4>>0]=HEAP8[$529+4>>0]|0;HEAP8[$394+5>>0]=HEAP8[$529+5>>0]|0;HEAP8[$394+6>>0]=HEAP8[$529+6>>0]|0;HEAP8[$394+7>>0]=HEAP8[$529+7>>0]|0;
 ;HEAP8[$395>>0]=HEAP8[$528>>0]|0;HEAP8[$395+1>>0]=HEAP8[$528+1>>0]|0;HEAP8[$395+2>>0]=HEAP8[$528+2>>0]|0;HEAP8[$395+3>>0]=HEAP8[$528+3>>0]|0;HEAP8[$395+4>>0]=HEAP8[$528+4>>0]|0;HEAP8[$395+5>>0]=HEAP8[$528+5>>0]|0;HEAP8[$395+6>>0]=HEAP8[$528+6>>0]|0;HEAP8[$395+7>>0]=HEAP8[$528+7>>0]|0;
 $$field255 = HEAP32[$395>>2]|0;
 $$index257 = ((($395)) + 4|0);
 $$field258 = HEAP32[$$index257>>2]|0;
 $$field261 = HEAP32[$394>>2]|0;
 $$index263 = ((($394)) + 4|0);
 $$field264 = HEAP32[$$index263>>2]|0;
 $386 = $752;
 $387 = 59209;
 HEAP32[$388>>2] = $$field255;
 $$index267 = ((($388)) + 4|0);
 HEAP32[$$index267>>2] = $$field258;
 HEAP32[$389>>2] = $$field261;
 $$index269 = ((($389)) + 4|0);
 HEAP32[$$index269>>2] = $$field264;
 $765 = $386;
 $390 = 380; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $391 = 373; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $766 = (__ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $767 = $387; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $768 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $769 = $390; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $385 = $769;
 $770 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $771 = $390; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field271 = HEAP32[$388>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index273 = ((($388)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field274 = HEAP32[$$index273>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$392>>2] = $$field271; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index277 = ((($392)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index277>>2] = $$field274; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy897>>2]=HEAP32[$392>>2]|0;HEAP32[$$byval_copy897+4>>2]=HEAP32[$392+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $772 = (__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFtvEE10getContextES4_($$byval_copy897)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $773 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $774 = $391; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $384 = $774;
 $775 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $776 = $391; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field279 = HEAP32[$389>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index281 = ((($389)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field282 = HEAP32[$$index281>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$393>>2] = $$field279; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index285 = ((($393)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index285>>2] = $$field282; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy898>>2]=HEAP32[$393>>2]|0;HEAP32[$$byval_copy898+4>>2]=HEAP32[$393+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $777 = (__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFvmEE10getContextES4_($$byval_copy898)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($766|0),($767|0),($768|0),($770|0),($771|0),($772|0),($773|0),($775|0),($776|0),($777|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$530>>2] = (384); //@line 181 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index287 = ((($530)) + 4|0); //@line 181 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index287>>2] = 0; //@line 181 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$531>>2] = (385); //@line 181 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index289 = ((($531)) + 4|0); //@line 181 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index289>>2] = 0; //@line 181 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$382>>0]=HEAP8[$531>>0]|0;HEAP8[$382+1>>0]=HEAP8[$531+1>>0]|0;HEAP8[$382+2>>0]=HEAP8[$531+2>>0]|0;HEAP8[$382+3>>0]=HEAP8[$531+3>>0]|0;HEAP8[$382+4>>0]=HEAP8[$531+4>>0]|0;HEAP8[$382+5>>0]=HEAP8[$531+5>>0]|0;HEAP8[$382+6>>0]=HEAP8[$531+6>>0]|0;HEAP8[$382+7>>0]=HEAP8[$531+7>>0]|0;
 ;HEAP8[$383>>0]=HEAP8[$530>>0]|0;HEAP8[$383+1>>0]=HEAP8[$530+1>>0]|0;HEAP8[$383+2>>0]=HEAP8[$530+2>>0]|0;HEAP8[$383+3>>0]=HEAP8[$530+3>>0]|0;HEAP8[$383+4>>0]=HEAP8[$530+4>>0]|0;HEAP8[$383+5>>0]=HEAP8[$530+5>>0]|0;HEAP8[$383+6>>0]=HEAP8[$530+6>>0]|0;HEAP8[$383+7>>0]=HEAP8[$530+7>>0]|0;
 $$field291 = HEAP32[$383>>2]|0;
 $$index293 = ((($383)) + 4|0);
 $$field294 = HEAP32[$$index293>>2]|0;
 $$field297 = HEAP32[$382>>2]|0;
 $$index299 = ((($382)) + 4|0);
 $$field300 = HEAP32[$$index299>>2]|0;
 $374 = $765;
 $375 = 59220;
 HEAP32[$376>>2] = $$field291;
 $$index303 = ((($376)) + 4|0);
 HEAP32[$$index303>>2] = $$field294;
 HEAP32[$377>>2] = $$field297;
 $$index305 = ((($377)) + 4|0);
 HEAP32[$$index305>>2] = $$field300;
 $778 = $374;
 $378 = 360; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $379 = 361; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $779 = (__ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $780 = $375; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $781 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $782 = $378; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $373 = $782;
 $783 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $784 = $378; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field307 = HEAP32[$376>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index309 = ((($376)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field310 = HEAP32[$$index309>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$380>>2] = $$field307; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index313 = ((($380)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index313>>2] = $$field310; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy899>>2]=HEAP32[$380>>2]|0;HEAP32[$$byval_copy899+4>>2]=HEAP32[$380+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $785 = (__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFivEE10getContextES4_($$byval_copy899)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $786 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $787 = $379; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $372 = $787;
 $788 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $789 = $379; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field315 = HEAP32[$377>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index317 = ((($377)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field318 = HEAP32[$$index317>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$381>>2] = $$field315; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index321 = ((($381)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index321>>2] = $$field318; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy900>>2]=HEAP32[$381>>2]|0;HEAP32[$$byval_copy900+4>>2]=HEAP32[$381+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $790 = (__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFviEE10getContextES4_($$byval_copy900)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($779|0),($780|0),($781|0),($783|0),($784|0),($785|0),($786|0),($788|0),($789|0),($790|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$532>>2] = (386); //@line 182 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index323 = ((($532)) + 4|0); //@line 182 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index323>>2] = 0; //@line 182 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$533>>2] = (387); //@line 182 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index325 = ((($533)) + 4|0); //@line 182 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index325>>2] = 0; //@line 182 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$370>>0]=HEAP8[$533>>0]|0;HEAP8[$370+1>>0]=HEAP8[$533+1>>0]|0;HEAP8[$370+2>>0]=HEAP8[$533+2>>0]|0;HEAP8[$370+3>>0]=HEAP8[$533+3>>0]|0;HEAP8[$370+4>>0]=HEAP8[$533+4>>0]|0;HEAP8[$370+5>>0]=HEAP8[$533+5>>0]|0;HEAP8[$370+6>>0]=HEAP8[$533+6>>0]|0;HEAP8[$370+7>>0]=HEAP8[$533+7>>0]|0;
 ;HEAP8[$371>>0]=HEAP8[$532>>0]|0;HEAP8[$371+1>>0]=HEAP8[$532+1>>0]|0;HEAP8[$371+2>>0]=HEAP8[$532+2>>0]|0;HEAP8[$371+3>>0]=HEAP8[$532+3>>0]|0;HEAP8[$371+4>>0]=HEAP8[$532+4>>0]|0;HEAP8[$371+5>>0]=HEAP8[$532+5>>0]|0;HEAP8[$371+6>>0]=HEAP8[$532+6>>0]|0;HEAP8[$371+7>>0]=HEAP8[$532+7>>0]|0;
 $$field327 = HEAP32[$371>>2]|0;
 $$index329 = ((($371)) + 4|0);
 $$field330 = HEAP32[$$index329>>2]|0;
 $$field333 = HEAP32[$370>>2]|0;
 $$index335 = ((($370)) + 4|0);
 $$field336 = HEAP32[$$index335>>2]|0;
 $362 = $778;
 $363 = 59226;
 HEAP32[$364>>2] = $$field327;
 $$index339 = ((($364)) + 4|0);
 HEAP32[$$index339>>2] = $$field330;
 HEAP32[$365>>2] = $$field333;
 $$index341 = ((($365)) + 4|0);
 HEAP32[$$index341>>2] = $$field336;
 $791 = $362;
 $366 = 360; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $367 = 361; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $792 = (__ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $793 = $363; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $794 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $795 = $366; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $361 = $795;
 $796 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $797 = $366; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field343 = HEAP32[$364>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index345 = ((($364)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field346 = HEAP32[$$index345>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$368>>2] = $$field343; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index349 = ((($368)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index349>>2] = $$field346; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy901>>2]=HEAP32[$368>>2]|0;HEAP32[$$byval_copy901+4>>2]=HEAP32[$368+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $798 = (__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFivEE10getContextES4_($$byval_copy901)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $799 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $800 = $367; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $360 = $800;
 $801 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $802 = $367; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field351 = HEAP32[$365>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index353 = ((($365)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field354 = HEAP32[$$index353>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$369>>2] = $$field351; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index357 = ((($369)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index357>>2] = $$field354; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy902>>2]=HEAP32[$369>>2]|0;HEAP32[$$byval_copy902+4>>2]=HEAP32[$369+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $803 = (__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFviEE10getContextES4_($$byval_copy902)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($792|0),($793|0),($794|0),($796|0),($797|0),($798|0),($799|0),($801|0),($802|0),($803|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$534>>2] = (388); //@line 183 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index359 = ((($534)) + 4|0); //@line 183 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index359>>2] = 0; //@line 183 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$535>>2] = (389); //@line 183 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index361 = ((($535)) + 4|0); //@line 183 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index361>>2] = 0; //@line 183 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$358>>0]=HEAP8[$535>>0]|0;HEAP8[$358+1>>0]=HEAP8[$535+1>>0]|0;HEAP8[$358+2>>0]=HEAP8[$535+2>>0]|0;HEAP8[$358+3>>0]=HEAP8[$535+3>>0]|0;HEAP8[$358+4>>0]=HEAP8[$535+4>>0]|0;HEAP8[$358+5>>0]=HEAP8[$535+5>>0]|0;HEAP8[$358+6>>0]=HEAP8[$535+6>>0]|0;HEAP8[$358+7>>0]=HEAP8[$535+7>>0]|0;
 ;HEAP8[$359>>0]=HEAP8[$534>>0]|0;HEAP8[$359+1>>0]=HEAP8[$534+1>>0]|0;HEAP8[$359+2>>0]=HEAP8[$534+2>>0]|0;HEAP8[$359+3>>0]=HEAP8[$534+3>>0]|0;HEAP8[$359+4>>0]=HEAP8[$534+4>>0]|0;HEAP8[$359+5>>0]=HEAP8[$534+5>>0]|0;HEAP8[$359+6>>0]=HEAP8[$534+6>>0]|0;HEAP8[$359+7>>0]=HEAP8[$534+7>>0]|0;
 $$field363 = HEAP32[$359>>2]|0;
 $$index365 = ((($359)) + 4|0);
 $$field366 = HEAP32[$$index365>>2]|0;
 $$field369 = HEAP32[$358>>2]|0;
 $$index371 = ((($358)) + 4|0);
 $$field372 = HEAP32[$$index371>>2]|0;
 $350 = $791;
 $351 = 59239;
 HEAP32[$352>>2] = $$field363;
 $$index375 = ((($352)) + 4|0);
 HEAP32[$$index375>>2] = $$field366;
 HEAP32[$353>>2] = $$field369;
 $$index377 = ((($353)) + 4|0);
 HEAP32[$$index377>>2] = $$field372;
 $354 = 390; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $355 = 391; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $804 = (__ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $805 = $351; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $806 = (__ZN10emscripten8internal6TypeIDI11mad_timer_tE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $807 = $354; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $349 = $807;
 $808 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $809 = $354; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field379 = HEAP32[$352>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index381 = ((($352)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field382 = HEAP32[$$index381>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$356>>2] = $$field379; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index385 = ((($356)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index385>>2] = $$field382; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy903>>2]=HEAP32[$356>>2]|0;HEAP32[$$byval_copy903+4>>2]=HEAP32[$356+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $810 = (__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF11mad_timer_tvEE10getContextES5_($$byval_copy903)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $811 = (__ZN10emscripten8internal6TypeIDI11mad_timer_tE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $812 = $355; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $348 = $812;
 $813 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $814 = $355; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field387 = HEAP32[$353>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index389 = ((($353)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field390 = HEAP32[$$index389>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$357>>2] = $$field387; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index393 = ((($357)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index393>>2] = $$field390; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy904>>2]=HEAP32[$357>>2]|0;HEAP32[$$byval_copy904+4>>2]=HEAP32[$357+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $815 = (__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv11mad_timer_tEE10getContextES5_($$byval_copy904)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($804|0),($805|0),($806|0),($808|0),($809|0),($810|0),($811|0),($813|0),($814|0),($815|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$$byval_copy905>>0]=HEAP8[$536>>0]|0; //@line 185 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 __ZN10emscripten8functionIvJP10mad_headerEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_(59248,392,$$byval_copy905); //@line 185 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $342 = $537;
 $343 = 59264;
 __ZN10emscripten8internal11NoBaseClass6verifyI9mad_frameEEvv(); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $344 = 393; //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $816 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI9mad_frameEEPFvvEv()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $345 = $816; //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $817 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI9mad_frameEEPFvvEv()|0); //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $346 = $817; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $347 = 394; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $818 = (__ZN10emscripten8internal6TypeIDI9mad_frameE3getEv()|0); //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $819 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI9mad_frameEEE3getEv()|0); //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $820 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK9mad_frameEEE3getEv()|0); //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $821 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0); //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $822 = $344; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $341 = $822;
 $823 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $824 = $344; //@line 1141 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $825 = $345; //@line 1142 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $340 = $825;
 $826 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $827 = $345; //@line 1143 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $828 = $346; //@line 1144 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $339 = $828;
 $829 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $830 = $346; //@line 1145 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $831 = $343; //@line 1146 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $832 = $347; //@line 1147 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $338 = $832;
 $833 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $834 = $347; //@line 1148 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($818|0),($819|0),($820|0),($821|0),($823|0),($824|0),($826|0),($827|0),($829|0),($830|0),($831|0),($833|0),($834|0)); //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $332 = $538;
 $333 = 59274;
 __ZN10emscripten4baseI9mad_frameE6verifyI8MadFrameEEvv(); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $334 = 395; //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $835 = (__ZN10emscripten4baseI9mad_frameE11getUpcasterI8MadFrameEEPFPS1_PT_Ev()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $335 = $835; //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $836 = (__ZN10emscripten4baseI9mad_frameE13getDowncasterI8MadFrameEEPFPT_PS1_Ev()|0); //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $336 = $836; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $337 = 396; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $837 = (__ZN10emscripten8internal6TypeIDI8MadFrameE3getEv()|0); //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $838 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI8MadFrameEEE3getEv()|0); //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $839 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK8MadFrameEEE3getEv()|0); //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $840 = (__ZN10emscripten4baseI9mad_frameE3getEv()|0); //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $841 = $334; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $331 = $841;
 $842 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $843 = $334; //@line 1141 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $844 = $335; //@line 1142 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $330 = $844;
 $845 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $846 = $335; //@line 1143 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $847 = $336; //@line 1144 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $329 = $847;
 $848 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $849 = $336; //@line 1145 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $850 = $333; //@line 1146 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $851 = $337; //@line 1147 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $328 = $851;
 $852 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $853 = $337; //@line 1148 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($837|0),($838|0),($839|0),($840|0),($842|0),($843|0),($845|0),($846|0),($848|0),($849|0),($850|0),($852|0),($853|0)); //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$327>>0]=HEAP8[$539>>0]|0;
 $323 = $538;
 $324 = 397;
 $854 = $323;
 $326 = 398; //@line 1194 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $855 = (__ZN10emscripten8internal6TypeIDI8MadFrameE3getEv()|0); //@line 1196 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $856 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP8MadFrameEE8getCountEv($325)|0); //@line 1197 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $857 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP8MadFrameEE8getTypesEv($325)|0); //@line 1198 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $858 = $326; //@line 1199 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $322 = $858;
 $859 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $860 = $326; //@line 1200 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $861 = $324; //@line 1201 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_constructor(($855|0),($856|0),($857|0),($859|0),($860|0),($861|0)); //@line 1195 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$540>>2] = (399); //@line 190 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index395 = ((($540)) + 4|0); //@line 190 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index395>>2] = 0; //@line 190 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$541>>2] = (400); //@line 190 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index397 = ((($541)) + 4|0); //@line 190 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index397>>2] = 0; //@line 190 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$320>>0]=HEAP8[$541>>0]|0;HEAP8[$320+1>>0]=HEAP8[$541+1>>0]|0;HEAP8[$320+2>>0]=HEAP8[$541+2>>0]|0;HEAP8[$320+3>>0]=HEAP8[$541+3>>0]|0;HEAP8[$320+4>>0]=HEAP8[$541+4>>0]|0;HEAP8[$320+5>>0]=HEAP8[$541+5>>0]|0;HEAP8[$320+6>>0]=HEAP8[$541+6>>0]|0;HEAP8[$320+7>>0]=HEAP8[$541+7>>0]|0;
 ;HEAP8[$321>>0]=HEAP8[$540>>0]|0;HEAP8[$321+1>>0]=HEAP8[$540+1>>0]|0;HEAP8[$321+2>>0]=HEAP8[$540+2>>0]|0;HEAP8[$321+3>>0]=HEAP8[$540+3>>0]|0;HEAP8[$321+4>>0]=HEAP8[$540+4>>0]|0;HEAP8[$321+5>>0]=HEAP8[$540+5>>0]|0;HEAP8[$321+6>>0]=HEAP8[$540+6>>0]|0;HEAP8[$321+7>>0]=HEAP8[$540+7>>0]|0;
 $$field399 = HEAP32[$321>>2]|0;
 $$index401 = ((($321)) + 4|0);
 $$field402 = HEAP32[$$index401>>2]|0;
 $$field405 = HEAP32[$320>>2]|0;
 $$index407 = ((($320)) + 4|0);
 $$field408 = HEAP32[$$index407>>2]|0;
 $312 = $854;
 $313 = 59283;
 HEAP32[$314>>2] = $$field399;
 $$index411 = ((($314)) + 4|0);
 HEAP32[$$index411>>2] = $$field402;
 HEAP32[$315>>2] = $$field405;
 $$index413 = ((($315)) + 4|0);
 HEAP32[$$index413>>2] = $$field408;
 $862 = $312;
 $316 = 401; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $317 = 402; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $863 = (__ZN10emscripten8internal6TypeIDI8MadFrameE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $864 = $313; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $865 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $866 = $316; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $311 = $866;
 $867 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $868 = $316; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field415 = HEAP32[$314>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index417 = ((($314)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field418 = HEAP32[$$index417>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$318>>2] = $$field415; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index421 = ((($318)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index421>>2] = $$field418; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy906>>2]=HEAP32[$318>>2]|0;HEAP32[$$byval_copy906+4>>2]=HEAP32[$318+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $869 = (__ZN10emscripten8internal12GetterPolicyIM8MadFrameKFivEE10getContextES4_($$byval_copy906)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $870 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $871 = $317; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $310 = $871;
 $872 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $873 = $317; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field423 = HEAP32[$315>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index425 = ((($315)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field426 = HEAP32[$$index425>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$319>>2] = $$field423; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index429 = ((($319)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index429>>2] = $$field426; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy907>>2]=HEAP32[$319>>2]|0;HEAP32[$$byval_copy907+4>>2]=HEAP32[$319+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $874 = (__ZN10emscripten8internal12SetterPolicyIM8MadFrameFviEE10getContextES4_($$byval_copy907)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($863|0),($864|0),($865|0),($867|0),($868|0),($869|0),($870|0),($872|0),($873|0),($874|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$543>>2] = (403); //@line 191 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index431 = ((($543)) + 4|0); //@line 191 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index431>>2] = 0; //@line 191 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$308>>0]=HEAP8[$542>>0]|0;
 ;HEAP8[$309>>0]=HEAP8[$543>>0]|0;HEAP8[$309+1>>0]=HEAP8[$543+1>>0]|0;HEAP8[$309+2>>0]=HEAP8[$543+2>>0]|0;HEAP8[$309+3>>0]=HEAP8[$543+3>>0]|0;HEAP8[$309+4>>0]=HEAP8[$543+4>>0]|0;HEAP8[$309+5>>0]=HEAP8[$543+5>>0]|0;HEAP8[$309+6>>0]=HEAP8[$543+6>>0]|0;HEAP8[$309+7>>0]=HEAP8[$543+7>>0]|0;
 $$field433 = HEAP32[$309>>2]|0;
 $$index435 = ((($309)) + 4|0);
 $$field436 = HEAP32[$$index435>>2]|0;
 $303 = $862;
 $304 = 59291;
 HEAP32[$305>>2] = $$field433;
 $$index439 = ((($305)) + 4|0);
 HEAP32[$$index439>>2] = $$field436;
 $875 = $303;
 $306 = 404; //@line 1296 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $876 = (__ZN10emscripten8internal6TypeIDI8MadFrameE3getEv()|0); //@line 1300 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $877 = $304; //@line 1301 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $878 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPK9MadHeaderNS0_17AllowedRawPointerIK8MadFrameEEEE8getCountEv($307)|0); //@line 1302 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $879 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPK9MadHeaderNS0_17AllowedRawPointerIK8MadFrameEEEE8getTypesEv($307)|0); //@line 1303 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $880 = $306; //@line 1304 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $302 = $880;
 $881 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $882 = $306; //@line 1305 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $883 = (__ZN10emscripten8internal10getContextIM8MadFrameKFPK9MadHeadervEEEPT_RKS8_($305)|0); //@line 1306 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($876|0),($877|0),($878|0),($879|0),($881|0),($882|0),($883|0),0); //@line 1299 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$544>>2] = (405); //@line 192 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index441 = ((($544)) + 4|0); //@line 192 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index441>>2] = 0; //@line 192 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$301>>0]=HEAP8[$544>>0]|0;HEAP8[$301+1>>0]=HEAP8[$544+1>>0]|0;HEAP8[$301+2>>0]=HEAP8[$544+2>>0]|0;HEAP8[$301+3>>0]=HEAP8[$544+3>>0]|0;HEAP8[$301+4>>0]=HEAP8[$544+4>>0]|0;HEAP8[$301+5>>0]=HEAP8[$544+5>>0]|0;HEAP8[$301+6>>0]=HEAP8[$544+6>>0]|0;HEAP8[$301+7>>0]=HEAP8[$544+7>>0]|0;
 $$field443 = HEAP32[$301>>2]|0;
 $$index445 = ((($301)) + 4|0);
 $$field446 = HEAP32[$$index445>>2]|0;
 $296 = $875;
 $297 = 59298;
 HEAP32[$298>>2] = $$field443;
 $$index449 = ((($298)) + 4|0);
 HEAP32[$$index449>>2] = $$field446;
 $884 = $296;
 $299 = 406; //@line 1296 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $885 = (__ZN10emscripten8internal6TypeIDI8MadFrameE3getEv()|0); //@line 1300 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $886 = $297; //@line 1301 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $887 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerIK8MadFrameEEEE8getCountEv($300)|0); //@line 1302 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $888 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerIK8MadFrameEEEE8getTypesEv($300)|0); //@line 1303 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $889 = $299; //@line 1304 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $295 = $889;
 $890 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $891 = $299; //@line 1305 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $892 = (__ZN10emscripten8internal10getContextIM8MadFrameKFNS_3valEvEEEPT_RKS6_($298)|0); //@line 1306 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($885|0),($886|0),($887|0),($888|0),($890|0),($891|0),($892|0),0); //@line 1299 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$545>>2] = (407); //@line 193 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index451 = ((($545)) + 4|0); //@line 193 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index451>>2] = 0; //@line 193 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$294>>0]=HEAP8[$545>>0]|0;HEAP8[$294+1>>0]=HEAP8[$545+1>>0]|0;HEAP8[$294+2>>0]=HEAP8[$545+2>>0]|0;HEAP8[$294+3>>0]=HEAP8[$545+3>>0]|0;HEAP8[$294+4>>0]=HEAP8[$545+4>>0]|0;HEAP8[$294+5>>0]=HEAP8[$545+5>>0]|0;HEAP8[$294+6>>0]=HEAP8[$545+6>>0]|0;HEAP8[$294+7>>0]=HEAP8[$545+7>>0]|0;
 $$field453 = HEAP32[$294>>2]|0;
 $$index455 = ((($294)) + 4|0);
 $$field456 = HEAP32[$$index455>>2]|0;
 $289 = $884;
 $290 = 59307;
 HEAP32[$291>>2] = $$field453;
 $$index459 = ((($291)) + 4|0);
 HEAP32[$$index459>>2] = $$field456;
 $893 = $289;
 $292 = 406; //@line 1296 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $894 = (__ZN10emscripten8internal6TypeIDI8MadFrameE3getEv()|0); //@line 1300 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $895 = $290; //@line 1301 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $896 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerIK8MadFrameEEEE8getCountEv($293)|0); //@line 1302 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $897 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerIK8MadFrameEEEE8getTypesEv($293)|0); //@line 1303 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $898 = $292; //@line 1304 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $288 = $898;
 $899 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $900 = $292; //@line 1305 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $901 = (__ZN10emscripten8internal10getContextIM8MadFrameKFNS_3valEvEEEPT_RKS6_($291)|0); //@line 1306 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($894|0),($895|0),($896|0),($897|0),($899|0),($900|0),($901|0),0); //@line 1299 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$547>>2] = (408); //@line 194 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index461 = ((($547)) + 4|0); //@line 194 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index461>>2] = 0; //@line 194 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$286>>0]=HEAP8[$546>>0]|0;
 ;HEAP8[$287>>0]=HEAP8[$547>>0]|0;HEAP8[$287+1>>0]=HEAP8[$547+1>>0]|0;HEAP8[$287+2>>0]=HEAP8[$547+2>>0]|0;HEAP8[$287+3>>0]=HEAP8[$547+3>>0]|0;HEAP8[$287+4>>0]=HEAP8[$547+4>>0]|0;HEAP8[$287+5>>0]=HEAP8[$547+5>>0]|0;HEAP8[$287+6>>0]=HEAP8[$547+6>>0]|0;HEAP8[$287+7>>0]=HEAP8[$547+7>>0]|0;
 $$field463 = HEAP32[$287>>2]|0;
 $$index465 = ((($287)) + 4|0);
 $$field466 = HEAP32[$$index465>>2]|0;
 $281 = $893;
 $282 = 59315;
 HEAP32[$283>>2] = $$field463;
 $$index469 = ((($283)) + 4|0);
 HEAP32[$$index469>>2] = $$field466;
 $284 = 409; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $902 = (__ZN10emscripten8internal6TypeIDI8MadFrameE3getEv()|0); //@line 1281 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $903 = $282; //@line 1282 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $904 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJiNS0_17AllowedRawPointerI8MadFrameEEP10mad_streamEE8getCountEv($285)|0); //@line 1283 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $905 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJiNS0_17AllowedRawPointerI8MadFrameEEP10mad_streamEE8getTypesEv($285)|0); //@line 1284 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $906 = $284; //@line 1285 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $280 = $906;
 $907 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $908 = $284; //@line 1286 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $909 = (__ZN10emscripten8internal10getContextIM8MadFrameFiP10mad_streamEEEPT_RKS7_($283)|0); //@line 1287 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($902|0),($903|0),($904|0),($905|0),($907|0),($908|0),($909|0),0); //@line 1280 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __ZN10emscripten12value_objectI11mad_timer_tEC2EPKc($548,59322); //@line 196 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $910 = (__ZN10emscripten12value_objectI11mad_timer_tE5fieldIS1_lEERS2_PKcMT_T0_($548,59334,0)|0); //@line 197 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 (__ZN10emscripten12value_objectI11mad_timer_tE5fieldIS1_mEERS2_PKcMT_T0_($910,59342,4)|0); //@line 198 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 __ZN10emscripten12value_objectI11mad_timer_tED2Ev($548); //@line 196 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$$byval_copy908>>0]=HEAP8[$549>>0]|0; //@line 200 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 __ZN10emscripten8functionIvJP9mad_frameEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_(59351,410,$$byval_copy908); //@line 200 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$$byval_copy909>>0]=HEAP8[$550>>0]|0; //@line 201 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 __ZN10emscripten8functionIvJP9mad_frameEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_(59366,411,$$byval_copy909); //@line 201 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $274 = $551;
 $275 = 59383;
 __ZN10emscripten8internal11NoBaseClass6verifyI10mad_bitptrEEvv(); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $276 = 412; //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $911 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI10mad_bitptrEEPFvvEv()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $277 = $911; //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $912 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI10mad_bitptrEEPFvvEv()|0); //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $278 = $912; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $279 = 413; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $913 = (__ZN10emscripten8internal6TypeIDI10mad_bitptrE3getEv()|0); //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $914 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10mad_bitptrEEE3getEv()|0); //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $915 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10mad_bitptrEEE3getEv()|0); //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $916 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0); //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $917 = $276; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $273 = $917;
 $918 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $919 = $276; //@line 1141 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $920 = $277; //@line 1142 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $272 = $920;
 $921 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $922 = $277; //@line 1143 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $923 = $278; //@line 1144 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $271 = $923;
 $924 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $925 = $278; //@line 1145 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $926 = $275; //@line 1146 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $927 = $279; //@line 1147 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $270 = $927;
 $928 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $929 = $279; //@line 1148 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($913|0),($914|0),($915|0),($916|0),($918|0),($919|0),($921|0),($922|0),($924|0),($925|0),($926|0),($928|0),($929|0)); //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $264 = $552;
 $265 = 59394;
 __ZN10emscripten8internal11NoBaseClass6verifyI10mad_streamEEvv(); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $266 = 414; //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $930 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI10mad_streamEEPFvvEv()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $267 = $930; //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $931 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI10mad_streamEEPFvvEv()|0); //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $268 = $931; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $269 = 415; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $932 = (__ZN10emscripten8internal6TypeIDI10mad_streamE3getEv()|0); //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $933 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10mad_streamEEE3getEv()|0); //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $934 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10mad_streamEEE3getEv()|0); //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $935 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0); //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $936 = $266; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $263 = $936;
 $937 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $938 = $266; //@line 1141 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $939 = $267; //@line 1142 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $262 = $939;
 $940 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $941 = $267; //@line 1143 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $942 = $268; //@line 1144 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $261 = $942;
 $943 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $944 = $268; //@line 1145 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $945 = $265; //@line 1146 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $946 = $269; //@line 1147 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $260 = $946;
 $947 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $948 = $269; //@line 1148 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($932|0),($933|0),($934|0),($935|0),($937|0),($938|0),($940|0),($941|0),($943|0),($944|0),($945|0),($947|0),($948|0)); //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $254 = $553;
 $255 = 59405;
 __ZN10emscripten4baseI10mad_streamE6verifyI9MadStreamEEvv(); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $256 = 416; //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $949 = (__ZN10emscripten4baseI10mad_streamE11getUpcasterI9MadStreamEEPFPS1_PT_Ev()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $257 = $949; //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $950 = (__ZN10emscripten4baseI10mad_streamE13getDowncasterI9MadStreamEEPFPT_PS1_Ev()|0); //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $258 = $950; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $259 = 417; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $951 = (__ZN10emscripten8internal6TypeIDI9MadStreamE3getEv()|0); //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $952 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI9MadStreamEEE3getEv()|0); //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $953 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK9MadStreamEEE3getEv()|0); //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $954 = (__ZN10emscripten4baseI10mad_streamE3getEv()|0); //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $955 = $256; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $253 = $955;
 $956 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $957 = $256; //@line 1141 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $958 = $257; //@line 1142 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $252 = $958;
 $959 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $960 = $257; //@line 1143 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $961 = $258; //@line 1144 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $251 = $961;
 $962 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $963 = $258; //@line 1145 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $964 = $255; //@line 1146 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $965 = $259; //@line 1147 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $250 = $965;
 $966 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $967 = $259; //@line 1148 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($951|0),($952|0),($953|0),($954|0),($956|0),($957|0),($959|0),($960|0),($962|0),($963|0),($964|0),($966|0),($967|0)); //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$249>>0]=HEAP8[$554>>0]|0;
 $245 = $553;
 $246 = 418;
 $968 = $245;
 $248 = 419; //@line 1194 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $969 = (__ZN10emscripten8internal6TypeIDI9MadStreamE3getEv()|0); //@line 1196 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $970 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP9MadStreamEE8getCountEv($247)|0); //@line 1197 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $971 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP9MadStreamEE8getTypesEv($247)|0); //@line 1198 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $972 = $248; //@line 1199 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $244 = $972;
 $973 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $974 = $248; //@line 1200 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $975 = $246; //@line 1201 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_constructor(($969|0),($970|0),($971|0),($973|0),($974|0),($975|0)); //@line 1195 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$555>>2] = (420); //@line 208 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index471 = ((($555)) + 4|0); //@line 208 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index471>>2] = 0; //@line 208 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$556>>2] = (421); //@line 208 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index473 = ((($556)) + 4|0); //@line 208 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index473>>2] = 0; //@line 208 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$242>>0]=HEAP8[$556>>0]|0;HEAP8[$242+1>>0]=HEAP8[$556+1>>0]|0;HEAP8[$242+2>>0]=HEAP8[$556+2>>0]|0;HEAP8[$242+3>>0]=HEAP8[$556+3>>0]|0;HEAP8[$242+4>>0]=HEAP8[$556+4>>0]|0;HEAP8[$242+5>>0]=HEAP8[$556+5>>0]|0;HEAP8[$242+6>>0]=HEAP8[$556+6>>0]|0;HEAP8[$242+7>>0]=HEAP8[$556+7>>0]|0;
 ;HEAP8[$243>>0]=HEAP8[$555>>0]|0;HEAP8[$243+1>>0]=HEAP8[$555+1>>0]|0;HEAP8[$243+2>>0]=HEAP8[$555+2>>0]|0;HEAP8[$243+3>>0]=HEAP8[$555+3>>0]|0;HEAP8[$243+4>>0]=HEAP8[$555+4>>0]|0;HEAP8[$243+5>>0]=HEAP8[$555+5>>0]|0;HEAP8[$243+6>>0]=HEAP8[$555+6>>0]|0;HEAP8[$243+7>>0]=HEAP8[$555+7>>0]|0;
 $$field475 = HEAP32[$243>>2]|0;
 $$index477 = ((($243)) + 4|0);
 $$field478 = HEAP32[$$index477>>2]|0;
 $$field481 = HEAP32[$242>>2]|0;
 $$index483 = ((($242)) + 4|0);
 $$field484 = HEAP32[$$index483>>2]|0;
 $234 = $968;
 $235 = 59415;
 HEAP32[$236>>2] = $$field475;
 $$index487 = ((($236)) + 4|0);
 HEAP32[$$index487>>2] = $$field478;
 HEAP32[$237>>2] = $$field481;
 $$index489 = ((($237)) + 4|0);
 HEAP32[$$index489>>2] = $$field484;
 $976 = $234;
 $238 = 422; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $239 = 423; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $977 = (__ZN10emscripten8internal6TypeIDI9MadStreamE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $978 = $235; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $979 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $980 = $238; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $233 = $980;
 $981 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $982 = $238; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field491 = HEAP32[$236>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index493 = ((($236)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field494 = HEAP32[$$index493>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$240>>2] = $$field491; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index497 = ((($240)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index497>>2] = $$field494; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy910>>2]=HEAP32[$240>>2]|0;HEAP32[$$byval_copy910+4>>2]=HEAP32[$240+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $983 = (__ZN10emscripten8internal12GetterPolicyIM9MadStreamKFivEE10getContextES4_($$byval_copy910)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $984 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $985 = $239; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $232 = $985;
 $986 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $987 = $239; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field499 = HEAP32[$237>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index501 = ((($237)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field502 = HEAP32[$$index501>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$241>>2] = $$field499; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index505 = ((($241)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index505>>2] = $$field502; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy911>>2]=HEAP32[$241>>2]|0;HEAP32[$$byval_copy911+4>>2]=HEAP32[$241+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $988 = (__ZN10emscripten8internal12SetterPolicyIM9MadStreamFviEE10getContextES4_($$byval_copy911)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($977|0),($978|0),($979|0),($981|0),($982|0),($983|0),($984|0),($986|0),($987|0),($988|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$557>>2] = (424); //@line 209 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index507 = ((($557)) + 4|0); //@line 209 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index507>>2] = 0; //@line 209 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$558>>2] = (425); //@line 209 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index509 = ((($558)) + 4|0); //@line 209 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index509>>2] = 0; //@line 209 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$230>>0]=HEAP8[$558>>0]|0;HEAP8[$230+1>>0]=HEAP8[$558+1>>0]|0;HEAP8[$230+2>>0]=HEAP8[$558+2>>0]|0;HEAP8[$230+3>>0]=HEAP8[$558+3>>0]|0;HEAP8[$230+4>>0]=HEAP8[$558+4>>0]|0;HEAP8[$230+5>>0]=HEAP8[$558+5>>0]|0;HEAP8[$230+6>>0]=HEAP8[$558+6>>0]|0;HEAP8[$230+7>>0]=HEAP8[$558+7>>0]|0;
 ;HEAP8[$231>>0]=HEAP8[$557>>0]|0;HEAP8[$231+1>>0]=HEAP8[$557+1>>0]|0;HEAP8[$231+2>>0]=HEAP8[$557+2>>0]|0;HEAP8[$231+3>>0]=HEAP8[$557+3>>0]|0;HEAP8[$231+4>>0]=HEAP8[$557+4>>0]|0;HEAP8[$231+5>>0]=HEAP8[$557+5>>0]|0;HEAP8[$231+6>>0]=HEAP8[$557+6>>0]|0;HEAP8[$231+7>>0]=HEAP8[$557+7>>0]|0;
 $$field511 = HEAP32[$231>>2]|0;
 $$index513 = ((($231)) + 4|0);
 $$field514 = HEAP32[$$index513>>2]|0;
 $$field517 = HEAP32[$230>>2]|0;
 $$index519 = ((($230)) + 4|0);
 $$field520 = HEAP32[$$index519>>2]|0;
 $222 = $976;
 $223 = 59420;
 HEAP32[$224>>2] = $$field511;
 $$index523 = ((($224)) + 4|0);
 HEAP32[$$index523>>2] = $$field514;
 HEAP32[$225>>2] = $$field517;
 $$index525 = ((($225)) + 4|0);
 HEAP32[$$index525>>2] = $$field520;
 $989 = $222;
 $226 = 426; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $227 = 427; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $990 = (__ZN10emscripten8internal6TypeIDI9MadStreamE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $991 = $223; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $992 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $993 = $226; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $221 = $993;
 $994 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $995 = $226; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field527 = HEAP32[$224>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index529 = ((($224)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field530 = HEAP32[$$index529>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$228>>2] = $$field527; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index533 = ((($228)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index533>>2] = $$field530; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy912>>2]=HEAP32[$228>>2]|0;HEAP32[$$byval_copy912+4>>2]=HEAP32[$228+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $996 = (__ZN10emscripten8internal12GetterPolicyIM9MadStreamKFmvEE10getContextES4_($$byval_copy912)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $997 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $998 = $227; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $220 = $998;
 $999 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1000 = $227; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field535 = HEAP32[$225>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index537 = ((($225)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field538 = HEAP32[$$index537>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$229>>2] = $$field535; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index541 = ((($229)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index541>>2] = $$field538; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy913>>2]=HEAP32[$229>>2]|0;HEAP32[$$byval_copy913+4>>2]=HEAP32[$229+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1001 = (__ZN10emscripten8internal12SetterPolicyIM9MadStreamFvmEE10getContextES4_($$byval_copy913)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($990|0),($991|0),($992|0),($994|0),($995|0),($996|0),($997|0),($999|0),($1000|0),($1001|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$559>>2] = (428); //@line 210 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index543 = ((($559)) + 4|0); //@line 210 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index543>>2] = 0; //@line 210 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$560>>2] = (429); //@line 210 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index545 = ((($560)) + 4|0); //@line 210 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index545>>2] = 0; //@line 210 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$218>>0]=HEAP8[$560>>0]|0;HEAP8[$218+1>>0]=HEAP8[$560+1>>0]|0;HEAP8[$218+2>>0]=HEAP8[$560+2>>0]|0;HEAP8[$218+3>>0]=HEAP8[$560+3>>0]|0;HEAP8[$218+4>>0]=HEAP8[$560+4>>0]|0;HEAP8[$218+5>>0]=HEAP8[$560+5>>0]|0;HEAP8[$218+6>>0]=HEAP8[$560+6>>0]|0;HEAP8[$218+7>>0]=HEAP8[$560+7>>0]|0;
 ;HEAP8[$219>>0]=HEAP8[$559>>0]|0;HEAP8[$219+1>>0]=HEAP8[$559+1>>0]|0;HEAP8[$219+2>>0]=HEAP8[$559+2>>0]|0;HEAP8[$219+3>>0]=HEAP8[$559+3>>0]|0;HEAP8[$219+4>>0]=HEAP8[$559+4>>0]|0;HEAP8[$219+5>>0]=HEAP8[$559+5>>0]|0;HEAP8[$219+6>>0]=HEAP8[$559+6>>0]|0;HEAP8[$219+7>>0]=HEAP8[$559+7>>0]|0;
 $$field547 = HEAP32[$219>>2]|0;
 $$index549 = ((($219)) + 4|0);
 $$field550 = HEAP32[$$index549>>2]|0;
 $$field553 = HEAP32[$218>>2]|0;
 $$index555 = ((($218)) + 4|0);
 $$field556 = HEAP32[$$index555>>2]|0;
 $210 = $989;
 $211 = 59283;
 HEAP32[$212>>2] = $$field547;
 $$index559 = ((($212)) + 4|0);
 HEAP32[$$index559>>2] = $$field550;
 HEAP32[$213>>2] = $$field553;
 $$index561 = ((($213)) + 4|0);
 HEAP32[$$index561>>2] = $$field556;
 $1002 = $210;
 $214 = 422; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $215 = 423; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1003 = (__ZN10emscripten8internal6TypeIDI9MadStreamE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1004 = $211; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1005 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1006 = $214; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $209 = $1006;
 $1007 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1008 = $214; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field563 = HEAP32[$212>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index565 = ((($212)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field566 = HEAP32[$$index565>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$216>>2] = $$field563; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index569 = ((($216)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index569>>2] = $$field566; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy914>>2]=HEAP32[$216>>2]|0;HEAP32[$$byval_copy914+4>>2]=HEAP32[$216+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1009 = (__ZN10emscripten8internal12GetterPolicyIM9MadStreamKFivEE10getContextES4_($$byval_copy914)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1010 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1011 = $215; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $208 = $1011;
 $1012 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1013 = $215; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field571 = HEAP32[$213>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index573 = ((($213)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field574 = HEAP32[$$index573>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$217>>2] = $$field571; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index577 = ((($217)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index577>>2] = $$field574; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy915>>2]=HEAP32[$217>>2]|0;HEAP32[$$byval_copy915+4>>2]=HEAP32[$217+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1014 = (__ZN10emscripten8internal12SetterPolicyIM9MadStreamFviEE10getContextES4_($$byval_copy915)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($1003|0),($1004|0),($1005|0),($1007|0),($1008|0),($1009|0),($1010|0),($1012|0),($1013|0),($1014|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$561>>2] = (430); //@line 211 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index579 = ((($561)) + 4|0); //@line 211 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index579>>2] = 0; //@line 211 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$562>>2] = (431); //@line 211 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index581 = ((($562)) + 4|0); //@line 211 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index581>>2] = 0; //@line 211 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$206>>0]=HEAP8[$562>>0]|0;HEAP8[$206+1>>0]=HEAP8[$562+1>>0]|0;HEAP8[$206+2>>0]=HEAP8[$562+2>>0]|0;HEAP8[$206+3>>0]=HEAP8[$562+3>>0]|0;HEAP8[$206+4>>0]=HEAP8[$562+4>>0]|0;HEAP8[$206+5>>0]=HEAP8[$562+5>>0]|0;HEAP8[$206+6>>0]=HEAP8[$562+6>>0]|0;HEAP8[$206+7>>0]=HEAP8[$562+7>>0]|0;
 ;HEAP8[$207>>0]=HEAP8[$561>>0]|0;HEAP8[$207+1>>0]=HEAP8[$561+1>>0]|0;HEAP8[$207+2>>0]=HEAP8[$561+2>>0]|0;HEAP8[$207+3>>0]=HEAP8[$561+3>>0]|0;HEAP8[$207+4>>0]=HEAP8[$561+4>>0]|0;HEAP8[$207+5>>0]=HEAP8[$561+5>>0]|0;HEAP8[$207+6>>0]=HEAP8[$561+6>>0]|0;HEAP8[$207+7>>0]=HEAP8[$561+7>>0]|0;
 $$field583 = HEAP32[$207>>2]|0;
 $$index585 = ((($207)) + 4|0);
 $$field586 = HEAP32[$$index585>>2]|0;
 $$field589 = HEAP32[$206>>2]|0;
 $$index591 = ((($206)) + 4|0);
 $$field592 = HEAP32[$$index591>>2]|0;
 $198 = $1002;
 $199 = 59429;
 HEAP32[$200>>2] = $$field583;
 $$index595 = ((($200)) + 4|0);
 HEAP32[$$index595>>2] = $$field586;
 HEAP32[$201>>2] = $$field589;
 $$index597 = ((($201)) + 4|0);
 HEAP32[$$index597>>2] = $$field592;
 $1015 = $198;
 $202 = 432; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $203 = 433; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1016 = (__ZN10emscripten8internal6TypeIDI9MadStreamE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1017 = $199; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1018 = (__ZN10emscripten8internal6TypeIDI9mad_errorE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1019 = $202; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $197 = $1019;
 $1020 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1021 = $202; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field599 = HEAP32[$200>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index601 = ((($200)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field602 = HEAP32[$$index601>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$204>>2] = $$field599; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index605 = ((($204)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index605>>2] = $$field602; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy916>>2]=HEAP32[$204>>2]|0;HEAP32[$$byval_copy916+4>>2]=HEAP32[$204+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1022 = (__ZN10emscripten8internal12GetterPolicyIM9MadStreamKF9mad_errorvEE10getContextES5_($$byval_copy916)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1023 = (__ZN10emscripten8internal6TypeIDI9mad_errorE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1024 = $203; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $196 = $1024;
 $1025 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1026 = $203; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field607 = HEAP32[$201>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index609 = ((($201)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field610 = HEAP32[$$index609>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$205>>2] = $$field607; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index613 = ((($205)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index613>>2] = $$field610; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy917>>2]=HEAP32[$205>>2]|0;HEAP32[$$byval_copy917+4>>2]=HEAP32[$205+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1027 = (__ZN10emscripten8internal12SetterPolicyIM9MadStreamFv9mad_errorEE10getContextES5_($$byval_copy917)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($1016|0),($1017|0),($1018|0),($1020|0),($1021|0),($1022|0),($1023|0),($1025|0),($1026|0),($1027|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$563>>2] = (434); //@line 212 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index615 = ((($563)) + 4|0); //@line 212 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index615>>2] = 0; //@line 212 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$564>>2] = (435); //@line 212 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index617 = ((($564)) + 4|0); //@line 212 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index617>>2] = 0; //@line 212 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$194>>0]=HEAP8[$564>>0]|0;HEAP8[$194+1>>0]=HEAP8[$564+1>>0]|0;HEAP8[$194+2>>0]=HEAP8[$564+2>>0]|0;HEAP8[$194+3>>0]=HEAP8[$564+3>>0]|0;HEAP8[$194+4>>0]=HEAP8[$564+4>>0]|0;HEAP8[$194+5>>0]=HEAP8[$564+5>>0]|0;HEAP8[$194+6>>0]=HEAP8[$564+6>>0]|0;HEAP8[$194+7>>0]=HEAP8[$564+7>>0]|0;
 ;HEAP8[$195>>0]=HEAP8[$563>>0]|0;HEAP8[$195+1>>0]=HEAP8[$563+1>>0]|0;HEAP8[$195+2>>0]=HEAP8[$563+2>>0]|0;HEAP8[$195+3>>0]=HEAP8[$563+3>>0]|0;HEAP8[$195+4>>0]=HEAP8[$563+4>>0]|0;HEAP8[$195+5>>0]=HEAP8[$563+5>>0]|0;HEAP8[$195+6>>0]=HEAP8[$563+6>>0]|0;HEAP8[$195+7>>0]=HEAP8[$563+7>>0]|0;
 $$field619 = HEAP32[$195>>2]|0;
 $$index621 = ((($195)) + 4|0);
 $$field622 = HEAP32[$$index621>>2]|0;
 $$field625 = HEAP32[$194>>2]|0;
 $$index627 = ((($194)) + 4|0);
 $$field628 = HEAP32[$$index627>>2]|0;
 $186 = $1015;
 $187 = 59435;
 HEAP32[$188>>2] = $$field619;
 $$index631 = ((($188)) + 4|0);
 HEAP32[$$index631>>2] = $$field622;
 HEAP32[$189>>2] = $$field625;
 $$index633 = ((($189)) + 4|0);
 HEAP32[$$index633>>2] = $$field628;
 $1028 = $186;
 $190 = 436; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $191 = 437; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1029 = (__ZN10emscripten8internal6TypeIDI9MadStreamE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1030 = $187; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1031 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1032 = $190; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $185 = $1032;
 $1033 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1034 = $190; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field635 = HEAP32[$188>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index637 = ((($188)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field638 = HEAP32[$$index637>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$192>>2] = $$field635; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index641 = ((($192)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index641>>2] = $$field638; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy918>>2]=HEAP32[$192>>2]|0;HEAP32[$$byval_copy918+4>>2]=HEAP32[$192+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1035 = (__ZN10emscripten8internal12GetterPolicyIM9MadStreamKFjvEE10getContextES4_($$byval_copy918)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1036 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1037 = $191; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $184 = $1037;
 $1038 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1039 = $191; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field643 = HEAP32[$189>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index645 = ((($189)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field646 = HEAP32[$$index645>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$193>>2] = $$field643; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index649 = ((($193)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index649>>2] = $$field646; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy919>>2]=HEAP32[$193>>2]|0;HEAP32[$$byval_copy919+4>>2]=HEAP32[$193+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1040 = (__ZN10emscripten8internal12SetterPolicyIM9MadStreamFvjEE10getContextES4_($$byval_copy919)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($1029|0),($1030|0),($1031|0),($1033|0),($1034|0),($1035|0),($1036|0),($1038|0),($1039|0),($1040|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$565>>2] = (438); //@line 213 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index651 = ((($565)) + 4|0); //@line 213 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index651>>2] = 0; //@line 213 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$183>>0]=HEAP8[$565>>0]|0;HEAP8[$183+1>>0]=HEAP8[$565+1>>0]|0;HEAP8[$183+2>>0]=HEAP8[$565+2>>0]|0;HEAP8[$183+3>>0]=HEAP8[$565+3>>0]|0;HEAP8[$183+4>>0]=HEAP8[$565+4>>0]|0;HEAP8[$183+5>>0]=HEAP8[$565+5>>0]|0;HEAP8[$183+6>>0]=HEAP8[$565+6>>0]|0;HEAP8[$183+7>>0]=HEAP8[$565+7>>0]|0;
 $$field653 = HEAP32[$183>>2]|0;
 $$index655 = ((($183)) + 4|0);
 $$field656 = HEAP32[$$index655>>2]|0;
 $178 = $1028;
 $179 = 59441;
 HEAP32[$180>>2] = $$field653;
 $$index659 = ((($180)) + 4|0);
 HEAP32[$$index659>>2] = $$field656;
 $1041 = $178;
 $181 = 439; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1042 = (__ZN10emscripten8internal6TypeIDI9MadStreamE3getEv()|0); //@line 1281 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1043 = $179; //@line 1282 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1044 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI9MadStreamEEEE8getCountEv($182)|0); //@line 1283 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1045 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI9MadStreamEEEE8getTypesEv($182)|0); //@line 1284 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1046 = $181; //@line 1285 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $177 = $1046;
 $1047 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1048 = $181; //@line 1286 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1049 = (__ZN10emscripten8internal10getContextIM9MadStreamFNS_3valEvEEEPT_RKS6_($180)|0); //@line 1287 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($1042|0),($1043|0),($1044|0),($1045|0),($1047|0),($1048|0),($1049|0),0); //@line 1280 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$567>>2] = (440); //@line 214 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index661 = ((($567)) + 4|0); //@line 214 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index661>>2] = 0; //@line 214 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$175>>0]=HEAP8[$566>>0]|0;
 ;HEAP8[$176>>0]=HEAP8[$567>>0]|0;HEAP8[$176+1>>0]=HEAP8[$567+1>>0]|0;HEAP8[$176+2>>0]=HEAP8[$567+2>>0]|0;HEAP8[$176+3>>0]=HEAP8[$567+3>>0]|0;HEAP8[$176+4>>0]=HEAP8[$567+4>>0]|0;HEAP8[$176+5>>0]=HEAP8[$567+5>>0]|0;HEAP8[$176+6>>0]=HEAP8[$567+6>>0]|0;HEAP8[$176+7>>0]=HEAP8[$567+7>>0]|0;
 $$field663 = HEAP32[$176>>2]|0;
 $$index665 = ((($176)) + 4|0);
 $$field666 = HEAP32[$$index665>>2]|0;
 $170 = $1041;
 $171 = 59450;
 HEAP32[$172>>2] = $$field663;
 $$index669 = ((($172)) + 4|0);
 HEAP32[$$index669>>2] = $$field666;
 $173 = 441; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1050 = (__ZN10emscripten8internal6TypeIDI9MadStreamE3getEv()|0); //@line 1281 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1051 = $171; //@line 1282 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1052 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI9MadStreamEElmEE8getCountEv($174)|0); //@line 1283 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1053 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI9MadStreamEElmEE8getTypesEv($174)|0); //@line 1284 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1054 = $173; //@line 1285 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $169 = $1054;
 $1055 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1056 = $173; //@line 1286 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1057 = (__ZN10emscripten8internal10getContextIM9MadStreamFvlmEEEPT_RKS5_($172)|0); //@line 1287 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($1050|0),($1051|0),($1052|0),($1053|0),($1055|0),($1056|0),($1057|0),0); //@line 1280 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$$byval_copy920>>0]=HEAP8[$568>>0]|0; //@line 216 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 __ZN10emscripten8functionIvJP10mad_streamEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_(59460,442,$$byval_copy920); //@line 216 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$$byval_copy921>>0]=HEAP8[$569>>0]|0; //@line 217 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 __ZN10emscripten8functionIvJP10mad_streamEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_(59476,443,$$byval_copy921); //@line 217 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$$byval_copy922>>0]=HEAP8[$570>>0]|0; //@line 218 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 __ZN10emscripten8functionIvJP10mad_streamPKhmEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_(59494,444,$$byval_copy922); //@line 218 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$$byval_copy923>>0]=HEAP8[$571>>0]|0; //@line 219 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 __ZN10emscripten8functionIiJP10mad_streamEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_(59512,445,$$byval_copy923); //@line 219 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $163 = $572;
 $164 = 59528;
 __ZN10emscripten8internal11NoBaseClass6verifyI7mad_pcmEEvv(); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $165 = 446; //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1058 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7mad_pcmEEPFvvEv()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $166 = $1058; //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1059 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7mad_pcmEEPFvvEv()|0); //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $167 = $1059; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $168 = 447; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1060 = (__ZN10emscripten8internal6TypeIDI7mad_pcmE3getEv()|0); //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1061 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7mad_pcmEEE3getEv()|0); //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1062 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7mad_pcmEEE3getEv()|0); //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1063 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0); //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1064 = $165; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $162 = $1064;
 $1065 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1066 = $165; //@line 1141 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1067 = $166; //@line 1142 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $161 = $1067;
 $1068 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1069 = $166; //@line 1143 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1070 = $167; //@line 1144 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $160 = $1070;
 $1071 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1072 = $167; //@line 1145 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1073 = $164; //@line 1146 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1074 = $168; //@line 1147 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $159 = $1074;
 $1075 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1076 = $168; //@line 1148 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($1060|0),($1061|0),($1062|0),($1063|0),($1065|0),($1066|0),($1068|0),($1069|0),($1071|0),($1072|0),($1073|0),($1075|0),($1076|0)); //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $153 = $573;
 $154 = 59536;
 __ZN10emscripten4baseI7mad_pcmE6verifyI6MadPCMEEvv(); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $155 = 448; //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1077 = (__ZN10emscripten4baseI7mad_pcmE11getUpcasterI6MadPCMEEPFPS1_PT_Ev()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $156 = $1077; //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1078 = (__ZN10emscripten4baseI7mad_pcmE13getDowncasterI6MadPCMEEPFPT_PS1_Ev()|0); //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $157 = $1078; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $158 = 449; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1079 = (__ZN10emscripten8internal6TypeIDI6MadPCME3getEv()|0); //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1080 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI6MadPCMEEE3getEv()|0); //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1081 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK6MadPCMEEE3getEv()|0); //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1082 = (__ZN10emscripten4baseI7mad_pcmE3getEv()|0); //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1083 = $155; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $152 = $1083;
 $1084 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1085 = $155; //@line 1141 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1086 = $156; //@line 1142 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $151 = $1086;
 $1087 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1088 = $156; //@line 1143 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1089 = $157; //@line 1144 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $150 = $1089;
 $1090 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1091 = $157; //@line 1145 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1092 = $154; //@line 1146 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1093 = $158; //@line 1147 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $149 = $1093;
 $1094 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1095 = $158; //@line 1148 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($1079|0),($1080|0),($1081|0),($1082|0),($1084|0),($1085|0),($1087|0),($1088|0),($1090|0),($1091|0),($1092|0),($1094|0),($1095|0)); //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$148>>0]=HEAP8[$574>>0]|0;
 $144 = $573;
 $145 = 450;
 $1096 = $144;
 $147 = 451; //@line 1194 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1097 = (__ZN10emscripten8internal6TypeIDI6MadPCME3getEv()|0); //@line 1196 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1098 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP6MadPCMEE8getCountEv($146)|0); //@line 1197 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1099 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP6MadPCMEE8getTypesEv($146)|0); //@line 1198 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1100 = $147; //@line 1199 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $143 = $1100;
 $1101 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1102 = $147; //@line 1200 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1103 = $145; //@line 1201 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_constructor(($1097|0),($1098|0),($1099|0),($1101|0),($1102|0),($1103|0)); //@line 1195 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$575>>2] = (452); //@line 224 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index671 = ((($575)) + 4|0); //@line 224 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index671>>2] = 0; //@line 224 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$576>>2] = (453); //@line 224 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index673 = ((($576)) + 4|0); //@line 224 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index673>>2] = 0; //@line 224 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$141>>0]=HEAP8[$576>>0]|0;HEAP8[$141+1>>0]=HEAP8[$576+1>>0]|0;HEAP8[$141+2>>0]=HEAP8[$576+2>>0]|0;HEAP8[$141+3>>0]=HEAP8[$576+3>>0]|0;HEAP8[$141+4>>0]=HEAP8[$576+4>>0]|0;HEAP8[$141+5>>0]=HEAP8[$576+5>>0]|0;HEAP8[$141+6>>0]=HEAP8[$576+6>>0]|0;HEAP8[$141+7>>0]=HEAP8[$576+7>>0]|0;
 ;HEAP8[$142>>0]=HEAP8[$575>>0]|0;HEAP8[$142+1>>0]=HEAP8[$575+1>>0]|0;HEAP8[$142+2>>0]=HEAP8[$575+2>>0]|0;HEAP8[$142+3>>0]=HEAP8[$575+3>>0]|0;HEAP8[$142+4>>0]=HEAP8[$575+4>>0]|0;HEAP8[$142+5>>0]=HEAP8[$575+5>>0]|0;HEAP8[$142+6>>0]=HEAP8[$575+6>>0]|0;HEAP8[$142+7>>0]=HEAP8[$575+7>>0]|0;
 $$field675 = HEAP32[$142>>2]|0;
 $$index677 = ((($142)) + 4|0);
 $$field678 = HEAP32[$$index677>>2]|0;
 $$field681 = HEAP32[$141>>2]|0;
 $$index683 = ((($141)) + 4|0);
 $$field684 = HEAP32[$$index683>>2]|0;
 $133 = $1096;
 $134 = 59188;
 HEAP32[$135>>2] = $$field675;
 $$index687 = ((($135)) + 4|0);
 HEAP32[$$index687>>2] = $$field678;
 HEAP32[$136>>2] = $$field681;
 $$index689 = ((($136)) + 4|0);
 HEAP32[$$index689>>2] = $$field684;
 $1104 = $133;
 $137 = 454; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $138 = 455; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1105 = (__ZN10emscripten8internal6TypeIDI6MadPCME3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1106 = $134; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1107 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1108 = $137; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $132 = $1108;
 $1109 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1110 = $137; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field691 = HEAP32[$135>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index693 = ((($135)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field694 = HEAP32[$$index693>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$139>>2] = $$field691; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index697 = ((($139)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index697>>2] = $$field694; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy924>>2]=HEAP32[$139>>2]|0;HEAP32[$$byval_copy924+4>>2]=HEAP32[$139+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1111 = (__ZN10emscripten8internal12GetterPolicyIM6MadPCMKFjvEE10getContextES4_($$byval_copy924)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1112 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1113 = $138; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $131 = $1113;
 $1114 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1115 = $138; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field699 = HEAP32[$136>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index701 = ((($136)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field702 = HEAP32[$$index701>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$140>>2] = $$field699; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index705 = ((($140)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index705>>2] = $$field702; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy925>>2]=HEAP32[$140>>2]|0;HEAP32[$$byval_copy925+4>>2]=HEAP32[$140+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1116 = (__ZN10emscripten8internal12SetterPolicyIM6MadPCMFvjEE10getContextES4_($$byval_copy925)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($1105|0),($1106|0),($1107|0),($1109|0),($1110|0),($1111|0),($1112|0),($1114|0),($1115|0),($1116|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$577>>2] = (456); //@line 225 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index707 = ((($577)) + 4|0); //@line 225 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index707>>2] = 0; //@line 225 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$578>>2] = (457); //@line 225 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index709 = ((($578)) + 4|0); //@line 225 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index709>>2] = 0; //@line 225 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$129>>0]=HEAP8[$578>>0]|0;HEAP8[$129+1>>0]=HEAP8[$578+1>>0]|0;HEAP8[$129+2>>0]=HEAP8[$578+2>>0]|0;HEAP8[$129+3>>0]=HEAP8[$578+3>>0]|0;HEAP8[$129+4>>0]=HEAP8[$578+4>>0]|0;HEAP8[$129+5>>0]=HEAP8[$578+5>>0]|0;HEAP8[$129+6>>0]=HEAP8[$578+6>>0]|0;HEAP8[$129+7>>0]=HEAP8[$578+7>>0]|0;
 ;HEAP8[$130>>0]=HEAP8[$577>>0]|0;HEAP8[$130+1>>0]=HEAP8[$577+1>>0]|0;HEAP8[$130+2>>0]=HEAP8[$577+2>>0]|0;HEAP8[$130+3>>0]=HEAP8[$577+3>>0]|0;HEAP8[$130+4>>0]=HEAP8[$577+4>>0]|0;HEAP8[$130+5>>0]=HEAP8[$577+5>>0]|0;HEAP8[$130+6>>0]=HEAP8[$577+6>>0]|0;HEAP8[$130+7>>0]=HEAP8[$577+7>>0]|0;
 $$field711 = HEAP32[$130>>2]|0;
 $$index713 = ((($130)) + 4|0);
 $$field714 = HEAP32[$$index713>>2]|0;
 $$field717 = HEAP32[$129>>2]|0;
 $$index719 = ((($129)) + 4|0);
 $$field720 = HEAP32[$$index719>>2]|0;
 $121 = $1104;
 $122 = 59543;
 HEAP32[$123>>2] = $$field711;
 $$index723 = ((($123)) + 4|0);
 HEAP32[$$index723>>2] = $$field714;
 HEAP32[$124>>2] = $$field717;
 $$index725 = ((($124)) + 4|0);
 HEAP32[$$index725>>2] = $$field720;
 $1117 = $121;
 $125 = 458; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $126 = 459; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1118 = (__ZN10emscripten8internal6TypeIDI6MadPCME3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1119 = $122; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1120 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1121 = $125; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $120 = $1121;
 $1122 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1123 = $125; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field727 = HEAP32[$123>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index729 = ((($123)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field730 = HEAP32[$$index729>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$127>>2] = $$field727; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index733 = ((($127)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index733>>2] = $$field730; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy926>>2]=HEAP32[$127>>2]|0;HEAP32[$$byval_copy926+4>>2]=HEAP32[$127+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1124 = (__ZN10emscripten8internal12GetterPolicyIM6MadPCMKFtvEE10getContextES4_($$byval_copy926)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1125 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1126 = $126; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $119 = $1126;
 $1127 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1128 = $126; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field735 = HEAP32[$124>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index737 = ((($124)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field738 = HEAP32[$$index737>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$128>>2] = $$field735; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index741 = ((($128)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index741>>2] = $$field738; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy927>>2]=HEAP32[$128>>2]|0;HEAP32[$$byval_copy927+4>>2]=HEAP32[$128+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1129 = (__ZN10emscripten8internal12SetterPolicyIM6MadPCMFvtEE10getContextES4_($$byval_copy927)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($1118|0),($1119|0),($1120|0),($1122|0),($1123|0),($1124|0),($1125|0),($1127|0),($1128|0),($1129|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$579>>2] = (460); //@line 226 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index743 = ((($579)) + 4|0); //@line 226 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index743>>2] = 0; //@line 226 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$580>>2] = (461); //@line 226 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index745 = ((($580)) + 4|0); //@line 226 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index745>>2] = 0; //@line 226 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$117>>0]=HEAP8[$580>>0]|0;HEAP8[$117+1>>0]=HEAP8[$580+1>>0]|0;HEAP8[$117+2>>0]=HEAP8[$580+2>>0]|0;HEAP8[$117+3>>0]=HEAP8[$580+3>>0]|0;HEAP8[$117+4>>0]=HEAP8[$580+4>>0]|0;HEAP8[$117+5>>0]=HEAP8[$580+5>>0]|0;HEAP8[$117+6>>0]=HEAP8[$580+6>>0]|0;HEAP8[$117+7>>0]=HEAP8[$580+7>>0]|0;
 ;HEAP8[$118>>0]=HEAP8[$579>>0]|0;HEAP8[$118+1>>0]=HEAP8[$579+1>>0]|0;HEAP8[$118+2>>0]=HEAP8[$579+2>>0]|0;HEAP8[$118+3>>0]=HEAP8[$579+3>>0]|0;HEAP8[$118+4>>0]=HEAP8[$579+4>>0]|0;HEAP8[$118+5>>0]=HEAP8[$579+5>>0]|0;HEAP8[$118+6>>0]=HEAP8[$579+6>>0]|0;HEAP8[$118+7>>0]=HEAP8[$579+7>>0]|0;
 $$field747 = HEAP32[$118>>2]|0;
 $$index749 = ((($118)) + 4|0);
 $$field750 = HEAP32[$$index749>>2]|0;
 $$field753 = HEAP32[$117>>2]|0;
 $$index755 = ((($117)) + 4|0);
 $$field756 = HEAP32[$$index755>>2]|0;
 $109 = $1117;
 $110 = 59552;
 HEAP32[$111>>2] = $$field747;
 $$index759 = ((($111)) + 4|0);
 HEAP32[$$index759>>2] = $$field750;
 HEAP32[$112>>2] = $$field753;
 $$index761 = ((($112)) + 4|0);
 HEAP32[$$index761>>2] = $$field756;
 $1130 = $109;
 $113 = 458; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $114 = 459; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1131 = (__ZN10emscripten8internal6TypeIDI6MadPCME3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1132 = $110; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1133 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1134 = $113; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $108 = $1134;
 $1135 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1136 = $113; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field763 = HEAP32[$111>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index765 = ((($111)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field766 = HEAP32[$$index765>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$115>>2] = $$field763; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index769 = ((($115)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index769>>2] = $$field766; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy928>>2]=HEAP32[$115>>2]|0;HEAP32[$$byval_copy928+4>>2]=HEAP32[$115+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1137 = (__ZN10emscripten8internal12GetterPolicyIM6MadPCMKFtvEE10getContextES4_($$byval_copy928)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1138 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1139 = $114; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $107 = $1139;
 $1140 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1141 = $114; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field771 = HEAP32[$112>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index773 = ((($112)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field774 = HEAP32[$$index773>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$116>>2] = $$field771; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index777 = ((($116)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index777>>2] = $$field774; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy929>>2]=HEAP32[$116>>2]|0;HEAP32[$$byval_copy929+4>>2]=HEAP32[$116+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1142 = (__ZN10emscripten8internal12SetterPolicyIM6MadPCMFvtEE10getContextES4_($$byval_copy929)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($1131|0),($1132|0),($1133|0),($1135|0),($1136|0),($1137|0),($1138|0),($1140|0),($1141|0),($1142|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$582>>2] = (462); //@line 227 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index779 = ((($582)) + 4|0); //@line 227 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index779>>2] = 0; //@line 227 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$105>>0]=HEAP8[$581>>0]|0;
 ;HEAP8[$106>>0]=HEAP8[$582>>0]|0;HEAP8[$106+1>>0]=HEAP8[$582+1>>0]|0;HEAP8[$106+2>>0]=HEAP8[$582+2>>0]|0;HEAP8[$106+3>>0]=HEAP8[$582+3>>0]|0;HEAP8[$106+4>>0]=HEAP8[$582+4>>0]|0;HEAP8[$106+5>>0]=HEAP8[$582+5>>0]|0;HEAP8[$106+6>>0]=HEAP8[$582+6>>0]|0;HEAP8[$106+7>>0]=HEAP8[$582+7>>0]|0;
 $$field781 = HEAP32[$106>>2]|0;
 $$index783 = ((($106)) + 4|0);
 $$field784 = HEAP32[$$index783>>2]|0;
 $100 = $1130;
 $101 = 59559;
 HEAP32[$102>>2] = $$field781;
 $$index787 = ((($102)) + 4|0);
 HEAP32[$$index787>>2] = $$field784;
 $103 = 463; //@line 1296 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1143 = (__ZN10emscripten8internal6TypeIDI6MadPCME3getEv()|0); //@line 1300 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1144 = $101; //@line 1301 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1145 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerIK6MadPCMEEEE8getCountEv($104)|0); //@line 1302 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1146 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerIK6MadPCMEEEE8getTypesEv($104)|0); //@line 1303 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1147 = $103; //@line 1304 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $99 = $1147;
 $1148 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1149 = $103; //@line 1305 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1150 = (__ZN10emscripten8internal10getContextIM6MadPCMKFNS_3valEvEEEPT_RKS6_($102)|0); //@line 1306 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($1143|0),($1144|0),($1145|0),($1146|0),($1148|0),($1149|0),($1150|0),0); //@line 1299 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$$byval_copy930>>0]=HEAP8[$583>>0]|0; //@line 229 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 __ZN10emscripten8functionIvJP9mad_synthEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_(59567,464,$$byval_copy930); //@line 229 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$$byval_copy931>>0]=HEAP8[$584>>0]|0; //@line 230 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 __ZN10emscripten8functionIvJP9mad_synthPK9mad_frameEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_(59582,465,$$byval_copy931); //@line 230 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $93 = $585;
 $94 = 59598;
 __ZN10emscripten8internal11NoBaseClass6verifyI9mad_synthEEvv(); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $95 = 466; //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1151 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI9mad_synthEEPFvvEv()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $96 = $1151; //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1152 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI9mad_synthEEPFvvEv()|0); //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $97 = $1152; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $98 = 467; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1153 = (__ZN10emscripten8internal6TypeIDI9mad_synthE3getEv()|0); //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1154 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI9mad_synthEEE3getEv()|0); //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1155 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK9mad_synthEEE3getEv()|0); //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1156 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0); //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1157 = $95; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $92 = $1157;
 $1158 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1159 = $95; //@line 1141 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1160 = $96; //@line 1142 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $91 = $1160;
 $1161 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1162 = $96; //@line 1143 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1163 = $97; //@line 1144 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $90 = $1163;
 $1164 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1165 = $97; //@line 1145 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1166 = $94; //@line 1146 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1167 = $98; //@line 1147 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $89 = $1167;
 $1168 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1169 = $98; //@line 1148 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($1153|0),($1154|0),($1155|0),($1156|0),($1158|0),($1159|0),($1161|0),($1162|0),($1164|0),($1165|0),($1166|0),($1168|0),($1169|0)); //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $83 = $586;
 $84 = 59608;
 __ZN10emscripten4baseI9mad_synthE6verifyI8MadSynthEEvv(); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $85 = 468; //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1170 = (__ZN10emscripten4baseI9mad_synthE11getUpcasterI8MadSynthEEPFPS1_PT_Ev()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $86 = $1170; //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1171 = (__ZN10emscripten4baseI9mad_synthE13getDowncasterI8MadSynthEEPFPT_PS1_Ev()|0); //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $87 = $1171; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $88 = 469; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1172 = (__ZN10emscripten8internal6TypeIDI8MadSynthE3getEv()|0); //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1173 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI8MadSynthEEE3getEv()|0); //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1174 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK8MadSynthEEE3getEv()|0); //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1175 = (__ZN10emscripten4baseI9mad_synthE3getEv()|0); //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1176 = $85; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $82 = $1176;
 $1177 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1178 = $85; //@line 1141 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1179 = $86; //@line 1142 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $81 = $1179;
 $1180 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1181 = $86; //@line 1143 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1182 = $87; //@line 1144 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $80 = $1182;
 $1183 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1184 = $87; //@line 1145 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1185 = $84; //@line 1146 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1186 = $88; //@line 1147 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $79 = $1186;
 $1187 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1188 = $88; //@line 1148 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($1172|0),($1173|0),($1174|0),($1175|0),($1177|0),($1178|0),($1180|0),($1181|0),($1183|0),($1184|0),($1185|0),($1187|0),($1188|0)); //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP8[$78>>0]=HEAP8[$587>>0]|0;
 $74 = $586;
 $75 = 470;
 $1189 = $74;
 $77 = 471; //@line 1194 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1190 = (__ZN10emscripten8internal6TypeIDI8MadSynthE3getEv()|0); //@line 1196 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1191 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP8MadSynthEE8getCountEv($76)|0); //@line 1197 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1192 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP8MadSynthEE8getTypesEv($76)|0); //@line 1198 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1193 = $77; //@line 1199 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $73 = $1193;
 $1194 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1195 = $77; //@line 1200 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1196 = $75; //@line 1201 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_constructor(($1190|0),($1191|0),($1192|0),($1194|0),($1195|0),($1196|0)); //@line 1195 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$588>>2] = (472); //@line 235 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index789 = ((($588)) + 4|0); //@line 235 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index789>>2] = 0; //@line 235 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$589>>2] = (473); //@line 235 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index791 = ((($589)) + 4|0); //@line 235 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index791>>2] = 0; //@line 235 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$71>>0]=HEAP8[$589>>0]|0;HEAP8[$71+1>>0]=HEAP8[$589+1>>0]|0;HEAP8[$71+2>>0]=HEAP8[$589+2>>0]|0;HEAP8[$71+3>>0]=HEAP8[$589+3>>0]|0;HEAP8[$71+4>>0]=HEAP8[$589+4>>0]|0;HEAP8[$71+5>>0]=HEAP8[$589+5>>0]|0;HEAP8[$71+6>>0]=HEAP8[$589+6>>0]|0;HEAP8[$71+7>>0]=HEAP8[$589+7>>0]|0;
 ;HEAP8[$72>>0]=HEAP8[$588>>0]|0;HEAP8[$72+1>>0]=HEAP8[$588+1>>0]|0;HEAP8[$72+2>>0]=HEAP8[$588+2>>0]|0;HEAP8[$72+3>>0]=HEAP8[$588+3>>0]|0;HEAP8[$72+4>>0]=HEAP8[$588+4>>0]|0;HEAP8[$72+5>>0]=HEAP8[$588+5>>0]|0;HEAP8[$72+6>>0]=HEAP8[$588+6>>0]|0;HEAP8[$72+7>>0]=HEAP8[$588+7>>0]|0;
 $$field793 = HEAP32[$72>>2]|0;
 $$index795 = ((($72)) + 4|0);
 $$field796 = HEAP32[$$index795>>2]|0;
 $$field799 = HEAP32[$71>>2]|0;
 $$index801 = ((($71)) + 4|0);
 $$field802 = HEAP32[$$index801>>2]|0;
 $63 = $1189;
 $64 = 59617;
 HEAP32[$65>>2] = $$field793;
 $$index805 = ((($65)) + 4|0);
 HEAP32[$$index805>>2] = $$field796;
 HEAP32[$66>>2] = $$field799;
 $$index807 = ((($66)) + 4|0);
 HEAP32[$$index807>>2] = $$field802;
 $1197 = $63;
 $67 = 474; //@line 1393 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $68 = 475; //@line 1394 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1198 = (__ZN10emscripten8internal6TypeIDI8MadSynthE3getEv()|0); //@line 1397 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1199 = $64; //@line 1398 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1200 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0); //@line 1399 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1201 = $67; //@line 1400 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $62 = $1201;
 $1202 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1203 = $67; //@line 1401 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field809 = HEAP32[$65>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index811 = ((($65)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field812 = HEAP32[$$index811>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$69>>2] = $$field809; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index815 = ((($69)) + 4|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index815>>2] = $$field812; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy932>>2]=HEAP32[$69>>2]|0;HEAP32[$$byval_copy932+4>>2]=HEAP32[$69+4>>2]|0; //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1204 = (__ZN10emscripten8internal12GetterPolicyIM8MadSynthKFjvEE10getContextES4_($$byval_copy932)|0); //@line 1402 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1205 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0); //@line 1403 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1206 = $68; //@line 1404 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $61 = $1206;
 $1207 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1208 = $68; //@line 1405 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field817 = HEAP32[$66>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index819 = ((($66)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field820 = HEAP32[$$index819>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$70>>2] = $$field817; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index823 = ((($70)) + 4|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index823>>2] = $$field820; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy933>>2]=HEAP32[$70>>2]|0;HEAP32[$$byval_copy933+4>>2]=HEAP32[$70+4>>2]|0; //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1209 = (__ZN10emscripten8internal12SetterPolicyIM8MadSynthFvjEE10getContextES4_($$byval_copy933)|0); //@line 1406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_property(($1198|0),($1199|0),($1200|0),($1202|0),($1203|0),($1204|0),($1205|0),($1207|0),($1208|0),($1209|0)); //@line 1396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$591>>2] = (476); //@line 236 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index825 = ((($591)) + 4|0); //@line 236 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index825>>2] = 0; //@line 236 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$59>>0]=HEAP8[$590>>0]|0;
 ;HEAP8[$60>>0]=HEAP8[$591>>0]|0;HEAP8[$60+1>>0]=HEAP8[$591+1>>0]|0;HEAP8[$60+2>>0]=HEAP8[$591+2>>0]|0;HEAP8[$60+3>>0]=HEAP8[$591+3>>0]|0;HEAP8[$60+4>>0]=HEAP8[$591+4>>0]|0;HEAP8[$60+5>>0]=HEAP8[$591+5>>0]|0;HEAP8[$60+6>>0]=HEAP8[$591+6>>0]|0;HEAP8[$60+7>>0]=HEAP8[$591+7>>0]|0;
 $$field827 = HEAP32[$60>>2]|0;
 $$index829 = ((($60)) + 4|0);
 $$field830 = HEAP32[$$index829>>2]|0;
 $54 = $1197;
 $55 = 59623;
 HEAP32[$56>>2] = $$field827;
 $$index833 = ((($56)) + 4|0);
 HEAP32[$$index833>>2] = $$field830;
 $1210 = $54;
 $57 = 477; //@line 1296 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1211 = (__ZN10emscripten8internal6TypeIDI8MadSynthE3getEv()|0); //@line 1300 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1212 = $55; //@line 1301 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1213 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPK6MadPCMNS0_17AllowedRawPointerIK8MadSynthEEEE8getCountEv($58)|0); //@line 1302 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1214 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPK6MadPCMNS0_17AllowedRawPointerIK8MadSynthEEEE8getTypesEv($58)|0); //@line 1303 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1215 = $57; //@line 1304 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $53 = $1215;
 $1216 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1217 = $57; //@line 1305 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1218 = (__ZN10emscripten8internal10getContextIM8MadSynthKFPK6MadPCMvEEEPT_RKS8_($56)|0); //@line 1306 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($1211|0),($1212|0),($1213|0),($1214|0),($1216|0),($1217|0),($1218|0),0); //@line 1299 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$593>>2] = (478); //@line 237 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index835 = ((($593)) + 4|0); //@line 237 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index835>>2] = 0; //@line 237 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$51>>0]=HEAP8[$592>>0]|0;
 ;HEAP8[$52>>0]=HEAP8[$593>>0]|0;HEAP8[$52+1>>0]=HEAP8[$593+1>>0]|0;HEAP8[$52+2>>0]=HEAP8[$593+2>>0]|0;HEAP8[$52+3>>0]=HEAP8[$593+3>>0]|0;HEAP8[$52+4>>0]=HEAP8[$593+4>>0]|0;HEAP8[$52+5>>0]=HEAP8[$593+5>>0]|0;HEAP8[$52+6>>0]=HEAP8[$593+6>>0]|0;HEAP8[$52+7>>0]=HEAP8[$593+7>>0]|0;
 $$field837 = HEAP32[$52>>2]|0;
 $$index839 = ((($52)) + 4|0);
 $$field840 = HEAP32[$$index839>>2]|0;
 $46 = $1210;
 $47 = 59627;
 HEAP32[$48>>2] = $$field837;
 $$index843 = ((($48)) + 4|0);
 HEAP32[$$index843>>2] = $$field840;
 $49 = 479; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1219 = (__ZN10emscripten8internal6TypeIDI8MadSynthE3getEv()|0); //@line 1281 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1220 = $47; //@line 1282 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1221 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI8MadSynthEEPK9mad_frameEE8getCountEv($50)|0); //@line 1283 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1222 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI8MadSynthEEPK9mad_frameEE8getTypesEv($50)|0); //@line 1284 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1223 = $49; //@line 1285 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $45 = $1223;
 $1224 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1225 = $49; //@line 1286 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1226 = (__ZN10emscripten8internal10getContextIM8MadSynthFvPK9mad_frameEEEPT_RKS8_($48)|0); //@line 1287 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($1219|0),($1220|0),($1221|0),($1222|0),($1224|0),($1225|0),($1226|0),0); //@line 1280 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $39 = $594;
 $40 = 59633;
 __ZN10emscripten8internal11NoBaseClass6verifyI7DecoderEEvv(); //@line 1128 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $41 = 480; //@line 1130 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1227 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7DecoderEEPFvvEv()|0); //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $42 = $1227; //@line 1131 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1228 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7DecoderEEPFvvEv()|0); //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $43 = $1228; //@line 1132 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $44 = 481; //@line 1133 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1229 = (__ZN10emscripten8internal6TypeIDI7DecoderE3getEv()|0); //@line 1136 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1230 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7DecoderEEE3getEv()|0); //@line 1137 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1231 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7DecoderEEE3getEv()|0); //@line 1138 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1232 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0); //@line 1139 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1233 = $41; //@line 1140 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $38 = $1233;
 $1234 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1235 = $41; //@line 1141 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1236 = $42; //@line 1142 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $37 = $1236;
 $1237 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1238 = $42; //@line 1143 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1239 = $43; //@line 1144 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $36 = $1239;
 $1240 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1241 = $43; //@line 1145 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1242 = $40; //@line 1146 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1243 = $44; //@line 1147 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $35 = $1243;
 $1244 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1245 = $44; //@line 1148 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class(($1229|0),($1230|0),($1231|0),($1232|0),($1234|0),($1235|0),($1237|0),($1238|0),($1240|0),($1241|0),($1242|0),($1244|0),($1245|0)); //@line 1135 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $34 = $594;
 $1246 = $34;
 $30 = $1246;
 $31 = 482;
 $1247 = $30;
 $33 = 483; //@line 1194 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1248 = (__ZN10emscripten8internal6TypeIDI7DecoderE3getEv()|0); //@line 1196 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1249 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP7DecoderEE8getCountEv($32)|0); //@line 1197 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1250 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP7DecoderEE8getTypesEv($32)|0); //@line 1198 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1251 = $33; //@line 1199 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $29 = $1251;
 $1252 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1253 = $33; //@line 1200 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1254 = $31; //@line 1201 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_constructor(($1248|0),($1249|0),($1250|0),($1252|0),($1253|0),($1254|0)); //@line 1195 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$595>>2] = (484); //@line 241 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index845 = ((($595)) + 4|0); //@line 241 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index845>>2] = 0; //@line 241 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$28>>0]=HEAP8[$595>>0]|0;HEAP8[$28+1>>0]=HEAP8[$595+1>>0]|0;HEAP8[$28+2>>0]=HEAP8[$595+2>>0]|0;HEAP8[$28+3>>0]=HEAP8[$595+3>>0]|0;HEAP8[$28+4>>0]=HEAP8[$595+4>>0]|0;HEAP8[$28+5>>0]=HEAP8[$595+5>>0]|0;HEAP8[$28+6>>0]=HEAP8[$595+6>>0]|0;HEAP8[$28+7>>0]=HEAP8[$595+7>>0]|0;
 $$field847 = HEAP32[$28>>2]|0;
 $$index849 = ((($28)) + 4|0);
 $$field850 = HEAP32[$$index849>>2]|0;
 $23 = $1247;
 $24 = 59641;
 HEAP32[$25>>2] = $$field847;
 $$index853 = ((($25)) + 4|0);
 HEAP32[$$index853>>2] = $$field850;
 $1255 = $23;
 $26 = 485; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1256 = (__ZN10emscripten8internal6TypeIDI7DecoderE3getEv()|0); //@line 1281 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1257 = $24; //@line 1282 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1258 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7DecoderEEljEE8getCountEv($27)|0); //@line 1283 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1259 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7DecoderEEljEE8getTypesEv($27)|0); //@line 1284 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1260 = $26; //@line 1285 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $22 = $1260;
 $1261 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1262 = $26; //@line 1286 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1263 = (__ZN10emscripten8internal10getContextIM7DecoderFvljEEEPT_RKS5_($25)|0); //@line 1287 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($1256|0),($1257|0),($1258|0),($1259|0),($1261|0),($1262|0),($1263|0),0); //@line 1280 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$596>>2] = (486); //@line 242 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index855 = ((($596)) + 4|0); //@line 242 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index855>>2] = 0; //@line 242 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$21>>0]=HEAP8[$596>>0]|0;HEAP8[$21+1>>0]=HEAP8[$596+1>>0]|0;HEAP8[$21+2>>0]=HEAP8[$596+2>>0]|0;HEAP8[$21+3>>0]=HEAP8[$596+3>>0]|0;HEAP8[$21+4>>0]=HEAP8[$596+4>>0]|0;HEAP8[$21+5>>0]=HEAP8[$596+5>>0]|0;HEAP8[$21+6>>0]=HEAP8[$596+6>>0]|0;HEAP8[$21+7>>0]=HEAP8[$596+7>>0]|0;
 $$field857 = HEAP32[$21>>2]|0;
 $$index859 = ((($21)) + 4|0);
 $$field860 = HEAP32[$$index859>>2]|0;
 $16 = $1255;
 $17 = 59653;
 HEAP32[$18>>2] = $$field857;
 $$index863 = ((($18)) + 4|0);
 HEAP32[$$index863>>2] = $$field860;
 $1264 = $16;
 $19 = 487; //@line 1296 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1265 = (__ZN10emscripten8internal6TypeIDI7DecoderE3getEv()|0); //@line 1300 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1266 = $17; //@line 1301 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1267 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIK7DecoderEEEE8getCountEv($20)|0); //@line 1302 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1268 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIK7DecoderEEEE8getTypesEv($20)|0); //@line 1303 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1269 = $19; //@line 1304 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $15 = $1269;
 $1270 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1271 = $19; //@line 1305 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1272 = (__ZN10emscripten8internal10getContextIM7DecoderKFbvEEEPT_RKS5_($18)|0); //@line 1306 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($1265|0),($1266|0),($1267|0),($1268|0),($1270|0),($1271|0),($1272|0),0); //@line 1299 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$597>>2] = (488); //@line 243 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index865 = ((($597)) + 4|0); //@line 243 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index865>>2] = 0; //@line 243 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$14>>0]=HEAP8[$597>>0]|0;HEAP8[$14+1>>0]=HEAP8[$597+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$597+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$597+3>>0]|0;HEAP8[$14+4>>0]=HEAP8[$597+4>>0]|0;HEAP8[$14+5>>0]=HEAP8[$597+5>>0]|0;HEAP8[$14+6>>0]=HEAP8[$597+6>>0]|0;HEAP8[$14+7>>0]=HEAP8[$597+7>>0]|0;
 $$field867 = HEAP32[$14>>2]|0;
 $$index869 = ((($14)) + 4|0);
 $$field870 = HEAP32[$$index869>>2]|0;
 $9 = $1264;
 $10 = 59661;
 HEAP32[$11>>2] = $$field867;
 $$index873 = ((($11)) + 4|0);
 HEAP32[$$index873>>2] = $$field870;
 $1273 = $9;
 $12 = 489; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1274 = (__ZN10emscripten8internal6TypeIDI7DecoderE3getEv()|0); //@line 1281 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1275 = $10; //@line 1282 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1276 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerI7DecoderEEjEE8getCountEv($13)|0); //@line 1283 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1277 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerI7DecoderEEjEE8getTypesEv($13)|0); //@line 1284 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1278 = $12; //@line 1285 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $1278;
 $1279 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1280 = $12; //@line 1286 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1281 = (__ZN10emscripten8internal10getContextIM7DecoderFjjEEEPT_RKS5_($11)|0); //@line 1287 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($1274|0),($1275|0),($1276|0),($1277|0),($1279|0),($1280|0),($1281|0),0); //@line 1280 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$598>>2] = (490); //@line 244 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $$index875 = ((($598)) + 4|0); //@line 244 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$$index875>>2] = 0; //@line 244 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP8[$7>>0]=HEAP8[$598>>0]|0;HEAP8[$7+1>>0]=HEAP8[$598+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[$598+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[$598+3>>0]|0;HEAP8[$7+4>>0]=HEAP8[$598+4>>0]|0;HEAP8[$7+5>>0]=HEAP8[$598+5>>0]|0;HEAP8[$7+6>>0]=HEAP8[$598+6>>0]|0;HEAP8[$7+7>>0]=HEAP8[$598+7>>0]|0;
 $$field877 = HEAP32[$7>>2]|0;
 $$index879 = ((($7)) + 4|0);
 $$field880 = HEAP32[$$index879>>2]|0;
 $2 = $1273;
 $3 = 59315;
 HEAP32[$4>>2] = $$field877;
 $$index883 = ((($4)) + 4|0);
 HEAP32[$$index883>>2] = $$field880;
 $5 = 491; //@line 1277 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1282 = (__ZN10emscripten8internal6TypeIDI7DecoderE3getEv()|0); //@line 1281 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1283 = $3; //@line 1282 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1284 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI7DecoderEEjEE8getCountEv($6)|0); //@line 1283 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1285 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI7DecoderEEjEE8getTypesEv($6)|0); //@line 1284 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1286 = $5; //@line 1285 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1 = $1286;
 $1287 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1288 = $5; //@line 1286 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $1289 = (__ZN10emscripten8internal10getContextIM7DecoderFNS_3valEjEEEPT_RKS6_($4)|0); //@line 1287 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_class_function(($1282|0),($1283|0),($1284|0),($1285|0),($1287|0),($1288|0),($1289|0),0); //@line 1280 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 245 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten5enum_I9mad_layerEC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = (__ZN10emscripten8internal6TypeIDI9mad_layerE3getEv()|0); //@line 1574 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $3; //@line 1575 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_enum(($4|0),($5|0),4,0); //@line 1573 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 1578 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten5enum_I9mad_layerE5valueEPKcS1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (__ZN10emscripten8internal6TypeIDI9mad_layerE3getEv()|0); //@line 1587 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 1588 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $5; //@line 1589 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_enum_value(($7|0),($8|0),($9|0)); //@line 1586 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($6|0); //@line 1590 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten5enum_I8mad_modeEC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = (__ZN10emscripten8internal6TypeIDI8mad_modeE3getEv()|0); //@line 1574 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $3; //@line 1575 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_enum(($4|0),($5|0),4,0); //@line 1573 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 1578 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten5enum_I8mad_modeE5valueEPKcS1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (__ZN10emscripten8internal6TypeIDI8mad_modeE3getEv()|0); //@line 1587 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 1588 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $5; //@line 1589 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_enum_value(($7|0),($8|0),($9|0)); //@line 1586 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($6|0); //@line 1590 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten5enum_I12mad_emphasisEC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = (__ZN10emscripten8internal6TypeIDI12mad_emphasisE3getEv()|0); //@line 1574 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $3; //@line 1575 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_enum(($4|0),($5|0),4,0); //@line 1573 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 1578 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten5enum_I12mad_emphasisE5valueEPKcS1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (__ZN10emscripten8internal6TypeIDI12mad_emphasisE3getEv()|0); //@line 1587 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 1588 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $5; //@line 1589 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_enum_value(($7|0),($8|0),($9|0)); //@line 1586 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($6|0); //@line 1590 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten5enum_I9mad_errorEC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = (__ZN10emscripten8internal6TypeIDI9mad_errorE3getEv()|0); //@line 1574 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $3; //@line 1575 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_enum(($4|0),($5|0),4,0); //@line 1573 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 1578 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten5enum_I9mad_errorE5valueEPKcS1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (__ZN10emscripten8internal6TypeIDI9mad_errorE3getEv()|0); //@line 1587 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 1588 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $5; //@line 1589 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_enum_value(($7|0),($8|0),($9|0)); //@line 1586 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($6|0); //@line 1590 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass6verifyI10mad_headerEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1016 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeI10mad_headerEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDI10mad_headerEEPKvRKT_($2)|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI10mad_headerEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1024 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI10mad_headerEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1029 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorI10mad_headerEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if (!($3)) {
  __ZdlPv($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI10mad_headerE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI10mad_headerE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10mad_headerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP10mad_headerE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10mad_headerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK10mad_headerE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11NoBaseClass3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1019 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (60234|0); //@line 396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (60232|0); //@line 396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (60229|0); //@line 396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI10mad_headerE6verifyI9MadHeaderEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1048 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeI9MadHeaderEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDI9MadHeaderEEPKvRKT_($2)|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI10mad_headerE11getUpcasterI9MadHeaderEEPFPS1_PT_Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (492|0); //@line 1062 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI10mad_headerE13getDowncasterI9MadHeaderEEPFPT_PS1_Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (493|0); //@line 1067 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorI9MadHeaderEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if (!($3)) {
  __ZdlPv($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI9MadHeaderE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI9MadHeaderE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI9MadHeaderEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP9MadHeaderE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK9MadHeaderEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK9MadHeaderE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI10mad_headerE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDI10mad_headerE3getEv()|0); //@line 1051 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 return ($0|0); //@line 1051 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __Z17mad_header_createv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (__Znwm(44)|0); //@line 7 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $0 = $1; //@line 7 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $2 = $0; //@line 8 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 _mad_header_init($2); //@line 8 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $3 = $0; //@line 9 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 STACKTOP = sp;return ($3|0); //@line 9 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
}
function __ZN10emscripten8internal7InvokerIP9MadHeaderJEE6invokeEPFS3_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (FUNCTION_TABLE_i[$2 & 511]()|0); //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = (__ZN10emscripten8internal11BindingTypeIP9MadHeaderE10toWireTypeES3_($3)|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($4|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP9MadHeaderEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP9MadHeaderEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI9MadHeaderEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK9MadHeader8getLayerEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0; //@line 14 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($3|0); //@line 14 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadHeader8setLayerE9mad_layer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 15 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$4>>2] = $5; //@line 15 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 15 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF9mad_layervEE3getIS2_EES3_RKS5_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$5>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($5)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = (($4) + ($6)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = ($8|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($9) {
  $10 = HEAP32[$7>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $11 = (($10) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = HEAP32[$11>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = $12;
 } else {
  $13 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = $13;
 }
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $16 = (__ZN10emscripten8internal15EnumBindingTypeI9mad_layerE10toWireTypeES2_($15)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($16|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv9mad_layerEE3setIS2_EEvRKS5_RT_S3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal15EnumBindingTypeI9mad_layerE12fromWireTypeES2_($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI9mad_layerE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI9mad_layerE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (60202|0); //@line 396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF9mad_layervEE10getContextES5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderKF9mad_layervEEEPT_RKS6_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (60197|0); //@line 396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv9mad_layerEE10getContextES5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderFv9mad_layerEEEPT_RKS6_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK9MadHeader17getMode_extensionEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0); //@line 17 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 17 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 17 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadHeader17setMode_extensionEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 18 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 8|0); //@line 18 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 18 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 18 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFivEE3getIS2_EEiRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$4>>2] = $16; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($4)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFviEE3setIS2_EEvRKS4_RT_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFivEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderKFivEEEPT_RKS5_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFviEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderFviEEEPT_RKS5_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK9MadHeader7getModeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0); //@line 20 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 20 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 20 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadHeader7setModeE8mad_mode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 21 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 4|0); //@line 21 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 21 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 21 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF8mad_modevEE3getIS2_EES3_RKS5_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$5>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($5)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = (($4) + ($6)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = ($8|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($9) {
  $10 = HEAP32[$7>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $11 = (($10) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = HEAP32[$11>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = $12;
 } else {
  $13 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = $13;
 }
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $16 = (__ZN10emscripten8internal15EnumBindingTypeI8mad_modeE10toWireTypeES2_($15)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($16|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv8mad_modeEE3setIS2_EEvRKS5_RT_S3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal15EnumBindingTypeI8mad_modeE12fromWireTypeES2_($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI8mad_modeE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI8mad_modeE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF8mad_modevEE10getContextES5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderKF8mad_modevEEEPT_RKS6_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv8mad_modeEE10getContextES5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderFv8mad_modeEEEPT_RKS6_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK9MadHeader11getEmphasisEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0); //@line 23 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 23 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 23 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadHeader11setEmphasisE12mad_emphasis($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 24 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 12|0); //@line 24 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 24 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 24 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF12mad_emphasisvEE3getIS2_EES3_RKS5_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$5>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($5)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = (($4) + ($6)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = ($8|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($9) {
  $10 = HEAP32[$7>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $11 = (($10) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = HEAP32[$11>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = $12;
 } else {
  $13 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = $13;
 }
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $16 = (__ZN10emscripten8internal15EnumBindingTypeI12mad_emphasisE10toWireTypeES2_($15)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($16|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv12mad_emphasisEE3setIS2_EEvRKS5_RT_S3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal15EnumBindingTypeI12mad_emphasisE12fromWireTypeES2_($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI12mad_emphasisE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI12mad_emphasisE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF12mad_emphasisvEE10getContextES5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderKF12mad_emphasisvEEEPT_RKS6_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv12mad_emphasisEE10getContextES5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderFv12mad_emphasisEEEPT_RKS6_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK9MadHeader10getBitrateEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0); //@line 26 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 26 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 26 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadHeader10setBitrateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 27 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 16|0); //@line 27 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 27 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 27 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFmvEE3getIS2_EEmRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$4>>2] = $16; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($4)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFvmEE3setIS2_EEvRKS4_RT_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFmvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderKFmvEEEPT_RKS5_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFvmEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderFvmEEEPT_RKS5_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK9MadHeader13getSamplerateEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0); //@line 29 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 29 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 29 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadHeader13setSamplerateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 30 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 20|0); //@line 30 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 30 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 30 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFjvEE3getIS2_EEjRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$4>>2] = $16; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($4)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFvjEE3setIS2_EEvRKS4_RT_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFjvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderKFjvEEEPT_RKS5_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFvjEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderFvjEEEPT_RKS5_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK9MadHeader12getCrc_checkEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0); //@line 32 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP16[$3>>1]|0; //@line 32 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 32 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadHeader12setCrc_checkEt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 33 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 24|0); //@line 33 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP16[$6>>1] = $5; //@line 33 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 33 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFtvEE3getIS2_EEtRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP16[$4>>1] = $16; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeItE10toWireTypeERKt($4)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFvtEE3setIS2_EEvRKS4_RT_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeItE12fromWireTypeEt($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFtvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderKFtvEEEPT_RKS5_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFvtEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderFvtEEEPT_RKS5_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK9MadHeader13getCrc_targetEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 26|0); //@line 35 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP16[$3>>1]|0; //@line 35 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 35 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadHeader13setCrc_targetEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 36 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = $5&65535; //@line 36 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $7 = ((($4)) + 26|0); //@line 36 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP16[$7>>1] = $6; //@line 36 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 36 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZNK9MadHeader8getFlagsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 28|0); //@line 38 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 38 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 38 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadHeader8setFlagsEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 39 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 28|0); //@line 39 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 39 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 39 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZNK9MadHeader15getPrivate_bitsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 32|0); //@line 41 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 41 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 41 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadHeader15setPrivate_bitsEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 42 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 32|0); //@line 42 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 42 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 42 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZNK9MadHeader11getDurationEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 $4 = ((($3)) + 36|0); //@line 44 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0; //@line 44 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 44 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadHeader11setDurationE11mad_timer_t($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 36|0); //@line 45 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 ;HEAP32[$4>>2]=HEAP32[$1>>2]|0;HEAP32[$4+4>>2]=HEAP32[$1+4>>2]|0; //@line 45 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 45 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF11mad_timer_tvEE3getIS2_EEPS3_RKS5_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 FUNCTION_TABLE_vii[$15 & 511]($4,$8); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $16 = (__ZN10emscripten8internal18GenericBindingTypeI11mad_timer_tE10toWireTypeEOS2_($4)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($16|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv11mad_timer_tEE3setIS2_EEvRKS5_RT_PS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 24|0;
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$8>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($8)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = (($7) + ($9)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = ($11|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($12) {
  $13 = HEAP32[$10>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = (($13) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = HEAP32[$14>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $19 = $15;
 } else {
  $16 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $19 = $16;
 }
 $17 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $18 = (__ZN10emscripten8internal18GenericBindingTypeI11mad_timer_tE12fromWireTypeEPS2_($17)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$6>>2]=HEAP32[$18>>2]|0;HEAP32[$6+4>>2]=HEAP32[$18+4>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$6+4>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$19 & 511]($10,$$byval_copy); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI11mad_timer_tE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI11mad_timer_tE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF11mad_timer_tvEE10getContextES5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderKF11mad_timer_tvEEEPT_RKS6_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv11mad_timer_tEE10getContextES5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadHeaderFv11mad_timer_tEEEPT_RKS6_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8functionIvJP10mad_headerEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $7 = 494; //@line 427 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 429 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP10mad_headerEE8getCountEv($6)|0); //@line 430 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP10mad_headerEE8getTypesEv($6)|0); //@line 431 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $7; //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $11;
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $7; //@line 433 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $5; //@line 434 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_function(($8|0),($9|0),($10|0),($12|0),($13|0),($14|0)); //@line 428 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 435 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass6verifyI9mad_frameEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1016 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeI9mad_frameEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDI9mad_frameEEPKvRKT_($2)|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI9mad_frameEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1024 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI9mad_frameEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1029 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorI9mad_frameEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if (!($3)) {
  __ZdlPv($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI9mad_frameE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI9mad_frameE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI9mad_frameEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP9mad_frameE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK9mad_frameEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK9mad_frameE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI9mad_frameE6verifyI8MadFrameEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1048 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeI8MadFrameEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDI8MadFrameEEPKvRKT_($2)|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI9mad_frameE11getUpcasterI8MadFrameEEPFPS1_PT_Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (495|0); //@line 1062 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI9mad_frameE13getDowncasterI8MadFrameEEPFPT_PS1_Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (496|0); //@line 1067 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorI8MadFrameEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if (!($3)) {
  __ZdlPv($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI8MadFrameE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI8MadFrameE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI8MadFrameEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP8MadFrameE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK8MadFrameEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK8MadFrameE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI9mad_frameE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDI9mad_frameE3getEv()|0); //@line 1051 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 return ($0|0); //@line 1051 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __Z16mad_frame_createv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (__Znwm(9268)|0); //@line 14 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $0 = $1; //@line 14 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $2 = $0; //@line 15 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 _mad_frame_init($2); //@line 15 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $3 = $0; //@line 16 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 STACKTOP = sp;return ($3|0); //@line 16 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
}
function __ZN10emscripten8internal7InvokerIP8MadFrameJEE6invokeEPFS3_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (FUNCTION_TABLE_i[$2 & 511]()|0); //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = (__ZN10emscripten8internal11BindingTypeIP8MadFrameE10toWireTypeES3_($3)|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($4|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP8MadFrameEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP8MadFrameEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI8MadFrameEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK8MadFrame10getOptionsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0); //@line 51 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 51 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 51 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN8MadFrame10setOptionsEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 52 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 44|0); //@line 52 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 52 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 52 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM8MadFrameKFivEE3getIS2_EEiRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$4>>2] = $16; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($4)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM8MadFrameFviEE3setIS2_EEvRKS4_RT_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12GetterPolicyIM8MadFrameKFivEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM8MadFrameKFivEEEPT_RKS5_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM8MadFrameFviEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM8MadFrameFviEEEPT_RKS5_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK8MadFrame6headerEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0); //@line 58 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal13MethodInvokerIM8MadFrameKFPK9MadHeadervES5_PKS2_JEE6invokeERKS7_S9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = (__ZN10emscripten8internal11BindingTypeIPK8MadFrameE12fromWireTypeES4_($4)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIPK9MadHeaderE10toWireTypeES4_($16)|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPK9MadHeaderNS0_17AllowedRawPointerIK8MadFrameEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPK9MadHeaderNS0_17AllowedRawPointerIK8MadFrameEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIK9MadHeaderEENS3_IK8MadFrameEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM8MadFrameKFPK9MadHeadervEEEPT_RKS8_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK8MadFrame11getSbsampleEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $1;
 $5 = $2;
 $6 = ((($5)) + 48|0); //@line 27 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $3 = $6; //@line 27 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $7 = $3; //@line 28 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 __ZN10emscripten17typed_memory_viewIhEENS_11memory_viewIT_EEmPKS2_($4,9216,$7); //@line 28 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 __ZN10emscripten3valC2INS_11memory_viewIhEEEEOT_($0,$4); //@line 28 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 STACKTOP = sp;return; //@line 28 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
}
function __ZN10emscripten8internal13MethodInvokerIM8MadFrameKFNS_3valEvES3_PKS2_JEE6invokeERKS5_S7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = (__ZN10emscripten8internal11BindingTypeIPK8MadFrameE12fromWireTypeES4_($5)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $2; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = $14;
 } else {
  $15 = $$field; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = $15;
 }
 FUNCTION_TABLE_vii[$16 & 511]($4,$9); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($4)|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __ZN10emscripten3valD2Ev($4); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerIK8MadFrameEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerIK8MadFrameEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valENS0_17AllowedRawPointerIK8MadFrameEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM8MadFrameKFNS_3valEvEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK8MadFrame10getOverlapEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $1;
 $5 = $2;
 $6 = ((($5)) + 9264|0); //@line 21 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $7 = HEAP32[$6>>2]|0; //@line 21 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $3 = $7; //@line 21 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $8 = $3; //@line 22 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 __ZN10emscripten17typed_memory_viewIhEENS_11memory_viewIT_EEmPKS2_($4,4608,$8); //@line 22 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 __ZN10emscripten3valC2INS_11memory_viewIhEEEEOT_($0,$4); //@line 22 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 STACKTOP = sp;return; //@line 22 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
}
function __ZN8MadFrame6decodeEP10mad_stream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 49 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $6 = (_mad_frame_decode($4,$5)|0); //@line 49 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 STACKTOP = sp;return ($6|0); //@line 49 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
}
function __ZN10emscripten8internal13MethodInvokerIM8MadFrameFiP10mad_streamEiPS2_JS4_EE6invokeERKS6_S7_S4_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZN10emscripten8internal11BindingTypeIP8MadFrameE12fromWireTypeES3_($7)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $3; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$9>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($9)) + 4|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 >> 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (($8) + ($10)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $$field2 & 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = ($12|0)!=(0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($13) {
  $14 = HEAP32[$11>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = (($14) + ($$field)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = HEAP32[$15>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $20 = $16;
 } else {
  $17 = $$field; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $20 = $17;
 }
 $18 = $5; //@line 502 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $19 = (__ZN10emscripten8internal11BindingTypeIP10mad_streamE12fromWireTypeES3_($18)|0); //@line 502 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $21 = (FUNCTION_TABLE_iii[$20 & 511]($11,$19)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$6>>2] = $21; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $22 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($6)|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($22|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJiNS0_17AllowedRawPointerI8MadFrameEEP10mad_streamEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJiNS0_17AllowedRawPointerI8MadFrameEEP10mad_streamEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerI8MadFrameEENS3_I10mad_streamEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (60069|0); //@line 396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM8MadFrameFiP10mad_streamEEEPT_RKS7_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten12value_objectI11mad_timer_tEC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $8 = $4;
 __ZN10emscripten8internal11noncopyableC2Ev($8); //@line 773 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = 497; //@line 776 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = 498; //@line 777 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZN10emscripten8internal6TypeIDI11mad_timer_tE3getEv()|0); //@line 780 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $5; //@line 781 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $6; //@line 782 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $11;
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $6; //@line 783 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $7; //@line 784 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $2 = $14;
 $15 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $16 = $7; //@line 785 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_value_object(($9|0),($10|0),($12|0),($13|0),($15|0),($16|0)); //@line 779 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 786 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten12value_objectI11mad_timer_tE5fieldIS1_lEERS2_PKcMT_T0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 HEAP32[$7>>2] = $2;
 $10 = $5;
 $8 = 499; //@line 797 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = 500; //@line 799 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (__ZN10emscripten8internal6TypeIDI11mad_timer_tE3getEv()|0); //@line 803 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $6; //@line 804 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0); //@line 805 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $8; //@line 806 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = $14;
 $15 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $16 = $8; //@line 807 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal10getContextIM11mad_timer_tlEEPT_RKS4_($7)|0); //@line 808 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $18 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0); //@line 809 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $19 = $9; //@line 810 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $19;
 $20 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $21 = $9; //@line 811 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $22 = (__ZN10emscripten8internal10getContextIM11mad_timer_tlEEPT_RKS4_($7)|0); //@line 812 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_value_object_field(($11|0),($12|0),($13|0),($15|0),($16|0),($17|0),($18|0),($20|0),($21|0),($22|0)); //@line 802 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($10|0); //@line 813 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten12value_objectI11mad_timer_tE5fieldIS1_mEERS2_PKcMT_T0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 HEAP32[$7>>2] = $2;
 $10 = $5;
 $8 = 501; //@line 797 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = 502; //@line 799 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (__ZN10emscripten8internal6TypeIDI11mad_timer_tE3getEv()|0); //@line 803 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $6; //@line 804 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0); //@line 805 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $8; //@line 806 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = $14;
 $15 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $16 = $8; //@line 807 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal10getContextIM11mad_timer_tmEEPT_RKS4_($7)|0); //@line 808 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $18 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0); //@line 809 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $19 = $9; //@line 810 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $19;
 $20 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $21 = $9; //@line 811 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $22 = (__ZN10emscripten8internal10getContextIM11mad_timer_tmEEPT_RKS4_($7)|0); //@line 812 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_value_object_field(($11|0),($12|0),($13|0),($15|0),($16|0),($17|0),($18|0),($20|0),($21|0),($22|0)); //@line 802 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($10|0); //@line 813 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten12value_objectI11mad_timer_tED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (__ZN10emscripten8internal6TypeIDI11mad_timer_tE3getEv()|0); //@line 790 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_finalize_value_object(($3|0)); //@line 790 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __ZN10emscripten8internal11noncopyableD2Ev($2); //@line 791 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 791 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8functionIvJP9mad_frameEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $7 = 503; //@line 427 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 429 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP9mad_frameEE8getCountEv($6)|0); //@line 430 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP9mad_frameEE8getTypesEv($6)|0); //@line 431 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $7; //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $11;
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $7; //@line 433 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $5; //@line 434 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_function(($8|0),($9|0),($10|0),($12|0),($13|0),($14|0)); //@line 428 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 435 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass6verifyI10mad_bitptrEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1016 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeI10mad_bitptrEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDI10mad_bitptrEEPKvRKT_($2)|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI10mad_bitptrEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1024 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI10mad_bitptrEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1029 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorI10mad_bitptrEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if (!($3)) {
  __ZdlPv($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI10mad_bitptrE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI10mad_bitptrE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10mad_bitptrEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP10mad_bitptrE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10mad_bitptrEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK10mad_bitptrE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11NoBaseClass6verifyI10mad_streamEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1016 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeI10mad_streamEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDI10mad_streamEEPKvRKT_($2)|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI10mad_streamEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1024 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI10mad_streamEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1029 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorI10mad_streamEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if (!($3)) {
  __ZdlPv($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI10mad_streamE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI10mad_streamE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10mad_streamEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP10mad_streamE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10mad_streamEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK10mad_streamE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI10mad_streamE6verifyI9MadStreamEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1048 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeI9MadStreamEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDI9MadStreamEEPKvRKT_($2)|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI10mad_streamE11getUpcasterI9MadStreamEEPFPS1_PT_Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (504|0); //@line 1062 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI10mad_streamE13getDowncasterI9MadStreamEEPFPT_PS1_Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (505|0); //@line 1067 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorI9MadStreamEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if (!($3)) {
  __ZdlPv($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI9MadStreamE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI9MadStreamE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI9MadStreamEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP9MadStreamE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK9MadStreamEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK9MadStreamE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI10mad_streamE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDI10mad_streamE3getEv()|0); //@line 1051 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 return ($0|0); //@line 1051 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __Z17mad_stream_createv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (__Znwm(64)|0); //@line 32 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $0 = $1; //@line 32 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $2 = $0; //@line 33 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 _mad_stream_init($2); //@line 33 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $3 = $0; //@line 34 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 STACKTOP = sp;return ($3|0); //@line 34 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
}
function __ZN10emscripten8internal7InvokerIP9MadStreamJEE6invokeEPFS3_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (FUNCTION_TABLE_i[$2 & 511]()|0); //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = (__ZN10emscripten8internal11BindingTypeIP9MadStreamE10toWireTypeES3_($3)|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($4|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP9MadStreamEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP9MadStreamEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI9MadStreamEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK9MadStream7getSyncEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0); //@line 75 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 75 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 75 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadStream7setSyncEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 76 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 12|0); //@line 76 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 76 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 76 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadStreamKFivEE3getIS2_EEiRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$4>>2] = $16; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($4)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadStreamFviEE3setIS2_EEvRKS4_RT_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadStreamKFivEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadStreamKFivEEEPT_RKS5_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadStreamFviEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadStreamFviEEEPT_RKS5_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK9MadStream11getFreeRateEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0); //@line 78 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 78 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 78 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadStream11setFreeRateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 79 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 16|0); //@line 79 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 79 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 79 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadStreamKFmvEE3getIS2_EEmRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$4>>2] = $16; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($4)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadStreamFvmEE3setIS2_EEvRKS4_RT_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadStreamKFmvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadStreamKFmvEEEPT_RKS5_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadStreamFvmEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadStreamFvmEEEPT_RKS5_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK9MadStream10getOptionsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 56|0); //@line 81 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 81 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 81 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadStream10setOptionsEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 82 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 56|0); //@line 82 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 82 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 82 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZNK9MadStream8getErrorEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 60|0); //@line 84 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 84 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 84 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadStream8setErrorE9mad_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 85 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 60|0); //@line 85 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 85 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 85 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadStreamKF9mad_errorvEE3getIS2_EES3_RKS5_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$5>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($5)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = (($4) + ($6)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = ($8|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($9) {
  $10 = HEAP32[$7>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $11 = (($10) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = HEAP32[$11>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = $12;
 } else {
  $13 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = $13;
 }
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $16 = (__ZN10emscripten8internal15EnumBindingTypeI9mad_errorE10toWireTypeES2_($15)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($16|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadStreamFv9mad_errorEE3setIS2_EEvRKS5_RT_S3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal15EnumBindingTypeI9mad_errorE12fromWireTypeES2_($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI9mad_errorE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI9mad_errorE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadStreamKF9mad_errorvEE10getContextES5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadStreamKF9mad_errorvEEEPT_RKS6_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadStreamFv9mad_errorEE10getContextES5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadStreamFv9mad_errorEEEPT_RKS6_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK9MadStream8getMdLenEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 52|0); //@line 88 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 88 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 88 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN9MadStream8setMdLenEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 89 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 52|0); //@line 89 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 89 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 89 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadStreamKFjvEE3getIS2_EEjRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$4>>2] = $16; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($4)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadStreamFvjEE3setIS2_EEvRKS4_RT_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12GetterPolicyIM9MadStreamKFjvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadStreamKFjvEEEPT_RKS5_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM9MadStreamFvjEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9MadStreamFvjEEEPT_RKS5_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN9MadStream8mainDataEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $2 = $1;
 $4 = $2;
 $5 = ((($4)) + 48|0); //@line 39 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 39 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 __ZN10emscripten17typed_memory_viewIhEENS_11memory_viewIT_EEmPKS2_($3,2567,$6); //@line 39 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 __ZN10emscripten3valC2INS_11memory_viewIhEEEEOT_($0,$3); //@line 39 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 STACKTOP = sp;return; //@line 39 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
}
function __ZN10emscripten8internal13MethodInvokerIM9MadStreamFNS_3valEvES3_PS2_JEE6invokeERKS5_S6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = (__ZN10emscripten8internal11BindingTypeIP9MadStreamE12fromWireTypeES3_($5)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $2; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = $14;
 } else {
  $15 = $$field; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = $15;
 }
 FUNCTION_TABLE_vii[$16 & 511]($4,$9); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($4)|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __ZN10emscripten3valD2Ev($4); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI9MadStreamEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI9MadStreamEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valENS0_17AllowedRawPointerI9MadStreamEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM9MadStreamFNS_3valEvEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN9MadStream9setBufferElm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4; //@line 44 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $8 = $7; //@line 44 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $9 = $5; //@line 44 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 _mad_stream_buffer($6,$8,$9); //@line 44 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 STACKTOP = sp;return; //@line 45 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
}
function __ZN10emscripten8internal13MethodInvokerIM9MadStreamFvlmEvPS2_JlmEE6invokeERKS4_S5_lm($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZN10emscripten8internal11BindingTypeIP9MadStreamE12fromWireTypeES3_($8)|0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $4; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$10>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($10)) + 4|0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $$field2 >> 1; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = (($9) + ($11)|0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $$field2 & 1; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = ($13|0)!=(0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($14) {
  $15 = HEAP32[$12>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = (($15) + ($$field)|0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $17 = HEAP32[$16>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $23 = $17;
 } else {
  $18 = $$field; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $23 = $18;
 }
 $19 = $6; //@line 518 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $20 = (__ZN10emscripten8internal11BindingTypeIlE12fromWireTypeEl($19)|0); //@line 518 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $21 = $7; //@line 518 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $22 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($21)|0); //@line 518 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_viii[$23 & 1023]($12,$20,$22); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI9MadStreamEElmEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI9MadStreamEElmEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9MadStreamEElmEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (59914|0); //@line 396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadStreamFvlmEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8functionIvJP10mad_streamEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $7 = 506; //@line 427 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 429 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP10mad_streamEE8getCountEv($6)|0); //@line 430 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP10mad_streamEE8getTypesEv($6)|0); //@line 431 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $7; //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $11;
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $7; //@line 433 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $5; //@line 434 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_function(($8|0),($9|0),($10|0),($12|0),($13|0),($14|0)); //@line 428 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 435 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8functionIvJP10mad_streamPKhmEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $7 = 507; //@line 427 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 429 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP10mad_streamPKhmEE8getCountEv($6)|0); //@line 430 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP10mad_streamPKhmEE8getTypesEv($6)|0); //@line 431 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $7; //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $11;
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $7; //@line 433 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $5; //@line 434 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_function(($8|0),($9|0),($10|0),($12|0),($13|0),($14|0)); //@line 428 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 435 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8functionIiJP10mad_streamEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $7 = 508; //@line 427 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 429 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJiP10mad_streamEE8getCountEv($6)|0); //@line 430 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJiP10mad_streamEE8getTypesEv($6)|0); //@line 431 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $7; //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $11;
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $7; //@line 433 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $5; //@line 434 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_function(($8|0),($9|0),($10|0),($12|0),($13|0),($14|0)); //@line 428 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 435 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7mad_pcmEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1016 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeI7mad_pcmEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDI7mad_pcmEEPKvRKT_($2)|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7mad_pcmEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1024 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7mad_pcmEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1029 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorI7mad_pcmEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if (!($3)) {
  __ZdlPv($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI7mad_pcmE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7mad_pcmE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7mad_pcmEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7mad_pcmE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7mad_pcmEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7mad_pcmE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI7mad_pcmE6verifyI6MadPCMEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1048 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeI6MadPCMEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDI6MadPCMEEPKvRKT_($2)|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI7mad_pcmE11getUpcasterI6MadPCMEEPFPS1_PT_Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (509|0); //@line 1062 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI7mad_pcmE13getDowncasterI6MadPCMEEPFPT_PS1_Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (510|0); //@line 1067 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorI6MadPCMEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if (!($3)) {
  __ZdlPv($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI6MadPCME3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI6MadPCME3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI6MadPCMEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP6MadPCME3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK6MadPCMEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK6MadPCME3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI7mad_pcmE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDI7mad_pcmE3getEv()|0); //@line 1051 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 return ($0|0); //@line 1051 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __Z14mad_pcm_createv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (__Znwm(9224)|0); //@line 59 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 _memset(($1|0),0,9224)|0; //@line 59 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $0 = $1; //@line 59 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $2 = $0; //@line 60 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 STACKTOP = sp;return ($2|0); //@line 60 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
}
function __ZN10emscripten8internal7InvokerIP6MadPCMJEE6invokeEPFS3_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (FUNCTION_TABLE_i[$2 & 511]()|0); //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = (__ZN10emscripten8internal11BindingTypeIP6MadPCME10toWireTypeES3_($3)|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($4|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP6MadPCMEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP6MadPCMEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI6MadPCMEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK6MadPCM13getSamplerateEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0; //@line 97 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($3|0); //@line 97 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN6MadPCM13setSamplerateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 98 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$4>>2] = $5; //@line 98 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 98 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM6MadPCMKFjvEE3getIS2_EEjRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$4>>2] = $16; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($4)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM6MadPCMFvjEE3setIS2_EEvRKS4_RT_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12GetterPolicyIM6MadPCMKFjvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM6MadPCMKFjvEEEPT_RKS5_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM6MadPCMFvjEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM6MadPCMFvjEEEPT_RKS5_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK6MadPCM11getChannelsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0); //@line 100 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP16[$3>>1]|0; //@line 100 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 100 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN6MadPCM11setChannelsEt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 101 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 4|0); //@line 101 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP16[$6>>1] = $5; //@line 101 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 101 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM6MadPCMKFtvEE3getIS2_EEtRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP16[$4>>1] = $16; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeItE10toWireTypeERKt($4)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM6MadPCMFvtEE3setIS2_EEvRKS4_RT_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeItE12fromWireTypeEt($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12GetterPolicyIM6MadPCMKFtvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM6MadPCMKFtvEEEPT_RKS5_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM6MadPCMFvtEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM6MadPCMFvtEEEPT_RKS5_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK6MadPCM9getLengthEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 6|0); //@line 103 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP16[$3>>1]|0; //@line 103 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 103 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN6MadPCM9setLengthEt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 104 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 6|0); //@line 104 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP16[$6>>1] = $5; //@line 104 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 104 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZNK6MadPCM7samplesEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $1;
 $5 = $2;
 $6 = ((($5)) + 8|0); //@line 54 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $3 = $6; //@line 54 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $7 = $3; //@line 55 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 __ZN10emscripten17typed_memory_viewIiEENS_11memory_viewIT_EEmPKS2_($4,9216,$7); //@line 55 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 __ZN10emscripten3valC2INS_11memory_viewIiEEEEOT_($0,$4); //@line 55 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 STACKTOP = sp;return; //@line 55 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
}
function __ZN10emscripten8internal13MethodInvokerIM6MadPCMKFNS_3valEvES3_PKS2_JEE6invokeERKS5_S7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = (__ZN10emscripten8internal11BindingTypeIPK6MadPCME12fromWireTypeES4_($5)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $2; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = $14;
 } else {
  $15 = $$field; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = $15;
 }
 FUNCTION_TABLE_vii[$16 & 511]($4,$9); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($4)|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __ZN10emscripten3valD2Ev($4); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerIK6MadPCMEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerIK6MadPCMEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valENS0_17AllowedRawPointerIK6MadPCMEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM6MadPCMKFNS_3valEvEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8functionIvJP9mad_synthEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $7 = 511; //@line 427 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 429 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP9mad_synthEE8getCountEv($6)|0); //@line 430 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP9mad_synthEE8getTypesEv($6)|0); //@line 431 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $7; //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $11;
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $7; //@line 433 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $5; //@line 434 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_function(($8|0),($9|0),($10|0),($12|0),($13|0),($14|0)); //@line 428 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 435 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8functionIvJP9mad_synthPK9mad_frameEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $7 = 512; //@line 427 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 429 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP9mad_synthPK9mad_frameEE8getCountEv($6)|0); //@line 430 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP9mad_synthPK9mad_frameEE8getTypesEv($6)|0); //@line 431 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $7; //@line 432 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $11;
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0); //@line 406 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $7; //@line 433 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = $5; //@line 434 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __embind_register_function(($8|0),($9|0),($10|0),($12|0),($13|0),($14|0)); //@line 428 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 435 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass6verifyI9mad_synthEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1016 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeI9mad_synthEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDI9mad_synthEEPKvRKT_($2)|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI9mad_synthEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1024 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI9mad_synthEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1029 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorI9mad_synthEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if (!($3)) {
  __ZdlPv($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI9mad_synthE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI9mad_synthE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI9mad_synthEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP9mad_synthE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK9mad_synthEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK9mad_synthE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI9mad_synthE6verifyI8MadSynthEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1048 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeI8MadSynthEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDI8MadSynthEEPKvRKT_($2)|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI9mad_synthE11getUpcasterI8MadSynthEEPFPS1_PT_Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (513|0); //@line 1062 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI9mad_synthE13getDowncasterI8MadSynthEEPFPT_PS1_Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (514|0); //@line 1067 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorI8MadSynthEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if (!($3)) {
  __ZdlPv($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI8MadSynthE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI8MadSynthE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI8MadSynthEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP8MadSynthE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK8MadSynthEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK8MadSynthE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI9mad_synthE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDI9mad_synthE3getEv()|0); //@line 1051 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 return ($0|0); //@line 1051 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __Z16mad_synth_createv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (__Znwm(13324)|0); //@line 64 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 _memset(($1|0),0,13324)|0; //@line 64 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $0 = $1; //@line 64 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $2 = $0; //@line 65 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 _mad_synth_init($2); //@line 65 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 $3 = $0; //@line 66 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 STACKTOP = sp;return ($3|0); //@line 66 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
}
function __ZN10emscripten8internal7InvokerIP8MadSynthJEE6invokeEPFS3_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (FUNCTION_TABLE_i[$2 & 511]()|0); //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = (__ZN10emscripten8internal11BindingTypeIP8MadSynthE10toWireTypeES3_($3)|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($4|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP8MadSynthEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP8MadSynthEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI8MadSynthEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK8MadSynth8getPhaseEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4096|0); //@line 113 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $4 = HEAP32[$3>>2]|0; //@line 113 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($4|0); //@line 113 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN8MadSynth8setPhaseEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 114 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 $6 = ((($4)) + 4096|0); //@line 114 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 HEAP32[$6>>2] = $5; //@line 114 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return; //@line 114 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal12GetterPolicyIM8MadSynthKFjvEE3getIS2_EEjRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$4>>2] = $16; //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($4)|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 581 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM8MadSynthFvjEE3setIS2_EEvRKS4_RT_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $3; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$7>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($7)) + 4|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $$field2 >> 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (($6) + ($8)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 & 1; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = ($10|0)!=(0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($11) {
  $12 = HEAP32[$9>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = (($12) + ($$field)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = HEAP32[$13>>2]|0; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $14;
 } else {
  $15 = $$field; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $18 = $15;
 }
 $16 = $5; //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($16)|0); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$18 & 511]($9,$17); //@line 620 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 621 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12GetterPolicyIM8MadSynthKFjvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM8MadSynthKFjvEEEPT_RKS5_($1)|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 585 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12SetterPolicyIM8MadSynthFvjEE10getContextES4_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 $2 = (__ZN10emscripten8internal10getContextIM8MadSynthFvjEEEPT_RKS5_($1)|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 624 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK8MadSynth3pcmEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4100|0); //@line 116 "/home/betrayer/development/macaw/jsmad/wrapper.h"
 STACKTOP = sp;return ($3|0); //@line 116 "/home/betrayer/development/macaw/jsmad/wrapper.h"
}
function __ZN10emscripten8internal13MethodInvokerIM8MadSynthKFPK6MadPCMvES5_PKS2_JEE6invokeERKS7_S9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = (__ZN10emscripten8internal11BindingTypeIPK8MadSynthE12fromWireTypeES4_($4)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIPK6MadPCME10toWireTypeES4_($16)|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPK6MadPCMNS0_17AllowedRawPointerIK8MadSynthEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPK6MadPCMNS0_17AllowedRawPointerIK8MadSynthEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIK6MadPCMEENS3_IK8MadSynthEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM8MadSynthKFPK6MadPCMvEEEPT_RKS8_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN8MadSynth5frameEPK9mad_frame($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 71 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 _mad_synth_frame($4,$5); //@line 71 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
 STACKTOP = sp;return; //@line 72 "/home/betrayer/development/macaw/jsmad/wrapper.cpp"
}
function __ZN10emscripten8internal13MethodInvokerIM8MadSynthFvPK9mad_frameEvPS2_JS5_EE6invokeERKS7_S8_S5_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = (__ZN10emscripten8internal11BindingTypeIP8MadSynthE12fromWireTypeES3_($6)|0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $3; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$8>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($8)) + 4|0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 >> 1; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = (($7) + ($9)|0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $$field2 & 1; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = ($11|0)!=(0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($12) {
  $13 = HEAP32[$10>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $14 = (($13) + ($$field)|0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = HEAP32[$14>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $19 = $15;
 } else {
  $16 = $$field; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $19 = $16;
 }
 $17 = $5; //@line 518 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $18 = (__ZN10emscripten8internal11BindingTypeIPK9mad_frameE12fromWireTypeES4_($17)|0); //@line 518 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$19 & 511]($10,$18); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI8MadSynthEEPK9mad_frameEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI8MadSynthEEPK9mad_frameEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI8MadSynthEENS3_IK9mad_frameEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM8MadSynthFvPK9mad_frameEEEPT_RKS8_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7DecoderEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 1016 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13getActualTypeI7DecoderEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (__ZN10emscripten8internal14getLightTypeIDI7DecoderEEPKvRKT_($2)|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($3|0); //@line 1036 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7DecoderEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1024 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7DecoderEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 1029 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorI7DecoderEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if (!($3)) {
  __ZN7DecoderD2Ev($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  __ZdlPv($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDI7DecoderE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7DecoderE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7DecoderEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7DecoderE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7DecoderEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7DecoderE3getEv()|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 128 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal12operator_newI7DecoderJEEEPT_DpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(22724)|0); //@line 440 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __ZN7DecoderC2Ev($0); //@line 440 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 return ($0|0); //@line 440 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal7InvokerIP7DecoderJEE6invokeEPFS3_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = (FUNCTION_TABLE_i[$2 & 511]()|0); //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = (__ZN10emscripten8internal11BindingTypeIP7DecoderE10toWireTypeES3_($3)|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($4|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP7DecoderEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP7DecoderEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI7DecoderEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal13MethodInvokerIM7DecoderFvljEvPS2_JljEE6invokeERKS4_S5_lj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZN10emscripten8internal11BindingTypeIP7DecoderE12fromWireTypeES3_($8)|0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $4; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$10>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($10)) + 4|0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $$field2 >> 1; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = (($9) + ($11)|0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $$field2 & 1; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = ($13|0)!=(0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($14) {
  $15 = HEAP32[$12>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = (($15) + ($$field)|0); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $17 = HEAP32[$16>>2]|0; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $23 = $17;
 } else {
  $18 = $$field; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $23 = $18;
 }
 $19 = $6; //@line 518 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $20 = (__ZN10emscripten8internal11BindingTypeIlE12fromWireTypeEl($19)|0); //@line 518 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $21 = $7; //@line 518 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $22 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($21)|0); //@line 518 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_viii[$23 & 1023]($12,$20,$22); //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 517 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7DecoderEEljEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7DecoderEEljEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7DecoderEEljEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM7DecoderFvljEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13MethodInvokerIM7DecoderKFbvEbPKS2_JEE6invokeERKS4_S6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = (__ZN10emscripten8internal11BindingTypeIPK7DecoderE12fromWireTypeES4_($4)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $2; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$6>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($6)) + 4|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $$field2 >> 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (($5) + ($7)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $$field2 & 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = ($9|0)!=(0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($10) {
  $11 = HEAP32[$8>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $12 = (($11) + ($$field)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $13 = HEAP32[$12>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $13;
 } else {
  $14 = $$field; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $17 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($16)|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($17|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIK7DecoderEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIK7DecoderEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerIK7DecoderEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM7DecoderKFbvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13MethodInvokerIM7DecoderFjjEjPS2_JjEE6invokeERKS4_S5_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZN10emscripten8internal11BindingTypeIP7DecoderE12fromWireTypeES3_($7)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $3; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$9>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($9)) + 4|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 >> 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (($8) + ($10)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $$field2 & 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = ($12|0)!=(0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($13) {
  $14 = HEAP32[$11>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = (($14) + ($$field)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = HEAP32[$15>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $20 = $16;
 } else {
  $17 = $$field; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $20 = $17;
 }
 $18 = $5; //@line 502 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $19 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($18)|0); //@line 502 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $21 = (FUNCTION_TABLE_iii[$20 & 511]($11,$19)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$6>>2] = $21; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $22 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($6)|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($22|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerI7DecoderEEjEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerI7DecoderEEjEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerI7DecoderEEjEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM7DecoderFjjEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal13MethodInvokerIM7DecoderFNS_3valEjES3_PS2_JjEE6invokeERKS5_S6_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZN10emscripten8internal11BindingTypeIP7DecoderE12fromWireTypeES3_($7)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $3; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$9>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($9)) + 4|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = $$field2 >> 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (($8) + ($10)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = $$field2 & 1; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = ($12|0)!=(0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if ($13) {
  $14 = HEAP32[$11>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $15 = (($14) + ($$field)|0); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $16 = HEAP32[$15>>2]|0; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $20 = $16;
 } else {
  $17 = $$field; //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
  $20 = $17;
 }
 $18 = $5; //@line 502 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $19 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($18)|0); //@line 502 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_viii[$20 & 1023]($6,$11,$19); //@line 501 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $21 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($6)|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 __ZN10emscripten3valD2Ev($6); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($21|0); //@line 500 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI7DecoderEEjEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI7DecoderEEjEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valENS0_17AllowedRawPointerI7DecoderEEjEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM7DecoderFNS_3valEjEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valENS0_17AllowedRawPointerI7DecoderEEjEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52328|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP7DecoderE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 265 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 265 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 561 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = HEAP32[$2>>2]|0; //@line 561 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __emval_incref(($3|0)); //@line 561 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $4 = $1; //@line 562 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = HEAP32[$4>>2]|0; //@line 562 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return ($5|0); //@line 562 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerI7DecoderEEjEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52340|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerIK7DecoderEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52352|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPK7DecoderE12fromWireTypeES4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0&1;
 $1 = $2;
 $3 = $1; //@line 280 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $4 = $3&1; //@line 280 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($4|0); //@line 280 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7DecoderEEljEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (42736|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIlE12fromWireTypeEl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 266 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 266 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI7DecoderEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52360|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP7DecoderE10toWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPK7DecoderE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (49952|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIP7DecoderE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (49928|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDI7DecoderE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (49944|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14getLightTypeIDI7DecoderEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (49944|0); //@line 89 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI8MadSynthEENS3_IK9mad_frameEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52364|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP8MadSynthE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPK9mad_frameE12fromWireTypeES4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIK6MadPCMEENS3_IK8MadSynthEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52376|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPK8MadSynthE12fromWireTypeES4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPK6MadPCME10toWireTypeES4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM8MadSynthFvjEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM8MadSynthKFjvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI8MadSynthEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52384|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP8MadSynthE10toWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPK8MadSynthE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50048|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIP8MadSynthE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (49968|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDI8MadSynthE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50008|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI9mad_synthE14convertPointerIS1_8MadSynthEEPT0_PT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI9mad_synthE14convertPointerI8MadSynthS1_EEPT0_PT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14getLightTypeIDI8MadSynthEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (50008|0); //@line 89 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPK9mad_synthE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50088|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIP9mad_synthE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50104|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDI9mad_synthE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50024|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14getLightTypeIDI9mad_synthEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (50024|0); //@line 89 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal7InvokerIvJP9mad_synthPK9mad_frameEE6invokeEPFvS3_S6_ES3_S6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3; //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = $4; //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZN10emscripten8internal11BindingTypeIP9mad_synthE12fromWireTypeES3_($7)|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $5; //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = (__ZN10emscripten8internal11BindingTypeIPK9mad_frameE12fromWireTypeES4_($9)|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vii[$6 & 511]($8,$10); //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP9mad_synthPK9mad_frameEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP9mad_synthPK9mad_frameEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9mad_synthEENS3_IK9mad_frameEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9mad_synthEENS3_IK9mad_frameEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52388|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP9mad_synthE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal7InvokerIvJP9mad_synthEE6invokeEPFvS3_ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2; //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $3; //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = (__ZN10emscripten8internal11BindingTypeIP9mad_synthE12fromWireTypeES3_($5)|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vi[$4 & 1023]($6); //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP9mad_synthEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP9mad_synthEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9mad_synthEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (59822|0); //@line 396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9mad_synthEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52400|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valENS0_17AllowedRawPointerIK6MadPCMEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52408|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPK6MadPCME12fromWireTypeES4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten17typed_memory_viewIiEENS_11memory_viewIT_EEmPKS2_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 440 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $6 = $4; //@line 440 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 __ZN10emscripten11memory_viewIiEC2EmPKi($0,$5,$6); //@line 440 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return; //@line 440 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten3valC2INS_11memory_viewIiEEEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4; //@line 337 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $7;
 $8 = $2; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __ZN10emscripten8internal12WireTypePackIJNS_11memory_viewIiEEEEC2EOS3_($5,$8); //@line 337 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0); //@line 339 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = (__ZNK10emscripten8internal12WireTypePackIJNS_11memory_viewIiEEEEcvPKvEv($5)|0); //@line 340 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = (__emval_take_value(($9|0),($10|0))|0); //@line 338 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$6>>2] = $11; //@line 338 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 341 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal12WireTypePackIJNS_11memory_viewIiEEEEC2EOS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 16|0;
 $10 = sp;
 $8 = $0;
 $9 = $1;
 $11 = $8;
 $7 = $11;
 $12 = $7;
 HEAP32[$10>>2] = $12; //@line 235 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $13 = $9; //@line 236 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $13;
 $14 = $2; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $4 = $10;
 $5 = $14;
 $15 = $4; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $16 = $5; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = $16;
 $17 = $3; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __ZN10emscripten8internal11BindingTypeINS_11memory_viewIiEEE10toWireTypeERKS3_($6,$17); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeERKNS_11memory_viewIT_EE($15,$6); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $18 = $4; //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($18); //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 237 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WireTypePackIJNS_11memory_viewIiEEEEcvPKvEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 STACKTOP = sp;return ($4|0); //@line 240 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50120|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeINS_11memory_viewIiEEE10toWireTypeERKS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2; //@line 455 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0; //@line 455 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return; //@line 455 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeERKNS_11memory_viewIT_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 212 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = HEAP32[$4>>2]|0; //@line 212 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = $2; //@line 212 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = HEAP32[$6>>2]|0; //@line 212 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$7>>2] = $5; //@line 212 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $3; //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = ((($8)) + 4|0); //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = HEAP32[$9>>2]|0; //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = $2; //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $12 = HEAP32[$11>>2]|0; //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $13 = ((($12)) + 4|0); //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$13>>2] = $10; //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $14 = $2; //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $15 = HEAP32[$14>>2]|0; //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $16 = ((($15)) + 8|0); //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$14>>2] = $16; //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 215 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten11memory_viewIiEC2EmPKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4; //@line 424 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 HEAP32[$6>>2] = $7; //@line 424 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $8 = ((($6)) + 4|0); //@line 425 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $9 = $5; //@line 425 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 HEAP32[$8>>2] = $9; //@line 425 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return; //@line 426 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM6MadPCMFvtEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM6MadPCMKFtvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11BindingTypeItE12fromWireTypeEt($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 263 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 263 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeItE10toWireTypeERKt($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 263 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $3 = HEAP16[$2>>1]|0; //@line 263 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($3|0); //@line 263 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM6MadPCMFvjEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM6MadPCMKFjvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI6MadPCMEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52416|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP6MadPCME10toWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPK6MadPCME3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50032|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIP6MadPCME3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50128|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDI6MadPCME3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50064|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI7mad_pcmE14convertPointerIS1_6MadPCMEEPT0_PT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI7mad_pcmE14convertPointerI6MadPCMS1_EEPT0_PT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14getLightTypeIDI6MadPCMEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (50064|0); //@line 89 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPK7mad_pcmE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50144|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIP7mad_pcmE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50160|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDI7mad_pcmE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50080|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14getLightTypeIDI7mad_pcmEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (50080|0); //@line 89 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal7InvokerIiJP10mad_streamEE6invokeEPFiS3_ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2; //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = $3; //@line 338 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = (__ZN10emscripten8internal11BindingTypeIP10mad_streamE12fromWireTypeES3_($6)|0); //@line 338 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (FUNCTION_TABLE_ii[$5 & 1023]($7)|0); //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$4>>2] = $8; //@line 337 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($4)|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($9|0); //@line 336 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJiP10mad_streamEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJiP10mad_streamEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerI10mad_streamEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerI10mad_streamEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52420|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP10mad_streamE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal7InvokerIvJP10mad_streamPKhmEE6invokeEPFvS3_S5_mES3_S5_m($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4; //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $5; //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = (__ZN10emscripten8internal11BindingTypeIP10mad_streamE12fromWireTypeES3_($9)|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = $6; //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $12 = (__ZN10emscripten8internal11BindingTypeIPKhE12fromWireTypeES3_($11)|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $13 = $7; //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $14 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($13)|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_viii[$8 & 1023]($10,$12,$14); //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP10mad_streamPKhmEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP10mad_streamPKhmEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10mad_streamEENS3_IKhEEmEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10mad_streamEENS3_IKhEEmEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (42752|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPKhE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 267 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 267 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal7InvokerIvJP10mad_streamEE6invokeEPFvS3_ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2; //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $3; //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = (__ZN10emscripten8internal11BindingTypeIP10mad_streamE12fromWireTypeES3_($5)|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vi[$4 & 1023]($6); //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP10mad_streamEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP10mad_streamEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10mad_streamEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10mad_streamEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52428|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9MadStreamEElmEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (42768|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP9MadStreamE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valENS0_17AllowedRawPointerI9MadStreamEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52436|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten17typed_memory_viewIhEENS_11memory_viewIT_EEmPKS2_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = $2;
 $5 = $3; //@line 440 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $6 = $4; //@line 440 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 __ZN10emscripten11memory_viewIhEC2EmPKh($0,$5,$6); //@line 440 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return; //@line 440 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten3valC2INS_11memory_viewIhEEEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4; //@line 337 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $7;
 $8 = $2; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __ZN10emscripten8internal12WireTypePackIJNS_11memory_viewIhEEEEC2EOS3_($5,$8); //@line 337 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0); //@line 339 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = (__ZNK10emscripten8internal12WireTypePackIJNS_11memory_viewIhEEEEcvPKvEv($5)|0); //@line 340 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = (__emval_take_value(($9|0),($10|0))|0); //@line 338 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$6>>2] = $11; //@line 338 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 341 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal12WireTypePackIJNS_11memory_viewIhEEEEC2EOS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 16|0;
 $10 = sp;
 $8 = $0;
 $9 = $1;
 $11 = $8;
 $7 = $11;
 $12 = $7;
 HEAP32[$10>>2] = $12; //@line 235 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $13 = $9; //@line 236 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $2 = $13;
 $14 = $2; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 $4 = $10;
 $5 = $14;
 $15 = $4; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $16 = $5; //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $3 = $16;
 $17 = $3; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 __ZN10emscripten8internal11BindingTypeINS_11memory_viewIhEEE10toWireTypeERKS3_($6,$17); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal20writeGenericWireTypeIhEEvRPNS0_15GenericWireTypeERKNS_11memory_viewIT_EE($15,$6); //@line 228 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $18 = $4; //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($18); //@line 229 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 237 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WireTypePackIJNS_11memory_viewIhEEEEcvPKvEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 STACKTOP = sp;return ($4|0); //@line 240 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50232|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeINS_11memory_viewIhEEE10toWireTypeERKS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2; //@line 455 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0; //@line 455 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return; //@line 455 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal20writeGenericWireTypeIhEEvRPNS0_15GenericWireTypeERKNS_11memory_viewIT_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 212 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $5 = HEAP32[$4>>2]|0; //@line 212 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $6 = $2; //@line 212 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $7 = HEAP32[$6>>2]|0; //@line 212 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$7>>2] = $5; //@line 212 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $8 = $3; //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $9 = ((($8)) + 4|0); //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $10 = HEAP32[$9>>2]|0; //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $11 = $2; //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $12 = HEAP32[$11>>2]|0; //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $13 = ((($12)) + 4|0); //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$13>>2] = $10; //@line 213 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $14 = $2; //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $15 = HEAP32[$14>>2]|0; //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 $16 = ((($15)) + 8|0); //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 HEAP32[$14>>2] = $16; //@line 214 "/usr/lib/emscripten/system/include/emscripten/val.h"
 STACKTOP = sp;return; //@line 215 "/usr/lib/emscripten/system/include/emscripten/val.h"
}
function __ZN10emscripten11memory_viewIhEC2EmPKh($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4; //@line 424 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 HEAP32[$6>>2] = $7; //@line 424 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $8 = ((($6)) + 4|0); //@line 425 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $9 = $5; //@line 425 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 HEAP32[$8>>2] = $9; //@line 425 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return; //@line 426 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM9MadStreamFvjEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadStreamKFjvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadStreamFv9mad_errorEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadStreamKF9mad_errorvEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11LightTypeIDI9mad_errorE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50240|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal15EnumBindingTypeI9mad_errorE12fromWireTypeES2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 394 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 394 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal15EnumBindingTypeI9mad_errorE10toWireTypeES2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 391 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 391 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM9MadStreamFvmEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadStreamKFmvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 267 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $3 = HEAP32[$2>>2]|0; //@line 267 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($3|0); //@line 267 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM9MadStreamFviEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadStreamKFivEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 264 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 264 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI9MadStreamEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52444|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP9MadStreamE10toWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPK9MadStreamE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50248|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIP9MadStreamE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50200|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDI9MadStreamE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50216|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI10mad_streamE14convertPointerIS1_9MadStreamEEPT0_PT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI10mad_streamE14convertPointerI9MadStreamS1_EEPT0_PT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14getLightTypeIDI9MadStreamEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (50216|0); //@line 89 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPK10mad_streamE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50264|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIP10mad_streamE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50176|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDI10mad_streamE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50192|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14getLightTypeIDI10mad_streamEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (50192|0); //@line 89 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPK10mad_bitptrE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50280|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIP10mad_bitptrE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50304|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDI10mad_bitptrE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50296|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14getLightTypeIDI10mad_bitptrEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (50296|0); //@line 89 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal7InvokerIvJP9mad_frameEE6invokeEPFvS3_ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2; //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $3; //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = (__ZN10emscripten8internal11BindingTypeIP9mad_frameE12fromWireTypeES3_($5)|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vi[$4 & 1023]($6); //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP9mad_frameEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP9mad_frameEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9mad_frameEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9mad_frameEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52448|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP9mad_frameE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11noncopyableD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return; //@line 649 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12MemberAccessI11mad_timer_tmE7getWireIS2_EEmRKMS2_mRKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 534 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $2; //@line 534 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = HEAP32[$5>>2]|0; //@line 534 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = (($4) + ($6)|0); //@line 534 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($7)|0); //@line 534 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($8|0); //@line 534 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12MemberAccessI11mad_timer_tmE7setWireIS2_EEvRKMS2_mRT_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5; //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($6)|0); //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $3; //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = HEAP32[$9>>2]|0; //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (($8) + ($10)|0); //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$11>>2] = $7; //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 544 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM11mad_timer_tmEEPT_RKS4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(4)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $4; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12MemberAccessI11mad_timer_tlE7getWireIS2_EElRKMS2_lRKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 534 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $2; //@line 534 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = HEAP32[$5>>2]|0; //@line 534 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = (($4) + ($6)|0); //@line 534 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = (__ZN10emscripten8internal11BindingTypeIlE10toWireTypeERKl($7)|0); //@line 534 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($8|0); //@line 534 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal12MemberAccessI11mad_timer_tlE7setWireIS2_EEvRKMS2_lRT_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5; //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $7 = (__ZN10emscripten8internal11BindingTypeIlE12fromWireTypeEl($6)|0); //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $8 = $4; //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $9 = $3; //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $10 = HEAP32[$9>>2]|0; //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $11 = (($8) + ($10)|0); //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$11>>2] = $7; //@line 543 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 544 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM11mad_timer_tlEEPT_RKS4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(4)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $4 = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $4; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52216|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIlE10toWireTypeERKl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 266 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $3 = HEAP32[$2>>2]|0; //@line 266 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($3|0); //@line 266 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11noncopyableC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return; //@line 648 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal15raw_constructorI11mad_timer_tJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0); //@line 452 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0; //@line 452 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 return ($0|0); //@line 452 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14raw_destructorI11mad_timer_tEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = ($2|0)==(0|0); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 if (!($3)) {
  __ZdlPv($2); //@line 459 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 }
 STACKTOP = sp;return; //@line 460 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (60067|0); //@line 396 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerI8MadFrameEENS3_I10mad_streamEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52456|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP8MadFrameE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valENS0_17AllowedRawPointerIK8MadFrameEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52468|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPK8MadFrameE12fromWireTypeES4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIK9MadHeaderEENS3_IK8MadFrameEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52476|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIPK9MadHeaderE10toWireTypeES4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM8MadFrameFviEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM8MadFrameKFivEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI8MadFrameEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52484|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP8MadFrameE10toWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPK8MadFrameE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50368|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIP8MadFrameE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50336|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDI8MadFrameE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50352|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI9mad_frameE14convertPointerIS1_8MadFrameEEPT0_PT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI9mad_frameE14convertPointerI8MadFrameS1_EEPT0_PT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14getLightTypeIDI8MadFrameEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (50352|0); //@line 89 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPK9mad_frameE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (49984|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIP9mad_frameE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50320|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDI9mad_frameE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50000|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14getLightTypeIDI9mad_frameEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (50000|0); //@line 89 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal7InvokerIvJP10mad_headerEE6invokeEPFvS3_ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2; //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $5 = $3; //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $6 = (__ZN10emscripten8internal11BindingTypeIP10mad_headerE12fromWireTypeES3_($5)|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 FUNCTION_TABLE_vi[$4 & 1023]($6); //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return; //@line 350 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP10mad_headerEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2; //@line 231 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvP10mad_headerEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10mad_headerEEEEEE3getEv()|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 235 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10mad_headerEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52488|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP10mad_headerE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 351 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderFv11mad_timer_tEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderKF11mad_timer_tvEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11LightTypeIDI11mad_timer_tE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50440|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal18GenericBindingTypeI11mad_timer_tE12fromWireTypeEPS2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 369 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 369 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal18GenericBindingTypeI11mad_timer_tE10toWireTypeEOS2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (__Znwm(8)|0); //@line 365 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $4 = $2; //@line 365 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 $1 = $4;
 $5 = $1; //@line 2301 "/usr/lib/emscripten/system/include/libcxx/type_traits"
 ;HEAP32[$3>>2]=HEAP32[$5>>2]|0;HEAP32[$3+4>>2]=HEAP32[$5+4>>2]|0; //@line 365 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($3|0); //@line 365 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderFvtEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderKFtvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52192|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderFvjEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderKFjvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52208|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderFvmEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderKFmvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52224|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderFv12mad_emphasisEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderKF12mad_emphasisvEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11LightTypeIDI12mad_emphasisE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50448|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal15EnumBindingTypeI12mad_emphasisE12fromWireTypeES2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 394 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 394 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal15EnumBindingTypeI12mad_emphasisE10toWireTypeES2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 391 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 391 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderFv8mad_modeEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderKF8mad_modevEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11LightTypeIDI8mad_modeE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50456|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal15EnumBindingTypeI8mad_modeE12fromWireTypeES2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 394 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 394 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal15EnumBindingTypeI8mad_modeE10toWireTypeES2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 391 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 391 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderFviEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderKFivEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderFv9mad_layerEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal10getContextIM9MadHeaderKF9mad_layervEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $3 = $1; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field = HEAP32[$3>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index1 = ((($3)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$field2 = HEAP32[$$index1>>2]|0; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$2>>2] = $$field; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 $$index5 = ((($2)) + 4|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 HEAP32[$$index5>>2] = $$field2; //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 565 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal11LightTypeIDI9mad_layerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50464|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal15EnumBindingTypeI9mad_layerE12fromWireTypeES2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 394 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 394 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal15EnumBindingTypeI9mad_layerE10toWireTypeES2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 391 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 391 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI9MadHeaderEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52496|0); //@line 215 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11BindingTypeIP9MadHeaderE10toWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 STACKTOP = sp;return ($2|0); //@line 348 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPK9MadHeaderE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50384|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIP9MadHeaderE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50472|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDI9MadHeaderE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50400|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten4baseI10mad_headerE14convertPointerIS1_9MadHeaderEEPT0_PT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten4baseI10mad_headerE14convertPointerI9MadHeaderS1_EEPT0_PT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
 STACKTOP = sp;return ($2|0); //@line 1072 "/usr/lib/emscripten/system/include/emscripten/bind.h"
}
function __ZN10emscripten8internal14getLightTypeIDI9MadHeaderEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (50400|0); //@line 89 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIPK10mad_headerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50488|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIP10mad_headerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50424|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDI10mad_headerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50416|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal14getLightTypeIDI10mad_headerEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (50416|0); //@line 89 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_75();
 return;
}
function ___cxx_global_var_init_75() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(71433); //@line 100 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 return; //@line 100 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0); //@line 103 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_void(($2|0),(60252|0)); //@line 103 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_bool(($3|0),(60257|0),1,1,0); //@line 105 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_116register_integerIcEEvPKc(60262); //@line 107 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_116register_integerIaEEvPKc(60267); //@line 108 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_116register_integerIhEEvPKc(60279); //@line 109 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_116register_integerIsEEvPKc(60293); //@line 110 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_116register_integerItEEvPKc(60299); //@line 111 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_116register_integerIiEEvPKc(60314); //@line 112 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_116register_integerIjEEvPKc(60318); //@line 113 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_116register_integerIlEEvPKc(60331); //@line 114 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_116register_integerImEEvPKc(60336); //@line 115 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_114register_floatIfEEvPKc(60350); //@line 117 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_114register_floatIdEEvPKc(60356); //@line 118 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0); //@line 120 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_std_string(($4|0),(60363|0)); //@line 120 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0); //@line 121 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_std_string(($5|0),(60375|0)); //@line 121 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $6 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0); //@line 122 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_std_wstring(($6|0),4,(60408|0)); //@line 122 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $7 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0); //@line 123 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_emval(($7|0),(60421|0)); //@line 123 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc(60437); //@line 131 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(60467); //@line 132 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(60504); //@line 133 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(60543); //@line 135 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(60574); //@line 136 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(60614); //@line 137 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(60643); //@line 138 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc(60681); //@line 139 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc(60711); //@line 140 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(60750); //@line 142 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(60782); //@line 143 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(60815); //@line 144 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(60848); //@line 145 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(60882); //@line 146 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(60915); //@line 147 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc(60949); //@line 149 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc(60980); //@line 150 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc(61012); //@line 152 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 154 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_116register_integerIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = -128 << 24 >> 24; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $5 = 127 << 24 >> 24; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0)); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_116register_integerIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = -128 << 24 >> 24; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $5 = 127 << 24 >> 24; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0)); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_116register_integerIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = 0; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $5 = 255; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0)); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_116register_integerIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = -32768 << 16 >> 16; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $5 = 32767 << 16 >> 16; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0)); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_116register_integerItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = 0; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $5 = 65535; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0)); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_116register_integerIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_116register_integerIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),4,0,-1); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_116register_integerIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_116register_integerImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(($2|0),($3|0),4,0,-1); //@line 56 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 57 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_114register_floatIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0); //@line 62 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 62 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_float(($2|0),($3|0),4); //@line 62 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 63 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_114register_floatIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0); //@line 62 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = $1; //@line 62 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_float(($2|0),($3|0),8); //@line 62 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 63 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 97 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 97 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 97 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 97 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 97 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 97 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 97 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 97 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 97 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 97 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 97 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $4 = $1; //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(($2|0),($3|0),($4|0)); //@line 96 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return; //@line 97 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7; //@line 82 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50504|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7; //@line 82 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50512|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6; //@line 82 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50520|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5; //@line 82 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50528|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4; //@line 82 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50536|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5; //@line 82 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50544|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4; //@line 82 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3; //@line 82 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50552|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2; //@line 82 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50560|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1; //@line 82 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0; //@line 82 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50568|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0; //@line 82 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50576|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (49920|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50584|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50608|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (49888|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52240|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52232|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52184|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52152|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52176|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
 return ($0|0); //@line 105 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52144|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52136|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52120|0); //@line 69 "/usr/lib/emscripten/system/include/emscripten/wire.h"
}
function ___getTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2; //@line 42 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 $1 = $3;
 $4 = $1;
 $5 = ((($4)) + 4|0); //@line 181 "/usr/lib/emscripten/system/include/libcxx/typeinfo"
 $6 = HEAP32[$5>>2]|0; //@line 181 "/usr/lib/emscripten/system/include/libcxx/typeinfo"
 $7 = (___strdup($6)|0); //@line 42 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
 STACKTOP = sp;return ($7|0); //@line 42 "/usr/lib/emscripten/system/lib/embind/bind.cpp"
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$27 = $17;
   while(1) {
    $26 = ($27|0)<(0);
    if ($26) {
     break;
    }
    $35 = (($$04855) - ($27))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($27>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($27) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$27 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (69324|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 5;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 1023]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 1023]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtox($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 setTempRet0(($13) | 0);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond179 = 0, $or$cond5 = 0, $or$cond7 = 0, $spec$select166 = 0, $spec$select167 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $6 = (___errno_location()|0);
   HEAP32[$6>>2] = 22;
   $291 = 0;$292 = 0;
  } else {
   $7 = ((($0)) + 4|0);
   $8 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$7>>2]|0;
    $10 = HEAP32[$8>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$7>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$7>>2]|0;
     $22 = HEAP32[$8>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$7>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$7>>2]|0;
     $33 = HEAP32[$8>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$7>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160170 = $40;$$1165168 = 8;
       label = 47;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$7>>2]|0;
     $43 = HEAP32[$8>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$7>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((43025) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$8>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$7>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$7>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $291 = 0;$292 = 0;
       break L1;
      }
      if ($54) {
       $291 = 0;$292 = 0;
       break L1;
      }
      $58 = HEAP32[$7>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$7>>2] = $59;
      $291 = 0;$292 = 0;
      break L1;
     } else {
      $$1160170 = $50;$$1165168 = 16;
      label = 47;
     }
    } else {
     $spec$select166 = $28 ? 10 : $1;
     $60 = ((43025) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($spec$select166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $spec$select166;
      label = 32;
     } else {
      $64 = HEAP32[$8>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$7>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$7>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $291 = 0;$292 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154215 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154215*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$7>>2]|0;
        $76 = HEAP32[$8>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$7>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $83 = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $83 = $81;
        }
        $82 = (($83) + -48)|0;
        $84 = ($82>>>0)<(10);
        $85 = ($73>>>0)<(429496729);
        $86 = $84 & $85;
        if ($86) {
         $$0154215 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $87 = ($82>>>0)<(10);
       if ($87) {
        $$3162208 = $83;$88 = $73;$89 = 0;$93 = $82;
        while(1) {
         $90 = (___muldi3(($88|0),($89|0),10,0)|0);
         $91 = (getTempRet0() | 0);
         $92 = ($93|0)<(0);
         $94 = $92 << 31 >> 31;
         $95 = $93 ^ -1;
         $96 = $94 ^ -1;
         $97 = ($91>>>0)>($96>>>0);
         $98 = ($90>>>0)>($95>>>0);
         $99 = ($91|0)==($96|0);
         $100 = $99 & $98;
         $101 = $97 | $100;
         if ($101) {
          $$1165169 = 10;$$8 = $$3162208;$293 = $88;$294 = $89;
          label = 76;
          break L43;
         }
         $102 = (_i64Add(($90|0),($91|0),($93|0),($94|0))|0);
         $103 = (getTempRet0() | 0);
         $104 = HEAP32[$7>>2]|0;
         $105 = HEAP32[$8>>2]|0;
         $106 = ($104>>>0)<($105>>>0);
         if ($106) {
          $107 = ((($104)) + 1|0);
          HEAP32[$7>>2] = $107;
          $108 = HEAP8[$104>>0]|0;
          $109 = $108&255;
          $112 = $109;
         } else {
          $110 = (___shgetc($0)|0);
          $112 = $110;
         }
         $111 = (($112) + -48)|0;
         $113 = ($111>>>0)<(10);
         $114 = ($103>>>0)<(429496729);
         $115 = ($102>>>0)<(2576980378);
         $116 = ($103|0)==(429496729);
         $117 = $116 & $115;
         $118 = $114 | $117;
         $or$cond7 = $113 & $118;
         if ($or$cond7) {
          $$3162208 = $112;$88 = $102;$89 = $103;$93 = $111;
         } else {
          break;
         }
        }
        $119 = ($111>>>0)>(9);
        if ($119) {
         $$1158 = $$0157;$265 = $103;$267 = $102;
        } else {
         $$1165169 = 10;$$8 = $112;$293 = $102;$294 = $103;
         label = 76;
        }
       } else {
        $$1158 = $$0157;$265 = 0;$267 = $73;
       }
      } else {
       $$1158 = $$0157;$265 = 0;$267 = 0;
      }
     } else {
      $$1160170 = $$1160;$$1165168 = $$1165;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $120 = (($$1165168) + -1)|0;
     $121 = $120 & $$1165168;
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = ($$1165168*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (61485 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((43025) + ($$1160170)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($$1165168>>>0)>($131>>>0);
      if ($132) {
       $$1155184 = 0;$135 = $131;
       while(1) {
        $133 = $$1155184 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$7>>2]|0;
        $137 = HEAP32[$8>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$7>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $144 = $141;
        } else {
         $142 = (___shgetc($0)|0);
         $144 = $142;
        }
        $143 = ((43025) + ($144)|0);
        $145 = HEAP8[$143>>0]|0;
        $146 = $145&255;
        $147 = ($$1165168>>>0)>($146>>>0);
        $148 = ($134>>>0)<(134217728);
        $149 = $148 & $147;
        if ($149) {
         $$1155184 = $134;$135 = $146;
        } else {
         break;
        }
       }
       $$4163$lcssa = $144;$$pre$phi237Z2D = $146;$154 = 0;$156 = $134;$295 = $145;
      } else {
       $$4163$lcssa = $$1160170;$$pre$phi237Z2D = $131;$154 = 0;$156 = 0;$295 = $130;
      }
      $150 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $151 = (getTempRet0() | 0);
      $152 = ($$1165168>>>0)<=($$pre$phi237Z2D>>>0);
      $153 = ($151>>>0)<($154>>>0);
      $155 = ($150>>>0)<($156>>>0);
      $157 = ($151|0)==($154|0);
      $158 = $157 & $155;
      $159 = $153 | $158;
      $or$cond179 = $152 | $159;
      if ($or$cond179) {
       $$1165169 = $$1165168;$$8 = $$4163$lcssa;$293 = $156;$294 = $154;
       label = 76;
       break;
      }
      $160 = $156;$161 = $154;$165 = $295;
      while(1) {
       $162 = (_bitshift64Shl(($160|0),($161|0),($128|0))|0);
       $163 = (getTempRet0() | 0);
       $164 = $165&255;
       $166 = $162 | $164;
       $167 = HEAP32[$7>>2]|0;
       $168 = HEAP32[$8>>2]|0;
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $170 = ((($167)) + 1|0);
        HEAP32[$7>>2] = $170;
        $171 = HEAP8[$167>>0]|0;
        $172 = $171&255;
        $175 = $172;
       } else {
        $173 = (___shgetc($0)|0);
        $175 = $173;
       }
       $174 = ((43025) + ($175)|0);
       $176 = HEAP8[$174>>0]|0;
       $177 = $176&255;
       $178 = ($$1165168>>>0)<=($177>>>0);
       $179 = ($163>>>0)>($151>>>0);
       $180 = ($166>>>0)>($150>>>0);
       $181 = ($163|0)==($151|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$1165169 = $$1165168;$$8 = $175;$293 = $166;$294 = $163;
        label = 76;
        break L63;
       } else {
        $160 = $166;$161 = $163;$165 = $176;
       }
      }
     }
     $184 = ((43025) + ($$1160170)|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = ($$1165168>>>0)>($186>>>0);
     if ($187) {
      $$2156202 = 0;$190 = $186;
      while(1) {
       $188 = Math_imul($$2156202, $$1165168)|0;
       $189 = (($190) + ($188))|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = HEAP32[$8>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = ((($191)) + 1|0);
        HEAP32[$7>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $199 = $196;
       } else {
        $197 = (___shgetc($0)|0);
        $199 = $197;
       }
       $198 = ((43025) + ($199)|0);
       $200 = HEAP8[$198>>0]|0;
       $201 = $200&255;
       $202 = ($$1165168>>>0)>($201>>>0);
       $203 = ($189>>>0)<(119304647);
       $204 = $203 & $202;
       if ($204) {
        $$2156202 = $189;$190 = $201;
       } else {
        break;
       }
      }
      $$6$lcssa = $199;$$pre$phi239Z2D = $201;$296 = $200;$297 = $189;$298 = 0;
     } else {
      $$6$lcssa = $$1160170;$$pre$phi239Z2D = $186;$296 = $185;$297 = 0;$298 = 0;
     }
     $205 = ($$1165168>>>0)>($$pre$phi239Z2D>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = (getTempRet0() | 0);
      $$7190 = $$6$lcssa;$209 = $298;$211 = $297;$218 = $296;
      while(1) {
       $208 = ($209>>>0)>($207>>>0);
       $210 = ($211>>>0)>($206>>>0);
       $212 = ($209|0)==($207|0);
       $213 = $212 & $210;
       $214 = $208 | $213;
       if ($214) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $211;$294 = $209;
        label = 76;
        break L63;
       }
       $215 = (___muldi3(($211|0),($209|0),($$1165168|0),0)|0);
       $216 = (getTempRet0() | 0);
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $211;$294 = $209;
        label = 76;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = (getTempRet0() | 0);
       $227 = HEAP32[$7>>2]|0;
       $228 = HEAP32[$8>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$7>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $235 = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $235 = $233;
       }
       $234 = ((43025) + ($235)|0);
       $236 = HEAP8[$234>>0]|0;
       $237 = $236&255;
       $238 = ($$1165168>>>0)>($237>>>0);
       if ($238) {
        $$7190 = $235;$209 = $226;$211 = $225;$218 = $236;
       } else {
        $$1165169 = $$1165168;$$8 = $235;$293 = $225;$294 = $226;
        label = 76;
        break;
       }
      }
     } else {
      $$1165169 = $$1165168;$$8 = $$6$lcssa;$293 = $297;$294 = $298;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $239 = ((43025) + ($$8)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ($$1165169>>>0)>($241>>>0);
    if ($242) {
     while(1) {
      $243 = HEAP32[$7>>2]|0;
      $244 = HEAP32[$8>>2]|0;
      $245 = ($243>>>0)<($244>>>0);
      if ($245) {
       $246 = ((($243)) + 1|0);
       HEAP32[$7>>2] = $246;
       $247 = HEAP8[$243>>0]|0;
       $248 = $247&255;
       $251 = $248;
      } else {
       $249 = (___shgetc($0)|0);
       $251 = $249;
      }
      $250 = ((43025) + ($251)|0);
      $252 = HEAP8[$250>>0]|0;
      $253 = $252&255;
      $254 = ($$1165169>>>0)>($253>>>0);
      if (!($254)) {
       break;
      }
     }
     $255 = (___errno_location()|0);
     HEAP32[$255>>2] = 34;
     $256 = $3 & 1;
     $257 = ($256|0)==(0);
     $258 = (0)==(0);
     $259 = $257 & $258;
     $spec$select167 = $259 ? $$0157 : 0;
     $$1158 = $spec$select167;$265 = $4;$267 = $3;
    } else {
     $$1158 = $$0157;$265 = $294;$267 = $293;
    }
   }
   $260 = HEAP32[$8>>2]|0;
   $261 = ($260|0)==(0|0);
   if (!($261)) {
    $262 = HEAP32[$7>>2]|0;
    $263 = ((($262)) + -1|0);
    HEAP32[$7>>2] = $263;
   }
   $264 = ($265>>>0)<($4>>>0);
   $266 = ($267>>>0)<($3>>>0);
   $268 = ($265|0)==($4|0);
   $269 = $268 & $266;
   $270 = $264 | $269;
   if (!($270)) {
    $271 = $3 & 1;
    $272 = ($271|0)!=(0);
    $273 = (0)!=(0);
    $274 = $272 | $273;
    $275 = ($$1158|0)!=(0);
    $or$cond12 = $274 | $275;
    if (!($or$cond12)) {
     $276 = (___errno_location()|0);
     HEAP32[$276>>2] = 34;
     $277 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $278 = (getTempRet0() | 0);
     $291 = $278;$292 = $277;
     break;
    }
    $279 = ($265>>>0)>($4>>>0);
    $280 = ($267>>>0)>($3>>>0);
    $281 = ($265|0)==($4|0);
    $282 = $281 & $280;
    $283 = $279 | $282;
    if ($283) {
     $284 = (___errno_location()|0);
     HEAP32[$284>>2] = 34;
     $291 = $4;$292 = $3;
     break;
    }
   }
   $285 = ($$1158|0)<(0);
   $286 = $285 << 31 >> 31;
   $287 = $267 ^ $$1158;
   $288 = $265 ^ $286;
   $289 = (_i64Subtract(($287|0),($288|0),($$1158|0),($286|0))|0);
   $290 = (getTempRet0() | 0);
   $291 = $290;$292 = $289;
  }
 } while(0);
 setTempRet0(($291) | 0);
 return ($292|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $27 = $42;
   }
   $26 = ($27|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($26) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $27;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($7|0)==($39|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _mbsrtowcs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0105132 = 0, $$0111131 = 0, $$097 = 0, $$098$lcssa = 0, $$098133 = 0, $$10 = 0, $$11$ph = 0, $$1106$ph = 0, $$1106147 = 0, $$1112 = 0, $$1112$ph = 0, $$11122124 = 0, $$11182 = 0, $$11183 = 0, $$199 = 0, $$199$ph = 0, $$2 = 0, $$2100154 = 0, $$2107135 = 0, $$2113153 = 0;
 var $$3101 = 0, $$3108 = 0, $$3108$ph = 0, $$3108176 = 0, $$3114 = 0, $$4 = 0, $$4102 = 0, $$4109 = 0, $$4115 = 0, $$5 = 0, $$5103 = 0, $$5110 = 0, $$5110180 = 0, $$5110181 = 0, $$5116$ph = 0, $$5116146 = 0, $$6 = 0, $$6104$lcssa = 0, $$6104$ph = 0, $$6104148 = 0;
 var $$6117134 = 0, $$7118 = 0, $$7118$ph = 0, $$7118175 = 0, $$7136 = 0, $$8 = 0, $$8$ph = 0, $$8119 = 0, $$8177 = 0, $$9 = 0, $$9$sink = 0, $$9120 = 0, $$9120179 = 0, $$pre = 0, $$pre$phi173Z2D = 0, $$pre$phi174Z2D = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre171 = 0, $$pre172 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==(0|0);
 if ($5) {
  label = 5;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   label = 5;
  } else {
   $8 = ($0|0)==(0|0);
   if ($8) {
    $$2 = $6;$$4102 = $4;$$4115 = $2;
    label = 26;
   } else {
    HEAP32[$3>>2] = 0;
    $$4 = $6;$$4109 = $0;$$8119 = $2;$$9 = $4;
    label = 48;
   }
  }
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = (___pthread_self_446()|0);
   $10 = ((($9)) + 188|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   $14 = ($0|0)!=(0|0);
   if (!($13)) {
    if ($14) {
     $$1106$ph = $0;$$5116$ph = $2;$$6104$ph = $4;
     label = 33;
     break;
    } else {
     $$1112$ph = $2;$$199$ph = $4;
     label = 15;
     break;
    }
   }
   if (!($14)) {
    $15 = (_strlen($4)|0);
    $$097 = $15;
    label = 63;
    break;
   }
   $16 = ($2|0)==(0);
   L13: do {
    if ($16) {
     $$098$lcssa = $4;
    } else {
     $$0105132 = $0;$$0111131 = $2;$$098133 = $4;
     while(1) {
      $17 = HEAP8[$$098133>>0]|0;
      $18 = ($17<<24>>24)==(0);
      if ($18) {
       break;
      }
      $19 = ((($$098133)) + 1|0);
      $20 = $17 << 24 >> 24;
      $21 = $20 & 57343;
      $22 = ((($$0105132)) + 4|0);
      HEAP32[$$0105132>>2] = $21;
      $23 = (($$0111131) + -1)|0;
      $24 = ($23|0)==(0);
      if ($24) {
       $$098$lcssa = $19;
       break L13;
      } else {
       $$0105132 = $22;$$0111131 = $23;$$098133 = $19;
      }
     }
     HEAP32[$$0105132>>2] = 0;
     HEAP32[$1>>2] = 0;
     $25 = (($2) - ($$0111131))|0;
     $$097 = $25;
     label = 63;
     break L5;
    }
   } while(0);
   HEAP32[$1>>2] = $$098$lcssa;
   $$097 = $2;
   label = 63;
  }
 } while(0);
 L20: while(1) {
  L21: do {
   if ((label|0) == 15) {
    label = 0;
    $$1112 = $$1112$ph;$$199 = $$199$ph;
    while(1) {
     $26 = HEAP8[$$199>>0]|0;
     $27 = $26&255;
     $28 = (($27) + -1)|0;
     $29 = ($28>>>0)<(127);
     if ($29) {
      $30 = $$199;
      $31 = $30 & 3;
      $32 = ($31|0)==(0);
      if ($32) {
       $33 = HEAP32[$$199>>2]|0;
       $34 = (($33) + -16843009)|0;
       $35 = $34 | $33;
       $36 = $35 & -2139062144;
       $37 = ($36|0)==(0);
       $38 = $33&255;
       if ($37) {
        $$2100154 = $$199;$$2113153 = $$1112;
        while(1) {
         $39 = ((($$2100154)) + 4|0);
         $40 = (($$2113153) + -4)|0;
         $41 = HEAP32[$39>>2]|0;
         $42 = (($41) + -16843009)|0;
         $43 = $42 | $41;
         $44 = $43 & -2139062144;
         $45 = ($44|0)==(0);
         if ($45) {
          $$2100154 = $39;$$2113153 = $40;
         } else {
          break;
         }
        }
        $46 = $41&255;
        $$3101 = $39;$$3114 = $40;$48 = $46;
       } else {
        $$3101 = $$199;$$3114 = $$1112;$48 = $38;
       }
      } else {
       $$3101 = $$199;$$3114 = $$1112;$48 = $26;
      }
     } else {
      $$3101 = $$199;$$3114 = $$1112;$48 = $26;
     }
     $47 = $48&255;
     $49 = (($47) + -1)|0;
     $50 = ($49>>>0)<(127);
     if (!($50)) {
      break;
     }
     $51 = ((($$3101)) + 1|0);
     $52 = (($$3114) + -1)|0;
     $$1112 = $52;$$199 = $51;
    }
    $53 = (($47) + -194)|0;
    $54 = ($53>>>0)>(50);
    if ($54) {
     $$11182 = $$3101;$$5110180 = $0;$$9120179 = $$3114;
     label = 57;
    } else {
     $55 = ((($$3101)) + 1|0);
     $56 = (42784 + ($53<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $$2 = $57;$$4102 = $55;$$4115 = $$3114;
     label = 26;
     continue L20;
    }
   }
   else if ((label|0) == 26) {
    label = 0;
    $58 = HEAP8[$$4102>>0]|0;
    $59 = $58&255;
    $60 = $59 >>> 3;
    $61 = (($60) + -16)|0;
    $62 = $$2 >> 26;
    $63 = (($60) + ($62))|0;
    $64 = $61 | $63;
    $65 = ($64>>>0)>(7);
    if ($65) {
     $$5110 = $0;$$6 = $$2;$$9$sink = $$4102;$$9120 = $$4115;
     label = 56;
    } else {
     $66 = ((($$4102)) + 1|0);
     $67 = $$2 & 33554432;
     $68 = ($67|0)==(0);
     if ($68) {
      $$5103 = $66;
     } else {
      $69 = HEAP8[$66>>0]|0;
      $70 = $69 & -64;
      $71 = ($70<<24>>24)==(-128);
      if (!($71)) {
       $$5110 = $0;$$6 = $$2;$$9$sink = $$4102;$$9120 = $$4115;
       label = 56;
       break;
      }
      $72 = ((($$4102)) + 2|0);
      $73 = $$2 & 524288;
      $74 = ($73|0)==(0);
      if ($74) {
       $$5103 = $72;
      } else {
       $75 = HEAP8[$72>>0]|0;
       $76 = $75 & -64;
       $77 = ($76<<24>>24)==(-128);
       if (!($77)) {
        $$5110 = $0;$$6 = $$2;$$9$sink = $$4102;$$9120 = $$4115;
        label = 56;
        break;
       }
       $78 = ((($$4102)) + 3|0);
       $$5103 = $78;
      }
     }
     $79 = (($$4115) + -1)|0;
     $$1112$ph = $79;$$199$ph = $$5103;
     label = 15;
     continue L20;
    }
   }
   else if ((label|0) == 33) {
    label = 0;
    $80 = ($$5116$ph|0)==(0);
    L23: do {
     if ($80) {
      $$6104$lcssa = $$6104$ph;
     } else {
      $$1106147 = $$1106$ph;$$5116146 = $$5116$ph;$$6104148 = $$6104$ph;
      while(1) {
       $81 = HEAP8[$$6104148>>0]|0;
       $82 = $81&255;
       $83 = (($82) + -1)|0;
       $84 = ($83>>>0)<(127);
       if ($84) {
        $85 = $$6104148;
        $86 = $85 & 3;
        $87 = ($86|0)==(0);
        $88 = ($$5116146>>>0)>(4);
        $or$cond = $87 & $88;
        if ($or$cond) {
         $$2107135 = $$1106147;$$6117134 = $$5116146;$$7136 = $$6104148;
         while(1) {
          $89 = HEAP32[$$7136>>2]|0;
          $90 = (($89) + -16843009)|0;
          $91 = $90 | $89;
          $92 = $91 & -2139062144;
          $93 = ($92|0)==(0);
          if (!($93)) {
           label = 42;
           break;
          }
          $94 = ((($$7136)) + 1|0);
          $95 = $89 & 255;
          $96 = ((($$2107135)) + 4|0);
          HEAP32[$$2107135>>2] = $95;
          $97 = ((($$7136)) + 2|0);
          $98 = HEAP8[$94>>0]|0;
          $99 = $98&255;
          $100 = ((($$2107135)) + 8|0);
          HEAP32[$96>>2] = $99;
          $101 = ((($$7136)) + 3|0);
          $102 = HEAP8[$97>>0]|0;
          $103 = $102&255;
          $104 = ((($$2107135)) + 12|0);
          HEAP32[$100>>2] = $103;
          $105 = ((($$7136)) + 4|0);
          $106 = HEAP8[$101>>0]|0;
          $107 = $106&255;
          $108 = ((($$2107135)) + 16|0);
          HEAP32[$104>>2] = $107;
          $109 = (($$6117134) + -4)|0;
          $110 = ($109>>>0)>(4);
          if ($110) {
           $$2107135 = $108;$$6117134 = $109;$$7136 = $105;
          } else {
           label = 41;
           break;
          }
         }
         if ((label|0) == 41) {
          label = 0;
          $$pre$pre = HEAP8[$105>>0]|0;
          $$3108$ph = $108;$$7118$ph = $109;$$8$ph = $105;$$pre = $$pre$pre;
         }
         else if ((label|0) == 42) {
          label = 0;
          $111 = $89&255;
          $$3108$ph = $$2107135;$$7118$ph = $$6117134;$$8$ph = $$7136;$$pre = $111;
         }
         $$pre171 = $$pre&255;
         $$pre172 = (($$pre171) + -1)|0;
         $$3108 = $$3108$ph;$$7118 = $$7118$ph;$$8 = $$8$ph;$$pre$phi173Z2D = $$pre172;$$pre$phiZ2D = $$pre171;
         label = 44;
        } else {
         $$3108176 = $$1106147;$$7118175 = $$5116146;$$8177 = $$6104148;$$pre$phi174Z2D = $82;
        }
       } else {
        $$3108 = $$1106147;$$7118 = $$5116146;$$8 = $$6104148;$$pre$phi173Z2D = $83;$$pre$phiZ2D = $82;
        label = 44;
       }
       if ((label|0) == 44) {
        label = 0;
        $112 = ($$pre$phi173Z2D>>>0)<(127);
        if ($112) {
         $$3108176 = $$3108;$$7118175 = $$7118;$$8177 = $$8;$$pre$phi174Z2D = $$pre$phiZ2D;
        } else {
         break;
        }
       }
       $113 = ((($$8177)) + 1|0);
       $114 = ((($$3108176)) + 4|0);
       HEAP32[$$3108176>>2] = $$pre$phi174Z2D;
       $115 = (($$7118175) + -1)|0;
       $116 = ($115|0)==(0);
       if ($116) {
        $$6104$lcssa = $113;
        break L23;
       } else {
        $$1106147 = $114;$$5116146 = $115;$$6104148 = $113;
       }
      }
      $117 = (($$pre$phiZ2D) + -194)|0;
      $118 = ($117>>>0)>(50);
      if ($118) {
       $$11182 = $$8;$$5110180 = $$3108;$$9120179 = $$7118;
       label = 57;
       break L21;
      }
      $119 = ((($$8)) + 1|0);
      $120 = (42784 + ($117<<2)|0);
      $121 = HEAP32[$120>>2]|0;
      $$4 = $121;$$4109 = $$3108;$$8119 = $$7118;$$9 = $119;
      label = 48;
      continue L20;
     }
    } while(0);
    HEAP32[$1>>2] = $$6104$lcssa;
    $$097 = $2;
    label = 63;
    continue L20;
   }
   else if ((label|0) == 48) {
    label = 0;
    $122 = HEAP8[$$9>>0]|0;
    $123 = $122&255;
    $124 = $123 >>> 3;
    $125 = (($124) + -16)|0;
    $126 = $$4 >> 26;
    $127 = (($124) + ($126))|0;
    $128 = $125 | $127;
    $129 = ($128>>>0)>(7);
    if ($129) {
     $$5110 = $$4109;$$6 = $$4;$$9$sink = $$9;$$9120 = $$8119;
     label = 56;
    } else {
     $130 = $$4 << 6;
     $131 = ((($$9)) + 1|0);
     $132 = (($123) + -128)|0;
     $133 = $132 | $130;
     $134 = ($133|0)<(0);
     do {
      if ($134) {
       $135 = HEAP8[$131>>0]|0;
       $136 = $135&255;
       $137 = (($136) + -128)|0;
       $138 = ($137>>>0)>(63);
       if (!($138)) {
        $139 = $133 << 6;
        $140 = ((($$9)) + 2|0);
        $141 = $137 | $139;
        $142 = ($141|0)<(0);
        if (!($142)) {
         $$10 = $140;$$5 = $141;
         break;
        }
        $143 = HEAP8[$140>>0]|0;
        $144 = $143&255;
        $145 = (($144) + -128)|0;
        $146 = ($145>>>0)>(63);
        if (!($146)) {
         $147 = $141 << 6;
         $148 = ((($$9)) + 3|0);
         $149 = $145 | $147;
         $$10 = $148;$$5 = $149;
         break;
        }
       }
       $$11$ph = ((($$9)) + -1|0);
       $152 = (___errno_location()|0);
       HEAP32[$152>>2] = 84;
       $$11122124 = $$11$ph;
       break L21;
      } else {
       $$10 = $131;$$5 = $133;
      }
     } while(0);
     $150 = ((($$4109)) + 4|0);
     HEAP32[$$4109>>2] = $$5;
     $151 = (($$8119) + -1)|0;
     $$1106$ph = $150;$$5116$ph = $151;$$6104$ph = $$10;
     label = 33;
     continue L20;
    }
   }
   else if ((label|0) == 63) {
    label = 0;
    return ($$097|0);
   }
  } while(0);
  if ((label|0) == 56) {
   label = 0;
   $153 = ((($$9$sink)) + -1|0);
   $154 = ($$6|0)==(0);
   if ($154) {
    $$11182 = $153;$$5110180 = $$5110;$$9120179 = $$9120;
    label = 57;
   } else {
    $$11183 = $153;$$5110181 = $$5110;
    label = 61;
   }
  }
  if ((label|0) == 57) {
   label = 0;
   $155 = HEAP8[$$11182>>0]|0;
   $156 = ($155<<24>>24)==(0);
   if ($156) {
    $157 = ($$5110180|0)==(0|0);
    if (!($157)) {
     HEAP32[$$5110180>>2] = 0;
     HEAP32[$1>>2] = 0;
    }
    $158 = (($2) - ($$9120179))|0;
    $$097 = $158;
    label = 63;
    continue;
   } else {
    $$11183 = $$11182;$$5110181 = $$5110180;
    label = 61;
   }
  }
  if ((label|0) == 61) {
   label = 0;
   $159 = (___errno_location()|0);
   HEAP32[$159>>2] = 84;
   $160 = ($$5110181|0)==(0|0);
   if ($160) {
    $$097 = -1;
    label = 63;
    continue;
   } else {
    $$11122124 = $$11183;
   }
  }
  HEAP32[$1>>2] = $$11122124;
  $$097 = -1;
  label = 63;
 }
 return (0)|0;
}
function ___pthread_self_446() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52940|0);
}
function _getc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   ___unlockfile($0);
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _strtoull($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox($0,$1,$2,-1,-1)|0);
 $4 = (getTempRet0() | 0);
 setTempRet0(($4) | 0);
 return ($3|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=53184; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $spec$select = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $spec$select;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($spec$select)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($spec$select|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select41 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 208|0;
 $4 = sp + 160|0;
 $5 = sp + 80|0;
 $6 = sp;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 1023]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $spec$select = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $spec$select41 = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select41;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0;
 var $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0;
 var $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre362 = 0, $$pre363 = 0, $$pre363$pre = 0, $$pre364 = 0;
 var $$pre368 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge326 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond283 = 0, $spec$select = 0, $spec$select281 = 0, $spec$select284 = 0;
 var $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 56|0;
 $6 = sp + 40|0;
 $7 = sp;
 $8 = sp + 48|0;
 $9 = sp + 60|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243$ph = 0;$$0247$ph = 0;$$0269$ph = 0;
 L1: while(1) {
  $$0243 = $$0243$ph;$$0247 = $$0247$ph;
  while(1) {
   $15 = ($$0247|0)>(-1);
   do {
    if ($15) {
     $16 = (2147483647 - ($$0247))|0;
     $17 = ($$0243|0)>($16|0);
     if ($17) {
      $18 = (___errno_location()|0);
      HEAP32[$18>>2] = 75;
      $$1248 = -1;
      break;
     } else {
      $19 = (($$0243) + ($$0247))|0;
      $$1248 = $19;
      break;
     }
    } else {
     $$1248 = $$0247;
    }
   } while(0);
   $20 = HEAP32[$5>>2]|0;
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    label = 94;
    break L1;
   }
   $23 = $21;$25 = $20;
   L12: while(1) {
    switch ($23<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0249$lcssa = $25;
     break L12;
     break;
    }
    default: {
    }
    }
    $24 = ((($25)) + 1|0);
    HEAP32[$5>>2] = $24;
    $$pre = HEAP8[$24>>0]|0;
    $23 = $$pre;$25 = $24;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0249321 = $25;$27 = $25;
     while(1) {
      $26 = ((($27)) + 1|0);
      $28 = HEAP8[$26>>0]|0;
      $29 = ($28<<24>>24)==(37);
      if (!($29)) {
       $$0249$lcssa = $$0249321;
       break L15;
      }
      $30 = ((($$0249321)) + 1|0);
      $31 = ((($27)) + 2|0);
      HEAP32[$5>>2] = $31;
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)==(37);
      if ($33) {
       $$0249321 = $30;$27 = $31;
      } else {
       $$0249$lcssa = $30;
       break;
      }
     }
    }
   } while(0);
   $34 = $$0249$lcssa;
   $35 = $20;
   $36 = (($34) - ($35))|0;
   if ($10) {
    _out_329($0,$20,$36);
   }
   $37 = ($36|0)==(0);
   if ($37) {
    break;
   } else {
    $$0243 = $36;$$0247 = $$1248;
   }
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre360 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
  } else {
   $44 = ((($$pre360)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre360)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
   }
  }
  $51 = (($$pre360) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge326 = $55 | $58;
  if ($brmerge326) {
   $$0262$lcssa = 0;$$lcssa308 = $52;$storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;$60 = $54;$storemerge273327 = $51;
   while(1) {
    $59 = 1 << $60;
    $61 = $59 | $$0262328;
    $62 = ((($storemerge273327)) + 1|0);
    HEAP32[$5>>2] = $62;
    $63 = HEAP8[$62>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = (($64) + -32)|0;
    $66 = ($65>>>0)>(31);
    $67 = 1 << $65;
    $68 = $67 & 75913;
    $69 = ($68|0)==(0);
    $brmerge = $66 | $69;
    if ($brmerge) {
     $$0262$lcssa = $61;$$lcssa308 = $63;$storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;$60 = $65;$storemerge273327 = $62;
    }
   }
  }
  $70 = ($$lcssa308<<24>>24)==(42);
  if ($70) {
   $71 = ((($storemerge273$lcssa)) + 1|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72 << 24 >> 24;
   $74 = (_isdigit($73)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    label = 27;
   } else {
    $76 = HEAP32[$5>>2]|0;
    $77 = ((($76)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ($78<<24>>24)==(36);
    if ($79) {
     $80 = ((($76)) + 1|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81 << 24 >> 24;
     $83 = (($82) + -48)|0;
     $84 = (($4) + ($83<<2)|0);
     HEAP32[$84>>2] = 10;
     $85 = HEAP8[$80>>0]|0;
     $86 = $85 << 24 >> 24;
     $87 = (($86) + -48)|0;
     $88 = (($3) + ($87<<3)|0);
     $89 = $88;
     $90 = $89;
     $91 = HEAP32[$90>>2]|0;
     $92 = (($89) + 4)|0;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($76)) + 3|0);
     $$0259 = $91;$$2271 = 1;$storemerge274 = $95;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $96 = ($$1270|0)==(0);
    if (!($96)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $97 = $arglist_current;
     $98 = ((0) + 4|0);
     $expanded4 = $98;
     $expanded = (($expanded4) - 1)|0;
     $99 = (($97) + ($expanded))|0;
     $100 = ((0) + 4|0);
     $expanded8 = $100;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $101 = $99 & $expanded6;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $arglist_next = ((($102)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $358 = $103;
    } else {
     $358 = 0;
    }
    $104 = HEAP32[$5>>2]|0;
    $105 = ((($104)) + 1|0);
    $$0259 = $358;$$2271 = 0;$storemerge274 = $105;
   }
   HEAP32[$5>>2] = $storemerge274;
   $106 = ($$0259|0)<(0);
   $107 = $$0262$lcssa | 8192;
   $108 = (0 - ($$0259))|0;
   $spec$select291 = $106 ? $107 : $$0262$lcssa;
   $spec$select292 = $106 ? $108 : $$0259;
   $$1260 = $spec$select292;$$1263 = $spec$select291;$$3272 = $$2271;$112 = $storemerge274;
  } else {
   $109 = (_getint_330($5)|0);
   $110 = ($109|0)<(0);
   if ($110) {
    $$0 = -1;
    break;
   }
   $$pre362 = HEAP32[$5>>2]|0;
   $$1260 = $109;$$1263 = $$0262$lcssa;$$3272 = $$1270;$112 = $$pre362;
  }
  $111 = HEAP8[$112>>0]|0;
  $113 = ($111<<24>>24)==(46);
  do {
   if ($113) {
    $114 = ((($112)) + 1|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = ($115<<24>>24)==(42);
    if (!($116)) {
     HEAP32[$5>>2] = $114;
     $152 = (_getint_330($5)|0);
     $$pre363$pre = HEAP32[$5>>2]|0;
     $$0254 = $152;$$pre363 = $$pre363$pre;
     break;
    }
    $117 = ((($112)) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118 << 24 >> 24;
    $120 = (_isdigit($119)|0);
    $121 = ($120|0)==(0);
    if (!($121)) {
     $122 = HEAP32[$5>>2]|0;
     $123 = ((($122)) + 3|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = ($124<<24>>24)==(36);
     if ($125) {
      $126 = ((($122)) + 2|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = (($128) + -48)|0;
      $130 = (($4) + ($129<<2)|0);
      HEAP32[$130>>2] = 10;
      $131 = HEAP8[$126>>0]|0;
      $132 = $131 << 24 >> 24;
      $133 = (($132) + -48)|0;
      $134 = (($3) + ($133<<3)|0);
      $135 = $134;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = (($135) + 4)|0;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($122)) + 4|0);
      HEAP32[$5>>2] = $141;
      $$0254 = $137;$$pre363 = $141;
      break;
     }
    }
    $142 = ($$3272|0)==(0);
    if (!($142)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $143 = $arglist_current2;
     $144 = ((0) + 4|0);
     $expanded11 = $144;
     $expanded10 = (($expanded11) - 1)|0;
     $145 = (($143) + ($expanded10))|0;
     $146 = ((0) + 4|0);
     $expanded15 = $146;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $147 = $145 & $expanded13;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $arglist_next3 = ((($148)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $359 = $149;
    } else {
     $359 = 0;
    }
    $150 = HEAP32[$5>>2]|0;
    $151 = ((($150)) + 2|0);
    HEAP32[$5>>2] = $151;
    $$0254 = $359;$$pre363 = $151;
   } else {
    $$0254 = -1;$$pre363 = $112;
   }
  } while(0);
  $$0252 = 0;$154 = $$pre363;
  while(1) {
   $153 = HEAP8[$154>>0]|0;
   $155 = $153 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($154)) + 1|0);
   HEAP32[$5>>2] = $158;
   $159 = HEAP8[$154>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = (($160) + -65)|0;
   $162 = ((43296 + (($$0252*58)|0)|0) + ($161)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($164) + -1)|0;
   $166 = ($165>>>0)<(8);
   if ($166) {
    $$0252 = $164;$154 = $158;
   } else {
    break;
   }
  }
  $167 = ($163<<24>>24)==(0);
  if ($167) {
   $$0 = -1;
   break;
  }
  $168 = ($163<<24>>24)==(19);
  $169 = ($$0253|0)>(-1);
  do {
   if ($168) {
    if ($169) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($169) {
     $170 = (($4) + ($$0253<<2)|0);
     HEAP32[$170>>2] = $164;
     $171 = (($3) + ($$0253<<3)|0);
     $172 = $171;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = (($172) + 4)|0;
     $176 = $175;
     $177 = HEAP32[$176>>2]|0;
     $178 = $6;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $180 = (($178) + 4)|0;
     $181 = $180;
     HEAP32[$181>>2] = $177;
     label = 54;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_332($6,$164,$2);
    $$pre364 = HEAP32[$5>>2]|0;
    $183 = $$pre364;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($10) {
    $183 = $158;
    label = 55;
   } else {
    $$0243$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $182 = ((($183)) + -1|0);
    $184 = HEAP8[$182>>0]|0;
    $185 = $184 << 24 >> 24;
    $186 = ($$0252|0)!=(0);
    $187 = $185 & 15;
    $188 = ($187|0)==(3);
    $or$cond276 = $186 & $188;
    $189 = $185 & -33;
    $$0235 = $or$cond276 ? $189 : $185;
    $190 = $$1263 & 8192;
    $191 = ($190|0)==(0);
    $192 = $$1263 & -65537;
    $spec$select = $191 ? $$1263 : $192;
    L79: do {
     switch ($$0235|0) {
     case 110:  {
      $trunc = $$0252&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $199 = HEAP32[$6>>2]|0;
       HEAP32[$199>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $200 = HEAP32[$6>>2]|0;
       HEAP32[$200>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $201 = ($$1248|0)<(0);
       $202 = $201 << 31 >> 31;
       $203 = HEAP32[$6>>2]|0;
       $204 = $203;
       $205 = $204;
       HEAP32[$205>>2] = $$1248;
       $206 = (($204) + 4)|0;
       $207 = $206;
       HEAP32[$207>>2] = $202;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $208 = $$1248&65535;
       $209 = HEAP32[$6>>2]|0;
       HEAP16[$209>>1] = $208;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $210 = $$1248&255;
       $211 = HEAP32[$6>>2]|0;
       HEAP8[$211>>0] = $210;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $212 = HEAP32[$6>>2]|0;
       HEAP32[$212>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $213 = ($$1248|0)<(0);
       $214 = $213 << 31 >> 31;
       $215 = HEAP32[$6>>2]|0;
       $216 = $215;
       $217 = $216;
       HEAP32[$217>>2] = $$1248;
       $218 = (($216) + 4)|0;
       $219 = $218;
       HEAP32[$219>>2] = $214;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0243$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $220 = ($$0254>>>0)>(8);
      $221 = $220 ? $$0254 : 8;
      $222 = $spec$select | 8;
      $$1236 = 120;$$1255 = $221;$$3265 = $222;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1236 = $$0235;$$1255 = $$0254;$$3265 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $238 = $6;
      $239 = $238;
      $240 = HEAP32[$239>>2]|0;
      $241 = (($238) + 4)|0;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (_fmt_o($240,$243,$11)|0);
      $245 = $spec$select & 8;
      $246 = ($245|0)==(0);
      $247 = $244;
      $248 = (($12) - ($247))|0;
      $249 = ($$0254|0)>($248|0);
      $250 = (($248) + 1)|0;
      $251 = $246 | $249;
      $spec$select295 = $251 ? $$0254 : $250;
      $$0228 = $244;$$1233 = 0;$$1238 = 61494;$$2256 = $spec$select295;$$4266 = $spec$select;$277 = $240;$279 = $243;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $252 = $6;
      $253 = $252;
      $254 = HEAP32[$253>>2]|0;
      $255 = (($252) + 4)|0;
      $256 = $255;
      $257 = HEAP32[$256>>2]|0;
      $258 = ($257|0)<(0);
      if ($258) {
       $259 = (_i64Subtract(0,0,($254|0),($257|0))|0);
       $260 = (getTempRet0() | 0);
       $261 = $6;
       $262 = $261;
       HEAP32[$262>>2] = $259;
       $263 = (($261) + 4)|0;
       $264 = $263;
       HEAP32[$264>>2] = $260;
       $$0232 = 1;$$0237 = 61494;$271 = $259;$272 = $260;
       label = 72;
       break L79;
      } else {
       $265 = $spec$select & 2048;
       $266 = ($265|0)==(0);
       $267 = $spec$select & 1;
       $268 = ($267|0)==(0);
       $$ = $268 ? 61494 : (61496);
       $spec$select296 = $266 ? $$ : (61495);
       $269 = $spec$select & 2049;
       $270 = ($269|0)!=(0);
       $spec$select297 = $270&1;
       $$0232 = $spec$select297;$$0237 = $spec$select296;$271 = $254;$272 = $257;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $193 = $6;
      $194 = $193;
      $195 = HEAP32[$194>>2]|0;
      $196 = (($193) + 4)|0;
      $197 = $196;
      $198 = HEAP32[$197>>2]|0;
      $$0232 = 0;$$0237 = 61494;$271 = $195;$272 = $198;
      label = 72;
      break;
     }
     case 99:  {
      $288 = $6;
      $289 = $288;
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) + 4)|0;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = $290&255;
      HEAP8[$13>>0] = $294;
      $$2 = $13;$$2234 = 0;$$2239 = 61494;$$5 = 1;$$6268 = $192;$$pre$phiZ2D = $12;
      break;
     }
     case 109:  {
      $295 = (___errno_location()|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (_strerror($296)|0);
      $$1 = $297;
      label = 77;
      break;
     }
     case 115:  {
      $298 = HEAP32[$6>>2]|0;
      $299 = ($298|0)==(0|0);
      $300 = $299 ? 61504 : $298;
      $$1 = $300;
      label = 77;
      break;
     }
     case 67:  {
      $307 = $6;
      $308 = $307;
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 4)|0;
      $311 = $310;
      $312 = HEAP32[$311>>2]|0;
      HEAP32[$8>>2] = $309;
      HEAP32[$14>>2] = 0;
      HEAP32[$6>>2] = $8;
      $$4258370 = -1;
      label = 81;
      break;
     }
     case 83:  {
      $313 = ($$0254|0)==(0);
      if ($313) {
       _pad_335($0,32,$$1260,0,$spec$select);
       $$0240313371 = 0;
       label = 91;
      } else {
       $$4258370 = $$0254;
       label = 81;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $336 = +HEAPF64[$6>>3];
      $337 = (_fmt_fp($0,$336,$$1260,$$0254,$spec$select,$$0235)|0);
      $$0243$ph$be = $337;
      break L77;
      break;
     }
     default: {
      $$2 = $20;$$2234 = 0;$$2239 = 61494;$$5 = $$0254;$$6268 = $spec$select;$$pre$phiZ2D = $12;
     }
     }
    } while(0);
    L103: do {
     if ((label|0) == 67) {
      label = 0;
      $223 = $6;
      $224 = $223;
      $225 = HEAP32[$224>>2]|0;
      $226 = (($223) + 4)|0;
      $227 = $226;
      $228 = HEAP32[$227>>2]|0;
      $229 = $$1236 & 32;
      $230 = (_fmt_x($225,$228,$11,$229)|0);
      $231 = ($225|0)==(0);
      $232 = ($228|0)==(0);
      $233 = $231 & $232;
      $234 = $$3265 & 8;
      $235 = ($234|0)==(0);
      $or$cond278 = $235 | $233;
      $236 = $$1236 >>> 4;
      $237 = (61494 + ($236)|0);
      $spec$select293 = $or$cond278 ? 61494 : $237;
      $spec$select294 = $or$cond278 ? 0 : 2;
      $$0228 = $230;$$1233 = $spec$select294;$$1238 = $spec$select293;$$2256 = $$1255;$$4266 = $$3265;$277 = $225;$279 = $228;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $273 = (_fmt_u($271,$272,$11)|0);
      $$0228 = $273;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $spec$select;$277 = $271;$279 = $272;
      label = 73;
     }
     else if ((label|0) == 77) {
      label = 0;
      $301 = (_memchr($$1,0,$$0254)|0);
      $302 = ($301|0)==(0|0);
      $303 = $301;
      $304 = $$1;
      $305 = (($303) - ($304))|0;
      $306 = (($$1) + ($$0254)|0);
      $$3257 = $302 ? $$0254 : $305;
      $$1250 = $302 ? $306 : $301;
      $$pre368 = $$1250;
      $$2 = $$1;$$2234 = 0;$$2239 = 61494;$$5 = $$3257;$$6268 = $192;$$pre$phiZ2D = $$pre368;
     }
     else if ((label|0) == 81) {
      label = 0;
      $314 = HEAP32[$6>>2]|0;
      $$0229334 = $314;$$0240333 = 0;
      while(1) {
       $315 = HEAP32[$$0229334>>2]|0;
       $316 = ($315|0)==(0);
       if ($316) {
        $$0240313 = $$0240333;
        break;
       }
       $317 = (_wctomb($9,$315)|0);
       $318 = ($317|0)<(0);
       $319 = (($$4258370) - ($$0240333))|0;
       $320 = ($317>>>0)>($319>>>0);
       $or$cond283 = $318 | $320;
       if ($or$cond283) {
        label = 85;
        break;
       }
       $321 = ((($$0229334)) + 4|0);
       $322 = (($317) + ($$0240333))|0;
       $323 = ($$4258370>>>0)>($322>>>0);
       if ($323) {
        $$0229334 = $321;$$0240333 = $322;
       } else {
        $$0240313 = $322;
        break;
       }
      }
      if ((label|0) == 85) {
       label = 0;
       if ($318) {
        $$0 = -1;
        break L1;
       } else {
        $$0240313 = $$0240333;
       }
      }
      _pad_335($0,32,$$1260,$$0240313,$spec$select);
      $324 = ($$0240313|0)==(0);
      if ($324) {
       $$0240313371 = 0;
       label = 91;
      } else {
       $325 = HEAP32[$6>>2]|0;
       $$1230340 = $325;$$1241339 = 0;
       while(1) {
        $326 = HEAP32[$$1230340>>2]|0;
        $327 = ($326|0)==(0);
        if ($327) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $328 = (_wctomb($9,$326)|0);
        $329 = (($328) + ($$1241339))|0;
        $330 = ($329|0)>($$0240313|0);
        if ($330) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $331 = ((($$1230340)) + 4|0);
        _out_329($0,$9,$328);
        $332 = ($329>>>0)<($$0240313>>>0);
        if ($332) {
         $$1230340 = $331;$$1241339 = $329;
        } else {
         $$0240313371 = $$0240313;
         label = 91;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $274 = ($$2256|0)>(-1);
     $275 = $$4266 & -65537;
     $spec$select281 = $274 ? $275 : $$4266;
     $276 = ($277|0)!=(0);
     $278 = ($279|0)!=(0);
     $280 = $276 | $278;
     $281 = ($$2256|0)!=(0);
     $or$cond = $281 | $280;
     $282 = $$0228;
     $283 = (($12) - ($282))|0;
     $284 = $280 ^ 1;
     $285 = $284&1;
     $286 = (($283) + ($285))|0;
     $287 = ($$2256|0)>($286|0);
     $$2256$ = $287 ? $$2256 : $286;
     $spec$select298 = $or$cond ? $$2256$ : 0;
     $spec$select299 = $or$cond ? $$0228 : $11;
     $$2 = $spec$select299;$$2234 = $$1233;$$2239 = $$1238;$$5 = $spec$select298;$$6268 = $spec$select281;$$pre$phiZ2D = $12;
    }
    else if ((label|0) == 91) {
     label = 0;
     $333 = $spec$select ^ 8192;
     _pad_335($0,32,$$1260,$$0240313371,$333);
     $334 = ($$1260|0)>($$0240313371|0);
     $335 = $334 ? $$1260 : $$0240313371;
     $$0243$ph$be = $335;
     break;
    }
    $338 = $$2;
    $339 = (($$pre$phiZ2D) - ($338))|0;
    $340 = ($$5|0)<($339|0);
    $spec$select284 = $340 ? $339 : $$5;
    $341 = (($spec$select284) + ($$2234))|0;
    $342 = ($$1260|0)<($341|0);
    $$2261 = $342 ? $341 : $$1260;
    _pad_335($0,32,$$2261,$341,$$6268);
    _out_329($0,$$2239,$$2234);
    $343 = $$6268 ^ 65536;
    _pad_335($0,48,$$2261,$341,$343);
    _pad_335($0,48,$spec$select284,$339,0);
    _out_329($0,$$2,$339);
    $344 = $$6268 ^ 8192;
    _pad_335($0,32,$$2261,$341,$344);
    $$0243$ph$be = $$2261;
   }
  } while(0);
  $$0243$ph = $$0243$ph$be;$$0247$ph = $$1248;$$0269$ph = $$3272;
 }
 L125: do {
  if ((label|0) == 94) {
   $345 = ($0|0)==(0|0);
   if ($345) {
    $346 = ($$0269$ph|0)==(0);
    if ($346) {
     $$0 = 0;
    } else {
     $$2242320 = 1;
     while(1) {
      $347 = (($4) + ($$2242320<<2)|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ($348|0)==(0);
      if ($349) {
       break;
      }
      $350 = (($3) + ($$2242320<<3)|0);
      _pop_arg_332($350,$348,$2);
      $351 = (($$2242320) + 1)|0;
      $352 = ($351>>>0)<(10);
      if ($352) {
       $$2242320 = $351;
      } else {
       $$0 = 1;
       break L125;
      }
     }
     $$3317 = $$2242320;
     while(1) {
      $355 = (($4) + ($$3317<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = ($356|0)==(0);
      $354 = (($$3317) + 1)|0;
      if (!($357)) {
       $$0 = -1;
       break L125;
      }
      $353 = ($354>>>0)<(10);
      if ($353) {
       $$3317 = $354;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _out_329($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint_330($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg_332($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (43760 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_632()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _pad_335($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out_329($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out_329($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 61511;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (61512) : (61517);
  $spec$select565 = $19 ? $$ : (61514);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 61530 : 61534;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 61553 : 61538;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_335($0,32,$2,$34,$35);
   _out_329($0,$$0523,$$0522);
   _out_329($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_335($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexpl($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (43760 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_335($0,32,$2,$113,$4);
    _out_329($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_335($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out_329($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_335($0,48,$118,0,0);
    _out_329($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_335($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$135 = $$pr;
    while(1) {
     $134 = ($135|0)<(29);
     $136 = $134 ? $135 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $154 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $153 = ($154>>>0)>($$2483>>>0);
        if ($153) {
         $$3501676 = $154;
        } else {
         $$3501$lcssa = $154;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$135 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $273 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $272 = ($273>>>0)>($$9>>>0);
      if ($272) {
       $$9507625 = $273;
      } else {
       $$9507$lcssa = $273;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_335($0,32,$2,$339,$4);
   _out_329($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_335($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out_329($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out_329($0,61542,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out_329($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_335($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out_329($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out_329($0,61542,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out_329($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_335($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out_329($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_335($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function ___DOUBLE_BITS($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_443()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_443() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_632() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (43776 + ($$016)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = (($$016) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$115$ph = 87;
   label = 5;
   break;
  } else {
   $$016 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$016|0)==(0);
  if ($8) {
   $$012$lcssa = 43872;
  } else {
   $$115$ph = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $$01214 = 43872;$$115 = $$115$ph;
  while(1) {
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)==(0|0);
 $8 = $7 ? $0 : $$0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $$191 = $63 ? $$090 : $26;
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $spec$select = $61 ? $57 : 0;
      $$4 = $spec$select;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $spec$select = $2 ? $0 : $3;
 return ($spec$select|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $23 = (($$03846) + -1)|0;
      $24 = (($0) + ($23)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $22 = ($23|0)==(0);
      if ($22) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $23;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 1023]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _strtoull_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoull($0,$1,$2)|0);
 $5 = (getTempRet0() | 0);
 setTempRet0(($5) | 0);
 return ($4|0);
}
function _strtoll_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoll($0,$1,$2)|0);
 $5 = (getTempRet0() | 0);
 setTempRet0(($5) | 0);
 return ($4|0);
}
function _strtoll($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox($0,$1,$2,0,-2147483648)|0);
 $4 = (getTempRet0() | 0);
 setTempRet0(($4) | 0);
 return ($3|0);
}
function _wmemmove($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01416 = 0, $$018 = 0, $$117 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($2>>>0);
 if ($7) {
  $$in = $2;
  while(1) {
   $8 = (($$in) + -1)|0;
   $9 = (($1) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + ($8<<2)|0);
   HEAP32[$11>>2] = $10;
   $12 = ($8|0)==(0);
   if ($12) {
    break;
   } else {
    $$in = $8;
   }
  }
 } else {
  $13 = ($2|0)==(0);
  if (!($13)) {
   $$01416 = $1;$$018 = $0;$$117 = $2;
   while(1) {
    $14 = (($$117) + -1)|0;
    $15 = ((($$01416)) + 4|0);
    $16 = HEAP32[$$01416>>2]|0;
    $17 = ((($$018)) + 4|0);
    HEAP32[$$018>>2] = $16;
    $18 = ($14|0)==(0);
    if ($18) {
     break;
    } else {
     $$01416 = $15;$$018 = $17;$$117 = $14;
    }
   }
  }
 }
 return ($0|0);
}
function _wcslen($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0)) + 4|0);
  if ($2) {
   break;
  } else {
   $$0 = $3;
  }
 }
 $4 = $$0;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 return ($7|0);
}
function _wmemcpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$058 = 0, $$067 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$058 = $2;$$067 = $1;$$09 = $0;
  while(1) {
   $4 = (($$058) + -1)|0;
   $5 = ((($$067)) + 4|0);
   $6 = HEAP32[$$067>>2]|0;
   $7 = ((($$09)) + 4|0);
   HEAP32[$$09>>2] = $6;
   $8 = ($4|0)==(0);
   if ($8) {
    break;
   } else {
    $$058 = $4;$$067 = $5;$$09 = $7;
   }
  }
 }
 return ($0|0);
}
function _wmemset($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$056 = 0, $$07 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$056 = $2;$$07 = $0;
  while(1) {
   $4 = (($$056) + -1)|0;
   $5 = ((($$07)) + 4|0);
   HEAP32[$$07>>2] = $1;
   $6 = ($4|0)==(0);
   if ($6) {
    break;
   } else {
    $$056 = $4;$$07 = $5;
   }
  }
 }
 return ($0|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _mbtowc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   do {
    if (!($5)) {
     $6 = ($0|0)==(0|0);
     $spec$select = $6 ? $3 : $0;
     $7 = HEAP8[$1>>0]|0;
     $8 = ($7<<24>>24)>(-1);
     if ($8) {
      $9 = $7&255;
      HEAP32[$spec$select>>2] = $9;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break L1;
     }
     $12 = (___pthread_self_437()|0);
     $13 = ((($12)) + 188|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     $17 = HEAP8[$1>>0]|0;
     if ($16) {
      $18 = $17 << 24 >> 24;
      $19 = $18 & 57343;
      HEAP32[$spec$select>>2] = $19;
      $$0 = 1;
      break L1;
     }
     $20 = $17&255;
     $21 = (($20) + -194)|0;
     $22 = ($21>>>0)>(50);
     if (!($22)) {
      $23 = ((($1)) + 1|0);
      $24 = (42784 + ($21<<2)|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($2>>>0)<(4);
      if ($26) {
       $27 = ($2*6)|0;
       $28 = (($27) + -6)|0;
       $29 = -2147483648 >>> $28;
       $30 = $25 & $29;
       $31 = ($30|0)==(0);
       if (!($31)) {
        break;
       }
      }
      $32 = HEAP8[$23>>0]|0;
      $33 = $32&255;
      $34 = $33 >>> 3;
      $35 = (($34) + -16)|0;
      $36 = $25 >> 26;
      $37 = (($34) + ($36))|0;
      $38 = $35 | $37;
      $39 = ($38>>>0)>(7);
      if (!($39)) {
       $40 = $25 << 6;
       $41 = (($33) + -128)|0;
       $42 = $41 | $40;
       $43 = ($42|0)<(0);
       if (!($43)) {
        HEAP32[$spec$select>>2] = $42;
        $$0 = 2;
        break L1;
       }
       $44 = ((($1)) + 2|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45&255;
       $47 = (($46) + -128)|0;
       $48 = ($47>>>0)>(63);
       if (!($48)) {
        $49 = $42 << 6;
        $50 = $47 | $49;
        $51 = ($50|0)<(0);
        if (!($51)) {
         HEAP32[$spec$select>>2] = $50;
         $$0 = 3;
         break L1;
        }
        $52 = ((($1)) + 3|0);
        $53 = HEAP8[$52>>0]|0;
        $54 = $53&255;
        $55 = (($54) + -128)|0;
        $56 = ($55>>>0)>(63);
        if (!($56)) {
         $57 = $50 << 6;
         $58 = $55 | $57;
         HEAP32[$spec$select>>2] = $58;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $59 = (___errno_location()|0);
   HEAP32[$59>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_437() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $13 = $11;
  } else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $13 = $9;
 }
 $12 = ($13|0)==($4|0);
 if ($12) {
  $15 = $spec$select;
 } else {
  $14 = (($13>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 1023]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((69416|0));
 return (69424|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((69416|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[13189]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[13189]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 1023]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 1023]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 515;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0266$lcssa = 0, $$0266409 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273420 = 0, $$0276$ph$ph = 0, $$0280$ph = 0, $$0280$ph$ph = 0, $$0285419 = 0, $$0288411 = 0, $$0290416 = 0, $$0294 = 0, $$0295 = 0, $$0308414 = 0, $$10 = 0, $$10318 = 0, $$11 = 0, $$12 = 0, $$1267 = 0;
 var $$1271 = 0, $$1274 = 0, $$1281 = 0, $$1286 = 0, $$1291 = 0, $$1309 = 0, $$2 = 0, $$2275 = 0, $$2278$ph = 0, $$2282 = 0, $$2282$ph = 0, $$2287 = 0, $$2292 = 0, $$2310$ph = 0, $$3$lcssa = 0, $$3283 = 0, $$3293 = 0, $$3408 = 0, $$4 = 0, $$4284 = 0;
 var $$5 = 0, $$5313 = 0, $$6 = 0, $$6302 = 0, $$6314 = 0, $$7 = 0, $$7315 = 0, $$8 = 0, $$8316 = 0, $$9 = 0, $$9317 = 0, $$not = 0, $$old4 = 0, $$ph$ph = 0, $$pr = 0, $$pr332 = 0, $$pre = 0, $$pre$phi493Z2D = 0, $$pre$phiZ2D = 0, $$pre485 = 0;
 var $$pre487 = 0, $$pre488 = 0, $$pre490 = 0, $$pre492 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor335 = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond321 = 0, $or$cond5 = 0, $spec$select = 0, $spec$select319 = 0, $spec$select320 = 0, $spec$select322 = 0, $spec$select323 = 0, $spec$select324 = 0, $spec$select325 = 0, $spec$select326 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 264|0;
 $4 = sp;
 $5 = sp + 260|0;
 $6 = sp + 272|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $320 = $10;
 } else {
  $320 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3293 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 100|0);
   $15 = ((($0)) + 108|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $19 = ((($4)) + 46|0);
   $20 = ((($4)) + 94|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $$0273420 = $1;$$0285419 = 0;$$0290416 = 0;$$0308414 = 0;$22 = $11;$321 = 0;
   L6: while(1) {
    $21 = $22&255;
    $23 = (_isspace($21)|0);
    $24 = ($23|0)==(0);
    L8: do {
     if ($24) {
      $51 = HEAP8[$$0273420>>0]|0;
      $52 = ($51<<24>>24)==(37);
      L10: do {
       if ($52) {
        $53 = ((($$0273420)) + 1|0);
        $54 = HEAP8[$53>>0]|0;
        L12: do {
         switch ($54<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $75 = ((($$0273420)) + 2|0);
          $$0295 = 0;$$2275 = $75;
          break;
         }
         default: {
          $76 = $54&255;
          $77 = (_isdigit($76)|0);
          $78 = ($77|0)==(0);
          if (!($78)) {
           $79 = ((($$0273420)) + 2|0);
           $80 = HEAP8[$79>>0]|0;
           $81 = ($80<<24>>24)==(36);
           if ($81) {
            $82 = HEAP8[$53>>0]|0;
            $83 = $82&255;
            $84 = (($83) + -48)|0;
            $85 = (_arg_n_350($2,$84)|0);
            $86 = ((($$0273420)) + 3|0);
            $$0295 = $85;$$2275 = $86;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $87 = $arglist_current;
          $88 = ((0) + 4|0);
          $expanded1 = $88;
          $expanded = (($expanded1) - 1)|0;
          $89 = (($87) + ($expanded))|0;
          $90 = ((0) + 4|0);
          $expanded5 = $90;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $91 = $89 & $expanded3;
          $92 = $91;
          $93 = HEAP32[$92>>2]|0;
          $arglist_next = ((($92)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0295 = $93;$$2275 = $53;
         }
         }
        } while(0);
        $94 = HEAP8[$$2275>>0]|0;
        $95 = $94&255;
        $96 = (_isdigit($95)|0);
        $97 = ($96|0)==(0);
        if ($97) {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;
        } else {
         $$0266409 = 0;$$3408 = $$2275;
         while(1) {
          $98 = ($$0266409*10)|0;
          $99 = HEAP8[$$3408>>0]|0;
          $100 = $99&255;
          $101 = (($98) + -48)|0;
          $102 = (($101) + ($100))|0;
          $103 = ((($$3408)) + 1|0);
          $104 = HEAP8[$103>>0]|0;
          $105 = $104&255;
          $106 = (_isdigit($105)|0);
          $107 = ($106|0)==(0);
          if ($107) {
           $$0266$lcssa = $102;$$3$lcssa = $103;
           break;
          } else {
           $$0266409 = $102;$$3408 = $103;
          }
         }
        }
        $108 = HEAP8[$$3$lcssa>>0]|0;
        $109 = ($108<<24>>24)==(109);
        $110 = ((($$3$lcssa)) + 1|0);
        if ($109) {
         $111 = ($$0295|0)!=(0|0);
         $112 = $111&1;
         $$pr = HEAP8[$110>>0]|0;
         $$pre488 = ((($$3$lcssa)) + 2|0);
         $$0270 = $112;$$1309 = 0;$$4 = $110;$$pre$phiZ2D = $$pre488;$113 = $$pr;$324 = 0;
        } else {
         $$0270 = 0;$$1309 = $$0308414;$$4 = $$3$lcssa;$$pre$phiZ2D = $110;$113 = $108;$324 = $321;
        }
        switch ($113<<24>>24) {
        case 104:  {
         $114 = HEAP8[$$pre$phiZ2D>>0]|0;
         $115 = ($114<<24>>24)==(104);
         $116 = ((($$4)) + 2|0);
         $spec$select323 = $115 ? $116 : $$pre$phiZ2D;
         $spec$select324 = $115 ? -2 : -1;
         $$0268 = $spec$select324;$$5 = $spec$select323;
         break;
        }
        case 108:  {
         $117 = HEAP8[$$pre$phiZ2D>>0]|0;
         $118 = ($117<<24>>24)==(108);
         $119 = ((($$4)) + 2|0);
         $spec$select325 = $118 ? $119 : $$pre$phiZ2D;
         $spec$select326 = $118 ? 3 : 1;
         $$0268 = $spec$select326;$$5 = $spec$select325;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $$pre$phiZ2D;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $$pre$phiZ2D;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $$pre$phiZ2D;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$8316 = $$1309;$325 = $324;
         label = 143;
         break L6;
        }
        }
        $120 = HEAP8[$$5>>0]|0;
        $121 = $120&255;
        $122 = $121 & 47;
        $123 = ($122|0)==(3);
        $124 = $121 | 32;
        $spec$select = $123 ? $124 : $121;
        $spec$select319 = $123 ? 1 : $$0268;
        $trunc = $spec$select&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $125 = ($$0266$lcssa|0)>(1);
         $spec$select320 = $125 ? $$0266$lcssa : 1;
         $$1267 = $spec$select320;$$1286 = $$0285419;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1286 = $$0285419;
         break;
        }
        case 110:  {
         $126 = ($$0285419|0)<(0);
         $127 = $126 << 31 >> 31;
         _store_int_351($$0295,$spec$select319,$$0285419,$127);
         $$12 = $$5;$$1291 = $$0290416;$$2287 = $$0285419;$$7315 = $$1309;$322 = $324;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $128 = HEAP32[$13>>2]|0;
          $129 = HEAP32[$14>>2]|0;
          $130 = ($128>>>0)<($129>>>0);
          if ($130) {
           $131 = ((($128)) + 1|0);
           HEAP32[$13>>2] = $131;
           $132 = HEAP8[$128>>0]|0;
           $133 = $132&255;
           $135 = $133;
          } else {
           $134 = (___shgetc($0)|0);
           $135 = $134;
          }
          $136 = (_isspace($135)|0);
          $137 = ($136|0)==(0);
          if ($137) {
           break;
          }
         }
         $138 = HEAP32[$14>>2]|0;
         $139 = ($138|0)==(0|0);
         if ($139) {
          $$pre485 = HEAP32[$13>>2]|0;
          $147 = $$pre485;
         } else {
          $140 = HEAP32[$13>>2]|0;
          $141 = ((($140)) + -1|0);
          HEAP32[$13>>2] = $141;
          $142 = $141;
          $147 = $142;
         }
         $143 = HEAP32[$15>>2]|0;
         $144 = HEAP32[$16>>2]|0;
         $145 = (($143) + ($$0285419))|0;
         $146 = (($145) + ($147))|0;
         $148 = (($146) - ($144))|0;
         $$1267 = $$0266$lcssa;$$1286 = $148;
        }
        }
        ___shlim($0,$$1267);
        $149 = HEAP32[$13>>2]|0;
        $150 = HEAP32[$14>>2]|0;
        $151 = ($149>>>0)<($150>>>0);
        if ($151) {
         $152 = ((($149)) + 1|0);
         HEAP32[$13>>2] = $152;
         $156 = $150;
        } else {
         $153 = (___shgetc($0)|0);
         $154 = ($153|0)<(0);
         if ($154) {
          $$8316 = $$1309;$325 = $324;
          label = 143;
          break L6;
         }
         $$pr332 = HEAP32[$14>>2]|0;
         $156 = $$pr332;
        }
        $155 = ($156|0)==(0|0);
        if (!($155)) {
         $157 = HEAP32[$13>>2]|0;
         $158 = ((($157)) + -1|0);
         HEAP32[$13>>2] = $158;
        }
        L59: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $159 = ($spec$select|0)==(99);
          $160 = $spec$select | 16;
          $161 = ($160|0)==(115);
          L61: do {
           if ($161) {
            $162 = ($spec$select|0)==(115);
            (_memset(($4|0),-1,257)|0);
            HEAP8[$4>>0] = 0;
            if ($162) {
             HEAP8[$18>>0] = 0;
             ;HEAP16[$17>>1]=0|0;HEAP16[$17+2>>1]=0|0;HEAP8[$17+4>>0]=0|0;
             $$10 = $$5;
            } else {
             $$10 = $$5;
            }
           } else {
            $163 = ((($$5)) + 1|0);
            $164 = HEAP8[$163>>0]|0;
            $165 = ($164<<24>>24)==(94);
            $166 = ((($$5)) + 2|0);
            $$0294 = $165&1;
            $$6 = $165 ? $166 : $163;
            (_memset(($4|0),($$0294|0),257)|0);
            HEAP8[$4>>0] = 0;
            $167 = HEAP8[$$6>>0]|0;
            switch ($167<<24>>24) {
            case 45:  {
             $168 = ((($$6)) + 1|0);
             $169 = $$0294 ^ 1;
             $170 = $169&255;
             HEAP8[$19>>0] = $170;
             $$7 = $168;$$pre$phi493Z2D = $170;
             break;
            }
            case 93:  {
             $171 = ((($$6)) + 1|0);
             $172 = $$0294 ^ 1;
             $173 = $172&255;
             HEAP8[$20>>0] = $173;
             $$7 = $171;$$pre$phi493Z2D = $173;
             break;
            }
            default: {
             $$pre490 = $$0294 ^ 1;
             $$pre492 = $$pre490&255;
             $$7 = $$6;$$pre$phi493Z2D = $$pre492;
            }
            }
            $$8 = $$7;
            while(1) {
             $174 = HEAP8[$$8>>0]|0;
             L72: do {
              switch ($174<<24>>24) {
              case 0:  {
               $$8316 = $$1309;$325 = $324;
               label = 143;
               break L6;
               break;
              }
              case 93:  {
               $$10 = $$8;
               break L61;
               break;
              }
              case 45:  {
               $175 = ((($$8)) + 1|0);
               $176 = HEAP8[$175>>0]|0;
               switch ($176<<24>>24) {
               case 93: case 0:  {
                $$9 = $$8;$187 = 45;
                break L72;
                break;
               }
               default: {
               }
               }
               $177 = ((($$8)) + -1|0);
               $178 = HEAP8[$177>>0]|0;
               $179 = ($178&255)<($176&255);
               if ($179) {
                $180 = $178&255;
                $$0288411 = $180;
                while(1) {
                 $181 = (($$0288411) + 1)|0;
                 $182 = (($4) + ($181)|0);
                 HEAP8[$182>>0] = $$pre$phi493Z2D;
                 $183 = HEAP8[$175>>0]|0;
                 $184 = $183&255;
                 $185 = ($181>>>0)<($184>>>0);
                 if ($185) {
                  $$0288411 = $181;
                 } else {
                  $$9 = $175;$187 = $183;
                  break;
                 }
                }
               } else {
                $$9 = $175;$187 = $176;
               }
               break;
              }
              default: {
               $$9 = $$8;$187 = $174;
              }
              }
             } while(0);
             $186 = $187&255;
             $188 = (($186) + 1)|0;
             $189 = (($4) + ($188)|0);
             HEAP8[$189>>0] = $$pre$phi493Z2D;
             $190 = ((($$9)) + 1|0);
             $$8 = $190;
            }
           }
          } while(0);
          $191 = (($$1267) + 1)|0;
          $192 = $159 ? $191 : 31;
          $193 = ($spec$select319|0)==(1);
          $194 = ($$0270|0)!=(0);
          L80: do {
           if ($193) {
            if ($194) {
             $195 = $192 << 2;
             $196 = (_malloc($195)|0);
             $197 = ($196|0)==(0|0);
             if ($197) {
              $$8316 = 0;$325 = 0;
              label = 143;
              break L6;
             } else {
              $327 = $196;
             }
            } else {
             $327 = $$0295;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph$ph = $192;$$0280$ph$ph = 0;$$ph$ph = $327;
            L85: while(1) {
             $198 = ($$ph$ph|0)==(0|0);
             $$0280$ph = $$0280$ph$ph;
             while(1) {
              L89: while(1) {
               $199 = HEAP32[$13>>2]|0;
               $200 = HEAP32[$14>>2]|0;
               $201 = ($199>>>0)<($200>>>0);
               if ($201) {
                $202 = ((($199)) + 1|0);
                HEAP32[$13>>2] = $202;
                $203 = HEAP8[$199>>0]|0;
                $204 = $203&255;
                $207 = $204;
               } else {
                $205 = (___shgetc($0)|0);
                $207 = $205;
               }
               $206 = (($207) + 1)|0;
               $208 = (($4) + ($206)|0);
               $209 = HEAP8[$208>>0]|0;
               $210 = ($209<<24>>24)==(0);
               if ($210) {
                break L85;
               }
               $211 = $207&255;
               HEAP8[$6>>0] = $211;
               $212 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($212|0) {
               case -1:  {
                $$8316 = 0;$325 = $$ph$ph;
                label = 143;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L89;
               }
               }
              }
              if ($198) {
               $$1281 = $$0280$ph;
              } else {
               $213 = (($$ph$ph) + ($$0280$ph<<2)|0);
               $214 = (($$0280$ph) + 1)|0;
               $215 = HEAP32[$5>>2]|0;
               HEAP32[$213>>2] = $215;
               $$1281 = $214;
              }
              $216 = ($$1281|0)==($$0276$ph$ph|0);
              $or$cond = $194 & $216;
              if ($or$cond) {
               break;
              } else {
               $$0280$ph = $$1281;
              }
             }
             $factor335 = $$0276$ph$ph << 1;
             $217 = $factor335 | 1;
             $218 = $217 << 2;
             $219 = (_realloc($$ph$ph,$218)|0);
             $220 = ($219|0)==(0|0);
             if ($220) {
              $$8316 = 0;$325 = $$ph$ph;
              label = 143;
              break L6;
             } else {
              $$0276$ph$ph = $217;$$0280$ph$ph = $$1281;$$ph$ph = $219;
             }
            }
            $221 = (_mbsinit($3)|0);
            $222 = ($221|0)==(0);
            if ($222) {
             $$8316 = 0;$325 = $$ph$ph;
             label = 143;
             break L6;
            } else {
             $$4284 = $$0280$ph;$$5313 = 0;$$6302 = $$ph$ph;$328 = $$ph$ph;
            }
           } else {
            if ($194) {
             $223 = (_malloc($192)|0);
             $224 = ($223|0)==(0|0);
             if ($224) {
              $$8316 = 0;$325 = 0;
              label = 143;
              break L6;
             }
             $$2278$ph = $192;$$2282$ph = 0;$$2310$ph = $223;
             while(1) {
              $$2282 = $$2282$ph;
              while(1) {
               $225 = HEAP32[$13>>2]|0;
               $226 = HEAP32[$14>>2]|0;
               $227 = ($225>>>0)<($226>>>0);
               if ($227) {
                $228 = ((($225)) + 1|0);
                HEAP32[$13>>2] = $228;
                $229 = HEAP8[$225>>0]|0;
                $230 = $229&255;
                $233 = $230;
               } else {
                $231 = (___shgetc($0)|0);
                $233 = $231;
               }
               $232 = (($233) + 1)|0;
               $234 = (($4) + ($232)|0);
               $235 = HEAP8[$234>>0]|0;
               $236 = ($235<<24>>24)==(0);
               if ($236) {
                $$4284 = $$2282;$$5313 = $$2310$ph;$$6302 = 0;$328 = 0;
                break L80;
               }
               $237 = $233&255;
               $238 = (($$2282) + 1)|0;
               $239 = (($$2310$ph) + ($$2282)|0);
               HEAP8[$239>>0] = $237;
               $240 = ($238|0)==($$2278$ph|0);
               if ($240) {
                break;
               } else {
                $$2282 = $238;
               }
              }
              $factor = $$2278$ph << 1;
              $241 = $factor | 1;
              $242 = (_realloc($$2310$ph,$241)|0);
              $243 = ($242|0)==(0|0);
              if ($243) {
               $$8316 = $$2310$ph;$325 = 0;
               label = 143;
               break L6;
              } else {
               $$2278$ph = $241;$$2282$ph = $238;$$2310$ph = $242;
              }
             }
            }
            $244 = ($$0295|0)==(0|0);
            if ($244) {
             while(1) {
              $260 = HEAP32[$13>>2]|0;
              $261 = HEAP32[$14>>2]|0;
              $262 = ($260>>>0)<($261>>>0);
              if ($262) {
               $263 = ((($260)) + 1|0);
               HEAP32[$13>>2] = $263;
               $264 = HEAP8[$260>>0]|0;
               $265 = $264&255;
               $268 = $265;
              } else {
               $266 = (___shgetc($0)|0);
               $268 = $266;
              }
              $267 = (($268) + 1)|0;
              $269 = (($4) + ($267)|0);
              $270 = HEAP8[$269>>0]|0;
              $271 = ($270<<24>>24)==(0);
              if ($271) {
               $$4284 = 0;$$5313 = 0;$$6302 = 0;$328 = 0;
               break L80;
              }
             }
            }
            $$3283 = 0;
            while(1) {
             $245 = HEAP32[$13>>2]|0;
             $246 = HEAP32[$14>>2]|0;
             $247 = ($245>>>0)<($246>>>0);
             if ($247) {
              $248 = ((($245)) + 1|0);
              HEAP32[$13>>2] = $248;
              $249 = HEAP8[$245>>0]|0;
              $250 = $249&255;
              $253 = $250;
             } else {
              $251 = (___shgetc($0)|0);
              $253 = $251;
             }
             $252 = (($253) + 1)|0;
             $254 = (($4) + ($252)|0);
             $255 = HEAP8[$254>>0]|0;
             $256 = ($255<<24>>24)==(0);
             if ($256) {
              $$4284 = $$3283;$$5313 = $$0295;$$6302 = 0;$328 = 0;
              break L80;
             }
             $257 = $253&255;
             $258 = (($$3283) + 1)|0;
             $259 = (($$0295) + ($$3283)|0);
             HEAP8[$259>>0] = $257;
             $$3283 = $258;
            }
           }
          } while(0);
          $272 = HEAP32[$14>>2]|0;
          $273 = ($272|0)==(0|0);
          if ($273) {
           $$pre487 = HEAP32[$13>>2]|0;
           $280 = $$pre487;
          } else {
           $274 = HEAP32[$13>>2]|0;
           $275 = ((($274)) + -1|0);
           HEAP32[$13>>2] = $275;
           $276 = $275;
           $280 = $276;
          }
          $277 = HEAP32[$15>>2]|0;
          $278 = HEAP32[$16>>2]|0;
          $279 = (($280) - ($278))|0;
          $281 = (($279) + ($277))|0;
          $282 = ($281|0)==(0);
          if ($282) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290416;$318 = $328;
           break L6;
          }
          $$not = $159 ^ 1;
          $283 = ($281|0)==($$1267|0);
          $or$cond321 = $283 | $$not;
          if (!($or$cond321)) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290416;$318 = $328;
           break L6;
          }
          do {
           if ($194) {
            if ($193) {
             HEAP32[$$0295>>2] = $$6302;
             break;
            } else {
             HEAP32[$$0295>>2] = $$5313;
             break;
            }
           }
          } while(0);
          if ($159) {
           $$11 = $$10;$$6314 = $$5313;$326 = $328;
          } else {
           $284 = ($$6302|0)==(0|0);
           if (!($284)) {
            $285 = (($$6302) + ($$4284<<2)|0);
            HEAP32[$285>>2] = 0;
           }
           $286 = ($$5313|0)==(0|0);
           if ($286) {
            $$11 = $$10;$$6314 = 0;$326 = $328;
            break L59;
           }
           $287 = (($$5313) + ($$4284)|0);
           HEAP8[$287>>0] = 0;
           $$11 = $$10;$$6314 = $$5313;$326 = $328;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 131;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 131;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 131;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 131;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $298 = (+___floatscan($0,$spec$select319,0));
          $299 = HEAP32[$15>>2]|0;
          $300 = HEAP32[$13>>2]|0;
          $301 = HEAP32[$16>>2]|0;
          $302 = (($301) - ($300))|0;
          $303 = ($299|0)==($302|0);
          if ($303) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290416;$318 = $324;
           break L6;
          }
          $304 = ($$0295|0)==(0|0);
          if ($304) {
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
          } else {
           switch ($spec$select319|0) {
           case 0:  {
            $305 = $298;
            HEAPF32[$$0295>>2] = $305;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           case 1:  {
            HEAPF64[$$0295>>3] = $298;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           case 2:  {
            HEAPF64[$$0295>>3] = $298;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           default: {
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
           }
           }
          }
          break;
         }
         default: {
          $$11 = $$5;$$6314 = $$1309;$326 = $324;
         }
         }
        } while(0);
        do {
         if ((label|0) == 131) {
          label = 0;
          $288 = (___intscan($0,$$0272,0,-1,-1)|0);
          $289 = (getTempRet0() | 0);
          $290 = HEAP32[$15>>2]|0;
          $291 = HEAP32[$13>>2]|0;
          $292 = HEAP32[$16>>2]|0;
          $293 = (($292) - ($291))|0;
          $294 = ($290|0)==($293|0);
          if ($294) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290416;$318 = $324;
           break L6;
          }
          $295 = ($spec$select|0)==(112);
          $296 = ($$0295|0)!=(0|0);
          $or$cond3 = $296 & $295;
          if ($or$cond3) {
           $297 = $288;
           HEAP32[$$0295>>2] = $297;
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
           break;
          } else {
           _store_int_351($$0295,$spec$select319,$288,$289);
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
           break;
          }
         }
        } while(0);
        $306 = HEAP32[$15>>2]|0;
        $307 = HEAP32[$13>>2]|0;
        $308 = HEAP32[$16>>2]|0;
        $309 = (($306) + ($$1286))|0;
        $310 = (($309) + ($307))|0;
        $311 = (($310) - ($308))|0;
        $312 = ($$0295|0)!=(0|0);
        $313 = $312&1;
        $spec$select322 = (($$0290416) + ($313))|0;
        $$12 = $$11;$$1291 = $spec$select322;$$2287 = $311;$$7315 = $$6314;$322 = $326;
        break L8;
       }
      } while(0);
      $55 = $52&1;
      $56 = (($$0273420) + ($55)|0);
      ___shlim($0,0);
      $57 = HEAP32[$13>>2]|0;
      $58 = HEAP32[$14>>2]|0;
      $59 = ($57>>>0)<($58>>>0);
      if ($59) {
       $60 = ((($57)) + 1|0);
       HEAP32[$13>>2] = $60;
       $61 = HEAP8[$57>>0]|0;
       $62 = $61&255;
       $67 = $62;
      } else {
       $63 = (___shgetc($0)|0);
       $67 = $63;
      }
      $64 = HEAP8[$56>>0]|0;
      $65 = $64&255;
      $66 = ($67|0)==($65|0);
      if (!($66)) {
       label = 23;
       break L6;
      }
      $74 = (($$0285419) + 1)|0;
      $$12 = $56;$$1291 = $$0290416;$$2287 = $74;$$7315 = $$0308414;$322 = $321;
     } else {
      $$1274 = $$0273420;
      while(1) {
       $25 = ((($$1274)) + 1|0);
       $26 = HEAP8[$25>>0]|0;
       $27 = $26&255;
       $28 = (_isspace($27)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        break;
       } else {
        $$1274 = $25;
       }
      }
      ___shlim($0,0);
      while(1) {
       $30 = HEAP32[$13>>2]|0;
       $31 = HEAP32[$14>>2]|0;
       $32 = ($30>>>0)<($31>>>0);
       if ($32) {
        $33 = ((($30)) + 1|0);
        HEAP32[$13>>2] = $33;
        $34 = HEAP8[$30>>0]|0;
        $35 = $34&255;
        $37 = $35;
       } else {
        $36 = (___shgetc($0)|0);
        $37 = $36;
       }
       $38 = (_isspace($37)|0);
       $39 = ($38|0)==(0);
       if ($39) {
        break;
       }
      }
      $40 = HEAP32[$14>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       $$pre = HEAP32[$13>>2]|0;
       $49 = $$pre;
      } else {
       $42 = HEAP32[$13>>2]|0;
       $43 = ((($42)) + -1|0);
       HEAP32[$13>>2] = $43;
       $44 = $43;
       $49 = $44;
      }
      $45 = HEAP32[$15>>2]|0;
      $46 = HEAP32[$16>>2]|0;
      $47 = (($45) + ($$0285419))|0;
      $48 = (($47) + ($49))|0;
      $50 = (($48) - ($46))|0;
      $$12 = $$1274;$$1291 = $$0290416;$$2287 = $50;$$7315 = $$0308414;$322 = $321;
     }
    } while(0);
    $314 = ((($$12)) + 1|0);
    $315 = HEAP8[$314>>0]|0;
    $316 = ($315<<24>>24)==(0);
    if ($316) {
     $$3293 = $$1291;
     break L4;
    } else {
     $$0273420 = $314;$$0285419 = $$2287;$$0290416 = $$1291;$$0308414 = $$7315;$22 = $315;$321 = $322;
    }
   }
   if ((label|0) == 23) {
    $68 = HEAP32[$14>>2]|0;
    $69 = ($68|0)==(0|0);
    if (!($69)) {
     $70 = HEAP32[$13>>2]|0;
     $71 = ((($70)) + -1|0);
     HEAP32[$13>>2] = $71;
    }
    $72 = ($67|0)>(-1);
    $73 = ($$0290416|0)!=(0);
    $or$cond5 = $73 | $72;
    if ($or$cond5) {
     $$3293 = $$0290416;
     break;
    } else {
     $$1271 = 0;$$9317 = $$0308414;$323 = $321;
     label = 144;
    }
   }
   else if ((label|0) == 143) {
    $$old4 = ($$0290416|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$9317 = $$8316;$323 = $325;
     label = 144;
    } else {
     $$10318 = $$8316;$$2 = $$0270;$$2292 = $$0290416;$318 = $325;
    }
   }
   if ((label|0) == 144) {
    $$10318 = $$9317;$$2 = $$1271;$$2292 = -1;$318 = $323;
   }
   $317 = ($$2|0)==(0);
   if ($317) {
    $$3293 = $$2292;
   } else {
    _free($$10318);
    _free($318);
    $$3293 = $$2292;
   }
  }
 } while(0);
 $319 = ($320|0)==(0);
 if (!($319)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3293|0);
}
function _arg_n_350($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int_351($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$03952 = 0, $$03952$pn = 0, $$04051 = 0, $$04350 = 0, $$2 = 0, $$lcssa = 0, $$lcssa56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $spec$select = $5 ? 69428 : $3;
 $6 = HEAP32[$spec$select>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 19;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $spec$select47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$spec$select47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_449()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     $22 = HEAP8[$1>>0]|0;
     if ($21) {
      $23 = $22 << 24 >> 24;
      $24 = $23 & 57343;
      HEAP32[$spec$select47>>2] = $24;
      $$0 = 1;
      break;
     }
     $25 = $22&255;
     $26 = (($25) + -194)|0;
     $27 = ($26>>>0)>(50);
     if ($27) {
      label = 19;
      break;
     }
     $28 = ((($1)) + 1|0);
     $29 = (42784 + ($26<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($2) + -1)|0;
     $32 = ($31|0)==(0);
     if ($32) {
      $$2 = $30;
     } else {
      $$03952 = $28;$$04051 = $30;$$04350 = $31;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $33 = HEAP8[$$03952>>0]|0;
      $34 = $33&255;
      $35 = $34 >>> 3;
      $36 = (($35) + -16)|0;
      $37 = $$04051 >> 26;
      $38 = (($35) + ($37))|0;
      $39 = $36 | $38;
      $40 = ($39>>>0)>(7);
      if ($40) {
       label = 19;
       break L1;
      }
      $41 = $$04051 << 6;
      $42 = (($34) + -128)|0;
      $43 = $42 | $41;
      $44 = (($$04350) + -1)|0;
      $45 = ($43|0)<(0);
      if ($45) {
       $$03952$pn = $$03952;$47 = $43;$53 = $44;
       while(1) {
        $56 = ((($$03952$pn)) + 1|0);
        $57 = ($53|0)==(0);
        if ($57) {
         $$2 = $47;
         break L14;
        }
        $49 = HEAP8[$56>>0]|0;
        $58 = $49 & -64;
        $59 = ($58<<24>>24)==(-128);
        if (!($59)) {
         label = 19;
         break L1;
        }
        $46 = $47 << 6;
        $48 = $49&255;
        $50 = (($48) + -128)|0;
        $51 = $50 | $46;
        $52 = (($53) + -1)|0;
        $54 = ($51|0)<(0);
        if ($54) {
         $$03952$pn = $56;$47 = $51;$53 = $52;
        } else {
         $$lcssa = $52;$$lcssa56 = $51;
         break;
        }
       }
      } else {
       $$lcssa = $44;$$lcssa56 = $43;
      }
      HEAP32[$spec$select>>2] = 0;
      HEAP32[$spec$select47>>2] = $$lcssa56;
      $55 = (($2) - ($$lcssa))|0;
      $$0 = $55;
      break L1;
     }
    } while(0);
    HEAP32[$spec$select>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  HEAP32[$spec$select>>2] = 0;
  $60 = (___errno_location()|0);
  HEAP32[$60>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $phitmp = $3&1;
  $4 = $phitmp;
 }
 return ($4|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond124 = 0, $or$cond5 = 0, $or$cond7 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0102 = -149;$$0103 = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 default: {
  $$0111 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0110 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0110 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0110 = 1;
    }
    }
   } while(0);
   $$0104122 = 0;$$1123 = $$0;
   while(1) {
    $26 = $$1123 | 32;
    $27 = (61544 + ($$0104122)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$1$lcssa = $$1123;$trunc = $$0104122;
     break;
    }
    $31 = ($$0104122>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1123;
     }
    } while(0);
    $39 = (($$0104122) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0104122 = $39;$$1123 = $$2;
    } else {
     $$1$lcssa = $$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($trunc>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($trunc|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($trunc|0)==(0);
     L34: do {
      if ($57) {
       $$2106120 = 0;$$3121 = $$1$lcssa;
       while(1) {
        $58 = $$3121 | 32;
        $59 = (61553 + ($$2106120)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3107 = $$2106120;$$5 = $$3121;
         break L34;
        }
        $63 = ($$2106120>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$3>>2]|0;
          $65 = HEAP32[$4>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$3>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3121;
         }
        } while(0);
        $71 = (($$2106120) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2106120 = $71;$$3121 = $$4;
        } else {
         $$3107 = 3;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3107 = $trunc;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3107|0) {
     case 3:  {
      $73 = HEAP32[$3>>2]|0;
      $74 = HEAP32[$4>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$3>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $81 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $81 = $79;
      }
      $80 = ($81|0)==(40);
      if (!($80)) {
       $82 = HEAP32[$4>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0111 = nan;
        break L4;
       }
       $84 = HEAP32[$3>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$3>>2] = $85;
       $$0111 = nan;
       break L4;
      }
      $$4108 = 1;
      while(1) {
       $86 = HEAP32[$3>>2]|0;
       $87 = HEAP32[$4>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$3>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4108) + 1)|0;
       $$4108 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0111 = nan;
       break L4;
      }
      $102 = HEAP32[$4>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$3>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$3>>2] = $105;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0111 = 0.0;
       break L4;
      }
      $107 = ($$4108|0)==(0);
      if ($107) {
       $$0111 = nan;
       break L4;
      }
      $$in = $$4108;
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$3>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$3>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0111 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      if ($118) {
       $119 = HEAP32[$3>>2]|0;
       $120 = HEAP32[$4>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = ((($119)) + 1|0);
        HEAP32[$3>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $127 = $124;
       } else {
        $125 = (___shgetc($0)|0);
        $127 = $125;
       }
       $126 = $127 | 32;
       $128 = ($126|0)==(120);
       if ($128) {
        $129 = (+_hexfloat($0,$$0103,$$0102,$$0110,$2));
        $$0111 = $129;
        break L4;
       }
       $130 = HEAP32[$4>>2]|0;
       $131 = ($130|0)==(0|0);
       if ($131) {
        $$6 = 48;
       } else {
        $132 = HEAP32[$3>>2]|0;
        $133 = ((($132)) + -1|0);
        HEAP32[$3>>2] = $133;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $134 = (+_decfloat($0,$$6,$$0103,$$0102,$$0110,$2));
      $$0111 = $134;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$4>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$3>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$3>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0111 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($trunc>>>0)>(3);
    $or$cond124 = $48 & $49;
    if ($or$cond124) {
     $$1105118 = $trunc;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1105118) + -1)|0;
      $53 = ($52>>>0)>(3);
      if ($53) {
       $$1105118 = $52;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0110|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0111 = $56;
  }
 } while(0);
 return (+$$0111);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170 = 0, $$0170173 = 0, $$0170174 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0;
 var $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5 = 0.0;
 var $$5168 = 0, $$6 = 0, $$pn = 0.0, $$pre = 0, $$pre$phi204Z2D = 0.0, $$pre203 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
 var $not$ = 0, $or$cond = 0, $or$cond172 = 0, $or$cond4 = 0, $or$cond6 = 0, $spec$select175 = 0.0, $spec$select176 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0$ph = $12;
 } else {
  $13 = (___shgetc($0)|0);
  $$0$ph = $13;
 }
 $$0 = $$0$ph;$$0143 = 0;
 L5: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$1149$ph = 0;$$3$ph = $$0;$$3146$ph = $$0143;$212 = 0;$213 = 0;
   break L5;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0$be = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $$0$be = $20;
  }
  $$0 = $$0$be;$$0143 = 1;
 }
 if ((label|0) == 10) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $29 = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $29 = $27;
  }
  $28 = ($29|0)==(48);
  if ($28) {
   $37 = 0;$38 = 0;
   while(1) {
    $30 = HEAP32[$5>>2]|0;
    $31 = HEAP32[$7>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = ((($30)) + 1|0);
     HEAP32[$5>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     $35 = $34&255;
     $42 = $35;
    } else {
     $36 = (___shgetc($0)|0);
     $42 = $36;
    }
    $39 = (_i64Add(($37|0),($38|0),-1,-1)|0);
    $40 = (getTempRet0() | 0);
    $41 = ($42|0)==(48);
    if ($41) {
     $37 = $39;$38 = $40;
    } else {
     $$1149$ph = 1;$$3$ph = $42;$$3146$ph = 1;$212 = $39;$213 = $40;
     break;
    }
   }
  } else {
   $$1149$ph = 1;$$3$ph = $29;$$3146$ph = $$0143;$212 = 0;$213 = 0;
  }
 }
 $$0151 = 0;$$0155 = 1.0;$$0158 = 0.0;$$0163 = 0;$$1149 = $$1149$ph;$$3 = $$3$ph;$$3146 = $$3146$ph;$52 = 0;$54 = 0;$97 = $212;$99 = $213;
 while(1) {
  $43 = (($$3) + -48)|0;
  $44 = ($43>>>0)<(10);
  $$pre = $$3 | 32;
  if ($44) {
   label = 24;
  } else {
   $45 = (($$pre) + -97)|0;
   $46 = ($45>>>0)<(6);
   $47 = ($$3|0)==(46);
   $or$cond6 = $47 | $46;
   if (!($or$cond6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($47) {
    $48 = ($$1149|0)==(0);
    if ($48) {
     $$2150 = 1;$$2153 = $$0151;$$2157 = $$0155;$$2160 = $$0158;$$2165 = $$0163;$$4147 = $$3146;$214 = $54;$215 = $52;$216 = $54;$217 = $52;
    } else {
     $$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $49 = ($$3|0)>(57);
   $50 = (($$pre) + -87)|0;
   $$0133 = $49 ? $50 : $43;
   $51 = ($52|0)<(0);
   $53 = ($54>>>0)<(8);
   $55 = ($52|0)==(0);
   $56 = $55 & $53;
   $57 = $51 | $56;
   do {
    if ($57) {
     $58 = $$0163 << 4;
     $59 = (($$0133) + ($58))|0;
     $$1152 = $$0151;$$1156 = $$0155;$$1159 = $$0158;$$1164 = $59;
    } else {
     $60 = ($52|0)<(0);
     $61 = ($54>>>0)<(14);
     $62 = ($52|0)==(0);
     $63 = $62 & $61;
     $64 = $60 | $63;
     if ($64) {
      $65 = (+($$0133|0));
      $66 = $$0155 * 0.0625;
      $67 = $66 * $65;
      $68 = $$0158 + $67;
      $$1152 = $$0151;$$1156 = $66;$$1159 = $68;$$1164 = $$0163;
      break;
     } else {
      $69 = ($$0133|0)==(0);
      $70 = ($$0151|0)!=(0);
      $or$cond = $70 | $69;
      $71 = $$0155 * 0.5;
      $72 = $$0158 + $71;
      $spec$select175 = $or$cond ? $$0158 : $72;
      $spec$select176 = $or$cond ? $$0151 : 1;
      $$1152 = $spec$select176;$$1156 = $$0155;$$1159 = $spec$select175;$$1164 = $$0163;
      break;
     }
    }
   } while(0);
   $73 = (_i64Add(($54|0),($52|0),1,0)|0);
   $74 = (getTempRet0() | 0);
   $$2150 = $$1149;$$2153 = $$1152;$$2157 = $$1156;$$2160 = $$1159;$$2165 = $$1164;$$4147 = 1;$214 = $97;$215 = $99;$216 = $73;$217 = $74;
  }
  $75 = HEAP32[$5>>2]|0;
  $76 = HEAP32[$7>>2]|0;
  $77 = ($75>>>0)<($76>>>0);
  if ($77) {
   $78 = ((($75)) + 1|0);
   HEAP32[$5>>2] = $78;
   $79 = HEAP8[$75>>0]|0;
   $80 = $79&255;
   $$3$be = $80;
  } else {
   $81 = (___shgetc($0)|0);
   $$3$be = $81;
  }
  $$0151 = $$2153;$$0155 = $$2157;$$0158 = $$2160;$$0163 = $$2165;$$1149 = $$2150;$$3 = $$3$be;$$3146 = $$4147;$52 = $217;$54 = $216;$97 = $214;$99 = $215;
 }
 $82 = ($$3146|0)==(0);
 do {
  if ($82) {
   $83 = HEAP32[$7>>2]|0;
   $84 = ($83|0)==(0|0);
   if (!($84)) {
    $85 = HEAP32[$5>>2]|0;
    $86 = ((($85)) + -1|0);
    HEAP32[$5>>2] = $86;
   }
   $87 = ($4|0)==(0);
   if ($87) {
    ___shlim($0,0);
   } else {
    if (!($84)) {
     $88 = HEAP32[$5>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$5>>2] = $89;
     $90 = ($$1149|0)==(0);
     $brmerge = $90 | $84;
     if (!($brmerge)) {
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + -1|0);
      HEAP32[$5>>2] = $92;
     }
    }
   }
   $93 = (+($3|0));
   $94 = $93 * 0.0;
   $$0169 = $94;
  } else {
   $95 = ($$1149|0)==(0);
   $96 = $95 ? $54 : $97;
   $98 = $95 ? $52 : $99;
   $100 = ($52|0)<(0);
   $101 = ($54>>>0)<(8);
   $102 = ($52|0)==(0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $$3166185 = $$0163;$106 = $54;$107 = $52;
    while(1) {
     $105 = $$3166185 << 4;
     $108 = (_i64Add(($106|0),($107|0),1,0)|0);
     $109 = (getTempRet0() | 0);
     $110 = ($107|0)<(0);
     $111 = ($106>>>0)<(7);
     $112 = ($107|0)==(0);
     $113 = $112 & $111;
     $114 = $110 | $113;
     if ($114) {
      $$3166185 = $105;$106 = $108;$107 = $109;
     } else {
      $$3166$lcssa = $105;
      break;
     }
    }
   } else {
    $$3166$lcssa = $$0163;
   }
   $115 = $$3$lcssa | 32;
   $116 = ($115|0)==(112);
   if ($116) {
    $117 = (_scanexp($0,$4)|0);
    $118 = (getTempRet0() | 0);
    $119 = ($117|0)==(0);
    $120 = ($118|0)==(-2147483648);
    $121 = $119 & $120;
    if ($121) {
     $122 = ($4|0)==(0);
     if ($122) {
      ___shlim($0,0);
      $$0169 = 0.0;
      break;
     }
     $123 = HEAP32[$7>>2]|0;
     $124 = ($123|0)==(0|0);
     if ($124) {
      $135 = 0;$136 = 0;
     } else {
      $125 = HEAP32[$5>>2]|0;
      $126 = ((($125)) + -1|0);
      HEAP32[$5>>2] = $126;
      $135 = 0;$136 = 0;
     }
    } else {
     $135 = $117;$136 = $118;
    }
   } else {
    $127 = HEAP32[$7>>2]|0;
    $128 = ($127|0)==(0|0);
    if ($128) {
     $135 = 0;$136 = 0;
    } else {
     $129 = HEAP32[$5>>2]|0;
     $130 = ((($129)) + -1|0);
     HEAP32[$5>>2] = $130;
     $135 = 0;$136 = 0;
    }
   }
   $131 = (_bitshift64Shl(($96|0),($98|0),2)|0);
   $132 = (getTempRet0() | 0);
   $133 = (_i64Add(($131|0),($132|0),-32,-1)|0);
   $134 = (getTempRet0() | 0);
   $137 = (_i64Add(($133|0),($134|0),($135|0),($136|0))|0);
   $138 = (getTempRet0() | 0);
   $139 = ($$3166$lcssa|0)==(0);
   if ($139) {
    $140 = (+($3|0));
    $141 = $140 * 0.0;
    $$0169 = $141;
    break;
   }
   $142 = (0 - ($2))|0;
   $143 = ($142|0)<(0);
   $144 = $143 << 31 >> 31;
   $145 = ($138|0)>($144|0);
   $146 = ($137>>>0)>($142>>>0);
   $147 = ($138|0)==($144|0);
   $148 = $147 & $146;
   $149 = $145 | $148;
   if ($149) {
    $150 = (___errno_location()|0);
    HEAP32[$150>>2] = 34;
    $151 = (+($3|0));
    $152 = $151 * 1.7976931348623157E+308;
    $153 = $152 * 1.7976931348623157E+308;
    $$0169 = $153;
    break;
   }
   $154 = (($2) + -106)|0;
   $155 = ($154|0)<(0);
   $156 = $155 << 31 >> 31;
   $157 = ($138|0)<($156|0);
   $158 = ($137>>>0)<($154>>>0);
   $159 = ($138|0)==($156|0);
   $160 = $159 & $158;
   $161 = $157 | $160;
   if ($161) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0169 = $165;
    break;
   }
   $166 = ($$3166$lcssa|0)>(-1);
   if ($166) {
    $$3161181 = $$0158;$$4167180 = $$3166$lcssa;$171 = $137;$172 = $138;
    while(1) {
     $167 = !($$3161181 >= 0.5);
     $168 = $$4167180 << 1;
     $169 = $$3161181 + -1.0;
     $not$ = $167 ^ 1;
     $170 = $not$&1;
     $$5168 = $168 | $170;
     $$pn = $167 ? $$3161181 : $169;
     $$4162 = $$3161181 + $$pn;
     $173 = (_i64Add(($171|0),($172|0),-1,-1)|0);
     $174 = (getTempRet0() | 0);
     $175 = ($$5168|0)>(-1);
     if ($175) {
      $$3161181 = $$4162;$$4167180 = $$5168;$171 = $173;$172 = $174;
     } else {
      $$3161$lcssa = $$4162;$$4167$lcssa = $$5168;$182 = $173;$183 = $174;
      break;
     }
    }
   } else {
    $$3161$lcssa = $$0158;$$4167$lcssa = $$3166$lcssa;$182 = $137;$183 = $138;
   }
   $176 = ($1|0)<(0);
   $177 = $176 << 31 >> 31;
   $178 = ($2|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = (_i64Subtract(32,0,($2|0),($179|0))|0);
   $181 = (getTempRet0() | 0);
   $184 = (_i64Add(($180|0),($181|0),($182|0),($183|0))|0);
   $185 = (getTempRet0() | 0);
   $186 = ($185|0)<($177|0);
   $187 = ($184>>>0)<($1>>>0);
   $188 = ($185|0)==($177|0);
   $189 = $188 & $187;
   $190 = $186 | $189;
   if ($190) {
    $191 = ($184|0)>(0);
    if ($191) {
     $$0170 = $184;
     label = 65;
    } else {
     $$0170174 = 0;$195 = 84;
     label = 67;
    }
   } else {
    $$0170 = $1;
    label = 65;
   }
   if ((label|0) == 65) {
    $192 = ($$0170|0)<(53);
    $193 = (84 - ($$0170))|0;
    if ($192) {
     $$0170174 = $$0170;$195 = $193;
     label = 67;
    } else {
     $$pre203 = (+($3|0));
     $$0154 = 0.0;$$0170173 = $$0170;$$pre$phi204Z2D = $$pre203;
    }
   }
   if ((label|0) == 67) {
    $194 = (+($3|0));
    $196 = (+_scalbn(1.0,$195));
    $197 = (+_copysignl($196,$194));
    $$0154 = $197;$$0170173 = $$0170174;$$pre$phi204Z2D = $194;
   }
   $198 = ($$0170173|0)<(32);
   $199 = $$3161$lcssa != 0.0;
   $or$cond4 = $199 & $198;
   $200 = $$4167$lcssa & 1;
   $201 = ($200|0)==(0);
   $or$cond172 = $201 & $or$cond4;
   $202 = $or$cond172&1;
   $$6 = (($$4167$lcssa) + ($202))|0;
   $$5 = $or$cond172 ? 0.0 : $$3161$lcssa;
   $203 = (+($$6>>>0));
   $204 = $$pre$phi204Z2D * $203;
   $205 = $$0154 + $204;
   $206 = $$5 * $$pre$phi204Z2D;
   $207 = $206 + $205;
   $208 = $207 - $$0154;
   $209 = $208 != 0.0;
   if (!($209)) {
    $210 = (___errno_location()|0);
    HEAP32[$210>>2] = 34;
   }
   $211 = (+_scalbnl($208,$182));
   $$0169 = $211;
  }
 } while(0);
 return (+$$0169);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0;
 var $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0;
 var $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2366$v = 0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0;
 var $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0;
 var $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$neg447 = 0, $$neg448 = 0, $$pre = 0, $$promoted = 0, $$sink$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0;
 var $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0;
 var $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond414 = 0, $or$cond416 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond421 = 0, $or$cond559 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select410 = 0, $spec$select411 = 0, $spec$select419 = 0, $spec$select420 = 0, $spec$select439 = 0;
 var $spec$select440 = 0, $spec$select441 = 0, $spec$select442 = 0, $spec$select443 = 0, $spec$store$select = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $7 = (($3) + ($2))|0;
 $8 = (0 - ($7))|0;
 $9 = ((($0)) + 4|0);
 $10 = ((($0)) + 100|0);
 $$0324 = $1;$$0393 = 0;
 L1: while(1) {
  switch ($$0324|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0390 = 0;$$2 = $$0324;$$2395 = $$0393;$375 = 0;$376 = 0;
   break L1;
  }
  }
  $11 = HEAP32[$9>>2]|0;
  $12 = HEAP32[$10>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($11)) + 1|0);
   HEAP32[$9>>2] = $14;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15&255;
   $$0324$be = $16;
  } else {
   $17 = (___shgetc($0)|0);
   $$0324$be = $17;
  }
  $$0324 = $$0324$be;$$0393 = 1;
 }
 if ((label|0) == 7) {
  $18 = HEAP32[$9>>2]|0;
  $19 = HEAP32[$10>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $21 = ((($18)) + 1|0);
   HEAP32[$9>>2] = $21;
   $22 = HEAP8[$18>>0]|0;
   $23 = $22&255;
   $26 = $23;
  } else {
   $24 = (___shgetc($0)|0);
   $26 = $24;
  }
  $25 = ($26|0)==(48);
  if ($25) {
   $27 = 0;$28 = 0;
   while(1) {
    $29 = (_i64Add(($27|0),($28|0),-1,-1)|0);
    $30 = (getTempRet0() | 0);
    $31 = HEAP32[$9>>2]|0;
    $32 = HEAP32[$10>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    if ($33) {
     $34 = ((($31)) + 1|0);
     HEAP32[$9>>2] = $34;
     $35 = HEAP8[$31>>0]|0;
     $36 = $35&255;
     $39 = $36;
    } else {
     $37 = (___shgetc($0)|0);
     $39 = $37;
    }
    $38 = ($39|0)==(48);
    if ($38) {
     $27 = $29;$28 = $30;
    } else {
     $$0390 = 1;$$2 = $39;$$2395 = 1;$375 = $29;$376 = $30;
     break;
    }
   }
  } else {
   $$0390 = 1;$$2 = $26;$$2395 = $$0393;$375 = 0;$376 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $40 = (($$2) + -48)|0;
 $41 = ($40>>>0)<(10);
 $42 = ($$2|0)==(46);
 $43 = $42 | $41;
 L22: do {
  if ($43) {
   $44 = ((($6)) + 496|0);
   $$0336503 = 0;$$0340502 = 0;$$0398499 = 0;$$1391501 = $$0390;$$3396500 = $$2395;$$3504 = $$2;$377 = $42;$378 = $40;$379 = $375;$380 = $376;$47 = 0;$48 = 0;
   L24: while(1) {
    do {
     if ($377) {
      $cond = ($$1391501|0)==(0);
      if ($cond) {
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = 1;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $47;$382 = $48;$383 = $47;$384 = $48;
      } else {
       break L24;
      }
     } else {
      $46 = ($$0340502|0)<(125);
      $49 = (_i64Add(($47|0),($48|0),1,0)|0);
      $50 = (getTempRet0() | 0);
      $51 = ($$3504|0)!=(48);
      if (!($46)) {
       if (!($51)) {
        $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
        break;
       }
       $61 = HEAP32[$44>>2]|0;
       $62 = $61 | 1;
       HEAP32[$44>>2] = $62;
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
       break;
      }
      $spec$select = $51 ? $49 : $$0398499;
      $52 = ($$0336503|0)==(0);
      $53 = (($6) + ($$0340502<<2)|0);
      if ($52) {
       $storemerge446 = $378;
      } else {
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54*10)|0;
       $56 = (($$3504) + -48)|0;
       $57 = (($56) + ($55))|0;
       $storemerge446 = $57;
      }
      HEAP32[$53>>2] = $storemerge446;
      $58 = (($$0336503) + 1)|0;
      $59 = ($58|0)==(9);
      $60 = $59&1;
      $spec$select410 = (($$0340502) + ($60))|0;
      $spec$select411 = $59 ? 0 : $58;
      $$2338 = $spec$select411;$$2342 = $spec$select410;$$2392 = $$1391501;$$2400 = $spec$select;$$4397 = 1;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
     }
    } while(0);
    $63 = HEAP32[$9>>2]|0;
    $64 = HEAP32[$10>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$9>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $71 = $68;
    } else {
     $69 = (___shgetc($0)|0);
     $71 = $69;
    }
    $70 = (($71) + -48)|0;
    $72 = ($70>>>0)<(10);
    $73 = ($71|0)==(46);
    $74 = $73 | $72;
    if ($74) {
     $$0336503 = $$2338;$$0340502 = $$2342;$$0398499 = $$2400;$$1391501 = $$2392;$$3396500 = $$4397;$$3504 = $71;$377 = $73;$378 = $70;$379 = $381;$380 = $382;$47 = $383;$48 = $384;
    } else {
     $$0336$lcssa = $$2338;$$0340$lcssa = $$2342;$$0398$lcssa = $$2400;$$1391$lcssa = $$2392;$$3$lcssa = $71;$$3396$lcssa = $$4397;$77 = $383;$78 = $381;$80 = $384;$81 = $382;
     label = 31;
     break L22;
    }
   }
   $45 = ($$3396500|0)!=(0);
   $$0336455 = $$0336503;$$0340459 = $$0340502;$$0398465 = $$0398499;$385 = $47;$386 = $48;$387 = $379;$388 = $380;$389 = $45;
   label = 39;
  } else {
   $$0336$lcssa = 0;$$0340$lcssa = 0;$$0398$lcssa = 0;$$1391$lcssa = $$0390;$$3$lcssa = $$2;$$3396$lcssa = $$2395;$77 = 0;$78 = $375;$80 = 0;$81 = $376;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $75 = ($$1391$lcssa|0)==(0);
   $76 = $75 ? $77 : $78;
   $79 = $75 ? $80 : $81;
   $82 = ($$3396$lcssa|0)!=(0);
   $83 = $$3$lcssa | 32;
   $84 = ($83|0)==(101);
   $or$cond414 = $82 & $84;
   if (!($or$cond414)) {
    $99 = ($$3$lcssa|0)>(-1);
    if ($99) {
     $$0336455 = $$0336$lcssa;$$0340459 = $$0340$lcssa;$$0398465 = $$0398$lcssa;$385 = $77;$386 = $80;$387 = $76;$388 = $79;$389 = $82;
     label = 39;
     break;
    } else {
     $$0336454 = $$0336$lcssa;$$0340458 = $$0340$lcssa;$$0398464 = $$0398$lcssa;$390 = $77;$391 = $80;$392 = $82;$393 = $76;$394 = $79;
     label = 41;
     break;
    }
   }
   $85 = (_scanexp($0,$5)|0);
   $86 = (getTempRet0() | 0);
   $87 = ($85|0)==(0);
   $88 = ($86|0)==(-2147483648);
   $89 = $87 & $88;
   if ($89) {
    $90 = ($5|0)==(0);
    if ($90) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $91 = HEAP32[$10>>2]|0;
    $92 = ($91|0)==(0|0);
    if ($92) {
     $95 = 0;$96 = 0;
    } else {
     $93 = HEAP32[$9>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$9>>2] = $94;
     $95 = 0;$96 = 0;
    }
   } else {
    $95 = $85;$96 = $86;
   }
   $97 = (_i64Add(($95|0),($96|0),($76|0),($79|0))|0);
   $98 = (getTempRet0() | 0);
   $$0336453 = $$0336$lcssa;$$0340457 = $$0340$lcssa;$$0398463 = $$0398$lcssa;$110 = $97;$111 = $77;$113 = $98;$114 = $80;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $100 = HEAP32[$10>>2]|0;
  $101 = ($100|0)==(0|0);
  if ($101) {
   $$0336454 = $$0336455;$$0340458 = $$0340459;$$0398464 = $$0398465;$390 = $385;$391 = $386;$392 = $389;$393 = $387;$394 = $388;
   label = 41;
  } else {
   $102 = HEAP32[$9>>2]|0;
   $103 = ((($102)) + -1|0);
   HEAP32[$9>>2] = $103;
   if ($389) {
    $$0336453 = $$0336455;$$0340457 = $$0340459;$$0398463 = $$0398465;$110 = $387;$111 = $385;$113 = $388;$114 = $386;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($392) {
   $$0336453 = $$0336454;$$0340457 = $$0340458;$$0398463 = $$0398464;$110 = $393;$111 = $390;$113 = $394;$114 = $391;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $104 = (___errno_location()|0);
   HEAP32[$104>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $105 = HEAP32[$6>>2]|0;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = (+($4|0));
    $108 = $107 * 0.0;
    $$1 = $108;
    break;
   }
   $109 = ($110|0)==($111|0);
   $112 = ($113|0)==($114|0);
   $115 = $109 & $112;
   $116 = ($114|0)<(0);
   $117 = ($111>>>0)<(10);
   $118 = ($114|0)==(0);
   $119 = $118 & $117;
   $120 = $116 | $119;
   $or$cond = $120 & $115;
   if ($or$cond) {
    $121 = ($2|0)>(30);
    $122 = $105 >>> $2;
    $123 = ($122|0)==(0);
    $or$cond416 = $121 | $123;
    if ($or$cond416) {
     $124 = (+($4|0));
     $125 = (+($105>>>0));
     $126 = $124 * $125;
     $$1 = $126;
     break;
    }
   }
   $127 = (($3|0) / -2)&-1;
   $128 = ($127|0)<(0);
   $129 = $128 << 31 >> 31;
   $130 = ($113|0)>($129|0);
   $131 = ($110>>>0)>($127>>>0);
   $132 = ($113|0)==($129|0);
   $133 = $132 & $131;
   $134 = $130 | $133;
   if ($134) {
    $135 = (___errno_location()|0);
    HEAP32[$135>>2] = 34;
    $136 = (+($4|0));
    $137 = $136 * 1.7976931348623157E+308;
    $138 = $137 * 1.7976931348623157E+308;
    $$1 = $138;
    break;
   }
   $139 = (($3) + -106)|0;
   $140 = ($139|0)<(0);
   $141 = $140 << 31 >> 31;
   $142 = ($113|0)<($141|0);
   $143 = ($110>>>0)<($139>>>0);
   $144 = ($113|0)==($141|0);
   $145 = $144 & $143;
   $146 = $142 | $145;
   if ($146) {
    $147 = (___errno_location()|0);
    HEAP32[$147>>2] = 34;
    $148 = (+($4|0));
    $149 = $148 * 2.2250738585072014E-308;
    $150 = $149 * 2.2250738585072014E-308;
    $$1 = $150;
    break;
   }
   $151 = ($$0336453|0)==(0);
   if ($151) {
    $$3343 = $$0340457;
   } else {
    $152 = ($$0336453|0)<(9);
    if ($152) {
     $153 = (($6) + ($$0340457<<2)|0);
     $$promoted = HEAP32[$153>>2]|0;
     $$3339493 = $$0336453;$155 = $$promoted;
     while(1) {
      $154 = ($155*10)|0;
      $156 = (($$3339493) + 1)|0;
      $157 = ($$3339493|0)<(8);
      if ($157) {
       $$3339493 = $156;$155 = $154;
      } else {
       break;
      }
     }
     HEAP32[$153>>2] = $154;
    }
    $158 = (($$0340457) + 1)|0;
    $$3343 = $158;
   }
   $159 = ($$0398463|0)<(9);
   if ($159) {
    $160 = ($$0398463|0)<=($110|0);
    $161 = ($110|0)<(18);
    $or$cond3 = $160 & $161;
    if ($or$cond3) {
     $162 = ($110|0)==(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $$1 = $166;
      break;
     }
     $167 = ($110|0)<(9);
     if ($167) {
      $168 = (+($4|0));
      $169 = HEAP32[$6>>2]|0;
      $170 = (+($169>>>0));
      $171 = $168 * $170;
      $172 = (8 - ($110))|0;
      $173 = (45680 + ($172<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (+($174|0));
      $176 = $171 / $175;
      $$1 = $176;
      break;
     }
     $$neg447 = Math_imul($110, -3)|0;
     $$neg448 = (($2) + 27)|0;
     $177 = (($$neg448) + ($$neg447))|0;
     $178 = ($177|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $179 = $$pre >>> $177;
     $180 = ($179|0)==(0);
     $or$cond559 = $178 | $180;
     if ($or$cond559) {
      $181 = (+($4|0));
      $182 = (+($$pre>>>0));
      $183 = $181 * $182;
      $184 = (($110) + -10)|0;
      $185 = (45680 + ($184<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (+($186|0));
      $188 = $183 * $187;
      $$1 = $188;
      break;
     }
    }
   }
   $189 = (($110|0) % 9)&-1;
   $190 = ($189|0)==(0);
   if ($190) {
    $$2369$ph = $$3343;$$3348$ph = 0;$$3384$ph = $110;
   } else {
    $191 = ($110|0)>(-1);
    $192 = (($189) + 9)|0;
    $193 = $191 ? $189 : $192;
    $194 = (8 - ($193))|0;
    $195 = (45680 + ($194<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($$3343|0)==(0);
    if ($197) {
     $$0345$lcssa540 = 0;$$0367 = 0;$$0381$lcssa539 = $110;
    } else {
     $198 = (1000000000 / ($196|0))&-1;
     $$0335486 = 0;$$0345484 = 0;$$0381483 = $110;$$4344485 = 0;
     while(1) {
      $199 = (($6) + ($$4344485<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200>>>0) / ($196>>>0))&-1;
      $202 = Math_imul($201, $196)|0;
      $203 = (($200) - ($202))|0;
      $204 = (($201) + ($$0335486))|0;
      HEAP32[$199>>2] = $204;
      $205 = Math_imul($198, $203)|0;
      $206 = ($$4344485|0)==($$0345484|0);
      $207 = ($204|0)==(0);
      $or$cond417 = $206 & $207;
      $208 = (($$0345484) + 1)|0;
      $209 = $208 & 127;
      $210 = (($$0381483) + -9)|0;
      $spec$select439 = $or$cond417 ? $210 : $$0381483;
      $spec$select440 = $or$cond417 ? $209 : $$0345484;
      $211 = (($$4344485) + 1)|0;
      $212 = ($211|0)==($$3343|0);
      if ($212) {
       break;
      } else {
       $$0335486 = $205;$$0345484 = $spec$select440;$$0381483 = $spec$select439;$$4344485 = $211;
      }
     }
     $213 = ($205|0)==(0);
     if ($213) {
      $$0345$lcssa540 = $spec$select440;$$0367 = $$3343;$$0381$lcssa539 = $spec$select439;
     } else {
      $214 = (($6) + ($$3343<<2)|0);
      $215 = (($$3343) + 1)|0;
      HEAP32[$214>>2] = $205;
      $$0345$lcssa540 = $spec$select440;$$0367 = $215;$$0381$lcssa539 = $spec$select439;
     }
    }
    $216 = (9 - ($193))|0;
    $217 = (($216) + ($$0381$lcssa539))|0;
    $$2369$ph = $$0367;$$3348$ph = $$0345$lcssa540;$$3384$ph = $217;
   }
   $$0376$ph = 0;$$2369$ph579 = $$2369$ph;$$3348$ph580 = $$3348$ph;$$3384$ph578 = $$3384$ph;
   L104: while(1) {
    $218 = ($$3384$ph578|0)<(18);
    $219 = ($$3384$ph578|0)==(18);
    $220 = (($6) + ($$3348$ph580<<2)|0);
    $$0376 = $$0376$ph;$$2369 = $$2369$ph579;
    while(1) {
     if (!($218)) {
      if (!($219)) {
       $$5386$ph = $$3384$ph578;
       break L104;
      }
      $221 = HEAP32[$220>>2]|0;
      $222 = ($221>>>0)<(9007199);
      if (!($222)) {
       $$5386$ph = 18;
       break L104;
      }
     }
     $223 = (($$2369) + 127)|0;
     $$0329 = 0;$$3370 = $$2369;$$5$in = $223;
     while(1) {
      $$5 = $$5$in & 127;
      $224 = (($6) + ($$5<<2)|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (_bitshift64Shl(($225|0),0,29)|0);
      $227 = (getTempRet0() | 0);
      $228 = (_i64Add(($226|0),($227|0),($$0329|0),0)|0);
      $229 = (getTempRet0() | 0);
      $230 = ($229>>>0)>(0);
      $231 = ($228>>>0)>(1000000000);
      $232 = ($229|0)==(0);
      $233 = $232 & $231;
      $234 = $230 | $233;
      if ($234) {
       $235 = (___udivdi3(($228|0),($229|0),1000000000,0)|0);
       $236 = (getTempRet0() | 0);
       $237 = (___muldi3(($235|0),($236|0),1000000000,0)|0);
       $238 = (getTempRet0() | 0);
       $239 = (_i64Subtract(($228|0),($229|0),($237|0),($238|0))|0);
       $240 = (getTempRet0() | 0);
       $$1330 = $235;$$sink$off0 = $239;
      } else {
       $$1330 = 0;$$sink$off0 = $228;
      }
      HEAP32[$224>>2] = $$sink$off0;
      $241 = (($$3370) + 127)|0;
      $242 = $241 & 127;
      $243 = ($$5|0)!=($242|0);
      $244 = ($$5|0)==($$3348$ph580|0);
      $or$cond418 = $243 | $244;
      $245 = ($$sink$off0|0)==(0);
      $spec$select419 = $245 ? $$5 : $$3370;
      $spec$select441 = $or$cond418 ? $$3370 : $spec$select419;
      $246 = (($$5) + -1)|0;
      if ($244) {
       break;
      } else {
       $$0329 = $$1330;$$3370 = $spec$select441;$$5$in = $246;
      }
     }
     $247 = (($$0376) + -29)|0;
     $248 = ($$1330|0)==(0);
     if ($248) {
      $$0376 = $247;$$2369 = $$3370;
     } else {
      break;
     }
    }
    $249 = (($$3384$ph578) + 9)|0;
    $250 = (($$3348$ph580) + 127)|0;
    $251 = $250 & 127;
    $252 = ($251|0)==($spec$select441|0);
    $253 = (($spec$select441) + 127)|0;
    $254 = $253 & 127;
    $255 = (($spec$select441) + 126)|0;
    $256 = $255 & 127;
    $257 = (($6) + ($256<<2)|0);
    if ($252) {
     $258 = (($6) + ($254<<2)|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = HEAP32[$257>>2]|0;
     $261 = $260 | $259;
     HEAP32[$257>>2] = $261;
     $$5372 = $254;
    } else {
     $$5372 = $$3370;
    }
    $262 = (($6) + ($251<<2)|0);
    HEAP32[$262>>2] = $$1330;
    $$0376$ph = $247;$$2369$ph579 = $$5372;$$3348$ph580 = $251;$$3384$ph578 = $249;
   }
   $$1377$ph$ph = $$0376;$$5350$ph$ph = $$3348$ph580;$$5386$ph576$ph = $$5386$ph;$$7374$ph$ph = $$2369;
   L123: while(1) {
    $299 = (($$7374$ph$ph) + 1)|0;
    $297 = $299 & 127;
    $300 = (($$7374$ph$ph) + 127)|0;
    $301 = $300 & 127;
    $302 = (($6) + ($301<<2)|0);
    $$1377$ph = $$1377$ph$ph;$$5350$ph = $$5350$ph$ph;$$5386$ph576 = $$5386$ph576$ph;
    while(1) {
     $294 = ($$5386$ph576|0)==(18);
     $295 = ($$5386$ph576|0)>(27);
     $spec$select420 = $295 ? 9 : 1;
     $$1377 = $$1377$ph;$$5350 = $$5350$ph;
     while(1) {
      $$0331476 = 0;
      while(1) {
       $263 = (($$0331476) + ($$5350))|0;
       $264 = $263 & 127;
       $265 = ($264|0)==($$7374$ph$ph|0);
       if ($265) {
        label = 92;
        break;
       }
       $266 = (($6) + ($264<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (53308 + ($$0331476<<2)|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($267>>>0)<($269>>>0);
       if ($270) {
        label = 92;
        break;
       }
       $271 = ($267>>>0)>($269>>>0);
       if ($271) {
        break;
       }
       $272 = (($$0331476) + 1)|0;
       $273 = ($272>>>0)<(2);
       if ($273) {
        $$0331476 = 1;
       } else {
        label = 92;
        break;
       }
      }
      if ((label|0) == 92) {
       label = 0;
       if ($294) {
        break L123;
       }
      }
      $274 = (($spec$select420) + ($$1377))|0;
      $275 = ($$5350|0)==($$7374$ph$ph|0);
      if ($275) {
       $$1377 = $274;$$5350 = $$7374$ph$ph;
      } else {
       break;
      }
     }
     $276 = 1 << $spec$select420;
     $277 = (($276) + -1)|0;
     $278 = 1000000000 >>> $spec$select420;
     $$0327480 = 0;$$6351478 = $$5350;$$6387477 = $$5386$ph576;$$6479 = $$5350;
     while(1) {
      $279 = (($6) + ($$6479<<2)|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = $280 & $277;
      $282 = $280 >>> $spec$select420;
      $283 = (($282) + ($$0327480))|0;
      HEAP32[$279>>2] = $283;
      $284 = Math_imul($281, $278)|0;
      $285 = ($$6479|0)==($$6351478|0);
      $286 = ($283|0)==(0);
      $or$cond421 = $285 & $286;
      $287 = (($$6351478) + 1)|0;
      $288 = $287 & 127;
      $289 = (($$6387477) + -9)|0;
      $spec$select442 = $or$cond421 ? $289 : $$6387477;
      $spec$select443 = $or$cond421 ? $288 : $$6351478;
      $290 = (($$6479) + 1)|0;
      $291 = $290 & 127;
      $292 = ($291|0)==($$7374$ph$ph|0);
      if ($292) {
       break;
      } else {
       $$0327480 = $284;$$6351478 = $spec$select443;$$6387477 = $spec$select442;$$6479 = $291;
      }
     }
     $293 = ($284|0)==(0);
     if (!($293)) {
      $296 = ($297|0)==($spec$select443|0);
      if (!($296)) {
       break;
      }
      $303 = HEAP32[$302>>2]|0;
      $304 = $303 | 1;
      HEAP32[$302>>2] = $304;
     }
     $$1377$ph = $274;$$5350$ph = $spec$select443;$$5386$ph576 = $spec$select442;
    }
    $298 = (($6) + ($$7374$ph$ph<<2)|0);
    HEAP32[$298>>2] = $284;
    $$1377$ph$ph = $274;$$5350$ph$ph = $spec$select443;$$5386$ph576$ph = $spec$select442;$$7374$ph$ph = $297;
   }
   $$0360474 = 0.0;$$10473 = $$7374$ph$ph;$$4475 = 0;
   while(1) {
    $305 = (($$4475) + ($$5350))|0;
    $306 = $305 & 127;
    $307 = ($306|0)==($$10473|0);
    $308 = (($$10473) + 1)|0;
    $309 = $308 & 127;
    if ($307) {
     $310 = (($309) + -1)|0;
     $311 = (($6) + ($310<<2)|0);
     HEAP32[$311>>2] = 0;
     $$11 = $309;
    } else {
     $$11 = $$10473;
    }
    $312 = $$0360474 * 1.0E+9;
    $313 = (($6) + ($306<<2)|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = (+($314>>>0));
    $316 = $312 + $315;
    $317 = (($$4475) + 1)|0;
    $exitcond = ($317|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0360474 = $316;$$10473 = $$11;$$4475 = $317;
    }
   }
   $318 = (+($4|0));
   $319 = $316 * $318;
   $320 = (($$1377) + 53)|0;
   $321 = (($320) - ($3))|0;
   $322 = ($321|0)<($2|0);
   $323 = ($321|0)>(0);
   $spec$store$select = $323 ? $321 : 0;
   $$0328 = $322 ? $spec$store$select : $2;
   $324 = ($$0328|0)<(53);
   if ($324) {
    $325 = (105 - ($$0328))|0;
    $326 = (+_scalbn(1.0,$325));
    $327 = (+_copysignl($326,$319));
    $328 = (53 - ($$0328))|0;
    $329 = (+_scalbn(1.0,$328));
    $330 = (+_fmodl($319,$329));
    $331 = $319 - $330;
    $332 = $327 + $331;
    $$0355 = $327;$$0356 = $330;$$1361 = $332;
   } else {
    $$0355 = 0.0;$$0356 = 0.0;$$1361 = $319;
   }
   $333 = (($$5350) + 2)|0;
   $334 = $333 & 127;
   $335 = ($334|0)==($$11|0);
   if ($335) {
    $$3359 = $$0356;
   } else {
    $336 = (($6) + ($334<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($337>>>0)<(500000000);
    do {
     if ($338) {
      $339 = ($337|0)==(0);
      if ($339) {
       $340 = (($$5350) + 3)|0;
       $341 = $340 & 127;
       $342 = ($341|0)==($$11|0);
       if ($342) {
        $$1357 = $$0356;
        break;
       }
      }
      $343 = $318 * 0.25;
      $344 = $343 + $$0356;
      $$1357 = $344;
     } else {
      $345 = ($337|0)==(500000000);
      if (!($345)) {
       $346 = $318 * 0.75;
       $347 = $346 + $$0356;
       $$1357 = $347;
       break;
      }
      $348 = (($$5350) + 3)|0;
      $349 = $348 & 127;
      $350 = ($349|0)==($$11|0);
      if ($350) {
       $351 = $318 * 0.5;
       $352 = $351 + $$0356;
       $$1357 = $352;
       break;
      } else {
       $353 = $318 * 0.75;
       $354 = $353 + $$0356;
       $$1357 = $354;
       break;
      }
     }
    } while(0);
    $355 = (53 - ($$0328))|0;
    $356 = ($355|0)>(1);
    if ($356) {
     $357 = (+_fmodl($$1357,1.0));
     $358 = $357 != 0.0;
     if ($358) {
      $$3359 = $$1357;
     } else {
      $359 = $$1357 + 1.0;
      $$3359 = $359;
     }
    } else {
     $$3359 = $$1357;
    }
   }
   $360 = $$1361 + $$3359;
   $361 = $360 - $$0355;
   $362 = $320 & 2147483647;
   $363 = (-2 - ($7))|0;
   $364 = ($362|0)>($363|0);
   do {
    if ($364) {
     $365 = (+Math_abs((+$361)));
     $366 = !($365 >= 9007199254740992.0);
     $367 = $361 * 0.5;
     $not$ = $366 ^ 1;
     $368 = $not$&1;
     $$3379 = (($$1377) + ($368))|0;
     $$2362 = $366 ? $361 : $367;
     $369 = (($$3379) + 50)|0;
     $370 = ($369|0)>($8|0);
     if (!($370)) {
      $371 = ($$0328|0)!=($321|0);
      $narrow = $371 | $366;
      $$2366$v = $322 & $narrow;
      $372 = $$3359 != 0.0;
      $or$cond9 = $372 & $$2366$v;
      if (!($or$cond9)) {
       $$3363 = $$2362;$$4380 = $$3379;
       break;
      }
     }
     $373 = (___errno_location()|0);
     HEAP32[$373>>2] = 34;
     $$3363 = $$2362;$$4380 = $$3379;
    } else {
     $$3363 = $361;$$4380 = $$1377;
    }
   } while(0);
   $374 = (+_scalbnl($$3363,$$4380));
   $$1 = $374;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04858 = 0, $$049 = 0, $$157 = 0, $$251 = 0, $$pr = 0, $$pre = 0, $$pre$phi69Z2D = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $100 = 0;$99 = -2147483648;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    label = 14;
   }
  } else {
   $$0 = $13;$$049 = $22;$$pre$phi69Z2D = $21;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($11) + -48)|0;
  $$0 = 0;$$049 = $11;$$pre$phi69Z2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $29 = ($$pre$phi69Z2D>>>0)>(9);
  if ($29) {
   label = 14;
  } else {
   $$04858 = 0;$$157 = $$049;
   while(1) {
    $33 = ($$04858*10)|0;
    $34 = (($$157) + -48)|0;
    $35 = (($34) + ($33))|0;
    $36 = HEAP32[$2>>2]|0;
    $37 = HEAP32[$4>>2]|0;
    $38 = ($36>>>0)<($37>>>0);
    if ($38) {
     $39 = ((($36)) + 1|0);
     HEAP32[$2>>2] = $39;
     $40 = HEAP8[$36>>0]|0;
     $41 = $40&255;
     $44 = $41;
    } else {
     $42 = (___shgetc($0)|0);
     $44 = $42;
    }
    $43 = (($44) + -48)|0;
    $45 = ($43>>>0)<(10);
    $46 = ($35|0)<(214748364);
    $47 = $45 & $46;
    if ($47) {
     $$04858 = $35;$$157 = $44;
    } else {
     break;
    }
   }
   $48 = ($35|0)<(0);
   $49 = $48 << 31 >> 31;
   $50 = ($43>>>0)<(10);
   if ($50) {
    $$251 = $44;$51 = $35;$52 = $49;
    while(1) {
     $53 = (___muldi3(($51|0),($52|0),10,0)|0);
     $54 = (getTempRet0() | 0);
     $55 = ($$251|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = (_i64Add(($$251|0),($56|0),-48,-1)|0);
     $58 = (getTempRet0() | 0);
     $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
     $60 = (getTempRet0() | 0);
     $61 = HEAP32[$2>>2]|0;
     $62 = HEAP32[$4>>2]|0;
     $63 = ($61>>>0)<($62>>>0);
     if ($63) {
      $64 = ((($61)) + 1|0);
      HEAP32[$2>>2] = $64;
      $65 = HEAP8[$61>>0]|0;
      $66 = $65&255;
      $69 = $66;
     } else {
      $67 = (___shgetc($0)|0);
      $69 = $67;
     }
     $68 = (($69) + -48)|0;
     $70 = ($68>>>0)<(10);
     $71 = ($60|0)<(21474836);
     $72 = ($59>>>0)<(2061584302);
     $73 = ($60|0)==(21474836);
     $74 = $73 & $72;
     $75 = $71 | $74;
     $76 = $70 & $75;
     if ($76) {
      $$251 = $69;$51 = $59;$52 = $60;
     } else {
      break;
     }
    }
    $77 = ($68>>>0)<(10);
    if ($77) {
     while(1) {
      $78 = HEAP32[$2>>2]|0;
      $79 = HEAP32[$4>>2]|0;
      $80 = ($78>>>0)<($79>>>0);
      if ($80) {
       $81 = ((($78)) + 1|0);
       HEAP32[$2>>2] = $81;
       $82 = HEAP8[$78>>0]|0;
       $83 = $82&255;
       $86 = $83;
      } else {
       $84 = (___shgetc($0)|0);
       $86 = $84;
      }
      $85 = (($86) + -48)|0;
      $87 = ($85>>>0)<(10);
      if (!($87)) {
       $93 = $59;$94 = $60;
       break;
      }
     }
    } else {
     $93 = $59;$94 = $60;
    }
   } else {
    $93 = $35;$94 = $49;
   }
   $88 = HEAP32[$4>>2]|0;
   $89 = ($88|0)==(0|0);
   if (!($89)) {
    $90 = HEAP32[$2>>2]|0;
    $91 = ((($90)) + -1|0);
    HEAP32[$2>>2] = $91;
   }
   $92 = ($$0|0)==(0);
   $95 = (_i64Subtract(0,0,($93|0),($94|0))|0);
   $96 = (getTempRet0() | 0);
   $97 = $92 ? $93 : $95;
   $98 = $92 ? $94 : $96;
   $100 = $97;$99 = $98;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$4>>2]|0;
  $30 = ($$pr|0)==(0|0);
  if ($30) {
   $100 = 0;$99 = -2147483648;
  } else {
   $31 = HEAP32[$2>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$2>>2] = $32;
   $100 = 0;$99 = -2147483648;
  }
 }
 setTempRet0(($99) | 0);
 return ($100|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $spec$select = 0, $spec$select21 = 0.0, $spec$select22 = 0, $spec$select23 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $spec$store$select = $8 ? $7 : 1023;
  $spec$select = $5 ? $spec$store$select : $4;
  $spec$select21 = $5 ? $6 : $3;
  $$0 = $spec$select21;$$020 = $spec$select;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $spec$store$select1 = $15 ? $14 : -1022;
   $spec$select22 = $12 ? $spec$store$select1 : $11;
   $spec$select23 = $12 ? $13 : $10;
   $$0 = $spec$select23;$$020 = $spec$select22;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = (getTempRet0() | 0);
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = (getTempRet0() | 0);
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_563($1)|0);
   $19 = (getTempRet0() | 0);
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = (getTempRet0() | 0);
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $spec$select = $38 ? $39 : $0;
     return (+$spec$select);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = (getTempRet0() | 0);
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = (getTempRet0() | 0);
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = (getTempRet0() | 0);
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = (getTempRet0() | 0);
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = (getTempRet0() | 0);
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = (getTempRet0() | 0);
     $$172 = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172 = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = (getTempRet0() | 0);
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L25: do {
     if ($86) {
      $$27585 = $$174;$101 = $92;$158 = $97;$159 = $87;$160 = $88;$99 = $91;
      while(1) {
       if ($158) {
        $98 = ($99|0)==(0);
        $100 = ($101|0)==(0);
        $102 = $98 & $100;
        if ($102) {
         break;
        } else {
         $104 = $99;$105 = $101;
        }
       } else {
        $104 = $159;$105 = $160;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = (getTempRet0() | 0);
       $108 = (($$27585) + -1)|0;
       $109 = ($108|0)>($$172|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = (getTempRet0() | 0);
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27585 = $108;$101 = $111;$158 = $116;$159 = $106;$160 = $107;$99 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$118 = $110;$120 = $111;$156 = $106;$157 = $107;
        break L25;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$118 = $91;$120 = $92;$156 = $87;$157 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $117 = ($118|0)==(0);
     $119 = ($120|0)==(0);
     $121 = $117 & $119;
     if ($121) {
      $122 = $0 * 0.0;
      $$070 = $122;
      break;
     } else {
      $124 = $120;$126 = $118;
     }
    } else {
     $124 = $157;$126 = $156;
    }
    $123 = ($124>>>0)<(1048576);
    $125 = ($126>>>0)<(0);
    $127 = ($124|0)==(1048576);
    $128 = $127 & $125;
    $129 = $123 | $128;
    if ($129) {
     $$37682 = $$275$lcssa;$130 = $126;$131 = $124;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = (getTempRet0() | 0);
      $134 = (($$37682) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37682 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $126;$142 = $124;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = (getTempRet0() | 0);
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = (getTempRet0() | 0);
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = (getTempRet0() | 0);
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_563($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function ___pthread_self_449() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $spec$select = $11 ? $$027 : $2;
 (_memcpy(($1|0),($4|0),($spec$select|0))|0);
 $12 = (($4) + ($spec$select)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($spec$select|0);
}
function _vasprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $4 = (_vsnprintf(0,0,$1,$3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  $$0 = -1;
 } else {
  $6 = (($4) + 1)|0;
  $7 = (_malloc($6)|0);
  HEAP32[$0>>2] = $7;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   $9 = (_vsnprintf($7,$6,$1,$2)|0);
   $$0 = $9;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _ungetc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(-1);
 do {
  if ($2) {
   $$1 = -1;
  } else {
   $3 = ((($1)) + 76|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)>(-1);
   if ($5) {
    $6 = (___lockfile($1)|0);
    $17 = $6;
   } else {
    $17 = 0;
   }
   $7 = ((($1)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    (___toread($1)|0);
    $$pr = HEAP32[$7>>2]|0;
    $10 = ($$pr|0)==(0|0);
    if (!($10)) {
     $15 = $$pr;
     label = 6;
    }
   } else {
    $15 = $8;
    label = 6;
   }
   if ((label|0) == 6) {
    $11 = ((($1)) + 44|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($12)) + -8|0);
    $14 = ($15>>>0)>($13>>>0);
    if ($14) {
     $18 = $0&255;
     $19 = ((($15)) + -1|0);
     HEAP32[$7>>2] = $19;
     HEAP8[$19>>0] = $18;
     $20 = HEAP32[$1>>2]|0;
     $21 = $20 & -17;
     HEAP32[$1>>2] = $21;
     $22 = ($17|0)==(0);
     if ($22) {
      $$1 = $0;
      break;
     }
     ___unlockfile($1);
     $$1 = $0;
     break;
    }
   }
   $16 = ($17|0)==(0);
   if ($16) {
    $$1 = -1;
   } else {
    ___unlockfile($1);
    $$1 = -1;
   }
  }
 } while(0);
 return ($$1|0);
}
function _wcsrtombs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$05674 = 0, $$057$lcssa = 0, $$05784 = 0, $$05873 = 0, $$1 = 0, $$159 = 0, $$260$lcssa = 0, $$26083 = 0, $$278 = 0, $$3 = 0, $$361 = 0, $$477 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre100 = 0, $$pre101 = 0, $$pre99 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==(0|0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$1>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    $$05674 = $6;$$05873 = 0;$10 = $7;
    while(1) {
     $9 = ($10>>>0)>(127);
     if ($9) {
      $11 = (_wcrtomb($4,$10,0)|0);
      $12 = ($11|0)==(-1);
      if ($12) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $11;
      }
     } else {
      $$pn = 1;
     }
     $$159 = (($$pn) + ($$05873))|0;
     $13 = ((($$05674)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==(0);
     if ($15) {
      $$0 = $$159;
      break;
     } else {
      $$05674 = $13;$$05873 = $$159;$10 = $14;
     }
    }
   }
  } else {
   $16 = ($2>>>0)>(3);
   L10: do {
    if ($16) {
     $$pre = HEAP32[$1>>2]|0;
     $$05784 = $0;$$26083 = $2;$18 = $$pre;
     while(1) {
      $17 = HEAP32[$18>>2]|0;
      $19 = (($17) + -1)|0;
      $20 = ($19>>>0)>(126);
      if ($20) {
       $21 = ($17|0)==(0);
       if ($21) {
        break;
       }
       $23 = (_wcrtomb($$05784,$17,0)|0);
       $24 = ($23|0)==(-1);
       if ($24) {
        $$0 = -1;
        break L1;
       }
       $25 = (($$05784) + ($23)|0);
       $26 = (($$26083) - ($23))|0;
       $$1 = $25;$$361 = $26;$31 = $18;
      } else {
       $27 = $17&255;
       $28 = ((($$05784)) + 1|0);
       HEAP8[$$05784>>0] = $27;
       $29 = (($$26083) + -1)|0;
       $$pre99 = HEAP32[$1>>2]|0;
       $$1 = $28;$$361 = $29;$31 = $$pre99;
      }
      $30 = ((($31)) + 4|0);
      HEAP32[$1>>2] = $30;
      $32 = ($$361>>>0)>(3);
      if ($32) {
       $$05784 = $$1;$$26083 = $$361;$18 = $30;
      } else {
       $$057$lcssa = $$1;$$260$lcssa = $$361;
       break L10;
      }
     }
     HEAP8[$$05784>>0] = 0;
     HEAP32[$1>>2] = 0;
     $22 = (($2) - ($$26083))|0;
     $$0 = $22;
     break L1;
    } else {
     $$057$lcssa = $0;$$260$lcssa = $2;
    }
   } while(0);
   $33 = ($$260$lcssa|0)==(0);
   if ($33) {
    $$0 = $2;
   } else {
    $$pre100 = HEAP32[$1>>2]|0;
    $$278 = $$057$lcssa;$$477 = $$260$lcssa;$35 = $$pre100;
    while(1) {
     $34 = HEAP32[$35>>2]|0;
     $36 = (($34) + -1)|0;
     $37 = ($36>>>0)>(126);
     if ($37) {
      $38 = ($34|0)==(0);
      if ($38) {
       label = 20;
       break;
      }
      $40 = (_wcrtomb($4,$34,0)|0);
      $41 = ($40|0)==(-1);
      if ($41) {
       $$0 = -1;
       break L1;
      }
      $42 = ($$477>>>0)<($40>>>0);
      if ($42) {
       label = 23;
       break;
      }
      $44 = HEAP32[$35>>2]|0;
      (_wcrtomb($$278,$44,0)|0);
      $45 = (($$278) + ($40)|0);
      $46 = (($$477) - ($40))|0;
      $$3 = $45;$$5 = $46;$51 = $35;
     } else {
      $47 = $34&255;
      $48 = ((($$278)) + 1|0);
      HEAP8[$$278>>0] = $47;
      $49 = (($$477) + -1)|0;
      $$pre101 = HEAP32[$1>>2]|0;
      $$3 = $48;$$5 = $49;$51 = $$pre101;
     }
     $50 = ((($51)) + 4|0);
     HEAP32[$1>>2] = $50;
     $52 = ($$5|0)==(0);
     if ($52) {
      $$0 = $2;
      break L1;
     } else {
      $$278 = $$3;$$477 = $$5;$35 = $50;
     }
    }
    if ((label|0) == 20) {
     HEAP8[$$278>>0] = 0;
     HEAP32[$1>>2] = 0;
     $39 = (($2) - ($$477))|0;
     $$0 = $39;
     break;
    }
    else if ((label|0) == 23) {
     $43 = (($2) - ($$477))|0;
     $$0 = $43;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _mbsnrtowcs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$04975 = 0, $$05374 = 0, $$056 = 0, $$150 = 0, $$154 = 0, $$15773 = 0, $$164 = 0, $$176 = 0, $$2 = 0, $$25170 = 0, $$25569 = 0, $$258 = 0, $$352 = 0, $$359 = 0, $$371 = 0, $$468 = 0, $$cast = 0, $$pr$pre = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond72 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $5 = sp;
 $6 = sp + 1024|0;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$056 = $8 ? $3 : 256;
 $$0 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$056|0)!=(0);
 $or$cond72 = $10 & $9;
 L1: do {
  if ($or$cond72) {
   $$04975 = 0;$$05374 = $2;$$15773 = $$056;$$176 = $$0;$44 = $$cast;
   while(1) {
    $11 = $$05374 >>> 2;
    $12 = ($11>>>0)>=($$15773>>>0);
    $13 = ($$05374>>>0)>(131);
    $14 = $13 | $12;
    if (!($14)) {
     $$150 = $$04975;$$154 = $$05374;$$164 = $$176;$$359 = $$15773;$26 = $44;
     break L1;
    }
    $spec$select = $12 ? $$15773 : $11;
    $15 = (($$05374) - ($spec$select))|0;
    $16 = (_mbsrtowcs($$176,$6,$spec$select,$4)|0);
    $17 = ($16|0)==(-1);
    if ($17) {
     break;
    }
    $18 = ($$176|0)==($5|0);
    $19 = (($$176) + ($16<<2)|0);
    $20 = $18 ? 0 : $16;
    $$258 = (($$15773) - ($20))|0;
    $$2 = $18 ? $$176 : $19;
    $21 = (($16) + ($$04975))|0;
    $22 = HEAP32[$6>>2]|0;
    $23 = ($22|0)!=(0|0);
    $24 = ($$258|0)!=(0);
    $or$cond = $24 & $23;
    if ($or$cond) {
     $$04975 = $21;$$05374 = $15;$$15773 = $$258;$$176 = $$2;$44 = $22;
    } else {
     $$150 = $21;$$154 = $15;$$164 = $$2;$$359 = $$258;$26 = $22;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$150 = -1;$$154 = $15;$$164 = $$176;$$359 = 0;$26 = $$pr$pre;
  } else {
   $$150 = 0;$$154 = $2;$$164 = $$0;$$359 = $$056;$26 = $$cast;
  }
 } while(0);
 $25 = ($26|0)==(0|0);
 L9: do {
  if ($25) {
   $$352 = $$150;
  } else {
   $27 = ($$359|0)!=(0);
   $28 = ($$154|0)!=(0);
   $29 = $27 & $28;
   if ($29) {
    $$25170 = $$150;$$25569 = $$154;$$371 = $$164;$$468 = $$359;$30 = $26;
    while(1) {
     $31 = (_mbrtowc($$371,$30,$$25569,$4)|0);
     $32 = (($31) + 2)|0;
     $33 = ($32>>>0)<(3);
     if ($33) {
      break;
     }
     $34 = HEAP32[$6>>2]|0;
     $35 = (($34) + ($31)|0);
     HEAP32[$6>>2] = $35;
     $36 = (($$25569) - ($31))|0;
     $37 = ((($$371)) + 4|0);
     $38 = (($$468) + -1)|0;
     $39 = (($$25170) + 1)|0;
     $40 = ($38|0)!=(0);
     $41 = ($36|0)!=(0);
     $42 = $40 & $41;
     if ($42) {
      $$25170 = $39;$$25569 = $36;$$371 = $37;$$468 = $38;$30 = $35;
     } else {
      $$352 = $39;
      break L9;
     }
    }
    switch ($31|0) {
    case -1:  {
     $$352 = $31;
     break L9;
     break;
    }
    case 0:  {
     HEAP32[$6>>2] = 0;
     $$352 = $$25170;
     break L9;
     break;
    }
    default: {
     HEAP32[$4>>2] = 0;
     $$352 = $$25170;
     break L9;
    }
    }
   } else {
    $$352 = $$150;
   }
  }
 } while(0);
 if ($8) {
  $43 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $43;
 }
 STACKTOP = sp;return ($$352|0);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox_422($0,$1,1));
 return (+$2);
}
function _strtox_422($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)==(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $0 : $17;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _strtof($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox_422($0,$1,0));
 $3 = $2;
 return (+$3);
}
function _strtold($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox_422($0,$1,2));
 return (+$2);
}
function _strtof_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtof($0,$1));
 return (+$3);
}
function _strtod_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtod($0,$1));
 return (+$3);
}
function _strtold_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtold($0,$1));
 return (+$3);
}
function _mbrlen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 $4 = $3 ? 69432 : $2;
 $5 = (_mbrtowc(0,$0,$1,$4)|0);
 return ($5|0);
}
function _wcsnrtombs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$04773 = 0, $$05172 = 0, $$054 = 0, $$148 = 0, $$152 = 0, $$15571 = 0, $$162 = 0, $$174 = 0, $$2 = 0, $$24968 = 0, $$25367 = 0, $$256 = 0, $$350 = 0, $$357 = 0, $$369 = 0, $$466 = 0, $$cast = 0, $$pr$pre = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond70 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $5 = sp;
 $6 = sp + 256|0;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$054 = $8 ? $3 : 256;
 $$0 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$054|0)!=(0);
 $or$cond70 = $10 & $9;
 L1: do {
  if ($or$cond70) {
   $$04773 = 0;$$05172 = $2;$$15571 = $$054;$$174 = $$0;$45 = $$cast;
   while(1) {
    $11 = ($$05172>>>0)>=($$15571>>>0);
    $12 = ($$05172>>>0)>(32);
    $13 = $11 | $12;
    if (!($13)) {
     $$148 = $$04773;$$152 = $$05172;$$162 = $$174;$$357 = $$15571;$25 = $45;
     break L1;
    }
    $spec$select = $11 ? $$15571 : $$05172;
    $14 = (($$05172) - ($spec$select))|0;
    $15 = (_wcsrtombs($$174,$6,$spec$select,0)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     break;
    }
    $17 = ($$174|0)==($5|0);
    $18 = (($$174) + ($15)|0);
    $19 = $17 ? 0 : $15;
    $$256 = (($$15571) - ($19))|0;
    $$2 = $17 ? $$174 : $18;
    $20 = (($15) + ($$04773))|0;
    $21 = HEAP32[$6>>2]|0;
    $22 = ($21|0)!=(0|0);
    $23 = ($$256|0)!=(0);
    $or$cond = $23 & $22;
    if ($or$cond) {
     $$04773 = $20;$$05172 = $14;$$15571 = $$256;$$174 = $$2;$45 = $21;
    } else {
     $$148 = $20;$$152 = $14;$$162 = $$2;$$357 = $$256;$25 = $21;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$148 = -1;$$152 = $14;$$162 = $$174;$$357 = 0;$25 = $$pr$pre;
  } else {
   $$148 = 0;$$152 = $2;$$162 = $$0;$$357 = $$054;$25 = $$cast;
  }
 } while(0);
 $24 = ($25|0)==(0|0);
 L9: do {
  if ($24) {
   $$350 = $$148;
  } else {
   $26 = ($$357|0)!=(0);
   $27 = ($$152|0)!=(0);
   $28 = $26 & $27;
   if ($28) {
    $$24968 = $$148;$$25367 = $$152;$$369 = $$162;$$466 = $$357;$30 = $25;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (_wcrtomb($$369,$29,0)|0);
     $32 = (($31) + 1)|0;
     $33 = ($32>>>0)<(2);
     if ($33) {
      break;
     }
     $35 = HEAP32[$6>>2]|0;
     $36 = ((($35)) + 4|0);
     HEAP32[$6>>2] = $36;
     $37 = (($$25367) + -1)|0;
     $38 = (($$369) + ($31)|0);
     $39 = (($$466) - ($31))|0;
     $40 = (($31) + ($$24968))|0;
     $41 = ($39|0)!=(0);
     $42 = ($37|0)!=(0);
     $43 = $41 & $42;
     if ($43) {
      $$24968 = $40;$$25367 = $37;$$369 = $38;$$466 = $39;$30 = $36;
     } else {
      $$350 = $40;
      break L9;
     }
    }
    $34 = ($31|0)==(0);
    if ($34) {
     HEAP32[$6>>2] = 0;
     $$350 = $$24968;
    } else {
     $$350 = -1;
    }
   } else {
    $$350 = $$148;
   }
  }
 } while(0);
 if ($8) {
  $44 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $44;
 }
 STACKTOP = sp;return ($$350|0);
}
function ___ctype_get_mb_cur_max() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_713()|0);
 $1 = ((($0)) + 188|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = $4 ? 1 : 4;
 return ($5|0);
}
function ___pthread_self_713() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (53316|0);
}
function _isxdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $narrow = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isdigit($0)|0);
 $2 = ($1|0)!=(0);
 $3 = $0 | 32;
 $4 = (($3) + -97)|0;
 $5 = ($4>>>0)<(6);
 $narrow = $5 | $2;
 $spec$select = $narrow&1;
 return ($spec$select|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (53320|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (53324|0);
}
function ___get_locale($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$093$lcssa = 0, $$093118 = 0, $$094114 = 0, $$1 = 0, $$1100111 = 0, $$195112 = 0, $$2122 = 0, $$2123 = 0, $$2124 = 0, $$4 = 0, $$neg = 0, $$pre121 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $2 = sp;
 $3 = sp + 256|0;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (_getenv((61557|0))|0);
   $7 = ($6|0)==(0|0);
   if (!($7)) {
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if (!($9)) {
     $$1 = $6;
     break;
    }
   }
   $10 = (49552 + (($0*12)|0)|0);
   $11 = (_getenv(($10|0))|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = HEAP8[$11>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if (!($14)) {
     $$1 = $11;
     break;
    }
   }
   $15 = (_getenv((61564|0))|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $17 = HEAP8[$15>>0]|0;
    $18 = ($17<<24>>24)==(0);
    if (!($18)) {
     $$1 = $15;
     break;
    }
   }
   $$1 = 61569;
  } else {
   $$1 = $1;
  }
 } while(0);
 $$093118 = 0;
 L13: while(1) {
  $19 = (($$1) + ($$093118)|0);
  $20 = HEAP8[$19>>0]|0;
  switch ($20<<24>>24) {
  case 47: case 0:  {
   $$093$lcssa = $$093118;
   break L13;
   break;
  }
  default: {
  }
  }
  $21 = (($$093118) + 1)|0;
  $22 = ($21>>>0)<(15);
  if ($22) {
   $$093118 = $21;
  } else {
   $$093$lcssa = 15;
   break;
  }
 }
 $23 = HEAP8[$$1>>0]|0;
 $24 = ($23<<24>>24)==(46);
 if ($24) {
  $$2122 = 61569;
  label = 15;
 } else {
  $25 = (($$1) + ($$093$lcssa)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(0);
  if ($27) {
   $28 = ($23<<24>>24)==(67);
   if ($28) {
    $$2122 = $$1;
    label = 15;
   } else {
    $$2123 = $$1;
    label = 16;
   }
  } else {
   $$2122 = 61569;
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $29 = ((($$2122)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $$2124 = $$2122;
   label = 18;
  } else {
   $$2123 = $$2122;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $32 = (_strcmp($$2123,61569)|0);
   $33 = ($32|0)==(0);
   if ($33) {
    $$2124 = $$2123;
    label = 18;
   } else {
    $34 = (_strcmp($$2123,61577)|0);
    $35 = ($34|0)==(0);
    if ($35) {
     $$2124 = $$2123;
     label = 18;
    } else {
     $40 = HEAP32[17359]|0;
     $41 = ($40|0)==(0|0);
     if (!($41)) {
      $$094114 = $40;
      while(1) {
       $42 = ((($$094114)) + 8|0);
       $43 = (_strcmp($$2123,$42)|0);
       $44 = ($43|0)==(0);
       if ($44) {
        $$0 = $$094114;
        break L22;
       }
       $45 = ((($$094114)) + 24|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(0|0);
       if ($47) {
        break;
       } else {
        $$094114 = $46;
       }
      }
     }
     ___lock((69440|0));
     $48 = HEAP32[17359]|0;
     $49 = ($48|0)==(0|0);
     L32: do {
      if (!($49)) {
       $$195112 = $48;
       while(1) {
        $50 = ((($$195112)) + 8|0);
        $51 = (_strcmp($$2123,$50)|0);
        $52 = ($51|0)==(0);
        if ($52) {
         break;
        }
        $53 = ((($$195112)) + 24|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==(0|0);
        if ($55) {
         break L32;
        } else {
         $$195112 = $54;
        }
       }
       ___unlock((69440|0));
       $$0 = $$195112;
       break L22;
      }
     } while(0);
     $56 = HEAP32[(69336)>>2]|0;
     $57 = ($56|0)==(0);
     L39: do {
      if ($57) {
       $58 = (_getenv((61583|0))|0);
       $59 = ($58|0)==(0|0);
       if ($59) {
        label = 41;
       } else {
        $60 = HEAP8[$58>>0]|0;
        $61 = ($60<<24>>24)==(0);
        if ($61) {
         label = 41;
        } else {
         $62 = (254 - ($$093$lcssa))|0;
         $63 = (($$093$lcssa) + 1)|0;
         $$1100111 = $58;
         while(1) {
          $64 = (___strchrnul($$1100111,58)|0);
          $65 = $64;
          $66 = $$1100111;
          $67 = (($65) - ($66))|0;
          $68 = HEAP8[$64>>0]|0;
          $69 = ($68<<24>>24)!=(0);
          $$neg = $69 << 31 >> 31;
          $70 = (($67) + ($$neg))|0;
          $71 = ($70>>>0)<($62>>>0);
          if ($71) {
           (_memcpy(($2|0),($$1100111|0),($70|0))|0);
           $72 = (($2) + ($70)|0);
           HEAP8[$72>>0] = 47;
           $73 = ((($72)) + 1|0);
           (_memcpy(($73|0),($$2123|0),($$093$lcssa|0))|0);
           $74 = (($63) + ($70))|0;
           $75 = (($2) + ($74)|0);
           HEAP8[$75>>0] = 0;
           $76 = (___map_file(($2|0),($3|0))|0);
           $77 = ($76|0)==(0|0);
           if (!($77)) {
            break;
           }
           $$pre121 = HEAP8[$64>>0]|0;
           $87 = $$pre121;
          } else {
           $87 = $68;
          }
          $86 = ($87<<24>>24)!=(0);
          $88 = $86&1;
          $89 = (($64) + ($88)|0);
          $90 = HEAP8[$89>>0]|0;
          $91 = ($90<<24>>24)==(0);
          if ($91) {
           label = 41;
           break L39;
          } else {
           $$1100111 = $89;
          }
         }
         $78 = (_malloc(28)|0);
         $79 = ($78|0)==(0|0);
         if ($79) {
          $92 = HEAP32[$3>>2]|0;
          (___munmap($76,$92)|0);
          label = 41;
          break;
         } else {
          HEAP32[$78>>2] = $76;
          $80 = HEAP32[$3>>2]|0;
          $81 = ((($78)) + 4|0);
          HEAP32[$81>>2] = $80;
          $82 = ((($78)) + 8|0);
          (_memcpy(($82|0),($$2123|0),($$093$lcssa|0))|0);
          $83 = (($82) + ($$093$lcssa)|0);
          HEAP8[$83>>0] = 0;
          $84 = HEAP32[17359]|0;
          $85 = ((($78)) + 24|0);
          HEAP32[$85>>2] = $84;
          HEAP32[17359] = $78;
          $$4 = $78;
          break;
         }
        }
       }
      } else {
       label = 41;
      }
     } while(0);
     if ((label|0) == 41) {
      $93 = (_malloc(28)|0);
      $94 = ($93|0)==(0|0);
      if ($94) {
       $$4 = $93;
      } else {
       $95 = HEAP32[13222]|0;
       HEAP32[$93>>2] = $95;
       $96 = HEAP32[(52892)>>2]|0;
       $97 = ((($93)) + 4|0);
       HEAP32[$97>>2] = $96;
       $98 = ((($93)) + 8|0);
       (_memcpy(($98|0),($$2123|0),($$093$lcssa|0))|0);
       $99 = (($98) + ($$093$lcssa)|0);
       HEAP8[$99>>0] = 0;
       $100 = HEAP32[17359]|0;
       $101 = ((($93)) + 24|0);
       HEAP32[$101>>2] = $100;
       HEAP32[17359] = $93;
       $$4 = $93;
      }
     }
     $102 = ($$4|0)==(0|0);
     $103 = ($0|0)==(0);
     $or$cond = $103 & $102;
     $spec$select = $or$cond ? 52888 : $$4;
     ___unlock((69440|0));
     $$0 = $spec$select;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 18) {
   $36 = ($0|0)==(0);
   if ($36) {
    $37 = ((($$2124)) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)==(46);
    if ($39) {
     $$0 = 52888;
     break;
    }
   }
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___munmap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall91(91,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _dummy_915() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _catopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _isxdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isxdigit($0)|0);
 return ($2|0);
}
function ___loc_is_allocated($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)!=(0|0);
 $2 = ($0|0)!=(69392|0);
 $or$cond = $1 & $2;
 $3 = ($0|0)!=(52916|0);
 $narrow = $3 & $or$cond;
 $4 = $narrow&1;
 return ($4|0);
}
function ___newlocale($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$03338 = 0, $$03439 = 0, $$036 = 0, $$13537 = 0, $$pre = 0, $$pre41 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond40 = 0, $or$cond = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = (___loc_is_allocated($2)|0);
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $12 = ($2|0)!=(0|0);
   $$03338 = 0;$$13537 = 0;
   while(1) {
    $$pre = 1 << $$13537;
    $$pre41 = $$pre & $0;
    $13 = ($$pre41|0)==(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $14 = (($2) + ($$13537<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $$0 = $15;
    } else {
     $16 = ($$pre41|0)==(0);
     $17 = $16 ? 71442 : $1;
     $18 = (___get_locale($$13537,$17)|0);
     $$0 = $18;
    }
    $19 = ($$0|0)!=(0|0);
    $20 = $19&1;
    $trunc = (($$03338) + ($20))|0;
    $21 = (($3) + ($$13537<<2)|0);
    HEAP32[$21>>2] = $$0;
    $22 = (($$13537) + 1)|0;
    $exitcond = ($22|0)==(6);
    if ($exitcond) {
     break;
    } else {
     $$03338 = $trunc;$$13537 = $22;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   switch ($trunc$clear|0) {
   case 0:  {
    $$036 = 69392;
    break L1;
    break;
   }
   case 1:  {
    $23 = HEAP32[$3>>2]|0;
    $24 = ($23|0)==(52888|0);
    if ($24) {
     $$036 = 52916;
     break L1;
    }
    break;
   }
   default: {
   }
   }
   $$036 = $2;
  } else {
   $$03439 = 0;
   while(1) {
    $6 = 1 << $$03439;
    $7 = $6 & $0;
    $8 = ($7|0)==(0);
    if (!($8)) {
     $9 = (($2) + ($$03439<<2)|0);
     $10 = (___get_locale($$03439,$1)|0);
     HEAP32[$9>>2] = $10;
    }
    $11 = (($$03439) + 1)|0;
    $exitcond40 = ($11|0)==(6);
    if ($exitcond40) {
     $$036 = $2;
     break;
    } else {
     $$03439 = $11;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$036|0);
}
function _catgets($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($3|0);
}
function _isdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isdigit($0)|0);
 return ($2|0);
}
function _freelocale($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___loc_is_allocated($0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  _free($0);
 }
 return;
}
function _catclose($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___uselocale($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_861()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($0|0)==(0|0);
 if (!($4)) {
  $5 = ($0|0)==((-1)|0);
  $6 = $5 ? (69368) : $0;
  HEAP32[$2>>2] = $6;
 }
 $7 = ($3|0)==((69368)|0);
 $8 = $7 ? (-1) : $3;
 return ($8|0);
}
function ___pthread_self_861() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i16$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$02065$i$i = 0, $$0207$lcssa$i$i = 0, $$02074$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024372$i = 0, $$0286$i$i = 0, $$028711$i$i = 0, $$0288$lcssa$i$i = 0, $$028810$i$i = 0;
 var $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$034217$i = 0, $$0343$lcssa$i = 0, $$034316$i = 0, $$0345$i = 0, $$0351$i = 0, $$0357$i = 0, $$0358$i = 0, $$0360$i = 0, $$0361$i = 0, $$0367$i = 0, $$1194$i = 0, $$1194$i$be = 0, $$1194$i$ph = 0, $$1196$i = 0, $$1196$i$be = 0, $$1196$i$ph = 0, $$124471$i = 0;
 var $$1290$i$i = 0, $$1290$i$i$be = 0, $$1290$i$i$ph = 0, $$1292$i$i = 0, $$1292$i$i$be = 0, $$1292$i$i$ph = 0, $$1341$i = 0, $$1346$i = 0, $$1362$i = 0, $$1369$i = 0, $$1369$i$be = 0, $$1369$i$ph = 0, $$1373$i = 0, $$1373$i$be = 0, $$1373$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i203 = 0, $$3$i203218 = 0, $$3348$i = 0, $$3371$i = 0, $$4$lcssa$i = 0, $$420$i = 0, $$420$i$ph = 0, $$4236$i = 0, $$4349$lcssa$i = 0, $$434919$i = 0, $$434919$i$ph = 0, $$4355$i = 0, $$535618$i = 0, $$535618$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i17$i = 0, $$pre$i208 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i209Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre16$i$i = 0, $$sink = 0, $$sink325 = 0, $$sink326 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
 var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i207 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i213 = 0, $or$cond1$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond2$i214 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0;
 var $spec$select$i = 0, $spec$select$i205 = 0, $spec$select1$i = 0, $spec$select3$i = 0, $spec$select49$i = 0, $spec$select7$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[17362]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (69488 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[17362] = $24;
     } else {
      $25 = HEAP32[(69464)>>2]|0;
      $26 = ($25>>>0)>($20>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(69456)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (69488 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==($69|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[17362] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(69464)>>2]|0;
       $79 = ($78>>>0)>($73>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($71) + ($83)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(69468)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (69488 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[17362] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(69464)>>2]|0;
       $104 = ($103>>>0)>($102>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(69456)>>2] = $84;
     HEAP32[(69468)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(69452)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (69752 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $spec$select$i = $150 ? $149 : $$0191$i;
      $spec$select1$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $spec$select1$i;$$0191$i = $spec$select$i;
     }
     $151 = HEAP32[(69464)>>2]|0;
     $152 = ($151>>>0)>($$0190$i>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($153>>>0)>($$0190$i>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i$ph = $173;$$1196$i$ph = $172;
        }
       } else {
        $$1194$i$ph = $170;$$1196$i$ph = $169;
       }
       $$1194$i = $$1194$i$ph;$$1196$i = $$1196$i$ph;
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if ($177) {
         $178 = ((($$1194$i)) + 16|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = ($179|0)==(0|0);
         if ($180) {
          break;
         } else {
          $$1194$i$be = $179;$$1196$i$be = $178;
         }
        } else {
         $$1194$i$be = $176;$$1196$i$be = $175;
        }
        $$1194$i = $$1194$i$be;$$1196$i = $$1196$i$be;
       }
       $181 = ($151>>>0)>($$1196$i>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($151>>>0)>($161>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     L78: do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (69752 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       do {
        if ($187) {
         HEAP32[$185>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $188 = 1 << $184;
          $189 = $188 ^ -1;
          $190 = $108 & $189;
          HEAP32[(69452)>>2] = $190;
          break L78;
         }
        } else {
         $191 = HEAP32[(69464)>>2]|0;
         $192 = ($191>>>0)>($156>>>0);
         if ($192) {
          _abort();
          // unreachable;
         } else {
          $193 = ((($156)) + 16|0);
          $194 = HEAP32[$193>>2]|0;
          $195 = ($194|0)==($$0190$i|0);
          $196 = ((($156)) + 20|0);
          $$sink = $195 ? $193 : $196;
          HEAP32[$$sink>>2] = $$3$i;
          $197 = ($$3$i|0)==(0|0);
          if ($197) {
           break L78;
          } else {
           break;
          }
         }
        }
       } while(0);
       $198 = HEAP32[(69464)>>2]|0;
       $199 = ($198>>>0)>($$3$i>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($198>>>0)>($202>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(69464)>>2]|0;
        $211 = ($210>>>0)>($208>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(69468)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (69488 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $232 & $8;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $232 | $8;
        HEAP32[17362] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(69464)>>2]|0;
        $239 = ($238>>>0)>($237>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(69456)>>2] = $$0191$i;
      HEAP32[(69468)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(69452)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0357$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0357$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0357$i = $274;
      }
     }
     $275 = (69752 + ($$0357$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L122: do {
      if ($277) {
       $$2353$i = 0;$$3$i203 = 0;$$3348$i = $249;
       label = 85;
      } else {
       $278 = ($$0357$i|0)==(31);
       $279 = $$0357$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0358$i = $282;$$0361$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$420$i$ph = $$0351$i;$$434919$i$ph = 0;$$535618$i$ph = $$0351$i;
          label = 89;
          break L122;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0358$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond2$i = $294 | $295;
        $$1362$i = $or$cond2$i ? $$0361$i : $290;
        $296 = ($293|0)==(0|0);
        $spec$select7$i = $$0358$i << 1;
        if ($296) {
         $$2353$i = $$1362$i;$$3$i203 = $$1341$i;$$3348$i = $$1346$i;
         label = 85;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0358$i = $spec$select7$i;$$0361$i = $$1362$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 85) {
      $297 = ($$2353$i|0)==(0|0);
      $298 = ($$3$i203|0)==(0|0);
      $or$cond$i = $297 & $298;
      if ($or$cond$i) {
       $299 = 2 << $$0357$i;
       $300 = (0 - ($299))|0;
       $301 = $299 | $300;
       $302 = $301 & $247;
       $303 = ($302|0)==(0);
       if ($303) {
        $$0197 = $246;
        break;
       }
       $304 = (0 - ($302))|0;
       $305 = $302 & $304;
       $306 = (($305) + -1)|0;
       $307 = $306 >>> 12;
       $308 = $307 & 16;
       $309 = $306 >>> $308;
       $310 = $309 >>> 5;
       $311 = $310 & 8;
       $312 = $311 | $308;
       $313 = $309 >>> $311;
       $314 = $313 >>> 2;
       $315 = $314 & 4;
       $316 = $312 | $315;
       $317 = $313 >>> $315;
       $318 = $317 >>> 1;
       $319 = $318 & 2;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 1;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = (($324) + ($325))|0;
       $327 = (69752 + ($326<<2)|0);
       $328 = HEAP32[$327>>2]|0;
       $$3$i203218 = 0;$$4355$i = $328;
      } else {
       $$3$i203218 = $$3$i203;$$4355$i = $$2353$i;
      }
      $329 = ($$4355$i|0)==(0|0);
      if ($329) {
       $$4$lcssa$i = $$3$i203218;$$4349$lcssa$i = $$3348$i;
      } else {
       $$420$i$ph = $$3$i203218;$$434919$i$ph = $$3348$i;$$535618$i$ph = $$4355$i;
       label = 89;
      }
     }
     if ((label|0) == 89) {
      $$420$i = $$420$i$ph;$$434919$i = $$434919$i$ph;$$535618$i = $$535618$i$ph;
      while(1) {
       $330 = ((($$535618$i)) + 4|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $331 & -8;
       $333 = (($332) - ($246))|0;
       $334 = ($333>>>0)<($$434919$i>>>0);
       $spec$select$i205 = $334 ? $333 : $$434919$i;
       $spec$select3$i = $334 ? $$535618$i : $$420$i;
       $335 = ((($$535618$i)) + 16|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = ($336|0)==(0|0);
       if ($337) {
        $338 = ((($$535618$i)) + 20|0);
        $339 = HEAP32[$338>>2]|0;
        $341 = $339;
       } else {
        $341 = $336;
       }
       $340 = ($341|0)==(0|0);
       if ($340) {
        $$4$lcssa$i = $spec$select3$i;$$4349$lcssa$i = $spec$select$i205;
        break;
       } else {
        $$420$i = $spec$select3$i;$$434919$i = $spec$select$i205;$$535618$i = $341;
       }
      }
     }
     $342 = ($$4$lcssa$i|0)==(0|0);
     if ($342) {
      $$0197 = $246;
     } else {
      $343 = HEAP32[(69456)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($$4349$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(69464)>>2]|0;
       $347 = ($346>>>0)>($$4$lcssa$i>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($$4$lcssa$i) + ($246)|0);
       $349 = ($348>>>0)>($$4$lcssa$i>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($$4$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($$4$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($$4$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($$4$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($$4$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $$3371$i = 0;
           break;
          } else {
           $$1369$i$ph = $368;$$1373$i$ph = $367;
          }
         } else {
          $$1369$i$ph = $365;$$1373$i$ph = $364;
         }
         $$1369$i = $$1369$i$ph;$$1373$i = $$1373$i$ph;
         while(1) {
          $370 = ((($$1369$i)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = ((($$1369$i)) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            break;
           } else {
            $$1369$i$be = $374;$$1373$i$be = $373;
           }
          } else {
           $$1369$i$be = $371;$$1373$i$be = $370;
          }
          $$1369$i = $$1369$i$be;$$1373$i = $$1373$i$be;
         }
         $376 = ($346>>>0)>($$1373$i>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1373$i>>2] = 0;
          $$3371$i = $$1369$i;
          break;
         }
        } else {
         $355 = ((($$4$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($346>>>0)>($356>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($$4$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($$4$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $$3371$i = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       L176: do {
        if ($377) {
         $469 = $247;
        } else {
         $378 = ((($$4$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (69752 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($$4$lcssa$i|0)==($381|0);
         do {
          if ($382) {
           HEAP32[$380>>2] = $$3371$i;
           $cond$i207 = ($$3371$i|0)==(0|0);
           if ($cond$i207) {
            $383 = 1 << $379;
            $384 = $383 ^ -1;
            $385 = $247 & $384;
            HEAP32[(69452)>>2] = $385;
            $469 = $385;
            break L176;
           }
          } else {
           $386 = HEAP32[(69464)>>2]|0;
           $387 = ($386>>>0)>($351>>>0);
           if ($387) {
            _abort();
            // unreachable;
           } else {
            $388 = ((($351)) + 16|0);
            $389 = HEAP32[$388>>2]|0;
            $390 = ($389|0)==($$4$lcssa$i|0);
            $391 = ((($351)) + 20|0);
            $$sink325 = $390 ? $388 : $391;
            HEAP32[$$sink325>>2] = $$3371$i;
            $392 = ($$3371$i|0)==(0|0);
            if ($392) {
             $469 = $247;
             break L176;
            } else {
             break;
            }
           }
          }
         } while(0);
         $393 = HEAP32[(69464)>>2]|0;
         $394 = ($393>>>0)>($$3371$i>>>0);
         if ($394) {
          _abort();
          // unreachable;
         }
         $395 = ((($$3371$i)) + 24|0);
         HEAP32[$395>>2] = $351;
         $396 = ((($$4$lcssa$i)) + 16|0);
         $397 = HEAP32[$396>>2]|0;
         $398 = ($397|0)==(0|0);
         do {
          if (!($398)) {
           $399 = ($393>>>0)>($397>>>0);
           if ($399) {
            _abort();
            // unreachable;
           } else {
            $400 = ((($$3371$i)) + 16|0);
            HEAP32[$400>>2] = $397;
            $401 = ((($397)) + 24|0);
            HEAP32[$401>>2] = $$3371$i;
            break;
           }
          }
         } while(0);
         $402 = ((($$4$lcssa$i)) + 20|0);
         $403 = HEAP32[$402>>2]|0;
         $404 = ($403|0)==(0|0);
         if ($404) {
          $469 = $247;
         } else {
          $405 = HEAP32[(69464)>>2]|0;
          $406 = ($405>>>0)>($403>>>0);
          if ($406) {
           _abort();
           // unreachable;
          } else {
           $407 = ((($$3371$i)) + 20|0);
           HEAP32[$407>>2] = $403;
           $408 = ((($403)) + 24|0);
           HEAP32[$408>>2] = $$3371$i;
           $469 = $247;
           break;
          }
         }
        }
       } while(0);
       $409 = ($$4349$lcssa$i>>>0)<(16);
       L200: do {
        if ($409) {
         $410 = (($$4349$lcssa$i) + ($246))|0;
         $411 = $410 | 3;
         $412 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$412>>2] = $411;
         $413 = (($$4$lcssa$i) + ($410)|0);
         $414 = ((($413)) + 4|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $$4349$lcssa$i | 1;
         $420 = ((($348)) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = (($348) + ($$4349$lcssa$i)|0);
         HEAP32[$421>>2] = $$4349$lcssa$i;
         $422 = $$4349$lcssa$i >>> 3;
         $423 = ($$4349$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (69488 + ($424<<2)|0);
          $426 = HEAP32[17362]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[17362] = $430;
           $$pre$i208 = ((($425)) + 8|0);
           $$0367$i = $425;$$pre$phi$i209Z2D = $$pre$i208;
          } else {
           $431 = ((($425)) + 8|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(69464)>>2]|0;
           $434 = ($433>>>0)>($432>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$0367$i = $432;$$pre$phi$i209Z2D = $431;
           }
          }
          HEAP32[$$pre$phi$i209Z2D>>2] = $348;
          $435 = ((($$0367$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $436 = ((($348)) + 8|0);
          HEAP32[$436>>2] = $$0367$i;
          $437 = ((($348)) + 12|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $$4349$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $$0360$i = 0;
         } else {
          $440 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($440) {
           $$0360$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $$4349$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $$0360$i = $462;
          }
         }
         $463 = (69752 + ($$0360$i<<2)|0);
         $464 = ((($348)) + 28|0);
         HEAP32[$464>>2] = $$0360$i;
         $465 = ((($348)) + 16|0);
         $466 = ((($465)) + 4|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = 1 << $$0360$i;
         $468 = $469 & $467;
         $470 = ($468|0)==(0);
         if ($470) {
          $471 = $469 | $467;
          HEAP32[(69452)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $472 = ((($348)) + 24|0);
          HEAP32[$472>>2] = $463;
          $473 = ((($348)) + 12|0);
          HEAP32[$473>>2] = $348;
          $474 = ((($348)) + 8|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($$4349$lcssa$i|0);
         L218: do {
          if ($479) {
           $$0343$lcssa$i = $475;
          } else {
           $480 = ($$0360$i|0)==(31);
           $481 = $$0360$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $$4349$lcssa$i << $483;
           $$034217$i = $484;$$034316$i = $475;
           while(1) {
            $491 = $$034217$i >>> 31;
            $492 = (((($$034316$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $$034217$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($$4349$lcssa$i|0);
            if ($490) {
             $$0343$lcssa$i = $487;
             break L218;
            } else {
             $$034217$i = $485;$$034316$i = $487;
            }
           }
           $494 = HEAP32[(69464)>>2]|0;
           $495 = ($494>>>0)>($492>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $496 = ((($348)) + 24|0);
            HEAP32[$496>>2] = $$034316$i;
            $497 = ((($348)) + 12|0);
            HEAP32[$497>>2] = $348;
            $498 = ((($348)) + 8|0);
            HEAP32[$498>>2] = $348;
            break L200;
           }
          }
         } while(0);
         $499 = ((($$0343$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(69464)>>2]|0;
         $502 = ($501>>>0)<=($$0343$lcssa$i>>>0);
         $503 = ($501>>>0)<=($500>>>0);
         $504 = $503 & $502;
         if ($504) {
          $505 = ((($500)) + 12|0);
          HEAP32[$505>>2] = $348;
          HEAP32[$499>>2] = $348;
          $506 = ((($348)) + 8|0);
          HEAP32[$506>>2] = $500;
          $507 = ((($348)) + 12|0);
          HEAP32[$507>>2] = $$0343$lcssa$i;
          $508 = ((($348)) + 24|0);
          HEAP32[$508>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $509 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $509;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $510 = HEAP32[(69456)>>2]|0;
 $511 = ($510>>>0)<($$0197>>>0);
 if (!($511)) {
  $512 = (($510) - ($$0197))|0;
  $513 = HEAP32[(69468)>>2]|0;
  $514 = ($512>>>0)>(15);
  if ($514) {
   $515 = (($513) + ($$0197)|0);
   HEAP32[(69468)>>2] = $515;
   HEAP32[(69456)>>2] = $512;
   $516 = $512 | 1;
   $517 = ((($515)) + 4|0);
   HEAP32[$517>>2] = $516;
   $518 = (($513) + ($510)|0);
   HEAP32[$518>>2] = $512;
   $519 = $$0197 | 3;
   $520 = ((($513)) + 4|0);
   HEAP32[$520>>2] = $519;
  } else {
   HEAP32[(69456)>>2] = 0;
   HEAP32[(69468)>>2] = 0;
   $521 = $510 | 3;
   $522 = ((($513)) + 4|0);
   HEAP32[$522>>2] = $521;
   $523 = (($513) + ($510)|0);
   $524 = ((($523)) + 4|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = ((($513)) + 8|0);
  $$0 = $527;
  STACKTOP = sp;return ($$0|0);
 }
 $528 = HEAP32[(69460)>>2]|0;
 $529 = ($528>>>0)>($$0197>>>0);
 if ($529) {
  $530 = (($528) - ($$0197))|0;
  HEAP32[(69460)>>2] = $530;
  $531 = HEAP32[(69472)>>2]|0;
  $532 = (($531) + ($$0197)|0);
  HEAP32[(69472)>>2] = $532;
  $533 = $530 | 1;
  $534 = ((($532)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = $$0197 | 3;
  $536 = ((($531)) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = ((($531)) + 8|0);
  $$0 = $537;
  STACKTOP = sp;return ($$0|0);
 }
 $538 = HEAP32[17480]|0;
 $539 = ($538|0)==(0);
 if ($539) {
  HEAP32[(69928)>>2] = 4096;
  HEAP32[(69924)>>2] = 4096;
  HEAP32[(69932)>>2] = -1;
  HEAP32[(69936)>>2] = -1;
  HEAP32[(69940)>>2] = 0;
  HEAP32[(69892)>>2] = 0;
  $540 = $1;
  $541 = $540 & -16;
  $542 = $541 ^ 1431655768;
  HEAP32[17480] = $542;
  $546 = 4096;
 } else {
  $$pre$i210 = HEAP32[(69928)>>2]|0;
  $546 = $$pre$i210;
 }
 $543 = (($$0197) + 48)|0;
 $544 = (($$0197) + 47)|0;
 $545 = (($546) + ($544))|0;
 $547 = (0 - ($546))|0;
 $548 = $545 & $547;
 $549 = ($548>>>0)>($$0197>>>0);
 if (!($549)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $550 = HEAP32[(69888)>>2]|0;
 $551 = ($550|0)==(0);
 if (!($551)) {
  $552 = HEAP32[(69880)>>2]|0;
  $553 = (($552) + ($548))|0;
  $554 = ($553>>>0)<=($552>>>0);
  $555 = ($553>>>0)>($550>>>0);
  $or$cond1$i = $554 | $555;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $556 = HEAP32[(69892)>>2]|0;
 $557 = $556 & 4;
 $558 = ($557|0)==(0);
 L257: do {
  if ($558) {
   $559 = HEAP32[(69472)>>2]|0;
   $560 = ($559|0)==(0|0);
   L259: do {
    if ($560) {
     label = 173;
    } else {
     $$0$i$i = (69896);
     while(1) {
      $561 = HEAP32[$$0$i$i>>2]|0;
      $562 = ($561>>>0)>($559>>>0);
      if (!($562)) {
       $563 = ((($$0$i$i)) + 4|0);
       $564 = HEAP32[$563>>2]|0;
       $565 = (($561) + ($564)|0);
       $566 = ($565>>>0)>($559>>>0);
       if ($566) {
        break;
       }
      }
      $567 = ((($$0$i$i)) + 8|0);
      $568 = HEAP32[$567>>2]|0;
      $569 = ($568|0)==(0|0);
      if ($569) {
       label = 173;
       break L259;
      } else {
       $$0$i$i = $568;
      }
     }
     $592 = (($545) - ($528))|0;
     $593 = $592 & $547;
     $594 = ($593>>>0)<(2147483647);
     if ($594) {
      $595 = ((($$0$i$i)) + 4|0);
      $596 = (_sbrk(($593|0))|0);
      $597 = HEAP32[$$0$i$i>>2]|0;
      $598 = HEAP32[$595>>2]|0;
      $599 = (($597) + ($598)|0);
      $600 = ($596|0)==($599|0);
      if ($600) {
       $601 = ($596|0)==((-1)|0);
       if ($601) {
        $$2234243136$i = $593;
       } else {
        $$723947$i = $593;$$748$i = $596;
        label = 190;
        break L257;
       }
      } else {
       $$2247$ph$i = $596;$$2253$ph$i = $593;
       label = 181;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $570 = (_sbrk(0)|0);
     $571 = ($570|0)==((-1)|0);
     if ($571) {
      $$2234243136$i = 0;
     } else {
      $572 = $570;
      $573 = HEAP32[(69924)>>2]|0;
      $574 = (($573) + -1)|0;
      $575 = $574 & $572;
      $576 = ($575|0)==(0);
      $577 = (($574) + ($572))|0;
      $578 = (0 - ($573))|0;
      $579 = $577 & $578;
      $580 = (($579) - ($572))|0;
      $581 = $576 ? 0 : $580;
      $spec$select49$i = (($581) + ($548))|0;
      $582 = HEAP32[(69880)>>2]|0;
      $583 = (($spec$select49$i) + ($582))|0;
      $584 = ($spec$select49$i>>>0)>($$0197>>>0);
      $585 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i213 = $584 & $585;
      if ($or$cond$i213) {
       $586 = HEAP32[(69888)>>2]|0;
       $587 = ($586|0)==(0);
       if (!($587)) {
        $588 = ($583>>>0)<=($582>>>0);
        $589 = ($583>>>0)>($586>>>0);
        $or$cond2$i214 = $588 | $589;
        if ($or$cond2$i214) {
         $$2234243136$i = 0;
         break;
        }
       }
       $590 = (_sbrk(($spec$select49$i|0))|0);
       $591 = ($590|0)==($570|0);
       if ($591) {
        $$723947$i = $spec$select49$i;$$748$i = $570;
        label = 190;
        break L257;
       } else {
        $$2247$ph$i = $590;$$2253$ph$i = $spec$select49$i;
        label = 181;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $602 = (0 - ($$2253$ph$i))|0;
     $603 = ($$2247$ph$i|0)!=((-1)|0);
     $604 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $604 & $603;
     $605 = ($543>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $605 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $615 = ($$2247$ph$i|0)==((-1)|0);
      if ($615) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 190;
       break L257;
      }
     }
     $606 = HEAP32[(69928)>>2]|0;
     $607 = (($544) - ($$2253$ph$i))|0;
     $608 = (($607) + ($606))|0;
     $609 = (0 - ($606))|0;
     $610 = $608 & $609;
     $611 = ($610>>>0)<(2147483647);
     if (!($611)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L257;
     }
     $612 = (_sbrk(($610|0))|0);
     $613 = ($612|0)==((-1)|0);
     if ($613) {
      (_sbrk(($602|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $614 = (($610) + ($$2253$ph$i))|0;
      $$723947$i = $614;$$748$i = $$2247$ph$i;
      label = 190;
      break L257;
     }
    }
   } while(0);
   $616 = HEAP32[(69892)>>2]|0;
   $617 = $616 | 4;
   HEAP32[(69892)>>2] = $617;
   $$4236$i = $$2234243136$i;
   label = 188;
  } else {
   $$4236$i = 0;
   label = 188;
  }
 } while(0);
 if ((label|0) == 188) {
  $618 = ($548>>>0)<(2147483647);
  if ($618) {
   $619 = (_sbrk(($548|0))|0);
   $620 = (_sbrk(0)|0);
   $621 = ($619|0)!=((-1)|0);
   $622 = ($620|0)!=((-1)|0);
   $or$cond5$i = $621 & $622;
   $623 = ($619>>>0)<($620>>>0);
   $or$cond8$i = $623 & $or$cond5$i;
   $624 = $620;
   $625 = $619;
   $626 = (($624) - ($625))|0;
   $627 = (($$0197) + 40)|0;
   $628 = ($626>>>0)>($627>>>0);
   $spec$select9$i = $628 ? $626 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $629 = ($619|0)==((-1)|0);
   $not$$i = $628 ^ 1;
   $630 = $629 | $not$$i;
   $or$cond50$i = $630 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $619;
    label = 190;
   }
  }
 }
 if ((label|0) == 190) {
  $631 = HEAP32[(69880)>>2]|0;
  $632 = (($631) + ($$723947$i))|0;
  HEAP32[(69880)>>2] = $632;
  $633 = HEAP32[(69884)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(69884)>>2] = $632;
  }
  $635 = HEAP32[(69472)>>2]|0;
  $636 = ($635|0)==(0|0);
  L294: do {
   if ($636) {
    $637 = HEAP32[(69464)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($$748$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(69464)>>2] = $$748$i;
    }
    HEAP32[(69896)>>2] = $$748$i;
    HEAP32[(69900)>>2] = $$723947$i;
    HEAP32[(69908)>>2] = 0;
    $640 = HEAP32[17480]|0;
    HEAP32[(69484)>>2] = $640;
    HEAP32[(69480)>>2] = -1;
    HEAP32[(69500)>>2] = (69488);
    HEAP32[(69496)>>2] = (69488);
    HEAP32[(69508)>>2] = (69496);
    HEAP32[(69504)>>2] = (69496);
    HEAP32[(69516)>>2] = (69504);
    HEAP32[(69512)>>2] = (69504);
    HEAP32[(69524)>>2] = (69512);
    HEAP32[(69520)>>2] = (69512);
    HEAP32[(69532)>>2] = (69520);
    HEAP32[(69528)>>2] = (69520);
    HEAP32[(69540)>>2] = (69528);
    HEAP32[(69536)>>2] = (69528);
    HEAP32[(69548)>>2] = (69536);
    HEAP32[(69544)>>2] = (69536);
    HEAP32[(69556)>>2] = (69544);
    HEAP32[(69552)>>2] = (69544);
    HEAP32[(69564)>>2] = (69552);
    HEAP32[(69560)>>2] = (69552);
    HEAP32[(69572)>>2] = (69560);
    HEAP32[(69568)>>2] = (69560);
    HEAP32[(69580)>>2] = (69568);
    HEAP32[(69576)>>2] = (69568);
    HEAP32[(69588)>>2] = (69576);
    HEAP32[(69584)>>2] = (69576);
    HEAP32[(69596)>>2] = (69584);
    HEAP32[(69592)>>2] = (69584);
    HEAP32[(69604)>>2] = (69592);
    HEAP32[(69600)>>2] = (69592);
    HEAP32[(69612)>>2] = (69600);
    HEAP32[(69608)>>2] = (69600);
    HEAP32[(69620)>>2] = (69608);
    HEAP32[(69616)>>2] = (69608);
    HEAP32[(69628)>>2] = (69616);
    HEAP32[(69624)>>2] = (69616);
    HEAP32[(69636)>>2] = (69624);
    HEAP32[(69632)>>2] = (69624);
    HEAP32[(69644)>>2] = (69632);
    HEAP32[(69640)>>2] = (69632);
    HEAP32[(69652)>>2] = (69640);
    HEAP32[(69648)>>2] = (69640);
    HEAP32[(69660)>>2] = (69648);
    HEAP32[(69656)>>2] = (69648);
    HEAP32[(69668)>>2] = (69656);
    HEAP32[(69664)>>2] = (69656);
    HEAP32[(69676)>>2] = (69664);
    HEAP32[(69672)>>2] = (69664);
    HEAP32[(69684)>>2] = (69672);
    HEAP32[(69680)>>2] = (69672);
    HEAP32[(69692)>>2] = (69680);
    HEAP32[(69688)>>2] = (69680);
    HEAP32[(69700)>>2] = (69688);
    HEAP32[(69696)>>2] = (69688);
    HEAP32[(69708)>>2] = (69696);
    HEAP32[(69704)>>2] = (69696);
    HEAP32[(69716)>>2] = (69704);
    HEAP32[(69712)>>2] = (69704);
    HEAP32[(69724)>>2] = (69712);
    HEAP32[(69720)>>2] = (69712);
    HEAP32[(69732)>>2] = (69720);
    HEAP32[(69728)>>2] = (69720);
    HEAP32[(69740)>>2] = (69728);
    HEAP32[(69736)>>2] = (69728);
    HEAP32[(69748)>>2] = (69736);
    HEAP32[(69744)>>2] = (69736);
    $641 = (($$723947$i) + -40)|0;
    $642 = ((($$748$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$748$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(69472)>>2] = $649;
    HEAP32[(69460)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($$748$i) + ($641)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(69936)>>2]|0;
    HEAP32[(69476)>>2] = $655;
   } else {
    $$024372$i = (69896);
    while(1) {
     $656 = HEAP32[$$024372$i>>2]|0;
     $657 = ((($$024372$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$748$i|0)==($659|0);
     if ($660) {
      label = 199;
      break;
     }
     $661 = ((($$024372$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024372$i = $662;
     }
    }
    if ((label|0) == 199) {
     $664 = ((($$024372$i)) + 4|0);
     $665 = ((($$024372$i)) + 12|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = $666 & 8;
     $668 = ($667|0)==(0);
     if ($668) {
      $669 = ($656>>>0)<=($635>>>0);
      $670 = ($$748$i>>>0)>($635>>>0);
      $or$cond51$i = $670 & $669;
      if ($or$cond51$i) {
       $671 = (($658) + ($$723947$i))|0;
       HEAP32[$664>>2] = $671;
       $672 = HEAP32[(69460)>>2]|0;
       $673 = (($672) + ($$723947$i))|0;
       $674 = ((($635)) + 8|0);
       $675 = $674;
       $676 = $675 & 7;
       $677 = ($676|0)==(0);
       $678 = (0 - ($675))|0;
       $679 = $678 & 7;
       $680 = $677 ? 0 : $679;
       $681 = (($635) + ($680)|0);
       $682 = (($673) - ($680))|0;
       HEAP32[(69472)>>2] = $681;
       HEAP32[(69460)>>2] = $682;
       $683 = $682 | 1;
       $684 = ((($681)) + 4|0);
       HEAP32[$684>>2] = $683;
       $685 = (($635) + ($673)|0);
       $686 = ((($685)) + 4|0);
       HEAP32[$686>>2] = 40;
       $687 = HEAP32[(69936)>>2]|0;
       HEAP32[(69476)>>2] = $687;
       break;
      }
     }
    }
    $688 = HEAP32[(69464)>>2]|0;
    $689 = ($$748$i>>>0)<($688>>>0);
    if ($689) {
     HEAP32[(69464)>>2] = $$748$i;
     $753 = $$748$i;
    } else {
     $753 = $688;
    }
    $690 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (69896);
    while(1) {
     $691 = HEAP32[$$124471$i>>2]|0;
     $692 = ($691|0)==($690|0);
     if ($692) {
      label = 207;
      break;
     }
     $693 = ((($$124471$i)) + 8|0);
     $694 = HEAP32[$693>>2]|0;
     $695 = ($694|0)==(0|0);
     if ($695) {
      break;
     } else {
      $$124471$i = $694;
     }
    }
    if ((label|0) == 207) {
     $696 = ((($$124471$i)) + 12|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = $697 & 8;
     $699 = ($698|0)==(0);
     if ($699) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $700 = ((($$124471$i)) + 4|0);
      $701 = HEAP32[$700>>2]|0;
      $702 = (($701) + ($$723947$i))|0;
      HEAP32[$700>>2] = $702;
      $703 = ((($$748$i)) + 8|0);
      $704 = $703;
      $705 = $704 & 7;
      $706 = ($705|0)==(0);
      $707 = (0 - ($704))|0;
      $708 = $707 & 7;
      $709 = $706 ? 0 : $708;
      $710 = (($$748$i) + ($709)|0);
      $711 = ((($690)) + 8|0);
      $712 = $711;
      $713 = $712 & 7;
      $714 = ($713|0)==(0);
      $715 = (0 - ($712))|0;
      $716 = $715 & 7;
      $717 = $714 ? 0 : $716;
      $718 = (($690) + ($717)|0);
      $719 = $718;
      $720 = $710;
      $721 = (($719) - ($720))|0;
      $722 = (($710) + ($$0197)|0);
      $723 = (($721) - ($$0197))|0;
      $724 = $$0197 | 3;
      $725 = ((($710)) + 4|0);
      HEAP32[$725>>2] = $724;
      $726 = ($635|0)==($718|0);
      L317: do {
       if ($726) {
        $727 = HEAP32[(69460)>>2]|0;
        $728 = (($727) + ($723))|0;
        HEAP32[(69460)>>2] = $728;
        HEAP32[(69472)>>2] = $722;
        $729 = $728 | 1;
        $730 = ((($722)) + 4|0);
        HEAP32[$730>>2] = $729;
       } else {
        $731 = HEAP32[(69468)>>2]|0;
        $732 = ($731|0)==($718|0);
        if ($732) {
         $733 = HEAP32[(69456)>>2]|0;
         $734 = (($733) + ($723))|0;
         HEAP32[(69456)>>2] = $734;
         HEAP32[(69468)>>2] = $722;
         $735 = $734 | 1;
         $736 = ((($722)) + 4|0);
         HEAP32[$736>>2] = $735;
         $737 = (($722) + ($734)|0);
         HEAP32[$737>>2] = $734;
         break;
        }
        $738 = ((($718)) + 4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = $739 & 3;
        $741 = ($740|0)==(1);
        if ($741) {
         $742 = $739 & -8;
         $743 = $739 >>> 3;
         $744 = ($739>>>0)<(256);
         L325: do {
          if ($744) {
           $745 = ((($718)) + 8|0);
           $746 = HEAP32[$745>>2]|0;
           $747 = ((($718)) + 12|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = $743 << 1;
           $750 = (69488 + ($749<<2)|0);
           $751 = ($746|0)==($750|0);
           do {
            if (!($751)) {
             $752 = ($753>>>0)>($746>>>0);
             if ($752) {
              _abort();
              // unreachable;
             }
             $754 = ((($746)) + 12|0);
             $755 = HEAP32[$754>>2]|0;
             $756 = ($755|0)==($718|0);
             if ($756) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $757 = ($748|0)==($746|0);
           if ($757) {
            $758 = 1 << $743;
            $759 = $758 ^ -1;
            $760 = HEAP32[17362]|0;
            $761 = $760 & $759;
            HEAP32[17362] = $761;
            break;
           }
           $762 = ($748|0)==($750|0);
           do {
            if ($762) {
             $$pre16$i$i = ((($748)) + 8|0);
             $$pre$phi17$i$iZ2D = $$pre16$i$i;
            } else {
             $763 = ($753>>>0)>($748>>>0);
             if ($763) {
              _abort();
              // unreachable;
             }
             $764 = ((($748)) + 8|0);
             $765 = HEAP32[$764>>2]|0;
             $766 = ($765|0)==($718|0);
             if ($766) {
              $$pre$phi17$i$iZ2D = $764;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $767 = ((($746)) + 12|0);
           HEAP32[$767>>2] = $748;
           HEAP32[$$pre$phi17$i$iZ2D>>2] = $746;
          } else {
           $768 = ((($718)) + 24|0);
           $769 = HEAP32[$768>>2]|0;
           $770 = ((($718)) + 12|0);
           $771 = HEAP32[$770>>2]|0;
           $772 = ($771|0)==($718|0);
           do {
            if ($772) {
             $782 = ((($718)) + 16|0);
             $783 = ((($782)) + 4|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==(0|0);
             if ($785) {
              $786 = HEAP32[$782>>2]|0;
              $787 = ($786|0)==(0|0);
              if ($787) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i$ph = $786;$$1292$i$i$ph = $782;
              }
             } else {
              $$1290$i$i$ph = $784;$$1292$i$i$ph = $783;
             }
             $$1290$i$i = $$1290$i$i$ph;$$1292$i$i = $$1292$i$i$ph;
             while(1) {
              $788 = ((($$1290$i$i)) + 20|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $791 = ((($$1290$i$i)) + 16|0);
               $792 = HEAP32[$791>>2]|0;
               $793 = ($792|0)==(0|0);
               if ($793) {
                break;
               } else {
                $$1290$i$i$be = $792;$$1292$i$i$be = $791;
               }
              } else {
               $$1290$i$i$be = $789;$$1292$i$i$be = $788;
              }
              $$1290$i$i = $$1290$i$i$be;$$1292$i$i = $$1292$i$i$be;
             }
             $794 = ($753>>>0)>($$1292$i$i>>>0);
             if ($794) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $773 = ((($718)) + 8|0);
             $774 = HEAP32[$773>>2]|0;
             $775 = ($753>>>0)>($774>>>0);
             if ($775) {
              _abort();
              // unreachable;
             }
             $776 = ((($774)) + 12|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777|0)==($718|0);
             if (!($778)) {
              _abort();
              // unreachable;
             }
             $779 = ((($771)) + 8|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($718|0);
             if ($781) {
              HEAP32[$776>>2] = $771;
              HEAP32[$779>>2] = $774;
              $$3$i$i = $771;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $795 = ($769|0)==(0|0);
           if ($795) {
            break;
           }
           $796 = ((($718)) + 28|0);
           $797 = HEAP32[$796>>2]|0;
           $798 = (69752 + ($797<<2)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ($799|0)==($718|0);
           do {
            if ($800) {
             HEAP32[$798>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $801 = 1 << $797;
             $802 = $801 ^ -1;
             $803 = HEAP32[(69452)>>2]|0;
             $804 = $803 & $802;
             HEAP32[(69452)>>2] = $804;
             break L325;
            } else {
             $805 = HEAP32[(69464)>>2]|0;
             $806 = ($805>>>0)>($769>>>0);
             if ($806) {
              _abort();
              // unreachable;
             } else {
              $807 = ((($769)) + 16|0);
              $808 = HEAP32[$807>>2]|0;
              $809 = ($808|0)==($718|0);
              $810 = ((($769)) + 20|0);
              $$sink326 = $809 ? $807 : $810;
              HEAP32[$$sink326>>2] = $$3$i$i;
              $811 = ($$3$i$i|0)==(0|0);
              if ($811) {
               break L325;
              } else {
               break;
              }
             }
            }
           } while(0);
           $812 = HEAP32[(69464)>>2]|0;
           $813 = ($812>>>0)>($$3$i$i>>>0);
           if ($813) {
            _abort();
            // unreachable;
           }
           $814 = ((($$3$i$i)) + 24|0);
           HEAP32[$814>>2] = $769;
           $815 = ((($718)) + 16|0);
           $816 = HEAP32[$815>>2]|0;
           $817 = ($816|0)==(0|0);
           do {
            if (!($817)) {
             $818 = ($812>>>0)>($816>>>0);
             if ($818) {
              _abort();
              // unreachable;
             } else {
              $819 = ((($$3$i$i)) + 16|0);
              HEAP32[$819>>2] = $816;
              $820 = ((($816)) + 24|0);
              HEAP32[$820>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $821 = ((($815)) + 4|0);
           $822 = HEAP32[$821>>2]|0;
           $823 = ($822|0)==(0|0);
           if ($823) {
            break;
           }
           $824 = HEAP32[(69464)>>2]|0;
           $825 = ($824>>>0)>($822>>>0);
           if ($825) {
            _abort();
            // unreachable;
           } else {
            $826 = ((($$3$i$i)) + 20|0);
            HEAP32[$826>>2] = $822;
            $827 = ((($822)) + 24|0);
            HEAP32[$827>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $828 = (($718) + ($742)|0);
         $829 = (($742) + ($723))|0;
         $$0$i16$i = $828;$$0286$i$i = $829;
        } else {
         $$0$i16$i = $718;$$0286$i$i = $723;
        }
        $830 = ((($$0$i16$i)) + 4|0);
        $831 = HEAP32[$830>>2]|0;
        $832 = $831 & -2;
        HEAP32[$830>>2] = $832;
        $833 = $$0286$i$i | 1;
        $834 = ((($722)) + 4|0);
        HEAP32[$834>>2] = $833;
        $835 = (($722) + ($$0286$i$i)|0);
        HEAP32[$835>>2] = $$0286$i$i;
        $836 = $$0286$i$i >>> 3;
        $837 = ($$0286$i$i>>>0)<(256);
        if ($837) {
         $838 = $836 << 1;
         $839 = (69488 + ($838<<2)|0);
         $840 = HEAP32[17362]|0;
         $841 = 1 << $836;
         $842 = $840 & $841;
         $843 = ($842|0)==(0);
         do {
          if ($843) {
           $844 = $840 | $841;
           HEAP32[17362] = $844;
           $$pre$i17$i = ((($839)) + 8|0);
           $$0294$i$i = $839;$$pre$phi$i18$iZ2D = $$pre$i17$i;
          } else {
           $845 = ((($839)) + 8|0);
           $846 = HEAP32[$845>>2]|0;
           $847 = HEAP32[(69464)>>2]|0;
           $848 = ($847>>>0)>($846>>>0);
           if (!($848)) {
            $$0294$i$i = $846;$$pre$phi$i18$iZ2D = $845;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $722;
         $849 = ((($$0294$i$i)) + 12|0);
         HEAP32[$849>>2] = $722;
         $850 = ((($722)) + 8|0);
         HEAP32[$850>>2] = $$0294$i$i;
         $851 = ((($722)) + 12|0);
         HEAP32[$851>>2] = $839;
         break;
        }
        $852 = $$0286$i$i >>> 8;
        $853 = ($852|0)==(0);
        do {
         if ($853) {
          $$0295$i$i = 0;
         } else {
          $854 = ($$0286$i$i>>>0)>(16777215);
          if ($854) {
           $$0295$i$i = 31;
           break;
          }
          $855 = (($852) + 1048320)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 8;
          $858 = $852 << $857;
          $859 = (($858) + 520192)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 4;
          $862 = $861 | $857;
          $863 = $858 << $861;
          $864 = (($863) + 245760)|0;
          $865 = $864 >>> 16;
          $866 = $865 & 2;
          $867 = $862 | $866;
          $868 = (14 - ($867))|0;
          $869 = $863 << $866;
          $870 = $869 >>> 15;
          $871 = (($868) + ($870))|0;
          $872 = $871 << 1;
          $873 = (($871) + 7)|0;
          $874 = $$0286$i$i >>> $873;
          $875 = $874 & 1;
          $876 = $875 | $872;
          $$0295$i$i = $876;
         }
        } while(0);
        $877 = (69752 + ($$0295$i$i<<2)|0);
        $878 = ((($722)) + 28|0);
        HEAP32[$878>>2] = $$0295$i$i;
        $879 = ((($722)) + 16|0);
        $880 = ((($879)) + 4|0);
        HEAP32[$880>>2] = 0;
        HEAP32[$879>>2] = 0;
        $881 = HEAP32[(69452)>>2]|0;
        $882 = 1 << $$0295$i$i;
        $883 = $881 & $882;
        $884 = ($883|0)==(0);
        if ($884) {
         $885 = $881 | $882;
         HEAP32[(69452)>>2] = $885;
         HEAP32[$877>>2] = $722;
         $886 = ((($722)) + 24|0);
         HEAP32[$886>>2] = $877;
         $887 = ((($722)) + 12|0);
         HEAP32[$887>>2] = $722;
         $888 = ((($722)) + 8|0);
         HEAP32[$888>>2] = $722;
         break;
        }
        $889 = HEAP32[$877>>2]|0;
        $890 = ((($889)) + 4|0);
        $891 = HEAP32[$890>>2]|0;
        $892 = $891 & -8;
        $893 = ($892|0)==($$0286$i$i|0);
        L410: do {
         if ($893) {
          $$0288$lcssa$i$i = $889;
         } else {
          $894 = ($$0295$i$i|0)==(31);
          $895 = $$0295$i$i >>> 1;
          $896 = (25 - ($895))|0;
          $897 = $894 ? 0 : $896;
          $898 = $$0286$i$i << $897;
          $$028711$i$i = $898;$$028810$i$i = $889;
          while(1) {
           $905 = $$028711$i$i >>> 31;
           $906 = (((($$028810$i$i)) + 16|0) + ($905<<2)|0);
           $901 = HEAP32[$906>>2]|0;
           $907 = ($901|0)==(0|0);
           if ($907) {
            break;
           }
           $899 = $$028711$i$i << 1;
           $900 = ((($901)) + 4|0);
           $902 = HEAP32[$900>>2]|0;
           $903 = $902 & -8;
           $904 = ($903|0)==($$0286$i$i|0);
           if ($904) {
            $$0288$lcssa$i$i = $901;
            break L410;
           } else {
            $$028711$i$i = $899;$$028810$i$i = $901;
           }
          }
          $908 = HEAP32[(69464)>>2]|0;
          $909 = ($908>>>0)>($906>>>0);
          if ($909) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$906>>2] = $722;
           $910 = ((($722)) + 24|0);
           HEAP32[$910>>2] = $$028810$i$i;
           $911 = ((($722)) + 12|0);
           HEAP32[$911>>2] = $722;
           $912 = ((($722)) + 8|0);
           HEAP32[$912>>2] = $722;
           break L317;
          }
         }
        } while(0);
        $913 = ((($$0288$lcssa$i$i)) + 8|0);
        $914 = HEAP32[$913>>2]|0;
        $915 = HEAP32[(69464)>>2]|0;
        $916 = ($915>>>0)<=($$0288$lcssa$i$i>>>0);
        $917 = ($915>>>0)<=($914>>>0);
        $918 = $917 & $916;
        if ($918) {
         $919 = ((($914)) + 12|0);
         HEAP32[$919>>2] = $722;
         HEAP32[$913>>2] = $722;
         $920 = ((($722)) + 8|0);
         HEAP32[$920>>2] = $914;
         $921 = ((($722)) + 12|0);
         HEAP32[$921>>2] = $$0288$lcssa$i$i;
         $922 = ((($722)) + 24|0);
         HEAP32[$922>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $1059 = ((($710)) + 8|0);
      $$0 = $1059;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (69896);
    while(1) {
     $923 = HEAP32[$$0$i$i$i>>2]|0;
     $924 = ($923>>>0)>($635>>>0);
     if (!($924)) {
      $925 = ((($$0$i$i$i)) + 4|0);
      $926 = HEAP32[$925>>2]|0;
      $927 = (($923) + ($926)|0);
      $928 = ($927>>>0)>($635>>>0);
      if ($928) {
       break;
      }
     }
     $929 = ((($$0$i$i$i)) + 8|0);
     $930 = HEAP32[$929>>2]|0;
     $$0$i$i$i = $930;
    }
    $931 = ((($927)) + -47|0);
    $932 = ((($931)) + 8|0);
    $933 = $932;
    $934 = $933 & 7;
    $935 = ($934|0)==(0);
    $936 = (0 - ($933))|0;
    $937 = $936 & 7;
    $938 = $935 ? 0 : $937;
    $939 = (($931) + ($938)|0);
    $940 = ((($635)) + 16|0);
    $941 = ($939>>>0)<($940>>>0);
    $942 = $941 ? $635 : $939;
    $943 = ((($942)) + 8|0);
    $944 = ((($942)) + 24|0);
    $945 = (($$723947$i) + -40)|0;
    $946 = ((($$748$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($$748$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(69472)>>2] = $953;
    HEAP32[(69460)>>2] = $954;
    $955 = $954 | 1;
    $956 = ((($953)) + 4|0);
    HEAP32[$956>>2] = $955;
    $957 = (($$748$i) + ($945)|0);
    $958 = ((($957)) + 4|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[(69936)>>2]|0;
    HEAP32[(69476)>>2] = $959;
    $960 = ((($942)) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$943>>2]=HEAP32[(69896)>>2]|0;HEAP32[$943+4>>2]=HEAP32[(69896)+4>>2]|0;HEAP32[$943+8>>2]=HEAP32[(69896)+8>>2]|0;HEAP32[$943+12>>2]=HEAP32[(69896)+12>>2]|0;
    HEAP32[(69896)>>2] = $$748$i;
    HEAP32[(69900)>>2] = $$723947$i;
    HEAP32[(69908)>>2] = 0;
    HEAP32[(69904)>>2] = $943;
    $962 = $944;
    while(1) {
     $961 = ((($962)) + 4|0);
     HEAP32[$961>>2] = 7;
     $963 = ((($962)) + 8|0);
     $964 = ($963>>>0)<($927>>>0);
     if ($964) {
      $962 = $961;
     } else {
      break;
     }
    }
    $965 = ($942|0)==($635|0);
    if (!($965)) {
     $966 = $942;
     $967 = $635;
     $968 = (($966) - ($967))|0;
     $969 = HEAP32[$960>>2]|0;
     $970 = $969 & -2;
     HEAP32[$960>>2] = $970;
     $971 = $968 | 1;
     $972 = ((($635)) + 4|0);
     HEAP32[$972>>2] = $971;
     HEAP32[$942>>2] = $968;
     $973 = $968 >>> 3;
     $974 = ($968>>>0)<(256);
     if ($974) {
      $975 = $973 << 1;
      $976 = (69488 + ($975<<2)|0);
      $977 = HEAP32[17362]|0;
      $978 = 1 << $973;
      $979 = $977 & $978;
      $980 = ($979|0)==(0);
      if ($980) {
       $981 = $977 | $978;
       HEAP32[17362] = $981;
       $$pre$i$i = ((($976)) + 8|0);
       $$0211$i$i = $976;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $982 = ((($976)) + 8|0);
       $983 = HEAP32[$982>>2]|0;
       $984 = HEAP32[(69464)>>2]|0;
       $985 = ($984>>>0)>($983>>>0);
       if ($985) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $983;$$pre$phi$i$iZ2D = $982;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $986 = ((($$0211$i$i)) + 12|0);
      HEAP32[$986>>2] = $635;
      $987 = ((($635)) + 8|0);
      HEAP32[$987>>2] = $$0211$i$i;
      $988 = ((($635)) + 12|0);
      HEAP32[$988>>2] = $976;
      break;
     }
     $989 = $968 >>> 8;
     $990 = ($989|0)==(0);
     if ($990) {
      $$0212$i$i = 0;
     } else {
      $991 = ($968>>>0)>(16777215);
      if ($991) {
       $$0212$i$i = 31;
      } else {
       $992 = (($989) + 1048320)|0;
       $993 = $992 >>> 16;
       $994 = $993 & 8;
       $995 = $989 << $994;
       $996 = (($995) + 520192)|0;
       $997 = $996 >>> 16;
       $998 = $997 & 4;
       $999 = $998 | $994;
       $1000 = $995 << $998;
       $1001 = (($1000) + 245760)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 2;
       $1004 = $999 | $1003;
       $1005 = (14 - ($1004))|0;
       $1006 = $1000 << $1003;
       $1007 = $1006 >>> 15;
       $1008 = (($1005) + ($1007))|0;
       $1009 = $1008 << 1;
       $1010 = (($1008) + 7)|0;
       $1011 = $968 >>> $1010;
       $1012 = $1011 & 1;
       $1013 = $1012 | $1009;
       $$0212$i$i = $1013;
      }
     }
     $1014 = (69752 + ($$0212$i$i<<2)|0);
     $1015 = ((($635)) + 28|0);
     HEAP32[$1015>>2] = $$0212$i$i;
     $1016 = ((($635)) + 20|0);
     HEAP32[$1016>>2] = 0;
     HEAP32[$940>>2] = 0;
     $1017 = HEAP32[(69452)>>2]|0;
     $1018 = 1 << $$0212$i$i;
     $1019 = $1017 & $1018;
     $1020 = ($1019|0)==(0);
     if ($1020) {
      $1021 = $1017 | $1018;
      HEAP32[(69452)>>2] = $1021;
      HEAP32[$1014>>2] = $635;
      $1022 = ((($635)) + 24|0);
      HEAP32[$1022>>2] = $1014;
      $1023 = ((($635)) + 12|0);
      HEAP32[$1023>>2] = $635;
      $1024 = ((($635)) + 8|0);
      HEAP32[$1024>>2] = $635;
      break;
     }
     $1025 = HEAP32[$1014>>2]|0;
     $1026 = ((($1025)) + 4|0);
     $1027 = HEAP32[$1026>>2]|0;
     $1028 = $1027 & -8;
     $1029 = ($1028|0)==($968|0);
     L451: do {
      if ($1029) {
       $$0207$lcssa$i$i = $1025;
      } else {
       $1030 = ($$0212$i$i|0)==(31);
       $1031 = $$0212$i$i >>> 1;
       $1032 = (25 - ($1031))|0;
       $1033 = $1030 ? 0 : $1032;
       $1034 = $968 << $1033;
       $$02065$i$i = $1034;$$02074$i$i = $1025;
       while(1) {
        $1041 = $$02065$i$i >>> 31;
        $1042 = (((($$02074$i$i)) + 16|0) + ($1041<<2)|0);
        $1037 = HEAP32[$1042>>2]|0;
        $1043 = ($1037|0)==(0|0);
        if ($1043) {
         break;
        }
        $1035 = $$02065$i$i << 1;
        $1036 = ((($1037)) + 4|0);
        $1038 = HEAP32[$1036>>2]|0;
        $1039 = $1038 & -8;
        $1040 = ($1039|0)==($968|0);
        if ($1040) {
         $$0207$lcssa$i$i = $1037;
         break L451;
        } else {
         $$02065$i$i = $1035;$$02074$i$i = $1037;
        }
       }
       $1044 = HEAP32[(69464)>>2]|0;
       $1045 = ($1044>>>0)>($1042>>>0);
       if ($1045) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1042>>2] = $635;
        $1046 = ((($635)) + 24|0);
        HEAP32[$1046>>2] = $$02074$i$i;
        $1047 = ((($635)) + 12|0);
        HEAP32[$1047>>2] = $635;
        $1048 = ((($635)) + 8|0);
        HEAP32[$1048>>2] = $635;
        break L294;
       }
      }
     } while(0);
     $1049 = ((($$0207$lcssa$i$i)) + 8|0);
     $1050 = HEAP32[$1049>>2]|0;
     $1051 = HEAP32[(69464)>>2]|0;
     $1052 = ($1051>>>0)<=($$0207$lcssa$i$i>>>0);
     $1053 = ($1051>>>0)<=($1050>>>0);
     $1054 = $1053 & $1052;
     if ($1054) {
      $1055 = ((($1050)) + 12|0);
      HEAP32[$1055>>2] = $635;
      HEAP32[$1049>>2] = $635;
      $1056 = ((($635)) + 8|0);
      HEAP32[$1056>>2] = $1050;
      $1057 = ((($635)) + 12|0);
      HEAP32[$1057>>2] = $$0207$lcssa$i$i;
      $1058 = ((($635)) + 24|0);
      HEAP32[$1058>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(69460)>>2]|0;
  $1061 = ($1060>>>0)>($$0197>>>0);
  if ($1061) {
   $1062 = (($1060) - ($$0197))|0;
   HEAP32[(69460)>>2] = $1062;
   $1063 = HEAP32[(69472)>>2]|0;
   $1064 = (($1063) + ($$0197)|0);
   HEAP32[(69472)>>2] = $1064;
   $1065 = $1062 | 1;
   $1066 = ((($1064)) + 4|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $$0197 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $$0 = $1069;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381438 = 0, $$0382$lcssa = 0, $$0382437 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1385$be = 0, $$1385$ph = 0, $$1388 = 0, $$1388$be = 0, $$1388$ph = 0, $$1396 = 0, $$1396$be = 0, $$1396$ph = 0, $$1400 = 0, $$1400$be = 0;
 var $$1400$ph = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi444Z2D = 0, $$pre$phi446Z2D = 0, $$pre$phiZ2D = 0, $$pre443 = 0, $$pre445 = 0, $$sink = 0, $$sink456 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond419 = 0, $cond420 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(69464)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(69468)>>2]|0;
   $20 = ($19|0)==($16|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;$114 = $16;
     break;
    }
    $109 = (($16) + ($17)|0);
    $110 = ((($16)) + 4|0);
    $111 = $17 | 1;
    $112 = $106 & -2;
    HEAP32[(69456)>>2] = $17;
    HEAP32[$105>>2] = $112;
    HEAP32[$110>>2] = $111;
    HEAP32[$109>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (69488 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($3>>>0)>($24>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[17362]|0;
     $38 = $37 & $36;
     HEAP32[17362] = $38;
     $$1 = $16;$$1380 = $17;$114 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre445 = ((($26)) + 8|0);
     $$pre$phi446Z2D = $$pre445;
    } else {
     $40 = ($3>>>0)>($26>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi446Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi446Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;$114 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385$ph = $63;$$1388$ph = $59;
      }
     } else {
      $$1385$ph = $61;$$1388$ph = $60;
     }
     $$1385 = $$1385$ph;$$1388 = $$1388$ph;
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if ($67) {
       $68 = ((($$1385)) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($69|0)==(0|0);
       if ($70) {
        break;
       } else {
        $$1385$be = $69;$$1388$be = $68;
       }
      } else {
       $$1385$be = $66;$$1388$be = $65;
      }
      $$1385 = $$1385$be;$$1388 = $$1388$be;
     }
     $71 = ($3>>>0)>($$1388>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($3>>>0)>($51>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;$114 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (69752 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==($16|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond419 = ($$3|0)==(0|0);
      if ($cond419) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(69452)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(69452)>>2] = $81;
       $$1 = $16;$$1380 = $17;$114 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(69464)>>2]|0;
      $83 = ($82>>>0)>($46>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($85|0)==($16|0);
       $87 = ((($46)) + 20|0);
       $$sink = $86 ? $84 : $87;
       HEAP32[$$sink>>2] = $$3;
       $88 = ($$3|0)==(0|0);
       if ($88) {
        $$1 = $16;$$1380 = $17;$114 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $89 = HEAP32[(69464)>>2]|0;
    $90 = ($89>>>0)>($$3>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($89>>>0)>($93>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;$114 = $16;
    } else {
     $101 = HEAP32[(69464)>>2]|0;
     $102 = ($101>>>0)>($99>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;$114 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;$114 = $2;
  }
 } while(0);
 $113 = ($114>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $115 = ((($10)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 & 1;
 $118 = ($117|0)==(0);
 if ($118) {
  _abort();
  // unreachable;
 }
 $119 = $116 & 2;
 $120 = ($119|0)==(0);
 if ($120) {
  $121 = HEAP32[(69472)>>2]|0;
  $122 = ($121|0)==($10|0);
  if ($122) {
   $123 = HEAP32[(69460)>>2]|0;
   $124 = (($123) + ($$1380))|0;
   HEAP32[(69460)>>2] = $124;
   HEAP32[(69472)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = HEAP32[(69468)>>2]|0;
   $128 = ($$1|0)==($127|0);
   if (!($128)) {
    return;
   }
   HEAP32[(69468)>>2] = 0;
   HEAP32[(69456)>>2] = 0;
   return;
  }
  $129 = HEAP32[(69468)>>2]|0;
  $130 = ($129|0)==($10|0);
  if ($130) {
   $131 = HEAP32[(69456)>>2]|0;
   $132 = (($131) + ($$1380))|0;
   HEAP32[(69456)>>2] = $132;
   HEAP32[(69468)>>2] = $114;
   $133 = $132 | 1;
   $134 = ((($$1)) + 4|0);
   HEAP32[$134>>2] = $133;
   $135 = (($114) + ($132)|0);
   HEAP32[$135>>2] = $132;
   return;
  }
  $136 = $116 & -8;
  $137 = (($136) + ($$1380))|0;
  $138 = $116 >>> 3;
  $139 = ($116>>>0)<(256);
  L111: do {
   if ($139) {
    $140 = ((($10)) + 8|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ((($10)) + 12|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $138 << 1;
    $145 = (69488 + ($144<<2)|0);
    $146 = ($141|0)==($145|0);
    if (!($146)) {
     $147 = HEAP32[(69464)>>2]|0;
     $148 = ($147>>>0)>($141>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($141)) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($10|0);
     if (!($151)) {
      _abort();
      // unreachable;
     }
    }
    $152 = ($143|0)==($141|0);
    if ($152) {
     $153 = 1 << $138;
     $154 = $153 ^ -1;
     $155 = HEAP32[17362]|0;
     $156 = $155 & $154;
     HEAP32[17362] = $156;
     break;
    }
    $157 = ($143|0)==($145|0);
    if ($157) {
     $$pre443 = ((($143)) + 8|0);
     $$pre$phi444Z2D = $$pre443;
    } else {
     $158 = HEAP32[(69464)>>2]|0;
     $159 = ($158>>>0)>($143>>>0);
     if ($159) {
      _abort();
      // unreachable;
     }
     $160 = ((($143)) + 8|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($161|0)==($10|0);
     if ($162) {
      $$pre$phi444Z2D = $160;
     } else {
      _abort();
      // unreachable;
     }
    }
    $163 = ((($141)) + 12|0);
    HEAP32[$163>>2] = $143;
    HEAP32[$$pre$phi444Z2D>>2] = $141;
   } else {
    $164 = ((($10)) + 24|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ((($10)) + 12|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)==($10|0);
    do {
     if ($168) {
      $179 = ((($10)) + 16|0);
      $180 = ((($179)) + 4|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ($181|0)==(0|0);
      if ($182) {
       $183 = HEAP32[$179>>2]|0;
       $184 = ($183|0)==(0|0);
       if ($184) {
        $$3398 = 0;
        break;
       } else {
        $$1396$ph = $183;$$1400$ph = $179;
       }
      } else {
       $$1396$ph = $181;$$1400$ph = $180;
      }
      $$1396 = $$1396$ph;$$1400 = $$1400$ph;
      while(1) {
       $185 = ((($$1396)) + 20|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($186|0)==(0|0);
       if ($187) {
        $188 = ((($$1396)) + 16|0);
        $189 = HEAP32[$188>>2]|0;
        $190 = ($189|0)==(0|0);
        if ($190) {
         break;
        } else {
         $$1396$be = $189;$$1400$be = $188;
        }
       } else {
        $$1396$be = $186;$$1400$be = $185;
       }
       $$1396 = $$1396$be;$$1400 = $$1400$be;
      }
      $191 = HEAP32[(69464)>>2]|0;
      $192 = ($191>>>0)>($$1400>>>0);
      if ($192) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $169 = ((($10)) + 8|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = HEAP32[(69464)>>2]|0;
      $172 = ($171>>>0)>($170>>>0);
      if ($172) {
       _abort();
       // unreachable;
      }
      $173 = ((($170)) + 12|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ($174|0)==($10|0);
      if (!($175)) {
       _abort();
       // unreachable;
      }
      $176 = ((($167)) + 8|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177|0)==($10|0);
      if ($178) {
       HEAP32[$173>>2] = $167;
       HEAP32[$176>>2] = $170;
       $$3398 = $167;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $193 = ($165|0)==(0|0);
    if (!($193)) {
     $194 = ((($10)) + 28|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (69752 + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = ($197|0)==($10|0);
     do {
      if ($198) {
       HEAP32[$196>>2] = $$3398;
       $cond420 = ($$3398|0)==(0|0);
       if ($cond420) {
        $199 = 1 << $195;
        $200 = $199 ^ -1;
        $201 = HEAP32[(69452)>>2]|0;
        $202 = $201 & $200;
        HEAP32[(69452)>>2] = $202;
        break L111;
       }
      } else {
       $203 = HEAP32[(69464)>>2]|0;
       $204 = ($203>>>0)>($165>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($165)) + 16|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = ($206|0)==($10|0);
        $208 = ((($165)) + 20|0);
        $$sink456 = $207 ? $205 : $208;
        HEAP32[$$sink456>>2] = $$3398;
        $209 = ($$3398|0)==(0|0);
        if ($209) {
         break L111;
        } else {
         break;
        }
       }
      }
     } while(0);
     $210 = HEAP32[(69464)>>2]|0;
     $211 = ($210>>>0)>($$3398>>>0);
     if ($211) {
      _abort();
      // unreachable;
     }
     $212 = ((($$3398)) + 24|0);
     HEAP32[$212>>2] = $165;
     $213 = ((($10)) + 16|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = ($214|0)==(0|0);
     do {
      if (!($215)) {
       $216 = ($210>>>0)>($214>>>0);
       if ($216) {
        _abort();
        // unreachable;
       } else {
        $217 = ((($$3398)) + 16|0);
        HEAP32[$217>>2] = $214;
        $218 = ((($214)) + 24|0);
        HEAP32[$218>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $219 = ((($213)) + 4|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ($220|0)==(0|0);
     if (!($221)) {
      $222 = HEAP32[(69464)>>2]|0;
      $223 = ($222>>>0)>($220>>>0);
      if ($223) {
       _abort();
       // unreachable;
      } else {
       $224 = ((($$3398)) + 20|0);
       HEAP32[$224>>2] = $220;
       $225 = ((($220)) + 24|0);
       HEAP32[$225>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $226 = $137 | 1;
  $227 = ((($$1)) + 4|0);
  HEAP32[$227>>2] = $226;
  $228 = (($114) + ($137)|0);
  HEAP32[$228>>2] = $137;
  $229 = HEAP32[(69468)>>2]|0;
  $230 = ($$1|0)==($229|0);
  if ($230) {
   HEAP32[(69456)>>2] = $137;
   return;
  } else {
   $$2 = $137;
  }
 } else {
  $231 = $116 & -2;
  HEAP32[$115>>2] = $231;
  $232 = $$1380 | 1;
  $233 = ((($$1)) + 4|0);
  HEAP32[$233>>2] = $232;
  $234 = (($114) + ($$1380)|0);
  HEAP32[$234>>2] = $$1380;
  $$2 = $$1380;
 }
 $235 = $$2 >>> 3;
 $236 = ($$2>>>0)<(256);
 if ($236) {
  $237 = $235 << 1;
  $238 = (69488 + ($237<<2)|0);
  $239 = HEAP32[17362]|0;
  $240 = 1 << $235;
  $241 = $239 & $240;
  $242 = ($241|0)==(0);
  if ($242) {
   $243 = $239 | $240;
   HEAP32[17362] = $243;
   $$pre = ((($238)) + 8|0);
   $$0401 = $238;$$pre$phiZ2D = $$pre;
  } else {
   $244 = ((($238)) + 8|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = HEAP32[(69464)>>2]|0;
   $247 = ($246>>>0)>($245>>>0);
   if ($247) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $245;$$pre$phiZ2D = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $248 = ((($$0401)) + 12|0);
  HEAP32[$248>>2] = $$1;
  $249 = ((($$1)) + 8|0);
  HEAP32[$249>>2] = $$0401;
  $250 = ((($$1)) + 12|0);
  HEAP32[$250>>2] = $238;
  return;
 }
 $251 = $$2 >>> 8;
 $252 = ($251|0)==(0);
 if ($252) {
  $$0394 = 0;
 } else {
  $253 = ($$2>>>0)>(16777215);
  if ($253) {
   $$0394 = 31;
  } else {
   $254 = (($251) + 1048320)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 8;
   $257 = $251 << $256;
   $258 = (($257) + 520192)|0;
   $259 = $258 >>> 16;
   $260 = $259 & 4;
   $261 = $260 | $256;
   $262 = $257 << $260;
   $263 = (($262) + 245760)|0;
   $264 = $263 >>> 16;
   $265 = $264 & 2;
   $266 = $261 | $265;
   $267 = (14 - ($266))|0;
   $268 = $262 << $265;
   $269 = $268 >>> 15;
   $270 = (($267) + ($269))|0;
   $271 = $270 << 1;
   $272 = (($270) + 7)|0;
   $273 = $$2 >>> $272;
   $274 = $273 & 1;
   $275 = $274 | $271;
   $$0394 = $275;
  }
 }
 $276 = (69752 + ($$0394<<2)|0);
 $277 = ((($$1)) + 28|0);
 HEAP32[$277>>2] = $$0394;
 $278 = ((($$1)) + 16|0);
 $279 = ((($$1)) + 20|0);
 HEAP32[$279>>2] = 0;
 HEAP32[$278>>2] = 0;
 $280 = HEAP32[(69452)>>2]|0;
 $281 = 1 << $$0394;
 $282 = $280 & $281;
 $283 = ($282|0)==(0);
 L197: do {
  if ($283) {
   $284 = $280 | $281;
   HEAP32[(69452)>>2] = $284;
   HEAP32[$276>>2] = $$1;
   $285 = ((($$1)) + 24|0);
   HEAP32[$285>>2] = $276;
   $286 = ((($$1)) + 12|0);
   HEAP32[$286>>2] = $$1;
   $287 = ((($$1)) + 8|0);
   HEAP32[$287>>2] = $$1;
  } else {
   $288 = HEAP32[$276>>2]|0;
   $289 = ((($288)) + 4|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $290 & -8;
   $292 = ($291|0)==($$2|0);
   L200: do {
    if ($292) {
     $$0382$lcssa = $288;
    } else {
     $293 = ($$0394|0)==(31);
     $294 = $$0394 >>> 1;
     $295 = (25 - ($294))|0;
     $296 = $293 ? 0 : $295;
     $297 = $$2 << $296;
     $$0381438 = $297;$$0382437 = $288;
     while(1) {
      $304 = $$0381438 >>> 31;
      $305 = (((($$0382437)) + 16|0) + ($304<<2)|0);
      $300 = HEAP32[$305>>2]|0;
      $306 = ($300|0)==(0|0);
      if ($306) {
       break;
      }
      $298 = $$0381438 << 1;
      $299 = ((($300)) + 4|0);
      $301 = HEAP32[$299>>2]|0;
      $302 = $301 & -8;
      $303 = ($302|0)==($$2|0);
      if ($303) {
       $$0382$lcssa = $300;
       break L200;
      } else {
       $$0381438 = $298;$$0382437 = $300;
      }
     }
     $307 = HEAP32[(69464)>>2]|0;
     $308 = ($307>>>0)>($305>>>0);
     if ($308) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$305>>2] = $$1;
      $309 = ((($$1)) + 24|0);
      HEAP32[$309>>2] = $$0382437;
      $310 = ((($$1)) + 12|0);
      HEAP32[$310>>2] = $$1;
      $311 = ((($$1)) + 8|0);
      HEAP32[$311>>2] = $$1;
      break L197;
     }
    }
   } while(0);
   $312 = ((($$0382$lcssa)) + 8|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = HEAP32[(69464)>>2]|0;
   $315 = ($314>>>0)<=($$0382$lcssa>>>0);
   $316 = ($314>>>0)<=($313>>>0);
   $317 = $316 & $315;
   if ($317) {
    $318 = ((($313)) + 12|0);
    HEAP32[$318>>2] = $$1;
    HEAP32[$312>>2] = $$1;
    $319 = ((($$1)) + 8|0);
    HEAP32[$319>>2] = $313;
    $320 = ((($$1)) + 12|0);
    HEAP32[$320>>2] = $$0382$lcssa;
    $321 = ((($$1)) + 24|0);
    HEAP32[$321>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $322 = HEAP32[(69480)>>2]|0;
 $323 = (($322) + -1)|0;
 HEAP32[(69480)>>2] = $323;
 $324 = ($323|0)==(0);
 if (!($324)) {
  return;
 }
 $$0211$in$i = (69904);
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $325 = ($$0211$i|0)==(0|0);
  $326 = ((($$0211$i)) + 8|0);
  if ($325) {
   break;
  } else {
   $$0211$in$i = $326;
  }
 }
 HEAP32[(69480)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $spec$select = $7 ? $3 : -1;
   $$0 = $spec$select;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 (_memset(($8|0),0,($$0|0))|0);
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1271$be = 0, $$1271$ph = 0, $$1274 = 0, $$1274$be = 0, $$1274$ph = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $or$cond$not = 0, $or$cond5 = 0, $storemerge = 0, $storemerge3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(69464)>>2]|0;
 $7 = ($6>>>0)<=($0>>>0);
 $8 = $3 & 3;
 $9 = ($8|0)!=(1);
 $or$cond$not = $9 & $7;
 $10 = ($5>>>0)>($0>>>0);
 $or$cond5 = $or$cond$not & $10;
 if (!($or$cond5)) {
  _abort();
  // unreachable;
 }
 $11 = ((($5)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 1;
 $14 = ($13|0)==(0);
 if ($14) {
  _abort();
  // unreachable;
 }
 $15 = ($8|0)==(0);
 if ($15) {
  $16 = ($1>>>0)<(256);
  if ($16) {
   $$2 = 0;
   return ($$2|0);
  }
  $17 = (($1) + 4)|0;
  $18 = ($4>>>0)<($17>>>0);
  if (!($18)) {
   $19 = (($4) - ($1))|0;
   $20 = HEAP32[(69928)>>2]|0;
   $21 = $20 << 1;
   $22 = ($19>>>0)>($21>>>0);
   if (!($22)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $23 = ($4>>>0)<($1>>>0);
 if (!($23)) {
  $24 = (($4) - ($1))|0;
  $25 = ($24>>>0)>(15);
  if (!($25)) {
   $$2 = $0;
   return ($$2|0);
  }
  $26 = (($0) + ($1)|0);
  $27 = $3 & 1;
  $28 = $27 | $1;
  $29 = $28 | 2;
  HEAP32[$2>>2] = $29;
  $30 = ((($26)) + 4|0);
  $31 = $24 | 3;
  HEAP32[$30>>2] = $31;
  $32 = HEAP32[$11>>2]|0;
  $33 = $32 | 1;
  HEAP32[$11>>2] = $33;
  _dispose_chunk($26,$24);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(69472)>>2]|0;
 $35 = ($34|0)==($5|0);
 if ($35) {
  $36 = HEAP32[(69460)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $41 = $39 | 1;
  $42 = ((($40)) + 4|0);
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2>>2] = $45;
  HEAP32[$42>>2] = $41;
  HEAP32[(69472)>>2] = $40;
  HEAP32[(69460)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(69468)>>2]|0;
 $47 = ($46|0)==($5|0);
 if ($47) {
  $48 = HEAP32[(69456)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($0) + ($49)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge3 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge3 = 0;
  }
  HEAP32[(69456)>>2] = $storemerge3;
  HEAP32[(69468)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $12 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $12 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $12 >>> 3;
 $77 = ($12>>>0)<(256);
 L49: do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (69488 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($6>>>0)>($79>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[17362]|0;
    $93 = $92 & $91;
    HEAP32[17362] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($6>>>0)>($81>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271$ph = $118;$$1274$ph = $114;
      }
     } else {
      $$1271$ph = $116;$$1274$ph = $115;
     }
     $$1271 = $$1271$ph;$$1274 = $$1274$ph;
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       $123 = ((($$1271)) + 16|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = ($124|0)==(0|0);
       if ($125) {
        break;
       } else {
        $$1271$be = $124;$$1274$be = $123;
       }
      } else {
       $$1271$be = $121;$$1274$be = $120;
      }
      $$1271 = $$1271$be;$$1274 = $$1274$be;
     }
     $126 = ($6>>>0)>($$1274>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($6>>>0)>($106>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (69752 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($131|0)==($5|0);
    do {
     if ($132) {
      HEAP32[$130>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $133 = 1 << $129;
       $134 = $133 ^ -1;
       $135 = HEAP32[(69452)>>2]|0;
       $136 = $135 & $134;
       HEAP32[(69452)>>2] = $136;
       break L49;
      }
     } else {
      $137 = HEAP32[(69464)>>2]|0;
      $138 = ($137>>>0)>($101>>>0);
      if ($138) {
       _abort();
       // unreachable;
      } else {
       $139 = ((($101)) + 16|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = ($140|0)==($5|0);
       $142 = ((($101)) + 20|0);
       $$sink = $141 ? $139 : $142;
       HEAP32[$$sink>>2] = $$3;
       $143 = ($$3|0)==(0|0);
       if ($143) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $144 = HEAP32[(69464)>>2]|0;
    $145 = ($144>>>0)>($$3>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($144>>>0)>($148>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(69464)>>2]|0;
     $157 = ($156>>>0)>($154>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $161 | $73;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($0) + ($73)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$041722 = 0, $$0418$lcssa = 0, $$041821 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1424$be = 0, $$1424$ph = 0, $$1427 = 0, $$1427$be = 0, $$1427$ph = 0, $$1431 = 0, $$1431$be = 0, $$1431$ph = 0, $$1435 = 0, $$1435$be = 0, $$1435$ph = 0, $$2 = 0;
 var $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi28Z2D = 0, $$pre$phi30Z2D = 0, $$pre$phiZ2D = 0, $$pre27 = 0, $$pre29 = 0, $$sink = 0, $$sink41 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0;
 var $cond17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(69464)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(69468)>>2]|0;
   $16 = ($15|0)==($11|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    $105 = ((($11)) + 4|0);
    $106 = $12 | 1;
    $107 = $102 & -2;
    HEAP32[(69456)>>2] = $12;
    HEAP32[$101>>2] = $107;
    HEAP32[$105>>2] = $106;
    HEAP32[$2>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (69488 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($13>>>0)>($20>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[17362]|0;
     $34 = $33 & $32;
     HEAP32[17362] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre29 = ((($22)) + 8|0);
     $$pre$phi30Z2D = $$pre29;
    } else {
     $36 = ($13>>>0)>($22>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi30Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi30Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424$ph = $59;$$1427$ph = $55;
      }
     } else {
      $$1424$ph = $57;$$1427$ph = $56;
     }
     $$1424 = $$1424$ph;$$1427 = $$1427$ph;
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $64 = ((($$1424)) + 16|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ($65|0)==(0|0);
       if ($66) {
        break;
       } else {
        $$1424$be = $65;$$1427$be = $64;
       }
      } else {
       $$1424$be = $62;$$1427$be = $61;
      }
      $$1424 = $$1424$be;$$1427 = $$1427$be;
     }
     $67 = ($13>>>0)>($$1427>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($13>>>0)>($47>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (69752 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==($11|0);
    do {
     if ($73) {
      HEAP32[$71>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[(69452)>>2]|0;
       $77 = $76 & $75;
       HEAP32[(69452)>>2] = $77;
       $$1 = $11;$$1416 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[(69464)>>2]|0;
      $79 = ($78>>>0)>($42>>>0);
      if ($79) {
       _abort();
       // unreachable;
      } else {
       $80 = ((($42)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($11|0);
       $83 = ((($42)) + 20|0);
       $$sink = $82 ? $80 : $83;
       HEAP32[$$sink>>2] = $$3;
       $84 = ($$3|0)==(0|0);
       if ($84) {
        $$1 = $11;$$1416 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $85 = HEAP32[(69464)>>2]|0;
    $86 = ($85>>>0)>($$3>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($85>>>0)>($89>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(69464)>>2]|0;
     $98 = ($97>>>0)>($95>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $108 = HEAP32[(69464)>>2]|0;
 $109 = ($2>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $110 = ((($2)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[(69472)>>2]|0;
  $115 = ($114|0)==($2|0);
  if ($115) {
   $116 = HEAP32[(69460)>>2]|0;
   $117 = (($116) + ($$1416))|0;
   HEAP32[(69460)>>2] = $117;
   HEAP32[(69472)>>2] = $$1;
   $118 = $117 | 1;
   $119 = ((($$1)) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[(69468)>>2]|0;
   $121 = ($$1|0)==($120|0);
   if (!($121)) {
    return;
   }
   HEAP32[(69468)>>2] = 0;
   HEAP32[(69456)>>2] = 0;
   return;
  }
  $122 = HEAP32[(69468)>>2]|0;
  $123 = ($122|0)==($2|0);
  if ($123) {
   $124 = HEAP32[(69456)>>2]|0;
   $125 = (($124) + ($$1416))|0;
   HEAP32[(69456)>>2] = $125;
   HEAP32[(69468)>>2] = $$1;
   $126 = $125 | 1;
   $127 = ((($$1)) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$1) + ($125)|0);
   HEAP32[$128>>2] = $125;
   return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$1416))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  L99: do {
   if ($132) {
    $133 = ((($2)) + 8|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = ((($2)) + 12|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = (69488 + ($137<<2)|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($108>>>0)>($134>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = ((($134)) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($2|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[17362]|0;
     $148 = $147 & $146;
     HEAP32[17362] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre27 = ((($136)) + 8|0);
     $$pre$phi28Z2D = $$pre27;
    } else {
     $150 = ($108>>>0)>($136>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = ((($136)) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($2|0);
     if ($153) {
      $$pre$phi28Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = ((($134)) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi28Z2D>>2] = $134;
   } else {
    $155 = ((($2)) + 24|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ((($2)) + 12|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($2|0);
    do {
     if ($159) {
      $169 = ((($2)) + 16|0);
      $170 = ((($169)) + 4|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ($171|0)==(0|0);
      if ($172) {
       $173 = HEAP32[$169>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $$3433 = 0;
        break;
       } else {
        $$1431$ph = $173;$$1435$ph = $169;
       }
      } else {
       $$1431$ph = $171;$$1435$ph = $170;
      }
      $$1431 = $$1431$ph;$$1435 = $$1435$ph;
      while(1) {
       $175 = ((($$1431)) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if ($177) {
        $178 = ((($$1431)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1431$be = $179;$$1435$be = $178;
        }
       } else {
        $$1431$be = $176;$$1435$be = $175;
       }
       $$1431 = $$1431$be;$$1435 = $$1435$be;
      }
      $181 = ($108>>>0)>($$1435>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $160 = ((($2)) + 8|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($108>>>0)>($161>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = ((($161)) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($2|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = ((($158)) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($2|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $$3433 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $183 = ((($2)) + 28|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (69752 + ($184<<2)|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($186|0)==($2|0);
     do {
      if ($187) {
       HEAP32[$185>>2] = $$3433;
       $cond17 = ($$3433|0)==(0|0);
       if ($cond17) {
        $188 = 1 << $184;
        $189 = $188 ^ -1;
        $190 = HEAP32[(69452)>>2]|0;
        $191 = $190 & $189;
        HEAP32[(69452)>>2] = $191;
        break L99;
       }
      } else {
       $192 = HEAP32[(69464)>>2]|0;
       $193 = ($192>>>0)>($156>>>0);
       if ($193) {
        _abort();
        // unreachable;
       } else {
        $194 = ((($156)) + 16|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = ($195|0)==($2|0);
        $197 = ((($156)) + 20|0);
        $$sink41 = $196 ? $194 : $197;
        HEAP32[$$sink41>>2] = $$3433;
        $198 = ($$3433|0)==(0|0);
        if ($198) {
         break L99;
        } else {
         break;
        }
       }
      }
     } while(0);
     $199 = HEAP32[(69464)>>2]|0;
     $200 = ($199>>>0)>($$3433>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = ((($$3433)) + 24|0);
     HEAP32[$201>>2] = $156;
     $202 = ((($2)) + 16|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = ($199>>>0)>($203>>>0);
       if ($205) {
        _abort();
        // unreachable;
       } else {
        $206 = ((($$3433)) + 16|0);
        HEAP32[$206>>2] = $203;
        $207 = ((($203)) + 24|0);
        HEAP32[$207>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $208 = ((($202)) + 4|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = ($209|0)==(0|0);
     if (!($210)) {
      $211 = HEAP32[(69464)>>2]|0;
      $212 = ($211>>>0)>($209>>>0);
      if ($212) {
       _abort();
       // unreachable;
      } else {
       $213 = ((($$3433)) + 20|0);
       HEAP32[$213>>2] = $209;
       $214 = ((($209)) + 24|0);
       HEAP32[$214>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $215 = $130 | 1;
  $216 = ((($$1)) + 4|0);
  HEAP32[$216>>2] = $215;
  $217 = (($$1) + ($130)|0);
  HEAP32[$217>>2] = $130;
  $218 = HEAP32[(69468)>>2]|0;
  $219 = ($$1|0)==($218|0);
  if ($219) {
   HEAP32[(69456)>>2] = $130;
   return;
  } else {
   $$2 = $130;
  }
 } else {
  $220 = $111 & -2;
  HEAP32[$110>>2] = $220;
  $221 = $$1416 | 1;
  $222 = ((($$1)) + 4|0);
  HEAP32[$222>>2] = $221;
  $223 = (($$1) + ($$1416)|0);
  HEAP32[$223>>2] = $$1416;
  $$2 = $$1416;
 }
 $224 = $$2 >>> 3;
 $225 = ($$2>>>0)<(256);
 if ($225) {
  $226 = $224 << 1;
  $227 = (69488 + ($226<<2)|0);
  $228 = HEAP32[17362]|0;
  $229 = 1 << $224;
  $230 = $228 & $229;
  $231 = ($230|0)==(0);
  if ($231) {
   $232 = $228 | $229;
   HEAP32[17362] = $232;
   $$pre = ((($227)) + 8|0);
   $$0436 = $227;$$pre$phiZ2D = $$pre;
  } else {
   $233 = ((($227)) + 8|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = HEAP32[(69464)>>2]|0;
   $236 = ($235>>>0)>($234>>>0);
   if ($236) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $234;$$pre$phiZ2D = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $237 = ((($$0436)) + 12|0);
  HEAP32[$237>>2] = $$1;
  $238 = ((($$1)) + 8|0);
  HEAP32[$238>>2] = $$0436;
  $239 = ((($$1)) + 12|0);
  HEAP32[$239>>2] = $227;
  return;
 }
 $240 = $$2 >>> 8;
 $241 = ($240|0)==(0);
 if ($241) {
  $$0429 = 0;
 } else {
  $242 = ($$2>>>0)>(16777215);
  if ($242) {
   $$0429 = 31;
  } else {
   $243 = (($240) + 1048320)|0;
   $244 = $243 >>> 16;
   $245 = $244 & 8;
   $246 = $240 << $245;
   $247 = (($246) + 520192)|0;
   $248 = $247 >>> 16;
   $249 = $248 & 4;
   $250 = $249 | $245;
   $251 = $246 << $249;
   $252 = (($251) + 245760)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 2;
   $255 = $250 | $254;
   $256 = (14 - ($255))|0;
   $257 = $251 << $254;
   $258 = $257 >>> 15;
   $259 = (($256) + ($258))|0;
   $260 = $259 << 1;
   $261 = (($259) + 7)|0;
   $262 = $$2 >>> $261;
   $263 = $262 & 1;
   $264 = $263 | $260;
   $$0429 = $264;
  }
 }
 $265 = (69752 + ($$0429<<2)|0);
 $266 = ((($$1)) + 28|0);
 HEAP32[$266>>2] = $$0429;
 $267 = ((($$1)) + 16|0);
 $268 = ((($$1)) + 20|0);
 HEAP32[$268>>2] = 0;
 HEAP32[$267>>2] = 0;
 $269 = HEAP32[(69452)>>2]|0;
 $270 = 1 << $$0429;
 $271 = $269 & $270;
 $272 = ($271|0)==(0);
 if ($272) {
  $273 = $269 | $270;
  HEAP32[(69452)>>2] = $273;
  HEAP32[$265>>2] = $$1;
  $274 = ((($$1)) + 24|0);
  HEAP32[$274>>2] = $265;
  $275 = ((($$1)) + 12|0);
  HEAP32[$275>>2] = $$1;
  $276 = ((($$1)) + 8|0);
  HEAP32[$276>>2] = $$1;
  return;
 }
 $277 = HEAP32[$265>>2]|0;
 $278 = ((($277)) + 4|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = $279 & -8;
 $281 = ($280|0)==($$2|0);
 L189: do {
  if ($281) {
   $$0418$lcssa = $277;
  } else {
   $282 = ($$0429|0)==(31);
   $283 = $$0429 >>> 1;
   $284 = (25 - ($283))|0;
   $285 = $282 ? 0 : $284;
   $286 = $$2 << $285;
   $$041722 = $286;$$041821 = $277;
   while(1) {
    $293 = $$041722 >>> 31;
    $294 = (((($$041821)) + 16|0) + ($293<<2)|0);
    $289 = HEAP32[$294>>2]|0;
    $295 = ($289|0)==(0|0);
    if ($295) {
     break;
    }
    $287 = $$041722 << 1;
    $288 = ((($289)) + 4|0);
    $290 = HEAP32[$288>>2]|0;
    $291 = $290 & -8;
    $292 = ($291|0)==($$2|0);
    if ($292) {
     $$0418$lcssa = $289;
     break L189;
    } else {
     $$041722 = $287;$$041821 = $289;
    }
   }
   $296 = HEAP32[(69464)>>2]|0;
   $297 = ($296>>>0)>($294>>>0);
   if ($297) {
    _abort();
    // unreachable;
   }
   HEAP32[$294>>2] = $$1;
   $298 = ((($$1)) + 24|0);
   HEAP32[$298>>2] = $$041821;
   $299 = ((($$1)) + 12|0);
   HEAP32[$299>>2] = $$1;
   $300 = ((($$1)) + 8|0);
   HEAP32[$300>>2] = $$1;
   return;
  }
 } while(0);
 $301 = ((($$0418$lcssa)) + 8|0);
 $302 = HEAP32[$301>>2]|0;
 $303 = HEAP32[(69464)>>2]|0;
 $304 = ($303>>>0)<=($$0418$lcssa>>>0);
 $305 = ($303>>>0)<=($302>>>0);
 $306 = $305 & $304;
 if (!($306)) {
  _abort();
  // unreachable;
 }
 $307 = ((($302)) + 12|0);
 HEAP32[$307>>2] = $$1;
 HEAP32[$301>>2] = $$1;
 $308 = ((($$1)) + 8|0);
 HEAP32[$308>>2] = $302;
 $309 = ((($$1)) + 12|0);
 HEAP32[$309>>2] = $$0418$lcssa;
 $310 = ((($$1)) + 24|0);
 HEAP32[$310>>2] = 0;
 return;
}
function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}
function __ZNSt3__28ios_baseD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (53336);
 __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($0,0);
 $1 = ((($0)) + 28|0);
 __ZNSt3__26localeD2Ev($1);
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = ((($0)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = ((($0)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 $8 = ((($0)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 return;
}
function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 32|0);
 $5 = ((($0)) + 36|0);
 $$0 = $3;
 while(1) {
  $6 = ($$0|0)==(0);
  if ($6) {
   break;
  }
  $7 = (($$0) + -1)|0;
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = (($11) + ($7<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viii[$10 & 1023]($1,$0,$13);
  $$0 = $7;
 }
 return;
}
function __ZNSt3__28ios_baseD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (53352);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$023 = 0, $$1 = 0, $$124 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 16|0);
 $$0 = $1;$$023 = 0;
 while(1) {
  $5 = ($$023|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = $6;
   $10 = $7;
   $11 = (($10) - ($9))|0;
   $12 = (($2) - ($$023))|0;
   $13 = ($12|0)<($11|0);
   $14 = $13 ? $12 : $11;
   (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$0,$6,$14)|0);
   $15 = (($$0) + ($14)|0);
   $16 = HEAP32[$3>>2]|0;
   $17 = (($16) + ($14)|0);
   HEAP32[$3>>2] = $17;
   $$1 = $15;$$pn = $14;
  } else {
   $18 = HEAP32[$0>>2]|0;
   $19 = ((($18)) + 40|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_ii[$20 & 1023]($0)|0);
   $22 = ($21|0)==(-1);
   if ($22) {
    break;
   }
   $23 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($21)|0);
   HEAP8[$$0>>0] = $23;
   $24 = ((($$0)) + 1|0);
   $$1 = $24;$$pn = 1;
  }
  $$124 = (($$pn) + ($$023))|0;
  $$0 = $$1;$$023 = $$124;
 }
 return ($$023|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($1|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
 $5 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $6 = ($4|0)==($5|0);
 if ($6) {
  $7 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $$0 = $7;
 } else {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 1|0);
  HEAP32[$8>>2] = $10;
  $11 = HEAP8[$9>>0]|0;
  $12 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
  $$0 = $12;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$be = 0, $$021 = 0, $$021$be = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $4 = ((($0)) + 24|0);
 $5 = ((($0)) + 28|0);
 $$0 = $1;$$021 = 0;
 while(1) {
  $6 = ($$021|0)<($2|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$4>>2]|0;
  $8 = HEAP32[$5>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   $19 = $7;
   $20 = $8;
   $21 = (($20) - ($19))|0;
   $22 = (($2) - ($$021))|0;
   $23 = ($22|0)<($21|0);
   $$sroa$speculated = $23 ? $22 : $21;
   (__ZNSt3__211char_traitsIcE4copyEPcPKcm($7,$$0,$$sroa$speculated)|0);
   $24 = HEAP32[$4>>2]|0;
   $25 = (($24) + ($$sroa$speculated)|0);
   HEAP32[$4>>2] = $25;
   $26 = (($$0) + ($$sroa$speculated)|0);
   $27 = (($$sroa$speculated) + ($$021))|0;
   $$0$be = $26;$$021$be = $27;
  } else {
   $10 = HEAP32[$0>>2]|0;
   $11 = ((($10)) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP8[$$0>>0]|0;
   $14 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
   $15 = (FUNCTION_TABLE_iii[$12 & 511]($0,$14)|0);
   $16 = ($15|0)==($3|0);
   if ($16) {
    break;
   }
   $17 = ((($$0)) + 1|0);
   $18 = (($$021) + 1)|0;
   $$0$be = $17;$$021$be = $18;
  }
  $$0 = $$0$be;$$021 = $$021$be;
 }
 return ($$021|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__211char_traitsIcE11to_int_typeEc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 return ($1|0);
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memcpy(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__211char_traitsIcE12to_char_typeEi($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 return ($1|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (53416);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$023 = 0, $$1 = 0, $$124 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 16|0);
 $$0 = $1;$$023 = 0;
 while(1) {
  $5 = ($$023|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = $6;
   $10 = $7;
   $11 = (($10) - ($9))|0;
   $12 = $11 >> 2;
   $13 = (($2) - ($$023))|0;
   $14 = ($13|0)<($12|0);
   $15 = $14 ? $13 : $12;
   (__ZNSt3__211char_traitsIwE4copyEPwPKwm($$0,$6,$15)|0);
   $16 = (($$0) + ($15<<2)|0);
   $17 = HEAP32[$3>>2]|0;
   $18 = (($17) + ($15<<2)|0);
   HEAP32[$3>>2] = $18;
   $$1 = $16;$$pn = $15;
  } else {
   $19 = HEAP32[$0>>2]|0;
   $20 = ((($19)) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_ii[$21 & 1023]($0)|0);
   $23 = ($22|0)==(-1);
   if ($23) {
    break;
   }
   $24 = (__ZNSt3__211char_traitsIwE12to_char_typeEj($22)|0);
   HEAP32[$$0>>2] = $24;
   $25 = ((($$0)) + 4|0);
   $$1 = $25;$$pn = 1;
  }
  $$124 = (($$pn) + ($$023))|0;
  $$0 = $$1;$$023 = $$124;
 }
 return ($$023|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 return ($1|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
 $5 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $6 = ($4|0)==($5|0);
 if ($6) {
  $7 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $$0 = $7;
 } else {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 4|0);
  HEAP32[$8>>2] = $10;
  $11 = HEAP32[$9>>2]|0;
  $12 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
  $$0 = $12;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$be = 0, $$021 = 0, $$021$be = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $4 = ((($0)) + 24|0);
 $5 = ((($0)) + 28|0);
 $$0 = $1;$$021 = 0;
 while(1) {
  $6 = ($$021|0)<($2|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$4>>2]|0;
  $8 = HEAP32[$5>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   $19 = $7;
   $20 = $8;
   $21 = (($20) - ($19))|0;
   $22 = $21 >> 2;
   $23 = (($2) - ($$021))|0;
   $24 = ($23|0)<($22|0);
   $$sroa$speculated = $24 ? $23 : $22;
   (__ZNSt3__211char_traitsIwE4copyEPwPKwm($7,$$0,$$sroa$speculated)|0);
   $25 = HEAP32[$4>>2]|0;
   $26 = (($25) + ($$sroa$speculated<<2)|0);
   HEAP32[$4>>2] = $26;
   $27 = (($$0) + ($$sroa$speculated<<2)|0);
   $28 = (($$sroa$speculated) + ($$021))|0;
   $$0$be = $27;$$021$be = $28;
  } else {
   $10 = HEAP32[$0>>2]|0;
   $11 = ((($10)) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$$0>>2]|0;
   $14 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
   $15 = (FUNCTION_TABLE_iii[$12 & 511]($0,$14)|0);
   $16 = ($15|0)==($3|0);
   if ($16) {
    break;
   }
   $17 = ((($$0)) + 4|0);
   $18 = (($$021) + 1)|0;
   $$0$be = $17;$$021$be = $18;
  }
  $$0 = $$0$be;$$021 = $$021$be;
 }
 return ($$021|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__211char_traitsIwE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__211char_traitsIwE11to_int_typeEw($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__211char_traitsIwE4copyEPwPKwm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemcpy($0,$1,$2)|0);
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__211char_traitsIwE12to_char_typeEj($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0,53512);
 $1 = ((($0)) + 8|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($0,53560);
 $1 = ((($0)) + 8|0);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0,53608);
 $1 = ((($0)) + 4|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($0,53656);
 $1 = ((($0)) + 4|0);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28ios_base5clearEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = $4&1;
 $spec$select = $5 | $1;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = $spec$select;
 return;
}
function __ZNSt3__28ios_base4initEPv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 HEAP32[$2>>2] = $1;
 $3 = ($1|0)==(0|0);
 $4 = $3&1;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = 4098;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 8|0);
 HEAP32[$9>>2] = 6;
 $10 = ((($0)) + 32|0);
 $11 = ((($0)) + 28|0);
 dest=$10; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__26localeC2Ev($11);
 return;
}
function __ZNKSt3__28ios_base6getlocEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 __ZNSt3__26localeC2ERKS0_($0,$2);
 return;
}
function __ZNSt3__211char_traitsIwE11eq_int_typeEjj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 return ($2|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (53352);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeC2Ev($1);
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (53416);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeC2Ev($1);
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($0) + ($4)|0);
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($1,$0);
  $9 = HEAP8[$1>>0]|0;
  $10 = ($9<<24>>24)==(0);
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + -12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($0) + ($13)|0);
   $15 = ((($14)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 24|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
   $21 = ($20|0)==(-1);
   if ($21) {
    $22 = HEAP32[$0>>2]|0;
    $23 = ((($22)) + -12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($0) + ($24)|0);
    $26 = ((($25)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 | 1;
    __ZNSt3__28ios_base5clearEj($25,$28);
   }
  }
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + ($5)|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = ((($6)) + 72|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11)|0);
  }
  HEAP8[$0>>0] = 1;
 }
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = ((($6)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = ((($6)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 8192;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = (__ZSt18uncaught_exceptionv()|0);
    if (!($17)) {
     $18 = HEAP32[$1>>2]|0;
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($19)) + -12|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($18) + ($21)|0);
     $23 = ((($22)) + 24|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = HEAP32[$24>>2]|0;
     $26 = ((($25)) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_ii[$27 & 1023]($24)|0);
     $29 = ($28|0)==(-1);
     if ($29) {
      $30 = HEAP32[$1>>2]|0;
      $31 = HEAP32[$30>>2]|0;
      $32 = ((($31)) + -12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($30) + ($33)|0);
      $35 = ((($34)) + 16|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = $36 | 1;
      __ZNSt3__28ios_base5clearEj($34,$37);
     }
    }
   }
  }
 }
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($4,$0);
 $6 = HEAP8[$4>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($8)) + -12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($0) + ($10)|0);
  __ZNKSt3__28ios_base6getlocEv($5,$11);
  $12 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,71048)|0);
  __ZNSt3__26localeD2Ev($5);
  $13 = HEAP32[$0>>2]|0;
  $14 = ((($13)) + -12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($0) + ($15)|0);
  $17 = ((($16)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $20 = ((($16)) + 76|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($19,$21)|0);
  if ($22) {
   __ZNKSt3__28ios_base6getlocEv($2,$16);
   $23 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,70992)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (FUNCTION_TABLE_iii[$26 & 511]($23,32)|0);
   __ZNSt3__26localeD2Ev($2);
   $28 = $27 << 24 >> 24;
   HEAP32[$20>>2] = $28;
   $30 = $28;
  } else {
   $$pre$i = HEAP32[$20>>2]|0;
   $30 = $$pre$i;
  }
  $29 = $30&255;
  $31 = HEAP32[$12>>2]|0;
  $32 = ((($31)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$3>>2] = $18;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $34 = (FUNCTION_TABLE_iiiiii[$33 & 511]($12,$$byval_copy,$16,$29,$1)|0);
  $35 = ($34|0)==(0|0);
  if ($35) {
   $36 = HEAP32[$0>>2]|0;
   $37 = ((($36)) + -12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($0) + ($38)|0);
   $40 = ((($39)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 | 5;
   __ZNSt3__28ios_base5clearEj($39,$42);
  }
 }
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($4,$0);
 $6 = HEAP8[$4>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($8)) + -12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($0) + ($10)|0);
  __ZNKSt3__28ios_base6getlocEv($5,$11);
  $12 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,71048)|0);
  __ZNSt3__26localeD2Ev($5);
  $13 = HEAP32[$0>>2]|0;
  $14 = ((($13)) + -12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($0) + ($15)|0);
  $17 = ((($16)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $20 = ((($16)) + 76|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($19,$21)|0);
  if ($22) {
   __ZNKSt3__28ios_base6getlocEv($3,$16);
   $23 = (__ZNKSt3__26locale9use_facetERNS0_2idE($3,70992)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (FUNCTION_TABLE_iii[$26 & 511]($23,32)|0);
   __ZNSt3__26localeD2Ev($3);
   $28 = $27 << 24 >> 24;
   HEAP32[$20>>2] = $28;
   $30 = $28;
  } else {
   $$pre$i = HEAP32[$20>>2]|0;
   $30 = $$pre$i;
  }
  $29 = $30&255;
  $31 = HEAP32[$12>>2]|0;
  $32 = ((($31)) + 24|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$2>>2] = $18;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
  $34 = (FUNCTION_TABLE_iiiiii[$33 & 511]($12,$$byval_copy,$16,$29,$1)|0);
  $35 = ($34|0)==(0|0);
  if ($35) {
   $36 = HEAP32[$0>>2]|0;
   $37 = ((($36)) + -12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($0) + ($38)|0);
   $40 = ((($39)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 | 5;
   __ZNSt3__28ios_base5clearEj($39,$42);
  }
 }
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($2,$0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if (!($4)) {
   $5 = HEAP32[$0>>2]|0;
   $6 = ((($5)) + -12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($0) + ($7)|0);
   $9 = ((($8)) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10;
   $12 = ($10|0)==(0);
   if (!($12)) {
    $13 = ((($11)) + 24|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($11)) + 28|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14|0)==($16|0);
    if ($17) {
     $18 = $10;
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($19)) + 52|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($1)|0);
     $23 = (FUNCTION_TABLE_iii[$21 & 511]($11,$22)|0);
     $$0$i$i = $23;
    } else {
     $24 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $24;
     HEAP8[$14>>0] = $1;
     $25 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($1)|0);
     $$0$i$i = $25;
    }
    $26 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $27 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i,$26)|0);
    if (!($27)) {
     break;
    }
   }
   $28 = HEAP32[$0>>2]|0;
   $29 = ((($28)) + -12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($0) + ($30)|0);
   $32 = ((($31)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 | 1;
   __ZNSt3__28ios_base5clearEj($31,$34);
  }
 } while(0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($2);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 1;
 HEAP32[$1>>2] = $3;
 return;
}
function __GLOBAL__I_000101() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_208();
 return;
}
function __GLOBAL__sub_I_iostream_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxx_global_var_init_208() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_base4InitC2Ev(0);
 return;
}
function __ZNSt3__28ios_base4InitC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[13190]|0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(70624,$1,70680);
 HEAP32[17486] = (53484);
 HEAP32[(69952)>>2] = (53504);
 HEAP32[(69948)>>2] = 0;
 __ZNSt3__28ios_base4initEPv((69952),70624);
 HEAP32[(70024)>>2] = 0;
 $2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(70028)>>2] = $2;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(70688,$1,70744);
 HEAP32[17508] = (53532);
 HEAP32[(70040)>>2] = (53552);
 HEAP32[(70036)>>2] = 0;
 __ZNSt3__28ios_base4initEPv((70040),70688);
 HEAP32[(70112)>>2] = 0;
 $3 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(70116)>>2] = $3;
 $4 = HEAP32[13157]|0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(70752,$4,70800);
 HEAP32[17530] = (53580);
 HEAP32[(70124)>>2] = (53600);
 __ZNSt3__28ios_base4initEPv((70124),70752);
 HEAP32[(70196)>>2] = 0;
 $5 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(70200)>>2] = $5;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(70808,$4,70856);
 HEAP32[17551] = (53628);
 HEAP32[(70208)>>2] = (53648);
 __ZNSt3__28ios_base4initEPv((70208),70808);
 HEAP32[(70280)>>2] = 0;
 $6 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(70284)>>2] = $6;
 $7 = HEAP32[13125]|0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(70864,$7,70912);
 HEAP32[17572] = (53580);
 HEAP32[(70292)>>2] = (53600);
 __ZNSt3__28ios_base4initEPv((70292),70864);
 HEAP32[(70364)>>2] = 0;
 $8 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(70368)>>2] = $8;
 $9 = HEAP32[17572]|0;
 $10 = ((($9)) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (70288 + ($11)|0);
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[17614] = (53580);
 HEAP32[(70460)>>2] = (53600);
 __ZNSt3__28ios_base4initEPv((70460),$14);
 HEAP32[(70532)>>2] = 0;
 $15 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(70536)>>2] = $15;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(70920,$7,70968);
 HEAP32[17593] = (53628);
 HEAP32[(70376)>>2] = (53648);
 __ZNSt3__28ios_base4initEPv((70376),70920);
 HEAP32[(70448)>>2] = 0;
 $16 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(70452)>>2] = $16;
 $17 = HEAP32[17593]|0;
 $18 = ((($17)) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (70372 + ($19)|0);
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[17635] = (53628);
 HEAP32[(70544)>>2] = (53648);
 __ZNSt3__28ios_base4initEPv((70544),$22);
 HEAP32[(70616)>>2] = 0;
 $23 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(70620)>>2] = $23;
 $24 = HEAP32[17486]|0;
 $25 = ((($24)) + -12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (69944 + ($26)|0);
 $28 = ((($27)) + 72|0);
 HEAP32[$28>>2] = 70120;
 $29 = HEAP32[17508]|0;
 $30 = ((($29)) + -12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (70032 + ($31)|0);
 $33 = ((($32)) + 72|0);
 HEAP32[$33>>2] = 70204;
 $34 = HEAP32[17572]|0;
 $35 = ((($34)) + -12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (70288 + ($36)|0);
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 | 8192;
 HEAP32[$38>>2] = $40;
 $41 = HEAP32[17593]|0;
 $42 = ((($41)) + -12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (70372 + ($43)|0);
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 | 8192;
 HEAP32[$45>>2] = $47;
 $48 = HEAP32[$35>>2]|0;
 $49 = (70288 + ($48)|0);
 $50 = ((($49)) + 72|0);
 HEAP32[$50>>2] = 70120;
 $51 = HEAP32[$42>>2]|0;
 $52 = (70372 + ($51)|0);
 $53 = ((($52)) + 72|0);
 HEAP32[$53>>2] = 70204;
 return;
}
function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0>>2] = (53864);
 $4 = ((($0)) + 32|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 40|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($0)) + 48|0);
 $7 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[$6>>2] = $7;
 $8 = ((($0)) + 52|0);
 HEAP8[$8>>0] = 0;
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$12);
 FUNCTION_TABLE_vii[$11 & 511]($0,$3);
 __ZNSt3__26localeD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0>>2] = (53800);
 $4 = ((($0)) + 32|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 40|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($0)) + 48|0);
 $7 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[$6>>2] = $7;
 $8 = ((($0)) + 52|0);
 HEAP8[$8>>0] = 0;
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$12);
 FUNCTION_TABLE_vii[$11 & 511]($0,$3);
 __ZNSt3__26localeD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0>>2] = (53736);
 $4 = ((($0)) + 32|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 36|0);
 $6 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$6);
 $7 = (__ZNKSt3__26locale9use_facetERNS0_2idE($3,71296)|0);
 __ZNSt3__26localeD2Ev($3);
 HEAP32[$5>>2] = $7;
 $8 = ((($0)) + 40|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$7>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($7)|0);
 $14 = $13&1;
 HEAP8[$9>>0] = $14;
 STACKTOP = sp;return;
}
function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0>>2] = (53672);
 $4 = ((($0)) + 32|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 36|0);
 $6 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$6);
 $7 = (__ZNKSt3__26locale9use_facetERNS0_2idE($3,71304)|0);
 __ZNSt3__26localeD2Ev($3);
 HEAP32[$5>>2] = $7;
 $8 = ((($0)) + 40|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$7>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($7)|0);
 $14 = $13&1;
 HEAP8[$9>>0] = $14;
 STACKTOP = sp;return;
}
function __ZNSt3__211__stdoutbufIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,71304)|0);
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($5)|0);
 $11 = ((($0)) + 44|0);
 $12 = $10&1;
 HEAP8[$11>>0] = $12;
 return;
}
function __ZNSt3__211__stdoutbufIwE4syncEv($0) {
 $0 = $0|0;
 var $$10 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 36|0);
 $4 = ((($0)) + 40|0);
 $5 = ((($1)) + 8|0);
 $6 = $1;
 $7 = ((($0)) + 32|0);
 L1: while(1) {
  $8 = HEAP32[$3>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = HEAP32[$8>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiiii[$12 & 511]($8,$9,$1,$5,$2)|0);
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) - ($6))|0;
  $16 = HEAP32[$7>>2]|0;
  $17 = (_fwrite($1,1,$15,$16)|0);
  $18 = ($17|0)==($15|0);
  if (!($18)) {
   $$2 = -1;
   break;
  }
  switch ($13|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$2 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $19 = HEAP32[$7>>2]|0;
  $20 = (_fflush($19)|0);
  $21 = ($20|0)!=(0);
  $$10 = $21 << 31 >> 31;
  $$2 = $$10;
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNSt3__211__stdoutbufIwE6xsputnEPKwl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $$0 = 0;$$011 = $1;
   while(1) {
    $9 = ($$0|0)<($2|0);
    if (!($9)) {
     $$010 = $$0;
     break L1;
    }
    $10 = HEAP32[$0>>2]|0;
    $11 = ((($10)) + 52|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$$011>>2]|0;
    $14 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
    $15 = (FUNCTION_TABLE_iii[$12 & 511]($0,$14)|0);
    $16 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $17 = ($15|0)==($16|0);
    if ($17) {
     $$010 = $$0;
     break L1;
    }
    $18 = (($$0) + 1)|0;
    $19 = ((($$011)) + 4|0);
    $$0 = $18;$$011 = $19;
   }
  } else {
   $6 = ((($0)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_fwrite($1,4,$2,$7)|0);
   $$010 = $8;
  }
 } while(0);
 return ($$010|0);
}
function __ZNSt3__211__stdoutbufIwE8overflowEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$032 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $7 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($1,$6)|0);
 do {
  if ($7) {
   label = 15;
  } else {
   $8 = (__ZNSt3__211char_traitsIwE12to_char_typeEj($1)|0);
   HEAP32[$3>>2] = $8;
   $9 = ((($0)) + 44|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if (!($11)) {
    $12 = ((($0)) + 32|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (_fwrite($3,4,1,$13)|0);
    $15 = ($14|0)==(1);
    if ($15) {
     label = 15;
     break;
    }
    $16 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $$4 = $16;
    break;
   }
   HEAP32[$4>>2] = $2;
   $17 = ((($3)) + 4|0);
   $18 = ((($0)) + 36|0);
   $19 = ((($0)) + 40|0);
   $20 = ((($2)) + 8|0);
   $21 = $2;
   $22 = ((($0)) + 32|0);
   $$032 = $3;
   while(1) {
    $23 = HEAP32[$18>>2]|0;
    $24 = HEAP32[$19>>2]|0;
    $25 = HEAP32[$23>>2]|0;
    $26 = ((($25)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (FUNCTION_TABLE_iiiiiiiii[$27 & 511]($23,$24,$$032,$17,$5,$2,$20,$4)|0);
    $29 = HEAP32[$5>>2]|0;
    $30 = ($29|0)==($$032|0);
    if ($30) {
     label = 14;
     break;
    }
    $31 = ($28|0)==(3);
    if ($31) {
     label = 8;
     break;
    }
    $35 = ($28|0)==(1);
    $36 = ($28>>>0)<(2);
    if (!($36)) {
     label = 14;
     break;
    }
    $37 = HEAP32[$4>>2]|0;
    $38 = (($37) - ($21))|0;
    $39 = HEAP32[$22>>2]|0;
    $40 = (_fwrite($2,1,$38,$39)|0);
    $41 = ($40|0)==($38|0);
    if (!($41)) {
     label = 14;
     break;
    }
    $42 = HEAP32[$5>>2]|0;
    if ($35) {
     $$032 = $42;
    } else {
     label = 13;
     break;
    }
   }
   if ((label|0) == 8) {
    $32 = HEAP32[$22>>2]|0;
    $33 = (_fwrite($$032,1,1,$32)|0);
    $34 = ($33|0)==(1);
    if ($34) {
     label = 13;
    } else {
     label = 14;
    }
   }
   if ((label|0) == 13) {
    label = 15;
    break;
   }
   else if ((label|0) == 14) {
    $43 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $$4 = $43;
    break;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $44 = (__ZNSt3__211char_traitsIwE7not_eofEj($1)|0);
  $$4 = $44;
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNSt3__211char_traitsIwE7not_eofEj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $2 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($0,$1)|0);
 if ($2) {
  $3 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $4 = $3 ^ -1;
  $5 = $4;
 } else {
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__211__stdoutbufIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,71296)|0);
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($5)|0);
 $11 = ((($0)) + 44|0);
 $12 = $10&1;
 HEAP8[$11>>0] = $12;
 return;
}
function __ZNSt3__211__stdoutbufIcE4syncEv($0) {
 $0 = $0|0;
 var $$10 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 36|0);
 $4 = ((($0)) + 40|0);
 $5 = ((($1)) + 8|0);
 $6 = $1;
 $7 = ((($0)) + 32|0);
 L1: while(1) {
  $8 = HEAP32[$3>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = HEAP32[$8>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiiii[$12 & 511]($8,$9,$1,$5,$2)|0);
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) - ($6))|0;
  $16 = HEAP32[$7>>2]|0;
  $17 = (_fwrite($1,1,$15,$16)|0);
  $18 = ($17|0)==($15|0);
  if (!($18)) {
   $$2 = -1;
   break;
  }
  switch ($13|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$2 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $19 = HEAP32[$7>>2]|0;
  $20 = (_fflush($19)|0);
  $21 = ($20|0)!=(0);
  $$10 = $21 << 31 >> 31;
  $$2 = $$10;
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNSt3__211__stdoutbufIcE6xsputnEPKcl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $$0 = 0;$$011 = $1;
   while(1) {
    $9 = ($$0|0)<($2|0);
    if (!($9)) {
     $$010 = $$0;
     break L1;
    }
    $10 = HEAP32[$0>>2]|0;
    $11 = ((($10)) + 52|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP8[$$011>>0]|0;
    $14 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
    $15 = (FUNCTION_TABLE_iii[$12 & 511]($0,$14)|0);
    $16 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $17 = ($15|0)==($16|0);
    if ($17) {
     $$010 = $$0;
     break L1;
    }
    $18 = (($$0) + 1)|0;
    $19 = ((($$011)) + 1|0);
    $$0 = $18;$$011 = $19;
   }
  } else {
   $6 = ((($0)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_fwrite($1,1,$2,$7)|0);
   $$010 = $8;
  }
 } while(0);
 return ($$010|0);
}
function __ZNSt3__211__stdoutbufIcE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$032 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $7 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1,$6)|0);
 do {
  if ($7) {
   label = 15;
  } else {
   $8 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($1)|0);
   HEAP8[$3>>0] = $8;
   $9 = ((($0)) + 44|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if (!($11)) {
    $12 = ((($0)) + 32|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (_fwrite($3,1,1,$13)|0);
    $15 = ($14|0)==(1);
    if ($15) {
     label = 15;
     break;
    }
    $16 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $$4 = $16;
    break;
   }
   HEAP32[$4>>2] = $2;
   $17 = ((($3)) + 1|0);
   $18 = ((($0)) + 36|0);
   $19 = ((($0)) + 40|0);
   $20 = ((($2)) + 8|0);
   $21 = $2;
   $22 = ((($0)) + 32|0);
   $$032 = $3;
   while(1) {
    $23 = HEAP32[$18>>2]|0;
    $24 = HEAP32[$19>>2]|0;
    $25 = HEAP32[$23>>2]|0;
    $26 = ((($25)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (FUNCTION_TABLE_iiiiiiiii[$27 & 511]($23,$24,$$032,$17,$5,$2,$20,$4)|0);
    $29 = HEAP32[$5>>2]|0;
    $30 = ($29|0)==($$032|0);
    if ($30) {
     label = 14;
     break;
    }
    $31 = ($28|0)==(3);
    if ($31) {
     label = 8;
     break;
    }
    $35 = ($28|0)==(1);
    $36 = ($28>>>0)<(2);
    if (!($36)) {
     label = 14;
     break;
    }
    $37 = HEAP32[$4>>2]|0;
    $38 = (($37) - ($21))|0;
    $39 = HEAP32[$22>>2]|0;
    $40 = (_fwrite($2,1,$38,$39)|0);
    $41 = ($40|0)==($38|0);
    if (!($41)) {
     label = 14;
     break;
    }
    $42 = HEAP32[$5>>2]|0;
    if ($35) {
     $$032 = $42;
    } else {
     label = 13;
     break;
    }
   }
   if ((label|0) == 8) {
    $32 = HEAP32[$22>>2]|0;
    $33 = (_fwrite($$032,1,1,$32)|0);
    $34 = ($33|0)==(1);
    if ($34) {
     label = 13;
    } else {
     label = 14;
    }
   }
   if ((label|0) == 13) {
    label = 15;
    break;
   }
   else if ((label|0) == 14) {
    $43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $$4 = $43;
    break;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $44 = (__ZNSt3__211char_traitsIcE7not_eofEi($1)|0);
  $$4 = $44;
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNSt3__211char_traitsIcE7not_eofEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $2 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($0,$1)|0);
 if ($2) {
  $3 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $4 = $3 ^ -1;
  $5 = $4;
 } else {
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__210__stdinbufIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,71304)|0);
 $3 = ((($0)) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 1023]($2)|0);
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($9)|0);
 $14 = ((($0)) + 53|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)>(8);
 if ($17) {
  __ZNSt3__221__throw_runtime_errorEPKc(62034);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__210__stdinbufIwE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIwE9__getcharEb($0,0)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIwE5uflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIwE9__getcharEb($0,1)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIwE9pbackfailEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$07 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $7 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($1,$6)|0);
 $8 = ((($0)) + 52|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)!=(0);
 do {
  if ($7) {
   if ($10) {
    $$1 = $1;
   } else {
    $11 = ((($0)) + 48|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $14 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($12,$13)|0);
    $15 = $14 ^ 1;
    $16 = $15&1;
    HEAP8[$8>>0] = $16;
    $$1 = $12;
   }
  } else {
   if ($10) {
    $17 = ((($0)) + 48|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (__ZNSt3__211char_traitsIwE12to_char_typeEj($18)|0);
    HEAP32[$4>>2] = $19;
    $20 = ((($0)) + 36|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($0)) + 40|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($4)) + 4|0);
    $25 = ((($2)) + 8|0);
    $26 = HEAP32[$21>>2]|0;
    $27 = ((($26)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_iiiiiiiii[$28 & 511]($21,$23,$4,$24,$5,$2,$25,$3)|0);
    switch ($29|0) {
    case 1: case 2:  {
     label = 11;
     break;
    }
    case 3:  {
     $30 = HEAP32[$17>>2]|0;
     $31 = $30&255;
     HEAP8[$2>>0] = $31;
     $32 = ((($2)) + 1|0);
     HEAP32[$3>>2] = $32;
     label = 8;
     break;
    }
    default: {
     label = 8;
    }
    }
    L9: do {
     if ((label|0) == 8) {
      $33 = ((($0)) + 32|0);
      while(1) {
       $34 = HEAP32[$3>>2]|0;
       $35 = ($34>>>0)>($2>>>0);
       if (!($35)) {
        $$0 = 1;$$07 = 0;
        break L9;
       }
       $36 = ((($34)) + -1|0);
       HEAP32[$3>>2] = $36;
       $37 = HEAP8[$36>>0]|0;
       $38 = $37 << 24 >> 24;
       $39 = HEAP32[$33>>2]|0;
       $40 = (_ungetc($38,$39)|0);
       $41 = ($40|0)==(-1);
       if ($41) {
        label = 11;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 11) {
     $42 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $$0 = 0;$$07 = $42;
    }
    if ($$0) {
     $$pre$phiZ2D = $17;
    } else {
     $$1 = $$07;
     break;
    }
   } else {
    $$pre = ((($0)) + 48|0);
    $$pre$phiZ2D = $$pre;
   }
   HEAP32[$$pre$phiZ2D>>2] = $1;
   HEAP8[$8>>0] = 1;
   $$1 = $1;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__210__stdinbufIwE9__getcharEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 52|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $12 = ((($0)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)>(1);
  $$sroa$speculated = $14 ? $13 : 1;
  $15 = ((($0)) + 32|0);
  $$052 = 0;
  while(1) {
   $16 = ($$052>>>0)<($$sroa$speculated>>>0);
   if (!($16)) {
    label = 9;
    break;
   }
   $17 = HEAP32[$15>>2]|0;
   $18 = (_getc($17)|0);
   $19 = ($18|0)==(-1);
   if ($19) {
    label = 8;
    break;
   }
   $20 = $18&255;
   $21 = (($2) + ($$052)|0);
   HEAP8[$21>>0] = $20;
   $22 = (($$052) + 1)|0;
   $$052 = $22;
  }
  if ((label|0) == 8) {
   $23 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $$10 = $23;
  }
  else if ((label|0) == 9) {
   $24 = ((($0)) + 53|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ($25<<24>>24)==(0);
   do {
    if ($26) {
     $29 = ((($0)) + 40|0);
     $30 = ((($0)) + 36|0);
     $31 = ((($3)) + 4|0);
     $$048 = $$sroa$speculated;
     L11: while(1) {
      $32 = HEAP32[$29>>2]|0;
      $33 = $32;
      $34 = $33;
      $35 = HEAP32[$34>>2]|0;
      $36 = (($33) + 4)|0;
      $37 = $36;
      $38 = HEAP32[$37>>2]|0;
      $39 = HEAP32[$30>>2]|0;
      $40 = (($2) + ($$048)|0);
      $41 = HEAP32[$39>>2]|0;
      $42 = ((($41)) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (FUNCTION_TABLE_iiiiiiiii[$43 & 511]($39,$32,$2,$40,$4,$3,$31,$5)|0);
      switch ($44|0) {
      case 3:  {
       label = 15;
       break L11;
       break;
      }
      case 2:  {
       label = 17;
       break L11;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       break L11;
      }
      }
      $45 = HEAP32[$29>>2]|0;
      $46 = $45;
      $47 = $46;
      HEAP32[$47>>2] = $35;
      $48 = (($46) + 4)|0;
      $49 = $48;
      HEAP32[$49>>2] = $38;
      $50 = ($$048|0)==(8);
      if ($50) {
       label = 17;
       break;
      }
      $51 = HEAP32[$15>>2]|0;
      $52 = (_getc($51)|0);
      $53 = ($52|0)==(-1);
      if ($53) {
       label = 17;
       break;
      }
      $56 = $52&255;
      HEAP8[$40>>0] = $56;
      $57 = (($$048) + 1)|0;
      $$048 = $57;
     }
     if ((label|0) == 15) {
      $54 = HEAP8[$2>>0]|0;
      $55 = $54 << 24 >> 24;
      HEAP32[$3>>2] = $55;
     }
     else if ((label|0) == 17) {
      $58 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $$9 = $58;
      break;
     }
     $$351 = $$048;
     label = 19;
    } else {
     $27 = HEAP8[$2>>0]|0;
     $28 = $27 << 24 >> 24;
     HEAP32[$3>>2] = $28;
     $$351 = $$sroa$speculated;
     label = 19;
    }
   } while(0);
   L21: do {
    if ((label|0) == 19) {
     L23: do {
      if ($1) {
       $69 = HEAP32[$3>>2]|0;
       $70 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($69)|0);
       $71 = ((($0)) + 48|0);
       HEAP32[$71>>2] = $70;
      } else {
       $$0 = $$351;
       while(1) {
        $59 = ($$0|0)>(0);
        if (!($59)) {
         break L23;
        }
        $60 = (($$0) + -1)|0;
        $61 = (($2) + ($60)|0);
        $62 = HEAP8[$61>>0]|0;
        $63 = $62 << 24 >> 24;
        $64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
        $65 = HEAP32[$15>>2]|0;
        $66 = (_ungetc($64,$65)|0);
        $67 = ($66|0)==(-1);
        if ($67) {
         break;
        } else {
         $$0 = $60;
        }
       }
       $68 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $$9 = $68;
       break L21;
      }
     } while(0);
     $72 = HEAP32[$3>>2]|0;
     $73 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($72)|0);
     $$9 = $73;
    }
   } while(0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = ((($0)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  if ($1) {
   $11 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   HEAP32[$9>>2] = $11;
   HEAP8[$6>>0] = 0;
   $$11 = $10;
  } else {
   $$11 = $10;
  }
 }
 STACKTOP = sp;return ($$11|0);
}
function __ZNSt3__210__stdinbufIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,71296)|0);
 $3 = ((($0)) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 1023]($2)|0);
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($9)|0);
 $14 = ((($0)) + 53|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)>(8);
 if ($17) {
  __ZNSt3__221__throw_runtime_errorEPKc(62034);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__210__stdinbufIcE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIcE9__getcharEb($0,0)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIcE5uflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIcE9__getcharEb($0,1)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIcE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$07 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 4|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $7 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1,$6)|0);
 $8 = ((($0)) + 52|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)!=(0);
 do {
  if ($7) {
   if ($10) {
    $$1 = $1;
   } else {
    $11 = ((($0)) + 48|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $14 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($12,$13)|0);
    $15 = $14 ^ 1;
    $16 = $15&1;
    HEAP8[$8>>0] = $16;
    $$1 = $12;
   }
  } else {
   if ($10) {
    $17 = ((($0)) + 48|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($18)|0);
    HEAP8[$4>>0] = $19;
    $20 = ((($0)) + 36|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($0)) + 40|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($4)) + 1|0);
    $25 = ((($2)) + 8|0);
    $26 = HEAP32[$21>>2]|0;
    $27 = ((($26)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_iiiiiiiii[$28 & 511]($21,$23,$4,$24,$5,$2,$25,$3)|0);
    switch ($29|0) {
    case 1: case 2:  {
     label = 11;
     break;
    }
    case 3:  {
     $30 = HEAP32[$17>>2]|0;
     $31 = $30&255;
     HEAP8[$2>>0] = $31;
     $32 = ((($2)) + 1|0);
     HEAP32[$3>>2] = $32;
     label = 8;
     break;
    }
    default: {
     label = 8;
    }
    }
    L9: do {
     if ((label|0) == 8) {
      $33 = ((($0)) + 32|0);
      while(1) {
       $34 = HEAP32[$3>>2]|0;
       $35 = ($34>>>0)>($2>>>0);
       if (!($35)) {
        $$0 = 1;$$07 = 0;
        break L9;
       }
       $36 = ((($34)) + -1|0);
       HEAP32[$3>>2] = $36;
       $37 = HEAP8[$36>>0]|0;
       $38 = $37 << 24 >> 24;
       $39 = HEAP32[$33>>2]|0;
       $40 = (_ungetc($38,$39)|0);
       $41 = ($40|0)==(-1);
       if ($41) {
        label = 11;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 11) {
     $42 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $$0 = 0;$$07 = $42;
    }
    if ($$0) {
     $$pre$phiZ2D = $17;
    } else {
     $$1 = $$07;
     break;
    }
   } else {
    $$pre = ((($0)) + 48|0);
    $$pre$phiZ2D = $$pre;
   }
   HEAP32[$$pre$phiZ2D>>2] = $1;
   HEAP8[$8>>0] = 1;
   $$1 = $1;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__210__stdinbufIcE9__getcharEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 52|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $12 = ((($0)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)>(1);
  $$sroa$speculated = $14 ? $13 : 1;
  $15 = ((($0)) + 32|0);
  $$052 = 0;
  while(1) {
   $16 = ($$052>>>0)<($$sroa$speculated>>>0);
   if (!($16)) {
    label = 9;
    break;
   }
   $17 = HEAP32[$15>>2]|0;
   $18 = (_getc($17)|0);
   $19 = ($18|0)==(-1);
   if ($19) {
    label = 8;
    break;
   }
   $20 = $18&255;
   $21 = (($2) + ($$052)|0);
   HEAP8[$21>>0] = $20;
   $22 = (($$052) + 1)|0;
   $$052 = $22;
  }
  if ((label|0) == 8) {
   $23 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $$10 = $23;
  }
  else if ((label|0) == 9) {
   $24 = ((($0)) + 53|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ($25<<24>>24)==(0);
   do {
    if ($26) {
     $28 = ((($0)) + 40|0);
     $29 = ((($0)) + 36|0);
     $30 = ((($3)) + 1|0);
     $$048 = $$sroa$speculated;
     L11: while(1) {
      $31 = HEAP32[$28>>2]|0;
      $32 = $31;
      $33 = $32;
      $34 = HEAP32[$33>>2]|0;
      $35 = (($32) + 4)|0;
      $36 = $35;
      $37 = HEAP32[$36>>2]|0;
      $38 = HEAP32[$29>>2]|0;
      $39 = (($2) + ($$048)|0);
      $40 = HEAP32[$38>>2]|0;
      $41 = ((($40)) + 16|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (FUNCTION_TABLE_iiiiiiiii[$42 & 511]($38,$31,$2,$39,$4,$3,$30,$5)|0);
      switch ($43|0) {
      case 3:  {
       label = 15;
       break L11;
       break;
      }
      case 2:  {
       label = 17;
       break L11;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       break L11;
      }
      }
      $44 = HEAP32[$28>>2]|0;
      $45 = $44;
      $46 = $45;
      HEAP32[$46>>2] = $34;
      $47 = (($45) + 4)|0;
      $48 = $47;
      HEAP32[$48>>2] = $37;
      $49 = ($$048|0)==(8);
      if ($49) {
       label = 17;
       break;
      }
      $50 = HEAP32[$15>>2]|0;
      $51 = (_getc($50)|0);
      $52 = ($51|0)==(-1);
      if ($52) {
       label = 17;
       break;
      }
      $54 = $51&255;
      HEAP8[$39>>0] = $54;
      $55 = (($$048) + 1)|0;
      $$048 = $55;
     }
     if ((label|0) == 15) {
      $53 = HEAP8[$2>>0]|0;
      HEAP8[$3>>0] = $53;
     }
     else if ((label|0) == 17) {
      $56 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $$9 = $56;
      break;
     }
     $$351 = $$048;
     label = 19;
    } else {
     $27 = HEAP8[$2>>0]|0;
     HEAP8[$3>>0] = $27;
     $$351 = $$sroa$speculated;
     label = 19;
    }
   } while(0);
   L21: do {
    if ((label|0) == 19) {
     L23: do {
      if ($1) {
       $66 = HEAP8[$3>>0]|0;
       $67 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($66)|0);
       $68 = ((($0)) + 48|0);
       HEAP32[$68>>2] = $67;
      } else {
       $$0 = $$351;
       while(1) {
        $57 = ($$0|0)>(0);
        if (!($57)) {
         break L23;
        }
        $58 = (($$0) + -1)|0;
        $59 = (($2) + ($58)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($60)|0);
        $62 = HEAP32[$15>>2]|0;
        $63 = (_ungetc($61,$62)|0);
        $64 = ($63|0)==(-1);
        if ($64) {
         break;
        } else {
         $$0 = $58;
        }
       }
       $65 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $$9 = $65;
       break L21;
      }
     } while(0);
     $69 = HEAP8[$3>>0]|0;
     $70 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($69)|0);
     $$9 = $70;
    }
   } while(0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = ((($0)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  if ($1) {
   $11 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   HEAP32[$9>>2] = $11;
   HEAP8[$6>>0] = 0;
   $$11 = $10;
  } else {
   $$11 = $10;
  }
 }
 STACKTOP = sp;return ($$11|0);
}
function __ZNSt3__27collateIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27collateIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27collateIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__26locale5facet16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ((($2)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  FUNCTION_TABLE_vi[$4 & 1023]($0);
 }
 return;
}
function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $3;$$012 = $1;
 while(1) {
  $5 = ($$011|0)==($4|0);
  if ($5) {
   label = 7;
   break;
  }
  $6 = ($$012|0)==($2|0);
  if ($6) {
   $$0 = -1;
   break;
  }
  $7 = HEAP8[$$012>>0]|0;
  $8 = HEAP8[$$011>>0]|0;
  $9 = ($7<<24>>24)<($8<<24>>24);
  if ($9) {
   $$0 = -1;
   break;
  }
  $10 = ($8<<24>>24)<($7<<24>>24);
  if ($10) {
   $$0 = 1;
   break;
  }
  $11 = ((($$012)) + 1|0);
  $12 = ((($$011)) + 1|0);
  $$011 = $12;$$012 = $11;
 }
 if ((label|0) == 7) {
  $13 = ($$012|0)!=($2|0);
  $14 = $13&1;
  $$0 = $14;
 }
 return ($$0|0);
}
function __ZNKSt3__27collateIcE12do_transformEPKcS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$2,$3);
 return;
}
function __ZNKSt3__27collateIcE7do_hashEPKcS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;$$020 = $1;
 while(1) {
  $3 = ($$020|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = $$0 << 4;
  $5 = HEAP8[$$020>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = (($4) + ($6))|0;
  $8 = $7 & -268435456;
  $9 = $8 >>> 24;
  $10 = $9 | $8;
  $11 = $10 ^ $7;
  $12 = ((($$020)) + 1|0);
  $$0 = $11;$$020 = $12;
 }
 return ($$0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $scevgep23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = sp;
 $5 = $2;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)>(4294967279);
 if ($7) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $8 = ($6>>>0)<(11);
 if ($8) {
  $9 = $6&255;
  $10 = ((($0)) + 11|0);
  HEAP8[$10>>0] = $9;
  $$021 = $0;
 } else {
  $11 = (($6) + 16)|0;
  $12 = $11 & -16;
  $13 = (__Znwm($12)|0);
  HEAP32[$0>>2] = $13;
  $14 = $12 | -2147483648;
  $15 = ((($0)) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 4|0);
  HEAP32[$16>>2] = $6;
  $$021 = $13;
 }
 $17 = $2;
 $18 = (($17) - ($3))|0;
 $$0 = $1;$$1 = $$021;
 while(1) {
  $19 = ($$0|0)==($2|0);
  if ($19) {
   break;
  }
  __ZNSt3__211char_traitsIcE6assignERcRKc($$1,$$0);
  $20 = ((($$0)) + 1|0);
  $21 = ((($$1)) + 1|0);
  $$0 = $20;$$1 = $21;
 }
 $scevgep23 = (($$021) + ($18)|0);
 HEAP8[$4>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23,$4);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 HEAP8[$0>>0] = $2;
 return;
}
function __ZNSt3__26locale5facetD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27collateIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27collateIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27collateIwED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $3;$$012 = $1;
 while(1) {
  $5 = ($$011|0)==($4|0);
  if ($5) {
   label = 7;
   break;
  }
  $6 = ($$012|0)==($2|0);
  if ($6) {
   $$0 = -1;
   break;
  }
  $7 = HEAP32[$$012>>2]|0;
  $8 = HEAP32[$$011>>2]|0;
  $9 = ($7|0)<($8|0);
  if ($9) {
   $$0 = -1;
   break;
  }
  $10 = ($8|0)<($7|0);
  if ($10) {
   $$0 = 1;
   break;
  }
  $11 = ((($$012)) + 4|0);
  $12 = ((($$011)) + 4|0);
  $$011 = $12;$$012 = $11;
 }
 if ((label|0) == 7) {
  $13 = ($$012|0)!=($2|0);
  $14 = $13&1;
  $$0 = $14;
 }
 return ($$0|0);
}
function __ZNKSt3__27collateIwE12do_transformEPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$2,$3);
 return;
}
function __ZNKSt3__27collateIwE7do_hashEPKwS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;$$020 = $1;
 while(1) {
  $3 = ($$020|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = $$0 << 4;
  $5 = HEAP32[$$020>>2]|0;
  $6 = (($5) + ($4))|0;
  $7 = $6 & -268435456;
  $8 = $7 >>> 24;
  $9 = $8 | $7;
  $10 = $9 ^ $6;
  $11 = ((($$020)) + 4|0);
  $$0 = $10;$$020 = $11;
 }
 return ($$0|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $$1$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = $2;
 $5 = $1;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>(1073741807);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ($7>>>0)<(2);
 do {
  if ($9) {
   $10 = $7&255;
   $11 = ((($0)) + 8|0);
   $12 = ((($11)) + 3|0);
   HEAP8[$12>>0] = $10;
   $$1$ph = $0;
  } else {
   $13 = (($7) + 4)|0;
   $14 = $13 & -4;
   $15 = ($14>>>0)>(1073741823);
   if ($15) {
    _abort();
    // unreachable;
   } else {
    $16 = $14 << 2;
    $17 = (__Znwm($16)|0);
    HEAP32[$0>>2] = $17;
    $18 = $14 | -2147483648;
    $19 = ((($0)) + 8|0);
    HEAP32[$19>>2] = $18;
    $20 = ((($0)) + 4|0);
    HEAP32[$20>>2] = $7;
    $$1$ph = $17;
    break;
   }
  }
 } while(0);
 $$0 = $1;$$1 = $$1$ph;
 while(1) {
  $21 = ($$0|0)==($2|0);
  if ($21) {
   break;
  }
  __ZNSt3__211char_traitsIwE6assignERwRKw($$1,$$0);
  $22 = ((($$0)) + 4|0);
  $23 = ((($$1)) + 4|0);
  $$0 = $22;$$1 = $23;
 }
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$1,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIwE6assignERwRKw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$022$0 = 0, $$sroa$022$0$copyload = 0, $$sroa$022$0$copyload24 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 52|0;
 $$byval_copy = sp + 48|0;
 $6 = sp + 44|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 32|0;
 $10 = sp + 28|0;
 $11 = sp;
 $12 = sp + 24|0;
 $13 = ((($3)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$6>>2] = -1;
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$1>>2]|0;
  HEAP32[$7>>2] = $20;
  $21 = HEAP32[$2>>2]|0;
  HEAP32[$8>>2] = $21;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$8>>2]|0;
  $22 = (FUNCTION_TABLE_iiiiiii[$19 & 255]($0,$$byval_copy,$$byval_copy1,$3,$4,$6)|0);
  HEAP32[$1>>2] = $22;
  $23 = HEAP32[$6>>2]|0;
  switch ($23|0) {
  case 0:  {
   HEAP8[$5>>0] = 0;
   break;
  }
  case 1:  {
   HEAP8[$5>>0] = 1;
   break;
  }
  default: {
   HEAP8[$5>>0] = 1;
   HEAP32[$4>>2] = 4;
  }
  }
  $$sroa$022$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$022$0 = $$sroa$022$0$copyload;
 } else {
  __ZNKSt3__28ios_base6getlocEv($9,$3);
  $24 = (__ZNKSt3__26locale9use_facetERNS0_2idE($9,70992)|0);
  __ZNSt3__26localeD2Ev($9);
  __ZNKSt3__28ios_base6getlocEv($10,$3);
  $25 = (__ZNKSt3__26locale9use_facetERNS0_2idE($10,71008)|0);
  __ZNSt3__26localeD2Ev($10);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vii[$28 & 511]($11,$25);
  $29 = ((($11)) + 12|0);
  $30 = HEAP32[$25>>2]|0;
  $31 = ((($30)) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 511]($29,$25);
  $33 = HEAP32[$2>>2]|0;
  HEAP32[$12>>2] = $33;
  $34 = ((($11)) + 24|0);
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$12>>2]|0;
  $35 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($1,$$byval_copy2,$11,$34,$24,$4,1)|0);
  $36 = ($35|0)==($11|0);
  $37 = $36&1;
  HEAP8[$5>>0] = $37;
  $$sroa$022$0$copyload24 = HEAP32[$1>>2]|0;
  $39 = $34;
  while(1) {
   $38 = ((($39)) + -12|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($38);
   $40 = ($38|0)==($11|0);
   if ($40) {
    break;
   } else {
    $39 = $38;
   }
  }
  $$sroa$022$0 = $$sroa$022$0$copyload24;
 }
 STACKTOP = sp;return ($$sroa$022$0|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i20 = 0, $$0$i$i17 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i26 = 0, $$0$i$i36 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i18 = 0;
 var $phitmp$i = 0, $phitmp$i33 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer = sp + 192|0;
 $6 = sp + 160|0;
 $7 = sp + 224|0;
 $8 = sp + 220|0;
 $9 = sp + 208|0;
 $10 = sp + 204|0;
 $11 = sp;
 $12 = sp + 200|0;
 $13 = sp + 196|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $14 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$14>>2] = 0;
  $15 = (($$0$i$i) + 1)|0;
  $$0$i$i = $15;
 }
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 $16 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,70992)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 (FUNCTION_TABLE_iiiii[$19 & 511]($16,49632,(49658),$6)|0);
 __ZNSt3__26localeD2Ev($8);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i17 = 0;
 while(1) {
  $exitcond$i$i18 = ($$0$i$i17|0)==(3);
  if ($exitcond$i$i18) {
   break;
  }
  $20 = (($9) + ($$0$i$i17<<2)|0);
  HEAP32[$20>>2] = 0;
  $21 = (($$0$i$i17) + 1)|0;
  $$0$i$i17 = $21;
 }
 $22 = ((($9)) + 11|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)<(0);
 $25 = ((($9)) + 8|0);
 if ($24) {
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & 2147483647;
  $phitmp$i = (($27) + -1)|0;
  $28 = $phitmp$i;
 } else {
  $28 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$28,0);
 $29 = HEAP8[$22>>0]|0;
 $30 = ($29<<24>>24)<(0);
 $31 = HEAP32[$9>>2]|0;
 $32 = $30 ? $31 : $9;
 HEAP32[$10>>2] = $32;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $33 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $32;$148 = $$pre;$35 = $$pre;
 L12: while(1) {
  $34 = ($35|0)==(0|0);
  if ($34) {
   $123 = 0;$149 = 1;$84 = 0;
  } else {
   $36 = ((($35)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($35)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($37|0)==($39|0);
   if ($40) {
    $41 = HEAP32[$35>>2]|0;
    $42 = ((($41)) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_ii[$43 & 1023]($35)|0);
    $$0$i$i$i$i20 = $44;
   } else {
    $45 = HEAP8[$37>>0]|0;
    $46 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($45)|0);
    $$0$i$i$i$i20 = $46;
   }
   $47 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $48 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i20,$47)|0);
   if ($48) {
    HEAP32[$1>>2] = 0;
    $123 = 0;$149 = 1;$84 = 0;
   } else {
    $123 = $148;$149 = 0;$84 = $35;
   }
  }
  $49 = HEAP32[$2>>2]|0;
  $50 = ($49|0)==(0|0);
  do {
   if ($50) {
    label = 22;
   } else {
    $51 = ((($49)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($49)) + 16|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($52|0)==($54|0);
    if ($55) {
     $56 = HEAP32[$49>>2]|0;
     $57 = ((($56)) + 36|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (FUNCTION_TABLE_ii[$58 & 1023]($49)|0);
     $$0$i$i2$i$i26 = $59;
    } else {
     $60 = HEAP8[$52>>0]|0;
     $61 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($60)|0);
     $$0$i$i2$i$i26 = $61;
    }
    $62 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $63 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i26,$62)|0);
    if ($63) {
     HEAP32[$2>>2] = 0;
     label = 22;
     break;
    } else {
     if ($149) {
      $150 = $49;
      break;
     } else {
      $$2 = $$0;$132 = $49;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($149) {
    $$2 = $$0;$132 = 0;
    break;
   } else {
    $150 = 0;
   }
  }
  $64 = HEAP32[$10>>2]|0;
  $65 = HEAP8[$22>>0]|0;
  $66 = ($65<<24>>24)<(0);
  $67 = HEAP32[$33>>2]|0;
  $68 = $65&255;
  $69 = $66 ? $67 : $68;
  $70 = (($$0) + ($69)|0);
  $71 = ($64|0)==($70|0);
  if ($71) {
   $72 = $69 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$72,0);
   $73 = HEAP8[$22>>0]|0;
   $74 = ($73<<24>>24)<(0);
   if ($74) {
    $75 = HEAP32[$25>>2]|0;
    $76 = $75 & 2147483647;
    $phitmp$i33 = (($76) + -1)|0;
    $77 = $phitmp$i33;
   } else {
    $77 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$77,0);
   $78 = HEAP8[$22>>0]|0;
   $79 = ($78<<24>>24)<(0);
   $80 = HEAP32[$9>>2]|0;
   $81 = $79 ? $80 : $9;
   $82 = (($81) + ($69)|0);
   HEAP32[$10>>2] = $82;
   $$1 = $81;
  } else {
   $$1 = $$0;
  }
  $83 = ((($84)) + 12|0);
  $85 = HEAP32[$83>>2]|0;
  $86 = ((($84)) + 16|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($85|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$84>>2]|0;
   $90 = ((($89)) + 36|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (FUNCTION_TABLE_ii[$91 & 1023]($84)|0);
   $$0$i$i36 = $92;
  } else {
   $93 = HEAP8[$85>>0]|0;
   $94 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($93)|0);
   $$0$i$i36 = $94;
  }
  $95 = $$0$i$i36&255;
  $96 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($95,16,$$1,$10,$13,0,$7,$11,$12,$6)|0);
  $97 = ($96|0)==(0);
  if (!($97)) {
   $$2 = $$1;$132 = $150;
   break;
  }
  $98 = HEAP32[$83>>2]|0;
  $99 = HEAP32[$86>>2]|0;
  $100 = ($98|0)==($99|0);
  if ($100) {
   $101 = HEAP32[$84>>2]|0;
   $102 = ((($101)) + 40|0);
   $103 = HEAP32[$102>>2]|0;
   (FUNCTION_TABLE_ii[$103 & 1023]($84)|0);
  } else {
   $104 = ((($98)) + 1|0);
   HEAP32[$83>>2] = $104;
   $105 = HEAP8[$98>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($105)|0);
  }
  $$0 = $$1;$148 = $123;$35 = $84;
 }
 $106 = HEAP32[$10>>2]|0;
 $107 = $$2;
 $108 = (($106) - ($107))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$108,0);
 $109 = HEAP8[$22>>0]|0;
 $110 = ($109<<24>>24)<(0);
 $111 = HEAP32[$9>>2]|0;
 $112 = $110 ? $111 : $9;
 $113 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $5;
 $114 = (__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($112,$113,62182,$vararg_buffer)|0);
 $115 = ($114|0)==(1);
 if (!($115)) {
  HEAP32[$4>>2] = 4;
 }
 $116 = ($84|0)==(0|0);
 if ($116) {
  $151 = 1;
 } else {
  $117 = ((($84)) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($84)) + 16|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($118|0)==($120|0);
  if ($121) {
   $122 = HEAP32[$123>>2]|0;
   $124 = ((($122)) + 36|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (FUNCTION_TABLE_ii[$125 & 1023]($84)|0);
   $$0$i$i$i$i = $126;
  } else {
   $127 = HEAP8[$118>>0]|0;
   $128 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($127)|0);
   $$0$i$i$i$i = $128;
  }
  $129 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $130 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$129)|0);
  if ($130) {
   HEAP32[$1>>2] = 0;
   $151 = 1;
  } else {
   $151 = 0;
  }
 }
 $131 = ($132|0)==(0|0);
 do {
  if ($131) {
   label = 50;
  } else {
   $133 = ((($132)) + 12|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ((($132)) + 16|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($134|0)==($136|0);
   if ($137) {
    $138 = HEAP32[$132>>2]|0;
    $139 = ((($138)) + 36|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (FUNCTION_TABLE_ii[$140 & 1023]($132)|0);
    $$0$i$i2$i$i = $141;
   } else {
    $142 = HEAP8[$134>>0]|0;
    $143 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($142)|0);
    $$0$i$i2$i$i = $143;
   }
   $144 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $145 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$144)|0);
   if ($145) {
    HEAP32[$2>>2] = 0;
    label = 50;
    break;
   } else {
    if ($151) {
     break;
    } else {
     label = 52;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 50) {
  if ($151) {
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $146 = HEAP32[$4>>2]|0;
  $147 = $146 | 2;
  HEAP32[$4>>2] = $147;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__26locale9use_facetERNS0_2idE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZNSt3__26locale2id5__getEv($1)|0);
 $4 = (__ZNKSt3__26locale5__imp9use_facetEl($2,$3)|0);
 return ($4|0);
}
function __ZNSt3__26localeD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($3|0)==(0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vi[$8 & 1023]($1);
 }
 return;
}
function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)==($2|0);
 do {
  if ($11) {
   $12 = ((($9)) + 24|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)==($0<<24>>24);
   if (!($14)) {
    $15 = ((($9)) + 25|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==($0<<24>>24);
    if (!($17)) {
     label = 5;
     break;
    }
   }
   $18 = $14 ? 43 : 45;
   $19 = ((($2)) + 1|0);
   HEAP32[$3>>2] = $19;
   HEAP8[$2>>0] = $18;
   HEAP32[$4>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $20 = ((($6)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = ((($6)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21&255;
   $26 = $22 ? $24 : $25;
   $27 = ($26|0)!=(0);
   $28 = ($0<<24>>24)==($5<<24>>24);
   $or$cond = $28 & $27;
   if ($or$cond) {
    $29 = HEAP32[$8>>2]|0;
    $30 = $29;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $33 = ($32|0)<(160);
    if (!($33)) {
     $$1 = 0;
     break;
    }
    $34 = HEAP32[$4>>2]|0;
    $35 = ((($29)) + 4|0);
    HEAP32[$8>>2] = $35;
    HEAP32[$29>>2] = $34;
    HEAP32[$4>>2] = 0;
    $$1 = 0;
    break;
   }
   $36 = ((($9)) + 26|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($9) + ($$0$i$idx)|0);
    $37 = ($$0$i$idx|0)==(26);
    if ($37) {
     $$0$lcssa$i = $36;
     break;
    }
    $38 = HEAP8[$$0$i$ptr>>0]|0;
    $39 = ($38<<24>>24)==($0<<24>>24);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($39) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $40 = $$0$lcssa$i;
   $41 = $9;
   $42 = (($40) - ($41))|0;
   $43 = ($42|0)>(23);
   if ($43) {
    $$1 = -1;
   } else {
    switch ($1|0) {
    case 10: case 8:  {
     $44 = ($42|0)<($1|0);
     if (!($44)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $45 = ($42|0)<(22);
     if (!($45)) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      $46 = $10;
      $47 = $2;
      $48 = (($46) - ($47))|0;
      $49 = ($48|0)<(3);
      if (!($49)) {
       $$1 = -1;
       break L6;
      }
      $50 = ((($10)) + -1|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = ($51<<24>>24)==(48);
      if (!($52)) {
       $$1 = -1;
       break L6;
      }
      $53 = ((($10)) + 1|0);
      $54 = (49632 + ($42)|0);
      HEAP32[$4>>2] = 0;
      $55 = HEAP8[$54>>0]|0;
      HEAP32[$3>>2] = $53;
      HEAP8[$10>>0] = $55;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $56 = (49632 + ($42)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = ((($10)) + 1|0);
    HEAP32[$3>>2] = $58;
    HEAP8[$10>>0] = $57;
    $59 = HEAP32[$4>>2]|0;
    $60 = (($59) + 1)|0;
    HEAP32[$4>>2] = $60;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__26__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[68648]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(68648)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (___newlocale(2147483647,62185,0)|0);
   HEAP32[17750] = $4;
  }
 }
 $5 = HEAP32[17750]|0;
 return ($5|0);
}
function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (___uselocale($1)|0);
 $5 = (_vsscanf($0,$2,$3)|0);
 $6 = ($4|0)==(0|0);
 if (!($6)) {
  (___uselocale($4)|0);
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__26locale2id5__getEv($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$fca$1$gep = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 8|0;
 $4 = sp;
 HEAP32[$4>>2] = (516);
 $$fca$1$gep = ((($4)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($3,$$byval_copy,$0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(-1);
 if (!($6)) {
  HEAP32[$1>>2] = $3;
  HEAP32[$2>>2] = $1;
  __ZNSt3__211__call_onceERVmPvPFvS2_E($0,$2,517);
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -1)|0;
 STACKTOP = sp;return ($9|0);
}
function __ZNKSt3__26locale5__imp9use_facetEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function __ZNSt3__26locale2id6__initEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[17751]|0;
 $2 = (($1) + 1)|0;
 HEAP32[17751] = $2;
 $3 = (($1) + 1)|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 return;
}
function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt4 = 0, $$repack = 0, $$repack7 = 0, $$unpack = 0, $$unpack5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt4 = ((($1)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 HEAP32[$0>>2] = $2;
 $$repack = ((($0)) + 4|0);
 HEAP32[$$repack>>2] = $$unpack;
 $$repack7 = ((($0)) + 8|0);
 HEAP32[$$repack7>>2] = $$unpack5;
 return;
}
function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($2);
 return;
}
function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($0) {
 $0 = $0|0;
 var $$elt = 0, $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $$elt = ((($0)) + 4|0);
 $$unpack = HEAP32[$$elt>>2]|0;
 $$elt1 = ((($0)) + 8|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $2 = $$unpack2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$unpack2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$unpack;
  $10 = $9;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$unpack)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 FUNCTION_TABLE_vi[$10 & 1023]($3);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 160|0;
 $7 = sp + 231|0;
 $8 = sp + 230|0;
 $9 = sp + 216|0;
 $10 = sp + 204|0;
 $11 = sp + 200|0;
 $12 = sp;
 $13 = sp + 196|0;
 $14 = sp + 192|0;
 $15 = sp + 229|0;
 $16 = sp + 228|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$157 = $$pre;$32 = $$pre;
 L8: while(1) {
  $31 = ($32|0)==(0|0);
  if ($31) {
   $132 = 0;$158 = 1;$81 = 0;
  } else {
   $33 = ((($32)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($32)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34|0)==($36|0);
   if ($37) {
    $38 = HEAP32[$32>>2]|0;
    $39 = ((($38)) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 1023]($32)|0);
    $$0$i$i$i$i15 = $41;
   } else {
    $42 = HEAP8[$34>>0]|0;
    $43 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($42)|0);
    $$0$i$i$i$i15 = $43;
   }
   $44 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $45 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i15,$44)|0);
   if ($45) {
    HEAP32[$1>>2] = 0;
    $132 = 0;$158 = 1;$81 = 0;
   } else {
    $132 = $157;$158 = 0;$81 = $32;
   }
  }
  $46 = HEAP32[$2>>2]|0;
  $47 = ($46|0)==(0|0);
  do {
   if ($47) {
    label = 19;
   } else {
    $48 = ((($46)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($46)) + 16|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($49|0)==($51|0);
    if ($52) {
     $53 = HEAP32[$46>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (FUNCTION_TABLE_ii[$55 & 1023]($46)|0);
     $$0$i$i2$i$i21 = $56;
    } else {
     $57 = HEAP8[$49>>0]|0;
     $58 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($57)|0);
     $$0$i$i2$i$i21 = $58;
    }
    $59 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $60 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i21,$59)|0);
    if ($60) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($158) {
      $159 = $46;
      break;
     } else {
      $$2 = $$0;$141 = $46;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($158) {
    $$2 = $$0;$141 = 0;
    break;
   } else {
    $159 = 0;
   }
  }
  $61 = HEAP32[$11>>2]|0;
  $62 = HEAP8[$19>>0]|0;
  $63 = ($62<<24>>24)<(0);
  $64 = HEAP32[$30>>2]|0;
  $65 = $62&255;
  $66 = $63 ? $64 : $65;
  $67 = (($$0) + ($66)|0);
  $68 = ($61|0)==($67|0);
  if ($68) {
   $69 = $66 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$69,0);
   $70 = HEAP8[$19>>0]|0;
   $71 = ($70<<24>>24)<(0);
   if ($71) {
    $72 = HEAP32[$22>>2]|0;
    $73 = $72 & 2147483647;
    $phitmp$i28 = (($73) + -1)|0;
    $74 = $phitmp$i28;
   } else {
    $74 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$74,0);
   $75 = HEAP8[$19>>0]|0;
   $76 = ($75<<24>>24)<(0);
   $77 = HEAP32[$10>>2]|0;
   $78 = $76 ? $77 : $10;
   $79 = (($78) + ($66)|0);
   HEAP32[$11>>2] = $79;
   $$1 = $78;
  } else {
   $$1 = $$0;
  }
  $80 = ((($81)) + 12|0);
  $82 = HEAP32[$80>>2]|0;
  $83 = ((($81)) + 16|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($82|0)==($84|0);
  if ($85) {
   $86 = HEAP32[$81>>2]|0;
   $87 = ((($86)) + 36|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (FUNCTION_TABLE_ii[$88 & 1023]($81)|0);
   $$0$i$i31 = $89;
  } else {
   $90 = HEAP8[$82>>0]|0;
   $91 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($90)|0);
   $$0$i$i31 = $91;
  }
  $92 = $$0$i$i31&255;
  $93 = HEAP8[$7>>0]|0;
  $94 = HEAP8[$8>>0]|0;
  $95 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$15,$16,$$1,$11,$93,$94,$9,$12,$13,$14,$6)|0);
  $96 = ($95|0)==(0);
  if (!($96)) {
   $$2 = $$1;$141 = $159;
   break;
  }
  $97 = HEAP32[$80>>2]|0;
  $98 = HEAP32[$83>>2]|0;
  $99 = ($97|0)==($98|0);
  if ($99) {
   $100 = HEAP32[$81>>2]|0;
   $101 = ((($100)) + 40|0);
   $102 = HEAP32[$101>>2]|0;
   (FUNCTION_TABLE_ii[$102 & 1023]($81)|0);
  } else {
   $103 = ((($97)) + 1|0);
   HEAP32[$80>>2] = $103;
   $104 = HEAP8[$97>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($104)|0);
  }
  $$0 = $$1;$157 = $132;$32 = $81;
 }
 $105 = ((($9)) + 11|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = ($106<<24>>24)<(0);
 $108 = ((($9)) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $106&255;
 $111 = $107 ? $109 : $110;
 $112 = ($111|0)==(0);
 $113 = HEAP8[$15>>0]|0;
 $114 = ($113<<24>>24)==(0);
 $or$cond = $112 | $114;
 if (!($or$cond)) {
  $115 = HEAP32[$13>>2]|0;
  $116 = $115;
  $117 = $12;
  $118 = (($116) - ($117))|0;
  $119 = ($118|0)<(160);
  if ($119) {
   $120 = HEAP32[$14>>2]|0;
   $121 = ((($115)) + 4|0);
   HEAP32[$13>>2] = $121;
   HEAP32[$115>>2] = $120;
  }
 }
 $122 = HEAP32[$11>>2]|0;
 $123 = (+__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($$2,$122,$4));
 HEAPF64[$5>>3] = $123;
 $124 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$124,$4);
 $125 = ($81|0)==(0|0);
 if ($125) {
  $160 = 1;
 } else {
  $126 = ((($81)) + 12|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ((($81)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($127|0)==($129|0);
  if ($130) {
   $131 = HEAP32[$132>>2]|0;
   $133 = ((($131)) + 36|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (FUNCTION_TABLE_ii[$134 & 1023]($81)|0);
   $$0$i$i$i$i = $135;
  } else {
   $136 = HEAP8[$127>>0]|0;
   $137 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($136)|0);
   $$0$i$i$i$i = $137;
  }
  $138 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $139 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$138)|0);
  if ($139) {
   HEAP32[$1>>2] = 0;
   $160 = 1;
  } else {
   $160 = 0;
  }
 }
 $140 = ($141|0)==(0|0);
 do {
  if ($140) {
   label = 48;
  } else {
   $142 = ((($141)) + 12|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ((($141)) + 16|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($143|0)==($145|0);
   if ($146) {
    $147 = HEAP32[$141>>2]|0;
    $148 = ((($147)) + 36|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (FUNCTION_TABLE_ii[$149 & 1023]($141)|0);
    $$0$i$i2$i$i = $150;
   } else {
    $151 = HEAP8[$143>>0]|0;
    $152 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($151)|0);
    $$0$i$i2$i$i = $152;
   }
   $153 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $154 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$153)|0);
   if ($154) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($160) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($160) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $155 = HEAP32[$4>>2]|0;
  $156 = $155 | 2;
  HEAP32[$4>>2] = $156;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 __ZNKSt3__28ios_base6getlocEv($5,$1);
 $6 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,70992)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 (FUNCTION_TABLE_iiiii[$9 & 511]($6,49632,(49664),$2)|0);
 $10 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,71008)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 HEAP8[$3>>0] = $14;
 $15 = HEAP32[$10>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 1023]($10)|0);
 HEAP8[$4>>0] = $18;
 $19 = HEAP32[$10>>2]|0;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_vii[$21 & 511]($0,$10);
 __ZNSt3__26localeD2Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $12 = ($0<<24>>24)==($5<<24>>24);
 L1: do {
  if ($12) {
   $13 = HEAP8[$1>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    $$2 = -1;
   } else {
    HEAP8[$1>>0] = 0;
    $15 = HEAP32[$4>>2]|0;
    $16 = ((($15)) + 1|0);
    HEAP32[$4>>2] = $16;
    HEAP8[$15>>0] = 46;
    $17 = ((($7)) + 11|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)<(0);
    $20 = ((($7)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $18&255;
    $23 = $19 ? $21 : $22;
    $24 = ($23|0)==(0);
    if ($24) {
     $$2 = 0;
    } else {
     $25 = HEAP32[$9>>2]|0;
     $26 = $25;
     $27 = $8;
     $28 = (($26) - ($27))|0;
     $29 = ($28|0)<(160);
     if ($29) {
      $30 = HEAP32[$10>>2]|0;
      $31 = ((($25)) + 4|0);
      HEAP32[$9>>2] = $31;
      HEAP32[$25>>2] = $30;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $32 = ($0<<24>>24)==($6<<24>>24);
   if ($32) {
    $33 = ((($7)) + 11|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = ((($7)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $34&255;
    $39 = $35 ? $37 : $38;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP8[$1>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $$2 = -1;
      break;
     }
     $43 = HEAP32[$9>>2]|0;
     $44 = $43;
     $45 = $8;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)<(160);
     if (!($47)) {
      $$2 = 0;
      break;
     }
     $48 = HEAP32[$10>>2]|0;
     $49 = ((($43)) + 4|0);
     HEAP32[$9>>2] = $49;
     HEAP32[$43>>2] = $48;
     HEAP32[$10>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $50 = ((($11)) + 32|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($11) + ($$0$i$idx)|0);
    $51 = ($$0$i$idx|0)==(32);
    if ($51) {
     $$0$lcssa$i = $50;
     break;
    }
    $52 = HEAP8[$$0$i$ptr>>0]|0;
    $53 = ($52<<24>>24)==($0<<24>>24);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($53) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $54 = $$0$lcssa$i;
   $55 = $11;
   $56 = (($54) - ($55))|0;
   $57 = ($56|0)>(31);
   if ($57) {
    $$2 = -1;
   } else {
    $58 = (49632 + ($56)|0);
    $59 = HEAP8[$58>>0]|0;
    switch ($56|0) {
    case 24: case 25:  {
     $60 = HEAP32[$4>>2]|0;
     $61 = ($60|0)==($3|0);
     if (!($61)) {
      $62 = ((($60)) + -1|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = $63 & 95;
      $65 = HEAP8[$2>>0]|0;
      $66 = $65 & 127;
      $67 = ($64<<24>>24)==($66<<24>>24);
      if (!($67)) {
       $$2 = -1;
       break L1;
      }
     }
     $68 = ((($60)) + 1|0);
     HEAP32[$4>>2] = $68;
     HEAP8[$60>>0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$2>>0] = 80;
     $69 = HEAP32[$4>>2]|0;
     $70 = ((($69)) + 1|0);
     HEAP32[$4>>2] = $70;
     HEAP8[$69>>0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
    default: {
     $71 = $59 & 95;
     $72 = $71&255;
     $73 = HEAP8[$2>>0]|0;
     $74 = $73 << 24 >> 24;
     $75 = ($72|0)==($74|0);
     if ($75) {
      $76 = $72 | 128;
      $77 = $76&255;
      HEAP8[$2>>0] = $77;
      $78 = HEAP8[$1>>0]|0;
      $79 = ($78<<24>>24)==(0);
      if (!($79)) {
       HEAP8[$1>>0] = 0;
       $80 = ((($7)) + 11|0);
       $81 = HEAP8[$80>>0]|0;
       $82 = ($81<<24>>24)<(0);
       $83 = ((($7)) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $81&255;
       $86 = $82 ? $84 : $85;
       $87 = ($86|0)==(0);
       if (!($87)) {
        $88 = HEAP32[$9>>2]|0;
        $89 = $88;
        $90 = $8;
        $91 = (($89) - ($90))|0;
        $92 = ($91|0)<(160);
        if ($92) {
         $93 = HEAP32[$10>>2]|0;
         $94 = ((($88)) + 4|0);
         HEAP32[$9>>2] = $94;
         HEAP32[$88>>2] = $93;
        }
       }
      }
     }
     $95 = HEAP32[$4>>2]|0;
     $96 = ((($95)) + 1|0);
     HEAP32[$4>>2] = $96;
     HEAP8[$95>>0] = $59;
     $97 = ($56|0)>(21);
     if ($97) {
      $$2 = 0;
      break L1;
     }
     $98 = HEAP32[$10>>2]|0;
     $99 = (($98) + 1)|0;
     HEAP32[$10>>2] = $99;
     $$2 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (+_strtold_l($0,$3,$8));
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = $6;
  }
  $14 = HEAP32[$3>>2]|0;
  $15 = ($14|0)==($1|0);
  if ($15) {
   $16 = ($11|0)==(34);
   if ($16) {
    $$0$ph = $9;
    label = 6;
   } else {
    $$0 = $9;
   }
  } else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$2>>2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i$i = 0, $$029 = 0, $$030 = 0, $$07$i$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre41 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond32 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5&255;
 $10 = $6 ? $8 : $9;
 $11 = ($10|0)==(0);
 do {
  if (!($11)) {
   $12 = ($1|0)==($2|0);
   if ($12) {
    $$pre$phiZ2D = $9;$19 = $5;$23 = $8;
   } else {
    $$0$i$i = $2;$$07$i$i = $1;
    while(1) {
     $13 = ((($$0$i$i)) + -4|0);
     $14 = ($$07$i$i>>>0)<($13>>>0);
     if (!($14)) {
      break;
     }
     $15 = HEAP32[$$07$i$i>>2]|0;
     $16 = HEAP32[$13>>2]|0;
     HEAP32[$$07$i$i>>2] = $16;
     HEAP32[$13>>2] = $15;
     $17 = ((($$07$i$i)) + 4|0);
     $$0$i$i = $13;$$07$i$i = $17;
    }
    $$pre = HEAP8[$4>>0]|0;
    $$pre40 = HEAP32[$7>>2]|0;
    $$pre41 = $$pre&255;
    $$pre$phiZ2D = $$pre41;$19 = $$pre;$23 = $$pre40;
   }
   $18 = ($19<<24>>24)<(0);
   $20 = HEAP32[$0>>2]|0;
   $21 = $18 ? $20 : $0;
   $22 = $18 ? $23 : $$pre$phiZ2D;
   $24 = (($21) + ($22)|0);
   $25 = ((($2)) + -4|0);
   $26 = $24;
   $$029 = $1;$$030 = $21;
   while(1) {
    $27 = ($$029>>>0)<($25>>>0);
    $28 = HEAP8[$$030>>0]|0;
    $29 = ($28<<24>>24)>(0);
    $30 = ($28<<24>>24)!=(127);
    $or$cond32 = $29 & $30;
    if (!($27)) {
     break;
    }
    if ($or$cond32) {
     $31 = $28 << 24 >> 24;
     $32 = HEAP32[$$029>>2]|0;
     $33 = ($32|0)==($31|0);
     if (!($33)) {
      label = 11;
      break;
     }
    }
    $34 = $$030;
    $35 = (($26) - ($34))|0;
    $36 = ($35|0)>(1);
    $37 = ((($$030)) + 1|0);
    $spec$select = $36 ? $37 : $$030;
    $38 = ((($$029)) + 4|0);
    $$029 = $38;$$030 = $spec$select;
   }
   if ((label|0) == 11) {
    HEAP32[$3>>2] = 4;
    break;
   }
   if ($or$cond32) {
    $39 = $28 << 24 >> 24;
    $40 = HEAP32[$25>>2]|0;
    $41 = (($40) + -1)|0;
    $42 = ($41>>>0)<($39>>>0);
    if (!($42)) {
     HEAP32[$3>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 160|0;
 $7 = sp + 231|0;
 $8 = sp + 230|0;
 $9 = sp + 216|0;
 $10 = sp + 204|0;
 $11 = sp + 200|0;
 $12 = sp;
 $13 = sp + 196|0;
 $14 = sp + 192|0;
 $15 = sp + 229|0;
 $16 = sp + 228|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$157 = $$pre;$32 = $$pre;
 L8: while(1) {
  $31 = ($32|0)==(0|0);
  if ($31) {
   $132 = 0;$158 = 1;$81 = 0;
  } else {
   $33 = ((($32)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($32)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34|0)==($36|0);
   if ($37) {
    $38 = HEAP32[$32>>2]|0;
    $39 = ((($38)) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 1023]($32)|0);
    $$0$i$i$i$i15 = $41;
   } else {
    $42 = HEAP8[$34>>0]|0;
    $43 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($42)|0);
    $$0$i$i$i$i15 = $43;
   }
   $44 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $45 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i15,$44)|0);
   if ($45) {
    HEAP32[$1>>2] = 0;
    $132 = 0;$158 = 1;$81 = 0;
   } else {
    $132 = $157;$158 = 0;$81 = $32;
   }
  }
  $46 = HEAP32[$2>>2]|0;
  $47 = ($46|0)==(0|0);
  do {
   if ($47) {
    label = 19;
   } else {
    $48 = ((($46)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($46)) + 16|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($49|0)==($51|0);
    if ($52) {
     $53 = HEAP32[$46>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (FUNCTION_TABLE_ii[$55 & 1023]($46)|0);
     $$0$i$i2$i$i21 = $56;
    } else {
     $57 = HEAP8[$49>>0]|0;
     $58 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($57)|0);
     $$0$i$i2$i$i21 = $58;
    }
    $59 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $60 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i21,$59)|0);
    if ($60) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($158) {
      $159 = $46;
      break;
     } else {
      $$2 = $$0;$141 = $46;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($158) {
    $$2 = $$0;$141 = 0;
    break;
   } else {
    $159 = 0;
   }
  }
  $61 = HEAP32[$11>>2]|0;
  $62 = HEAP8[$19>>0]|0;
  $63 = ($62<<24>>24)<(0);
  $64 = HEAP32[$30>>2]|0;
  $65 = $62&255;
  $66 = $63 ? $64 : $65;
  $67 = (($$0) + ($66)|0);
  $68 = ($61|0)==($67|0);
  if ($68) {
   $69 = $66 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$69,0);
   $70 = HEAP8[$19>>0]|0;
   $71 = ($70<<24>>24)<(0);
   if ($71) {
    $72 = HEAP32[$22>>2]|0;
    $73 = $72 & 2147483647;
    $phitmp$i28 = (($73) + -1)|0;
    $74 = $phitmp$i28;
   } else {
    $74 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$74,0);
   $75 = HEAP8[$19>>0]|0;
   $76 = ($75<<24>>24)<(0);
   $77 = HEAP32[$10>>2]|0;
   $78 = $76 ? $77 : $10;
   $79 = (($78) + ($66)|0);
   HEAP32[$11>>2] = $79;
   $$1 = $78;
  } else {
   $$1 = $$0;
  }
  $80 = ((($81)) + 12|0);
  $82 = HEAP32[$80>>2]|0;
  $83 = ((($81)) + 16|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($82|0)==($84|0);
  if ($85) {
   $86 = HEAP32[$81>>2]|0;
   $87 = ((($86)) + 36|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (FUNCTION_TABLE_ii[$88 & 1023]($81)|0);
   $$0$i$i31 = $89;
  } else {
   $90 = HEAP8[$82>>0]|0;
   $91 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($90)|0);
   $$0$i$i31 = $91;
  }
  $92 = $$0$i$i31&255;
  $93 = HEAP8[$7>>0]|0;
  $94 = HEAP8[$8>>0]|0;
  $95 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$15,$16,$$1,$11,$93,$94,$9,$12,$13,$14,$6)|0);
  $96 = ($95|0)==(0);
  if (!($96)) {
   $$2 = $$1;$141 = $159;
   break;
  }
  $97 = HEAP32[$80>>2]|0;
  $98 = HEAP32[$83>>2]|0;
  $99 = ($97|0)==($98|0);
  if ($99) {
   $100 = HEAP32[$81>>2]|0;
   $101 = ((($100)) + 40|0);
   $102 = HEAP32[$101>>2]|0;
   (FUNCTION_TABLE_ii[$102 & 1023]($81)|0);
  } else {
   $103 = ((($97)) + 1|0);
   HEAP32[$80>>2] = $103;
   $104 = HEAP8[$97>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($104)|0);
  }
  $$0 = $$1;$157 = $132;$32 = $81;
 }
 $105 = ((($9)) + 11|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = ($106<<24>>24)<(0);
 $108 = ((($9)) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $106&255;
 $111 = $107 ? $109 : $110;
 $112 = ($111|0)==(0);
 $113 = HEAP8[$15>>0]|0;
 $114 = ($113<<24>>24)==(0);
 $or$cond = $112 | $114;
 if (!($or$cond)) {
  $115 = HEAP32[$13>>2]|0;
  $116 = $115;
  $117 = $12;
  $118 = (($116) - ($117))|0;
  $119 = ($118|0)<(160);
  if ($119) {
   $120 = HEAP32[$14>>2]|0;
   $121 = ((($115)) + 4|0);
   HEAP32[$13>>2] = $121;
   HEAP32[$115>>2] = $120;
  }
 }
 $122 = HEAP32[$11>>2]|0;
 $123 = (+__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($$2,$122,$4));
 HEAPF64[$5>>3] = $123;
 $124 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$124,$4);
 $125 = ($81|0)==(0|0);
 if ($125) {
  $160 = 1;
 } else {
  $126 = ((($81)) + 12|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ((($81)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($127|0)==($129|0);
  if ($130) {
   $131 = HEAP32[$132>>2]|0;
   $133 = ((($131)) + 36|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (FUNCTION_TABLE_ii[$134 & 1023]($81)|0);
   $$0$i$i$i$i = $135;
  } else {
   $136 = HEAP8[$127>>0]|0;
   $137 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($136)|0);
   $$0$i$i$i$i = $137;
  }
  $138 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $139 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$138)|0);
  if ($139) {
   HEAP32[$1>>2] = 0;
   $160 = 1;
  } else {
   $160 = 0;
  }
 }
 $140 = ($141|0)==(0|0);
 do {
  if ($140) {
   label = 48;
  } else {
   $142 = ((($141)) + 12|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ((($141)) + 16|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($143|0)==($145|0);
   if ($146) {
    $147 = HEAP32[$141>>2]|0;
    $148 = ((($147)) + 36|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (FUNCTION_TABLE_ii[$149 & 1023]($141)|0);
    $$0$i$i2$i$i = $150;
   } else {
    $151 = HEAP8[$143>>0]|0;
    $152 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($151)|0);
    $$0$i$i2$i$i = $152;
   }
   $153 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $154 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$153)|0);
   if ($154) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($160) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($160) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $155 = HEAP32[$4>>2]|0;
  $156 = $155 | 2;
  HEAP32[$4>>2] = $156;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (+_strtod_l($0,$3,$8));
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = $6;
  }
  $14 = HEAP32[$3>>2]|0;
  $15 = ($14|0)==($1|0);
  if ($15) {
   $16 = ($11|0)==(34);
   if ($16) {
    $$0$ph = $9;
    label = 6;
   } else {
    $$0 = $9;
   }
  } else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$2>>2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 160|0;
 $7 = sp + 231|0;
 $8 = sp + 230|0;
 $9 = sp + 216|0;
 $10 = sp + 204|0;
 $11 = sp + 200|0;
 $12 = sp;
 $13 = sp + 196|0;
 $14 = sp + 192|0;
 $15 = sp + 229|0;
 $16 = sp + 228|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$157 = $$pre;$32 = $$pre;
 L8: while(1) {
  $31 = ($32|0)==(0|0);
  if ($31) {
   $132 = 0;$158 = 1;$81 = 0;
  } else {
   $33 = ((($32)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($32)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34|0)==($36|0);
   if ($37) {
    $38 = HEAP32[$32>>2]|0;
    $39 = ((($38)) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 1023]($32)|0);
    $$0$i$i$i$i15 = $41;
   } else {
    $42 = HEAP8[$34>>0]|0;
    $43 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($42)|0);
    $$0$i$i$i$i15 = $43;
   }
   $44 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $45 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i15,$44)|0);
   if ($45) {
    HEAP32[$1>>2] = 0;
    $132 = 0;$158 = 1;$81 = 0;
   } else {
    $132 = $157;$158 = 0;$81 = $32;
   }
  }
  $46 = HEAP32[$2>>2]|0;
  $47 = ($46|0)==(0|0);
  do {
   if ($47) {
    label = 19;
   } else {
    $48 = ((($46)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($46)) + 16|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($49|0)==($51|0);
    if ($52) {
     $53 = HEAP32[$46>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (FUNCTION_TABLE_ii[$55 & 1023]($46)|0);
     $$0$i$i2$i$i21 = $56;
    } else {
     $57 = HEAP8[$49>>0]|0;
     $58 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($57)|0);
     $$0$i$i2$i$i21 = $58;
    }
    $59 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $60 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i21,$59)|0);
    if ($60) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($158) {
      $159 = $46;
      break;
     } else {
      $$2 = $$0;$141 = $46;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($158) {
    $$2 = $$0;$141 = 0;
    break;
   } else {
    $159 = 0;
   }
  }
  $61 = HEAP32[$11>>2]|0;
  $62 = HEAP8[$19>>0]|0;
  $63 = ($62<<24>>24)<(0);
  $64 = HEAP32[$30>>2]|0;
  $65 = $62&255;
  $66 = $63 ? $64 : $65;
  $67 = (($$0) + ($66)|0);
  $68 = ($61|0)==($67|0);
  if ($68) {
   $69 = $66 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$69,0);
   $70 = HEAP8[$19>>0]|0;
   $71 = ($70<<24>>24)<(0);
   if ($71) {
    $72 = HEAP32[$22>>2]|0;
    $73 = $72 & 2147483647;
    $phitmp$i28 = (($73) + -1)|0;
    $74 = $phitmp$i28;
   } else {
    $74 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$74,0);
   $75 = HEAP8[$19>>0]|0;
   $76 = ($75<<24>>24)<(0);
   $77 = HEAP32[$10>>2]|0;
   $78 = $76 ? $77 : $10;
   $79 = (($78) + ($66)|0);
   HEAP32[$11>>2] = $79;
   $$1 = $78;
  } else {
   $$1 = $$0;
  }
  $80 = ((($81)) + 12|0);
  $82 = HEAP32[$80>>2]|0;
  $83 = ((($81)) + 16|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($82|0)==($84|0);
  if ($85) {
   $86 = HEAP32[$81>>2]|0;
   $87 = ((($86)) + 36|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (FUNCTION_TABLE_ii[$88 & 1023]($81)|0);
   $$0$i$i31 = $89;
  } else {
   $90 = HEAP8[$82>>0]|0;
   $91 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($90)|0);
   $$0$i$i31 = $91;
  }
  $92 = $$0$i$i31&255;
  $93 = HEAP8[$7>>0]|0;
  $94 = HEAP8[$8>>0]|0;
  $95 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$15,$16,$$1,$11,$93,$94,$9,$12,$13,$14,$6)|0);
  $96 = ($95|0)==(0);
  if (!($96)) {
   $$2 = $$1;$141 = $159;
   break;
  }
  $97 = HEAP32[$80>>2]|0;
  $98 = HEAP32[$83>>2]|0;
  $99 = ($97|0)==($98|0);
  if ($99) {
   $100 = HEAP32[$81>>2]|0;
   $101 = ((($100)) + 40|0);
   $102 = HEAP32[$101>>2]|0;
   (FUNCTION_TABLE_ii[$102 & 1023]($81)|0);
  } else {
   $103 = ((($97)) + 1|0);
   HEAP32[$80>>2] = $103;
   $104 = HEAP8[$97>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($104)|0);
  }
  $$0 = $$1;$157 = $132;$32 = $81;
 }
 $105 = ((($9)) + 11|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = ($106<<24>>24)<(0);
 $108 = ((($9)) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $106&255;
 $111 = $107 ? $109 : $110;
 $112 = ($111|0)==(0);
 $113 = HEAP8[$15>>0]|0;
 $114 = ($113<<24>>24)==(0);
 $or$cond = $112 | $114;
 if (!($or$cond)) {
  $115 = HEAP32[$13>>2]|0;
  $116 = $115;
  $117 = $12;
  $118 = (($116) - ($117))|0;
  $119 = ($118|0)<(160);
  if ($119) {
   $120 = HEAP32[$14>>2]|0;
   $121 = ((($115)) + 4|0);
   HEAP32[$13>>2] = $121;
   HEAP32[$115>>2] = $120;
  }
 }
 $122 = HEAP32[$11>>2]|0;
 $123 = (+__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($$2,$122,$4));
 HEAPF32[$5>>2] = $123;
 $124 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$124,$4);
 $125 = ($81|0)==(0|0);
 if ($125) {
  $160 = 1;
 } else {
  $126 = ((($81)) + 12|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ((($81)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($127|0)==($129|0);
  if ($130) {
   $131 = HEAP32[$132>>2]|0;
   $133 = ((($131)) + 36|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (FUNCTION_TABLE_ii[$134 & 1023]($81)|0);
   $$0$i$i$i$i = $135;
  } else {
   $136 = HEAP8[$127>>0]|0;
   $137 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($136)|0);
   $$0$i$i$i$i = $137;
  }
  $138 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $139 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$138)|0);
  if ($139) {
   HEAP32[$1>>2] = 0;
   $160 = 1;
  } else {
   $160 = 0;
  }
 }
 $140 = ($141|0)==(0|0);
 do {
  if ($140) {
   label = 48;
  } else {
   $142 = ((($141)) + 12|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ((($141)) + 16|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($143|0)==($145|0);
   if ($146) {
    $147 = HEAP32[$141>>2]|0;
    $148 = ((($147)) + 36|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (FUNCTION_TABLE_ii[$149 & 1023]($141)|0);
    $$0$i$i2$i$i = $150;
   } else {
    $151 = HEAP8[$143>>0]|0;
    $152 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($151)|0);
    $$0$i$i2$i$i = $152;
   }
   $153 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $154 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$153)|0);
   if ($154) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($160) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($160) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $155 = HEAP32[$4>>2]|0;
  $156 = $155 | 2;
  HEAP32[$4>>2] = $156;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (+_strtof_l($0,$3,$8));
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = $6;
  }
  $14 = HEAP32[$3>>2]|0;
  $15 = ($14|0)==($1|0);
  if ($15) {
   $16 = ($11|0)==(34);
   if ($16) {
    $$0$ph = $9;
    label = 6;
   } else {
    $$0 = $9;
   }
  } else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$2>>2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 224|0;
 $7 = sp + 160|0;
 $8 = sp + 212|0;
 $9 = sp + 200|0;
 $10 = sp + 196|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$3,$7)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 $21 = ((($9)) + 8|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$24,0);
 $25 = HEAP8[$18>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$9>>2]|0;
 $28 = $26 ? $27 : $9;
 HEAP32[$10>>2] = $28;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $29 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $28;$158 = $$pre;$31 = $$pre;
 L8: while(1) {
  $30 = ($31|0)==(0|0);
  if ($30) {
   $133 = 0;$159 = 1;$80 = 0;
  } else {
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($31)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$31>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
    $$0$i$i$i$i25 = $40;
   } else {
    $41 = HEAP8[$33>>0]|0;
    $42 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
    $$0$i$i$i$i25 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $133 = 0;$159 = 1;$80 = 0;
   } else {
    $133 = $158;$159 = 0;$80 = $31;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 1023]($45)|0);
     $$0$i$i2$i$i31 = $55;
    } else {
     $56 = HEAP8[$48>>0]|0;
     $57 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($56)|0);
     $$0$i$i2$i$i31 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($159) {
      $160 = $45;
      break;
     } else {
      $$2 = $$0;$142 = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($159) {
    $$2 = $$0;$142 = 0;
    break;
   } else {
    $160 = 0;
   }
  }
  $60 = HEAP32[$10>>2]|0;
  $61 = HEAP8[$18>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$29>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$68,0);
   $69 = HEAP8[$18>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$21>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i38 = (($72) + -1)|0;
    $73 = $phitmp$i38;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$73,0);
   $74 = HEAP8[$18>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$9>>2]|0;
   $77 = $75 ? $76 : $9;
   $78 = (($77) + ($65)|0);
   HEAP32[$10>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($80)) + 12|0);
  $81 = HEAP32[$79>>2]|0;
  $82 = ((($80)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$80>>2]|0;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 1023]($80)|0);
   $$0$i$i41 = $88;
  } else {
   $89 = HEAP8[$81>>0]|0;
   $90 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($89)|0);
   $$0$i$i41 = $90;
  }
  $91 = $$0$i$i41&255;
  $92 = HEAP8[$6>>0]|0;
  $93 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($91,$14,$$1,$10,$13,$92,$8,$11,$12,$15)|0);
  $94 = ($93|0)==(0);
  if (!($94)) {
   $$2 = $$1;$142 = $160;
   break;
  }
  $95 = HEAP32[$79>>2]|0;
  $96 = HEAP32[$82>>2]|0;
  $97 = ($95|0)==($96|0);
  if ($97) {
   $98 = HEAP32[$80>>2]|0;
   $99 = ((($98)) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   (FUNCTION_TABLE_ii[$100 & 1023]($80)|0);
  } else {
   $101 = ((($95)) + 1|0);
   HEAP32[$79>>2] = $101;
   $102 = HEAP8[$95>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
  }
  $$0 = $$1;$158 = $133;$31 = $80;
 }
 $103 = ((($8)) + 11|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = ($104<<24>>24)<(0);
 $106 = ((($8)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $104&255;
 $109 = $105 ? $107 : $108;
 $110 = ($109|0)==(0);
 if (!($110)) {
  $111 = HEAP32[$12>>2]|0;
  $112 = $111;
  $113 = $11;
  $114 = (($112) - ($113))|0;
  $115 = ($114|0)<(160);
  if ($115) {
   $116 = HEAP32[$13>>2]|0;
   $117 = ((($111)) + 4|0);
   HEAP32[$12>>2] = $117;
   HEAP32[$111>>2] = $116;
  }
 }
 $118 = HEAP32[$10>>2]|0;
 $119 = (__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($$2,$118,$4,$14)|0);
 $120 = (getTempRet0() | 0);
 $121 = $5;
 $122 = $121;
 HEAP32[$122>>2] = $119;
 $123 = (($121) + 4)|0;
 $124 = $123;
 HEAP32[$124>>2] = $120;
 $125 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$125,$4);
 $126 = ($80|0)==(0|0);
 if ($126) {
  $161 = 1;
 } else {
  $127 = ((($80)) + 12|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ((($80)) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ($128|0)==($130|0);
  if ($131) {
   $132 = HEAP32[$133>>2]|0;
   $134 = ((($132)) + 36|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (FUNCTION_TABLE_ii[$135 & 1023]($80)|0);
   $$0$i$i$i$i = $136;
  } else {
   $137 = HEAP8[$128>>0]|0;
   $138 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($137)|0);
   $$0$i$i$i$i = $138;
  }
  $139 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $140 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$139)|0);
  if ($140) {
   HEAP32[$1>>2] = 0;
   $161 = 1;
  } else {
   $161 = 0;
  }
 }
 $141 = ($142|0)==(0|0);
 do {
  if ($141) {
   label = 48;
  } else {
   $143 = ((($142)) + 12|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ((($142)) + 16|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = ($144|0)==($146|0);
   if ($147) {
    $148 = HEAP32[$142>>2]|0;
    $149 = ((($148)) + 36|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = (FUNCTION_TABLE_ii[$150 & 1023]($142)|0);
    $$0$i$i2$i$i = $151;
   } else {
    $152 = HEAP8[$144>>0]|0;
    $153 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($152)|0);
    $$0$i$i2$i$i = $153;
   }
   $154 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $155 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$154)|0);
   if ($155) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($161) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($161) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $156 = HEAP32[$4>>2]|0;
  $157 = $156 | 2;
  HEAP32[$4>>2] = $157;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 $trunc = $3&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $$0 = 8;
  break;
 }
 case 8:  {
  $$0 = 16;
  break;
 }
 case 0:  {
  $$0 = 0;
  break;
 }
 default: {
  $$0 = 10;
 }
 }
 return ($$0|0);
}
function __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNKSt3__28ios_base6getlocEv($3,$1);
 $4 = (__ZNKSt3__26locale9use_facetERNS0_2idE($3,71008)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($4)|0);
 HEAP8[$2>>0] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vii[$11 & 511]($0,$4);
 __ZNSt3__26localeD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $21 = 0;$22 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $21 = 0;$22 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = (getTempRet0() | 0);
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   if ($19) {
    $20 = ($15|0)==(34);
    if ($20) {
     $23 = -1;$24 = -1;
     label = 8;
    } else {
     $25 = $12;$26 = $13;
    }
   } else {
    $23 = 0;$24 = 0;
    label = 8;
   }
   if ((label|0) == 8) {
    HEAP32[$2>>2] = 4;
    $25 = $23;$26 = $24;
   }
   $21 = $26;$22 = $25;
  }
 } while(0);
 setTempRet0(($21) | 0);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (49632|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 224|0;
 $7 = sp + 160|0;
 $8 = sp + 212|0;
 $9 = sp + 200|0;
 $10 = sp + 196|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$3,$7)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 $21 = ((($9)) + 8|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$24,0);
 $25 = HEAP8[$18>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$9>>2]|0;
 $28 = $26 ? $27 : $9;
 HEAP32[$10>>2] = $28;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $29 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $28;$153 = $$pre;$31 = $$pre;
 L8: while(1) {
  $30 = ($31|0)==(0|0);
  if ($30) {
   $128 = 0;$154 = 1;$80 = 0;
  } else {
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($31)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$31>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
    $$0$i$i$i$i25 = $40;
   } else {
    $41 = HEAP8[$33>>0]|0;
    $42 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
    $$0$i$i$i$i25 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $128 = 0;$154 = 1;$80 = 0;
   } else {
    $128 = $153;$154 = 0;$80 = $31;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 1023]($45)|0);
     $$0$i$i2$i$i31 = $55;
    } else {
     $56 = HEAP8[$48>>0]|0;
     $57 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($56)|0);
     $$0$i$i2$i$i31 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($154) {
      $155 = $45;
      break;
     } else {
      $$2 = $$0;$137 = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($154) {
    $$2 = $$0;$137 = 0;
    break;
   } else {
    $155 = 0;
   }
  }
  $60 = HEAP32[$10>>2]|0;
  $61 = HEAP8[$18>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$29>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$68,0);
   $69 = HEAP8[$18>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$21>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i38 = (($72) + -1)|0;
    $73 = $phitmp$i38;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$73,0);
   $74 = HEAP8[$18>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$9>>2]|0;
   $77 = $75 ? $76 : $9;
   $78 = (($77) + ($65)|0);
   HEAP32[$10>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($80)) + 12|0);
  $81 = HEAP32[$79>>2]|0;
  $82 = ((($80)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$80>>2]|0;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 1023]($80)|0);
   $$0$i$i41 = $88;
  } else {
   $89 = HEAP8[$81>>0]|0;
   $90 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($89)|0);
   $$0$i$i41 = $90;
  }
  $91 = $$0$i$i41&255;
  $92 = HEAP8[$6>>0]|0;
  $93 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($91,$14,$$1,$10,$13,$92,$8,$11,$12,$15)|0);
  $94 = ($93|0)==(0);
  if (!($94)) {
   $$2 = $$1;$137 = $155;
   break;
  }
  $95 = HEAP32[$79>>2]|0;
  $96 = HEAP32[$82>>2]|0;
  $97 = ($95|0)==($96|0);
  if ($97) {
   $98 = HEAP32[$80>>2]|0;
   $99 = ((($98)) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   (FUNCTION_TABLE_ii[$100 & 1023]($80)|0);
  } else {
   $101 = ((($95)) + 1|0);
   HEAP32[$79>>2] = $101;
   $102 = HEAP8[$95>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
  }
  $$0 = $$1;$153 = $128;$31 = $80;
 }
 $103 = ((($8)) + 11|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = ($104<<24>>24)<(0);
 $106 = ((($8)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $104&255;
 $109 = $105 ? $107 : $108;
 $110 = ($109|0)==(0);
 if (!($110)) {
  $111 = HEAP32[$12>>2]|0;
  $112 = $111;
  $113 = $11;
  $114 = (($112) - ($113))|0;
  $115 = ($114|0)<(160);
  if ($115) {
   $116 = HEAP32[$13>>2]|0;
   $117 = ((($111)) + 4|0);
   HEAP32[$12>>2] = $117;
   HEAP32[$111>>2] = $116;
  }
 }
 $118 = HEAP32[$10>>2]|0;
 $119 = (__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($$2,$118,$4,$14)|0);
 HEAP32[$5>>2] = $119;
 $120 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$120,$4);
 $121 = ($80|0)==(0|0);
 if ($121) {
  $156 = 1;
 } else {
  $122 = ((($80)) + 12|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ((($80)) + 16|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($123|0)==($125|0);
  if ($126) {
   $127 = HEAP32[$128>>2]|0;
   $129 = ((($127)) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 1023]($80)|0);
   $$0$i$i$i$i = $131;
  } else {
   $132 = HEAP8[$123>>0]|0;
   $133 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($132)|0);
   $$0$i$i$i$i = $133;
  }
  $134 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $135 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$134)|0);
  if ($135) {
   HEAP32[$1>>2] = 0;
   $156 = 1;
  } else {
   $156 = 0;
  }
 }
 $136 = ($137|0)==(0|0);
 do {
  if ($136) {
   label = 48;
  } else {
   $138 = ((($137)) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($137)) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($139|0)==($141|0);
   if ($142) {
    $143 = HEAP32[$137>>2]|0;
    $144 = ((($143)) + 36|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (FUNCTION_TABLE_ii[$145 & 1023]($137)|0);
    $$0$i$i2$i$i = $146;
   } else {
    $147 = HEAP8[$139>>0]|0;
    $148 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($147)|0);
    $$0$i$i2$i$i = $148;
   }
   $149 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $150 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$149)|0);
   if ($150) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($156) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($156) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $151 = HEAP32[$4>>2]|0;
  $152 = $151 | 2;
  HEAP32[$4>>2] = $152;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = (getTempRet0() | 0);
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   do {
    if ($19) {
     $20 = ($15|0)==(34);
     $21 = ($13>>>0)>(0);
     $22 = ($12>>>0)>(4294967295);
     $23 = ($13|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $or$cond = $25 | $20;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $12;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 224|0;
 $7 = sp + 160|0;
 $8 = sp + 212|0;
 $9 = sp + 200|0;
 $10 = sp + 196|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$3,$7)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 $21 = ((($9)) + 8|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$24,0);
 $25 = HEAP8[$18>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$9>>2]|0;
 $28 = $26 ? $27 : $9;
 HEAP32[$10>>2] = $28;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $29 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $28;$153 = $$pre;$31 = $$pre;
 L8: while(1) {
  $30 = ($31|0)==(0|0);
  if ($30) {
   $128 = 0;$154 = 1;$80 = 0;
  } else {
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($31)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$31>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
    $$0$i$i$i$i25 = $40;
   } else {
    $41 = HEAP8[$33>>0]|0;
    $42 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
    $$0$i$i$i$i25 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $128 = 0;$154 = 1;$80 = 0;
   } else {
    $128 = $153;$154 = 0;$80 = $31;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 1023]($45)|0);
     $$0$i$i2$i$i31 = $55;
    } else {
     $56 = HEAP8[$48>>0]|0;
     $57 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($56)|0);
     $$0$i$i2$i$i31 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($154) {
      $155 = $45;
      break;
     } else {
      $$2 = $$0;$137 = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($154) {
    $$2 = $$0;$137 = 0;
    break;
   } else {
    $155 = 0;
   }
  }
  $60 = HEAP32[$10>>2]|0;
  $61 = HEAP8[$18>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$29>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$68,0);
   $69 = HEAP8[$18>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$21>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i38 = (($72) + -1)|0;
    $73 = $phitmp$i38;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$73,0);
   $74 = HEAP8[$18>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$9>>2]|0;
   $77 = $75 ? $76 : $9;
   $78 = (($77) + ($65)|0);
   HEAP32[$10>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($80)) + 12|0);
  $81 = HEAP32[$79>>2]|0;
  $82 = ((($80)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$80>>2]|0;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 1023]($80)|0);
   $$0$i$i41 = $88;
  } else {
   $89 = HEAP8[$81>>0]|0;
   $90 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($89)|0);
   $$0$i$i41 = $90;
  }
  $91 = $$0$i$i41&255;
  $92 = HEAP8[$6>>0]|0;
  $93 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($91,$14,$$1,$10,$13,$92,$8,$11,$12,$15)|0);
  $94 = ($93|0)==(0);
  if (!($94)) {
   $$2 = $$1;$137 = $155;
   break;
  }
  $95 = HEAP32[$79>>2]|0;
  $96 = HEAP32[$82>>2]|0;
  $97 = ($95|0)==($96|0);
  if ($97) {
   $98 = HEAP32[$80>>2]|0;
   $99 = ((($98)) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   (FUNCTION_TABLE_ii[$100 & 1023]($80)|0);
  } else {
   $101 = ((($95)) + 1|0);
   HEAP32[$79>>2] = $101;
   $102 = HEAP8[$95>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
  }
  $$0 = $$1;$153 = $128;$31 = $80;
 }
 $103 = ((($8)) + 11|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = ($104<<24>>24)<(0);
 $106 = ((($8)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $104&255;
 $109 = $105 ? $107 : $108;
 $110 = ($109|0)==(0);
 if (!($110)) {
  $111 = HEAP32[$12>>2]|0;
  $112 = $111;
  $113 = $11;
  $114 = (($112) - ($113))|0;
  $115 = ($114|0)<(160);
  if ($115) {
   $116 = HEAP32[$13>>2]|0;
   $117 = ((($111)) + 4|0);
   HEAP32[$12>>2] = $117;
   HEAP32[$111>>2] = $116;
  }
 }
 $118 = HEAP32[$10>>2]|0;
 $119 = (__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($$2,$118,$4,$14)|0);
 HEAP32[$5>>2] = $119;
 $120 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$120,$4);
 $121 = ($80|0)==(0|0);
 if ($121) {
  $156 = 1;
 } else {
  $122 = ((($80)) + 12|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ((($80)) + 16|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($123|0)==($125|0);
  if ($126) {
   $127 = HEAP32[$128>>2]|0;
   $129 = ((($127)) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 1023]($80)|0);
   $$0$i$i$i$i = $131;
  } else {
   $132 = HEAP8[$123>>0]|0;
   $133 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($132)|0);
   $$0$i$i$i$i = $133;
  }
  $134 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $135 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$134)|0);
  if ($135) {
   HEAP32[$1>>2] = 0;
   $156 = 1;
  } else {
   $156 = 0;
  }
 }
 $136 = ($137|0)==(0|0);
 do {
  if ($136) {
   label = 48;
  } else {
   $138 = ((($137)) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($137)) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($139|0)==($141|0);
   if ($142) {
    $143 = HEAP32[$137>>2]|0;
    $144 = ((($143)) + 36|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (FUNCTION_TABLE_ii[$145 & 1023]($137)|0);
    $$0$i$i2$i$i = $146;
   } else {
    $147 = HEAP8[$139>>0]|0;
    $148 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($147)|0);
    $$0$i$i2$i$i = $148;
   }
   $149 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $150 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$149)|0);
   if ($150) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($156) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($156) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $151 = HEAP32[$4>>2]|0;
  $152 = $151 | 2;
  HEAP32[$4>>2] = $152;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = (getTempRet0() | 0);
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   do {
    if ($19) {
     $20 = ($15|0)==(34);
     $21 = ($13>>>0)>(0);
     $22 = ($12>>>0)>(4294967295);
     $23 = ($13|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $or$cond = $25 | $20;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $12;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 224|0;
 $7 = sp + 160|0;
 $8 = sp + 212|0;
 $9 = sp + 200|0;
 $10 = sp + 196|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$3,$7)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 $21 = ((($9)) + 8|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$24,0);
 $25 = HEAP8[$18>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$9>>2]|0;
 $28 = $26 ? $27 : $9;
 HEAP32[$10>>2] = $28;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $29 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $28;$153 = $$pre;$31 = $$pre;
 L8: while(1) {
  $30 = ($31|0)==(0|0);
  if ($30) {
   $128 = 0;$154 = 1;$80 = 0;
  } else {
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($31)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$31>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
    $$0$i$i$i$i25 = $40;
   } else {
    $41 = HEAP8[$33>>0]|0;
    $42 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
    $$0$i$i$i$i25 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $128 = 0;$154 = 1;$80 = 0;
   } else {
    $128 = $153;$154 = 0;$80 = $31;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 1023]($45)|0);
     $$0$i$i2$i$i31 = $55;
    } else {
     $56 = HEAP8[$48>>0]|0;
     $57 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($56)|0);
     $$0$i$i2$i$i31 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($154) {
      $155 = $45;
      break;
     } else {
      $$2 = $$0;$137 = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($154) {
    $$2 = $$0;$137 = 0;
    break;
   } else {
    $155 = 0;
   }
  }
  $60 = HEAP32[$10>>2]|0;
  $61 = HEAP8[$18>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$29>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$68,0);
   $69 = HEAP8[$18>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$21>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i38 = (($72) + -1)|0;
    $73 = $phitmp$i38;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$73,0);
   $74 = HEAP8[$18>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$9>>2]|0;
   $77 = $75 ? $76 : $9;
   $78 = (($77) + ($65)|0);
   HEAP32[$10>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($80)) + 12|0);
  $81 = HEAP32[$79>>2]|0;
  $82 = ((($80)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$80>>2]|0;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 1023]($80)|0);
   $$0$i$i41 = $88;
  } else {
   $89 = HEAP8[$81>>0]|0;
   $90 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($89)|0);
   $$0$i$i41 = $90;
  }
  $91 = $$0$i$i41&255;
  $92 = HEAP8[$6>>0]|0;
  $93 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($91,$14,$$1,$10,$13,$92,$8,$11,$12,$15)|0);
  $94 = ($93|0)==(0);
  if (!($94)) {
   $$2 = $$1;$137 = $155;
   break;
  }
  $95 = HEAP32[$79>>2]|0;
  $96 = HEAP32[$82>>2]|0;
  $97 = ($95|0)==($96|0);
  if ($97) {
   $98 = HEAP32[$80>>2]|0;
   $99 = ((($98)) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   (FUNCTION_TABLE_ii[$100 & 1023]($80)|0);
  } else {
   $101 = ((($95)) + 1|0);
   HEAP32[$79>>2] = $101;
   $102 = HEAP8[$95>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
  }
  $$0 = $$1;$153 = $128;$31 = $80;
 }
 $103 = ((($8)) + 11|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = ($104<<24>>24)<(0);
 $106 = ((($8)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $104&255;
 $109 = $105 ? $107 : $108;
 $110 = ($109|0)==(0);
 if (!($110)) {
  $111 = HEAP32[$12>>2]|0;
  $112 = $111;
  $113 = $11;
  $114 = (($112) - ($113))|0;
  $115 = ($114|0)<(160);
  if ($115) {
   $116 = HEAP32[$13>>2]|0;
   $117 = ((($111)) + 4|0);
   HEAP32[$12>>2] = $117;
   HEAP32[$111>>2] = $116;
  }
 }
 $118 = HEAP32[$10>>2]|0;
 $119 = (__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($$2,$118,$4,$14)|0);
 HEAP16[$5>>1] = $119;
 $120 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$120,$4);
 $121 = ($80|0)==(0|0);
 if ($121) {
  $156 = 1;
 } else {
  $122 = ((($80)) + 12|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ((($80)) + 16|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($123|0)==($125|0);
  if ($126) {
   $127 = HEAP32[$128>>2]|0;
   $129 = ((($127)) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 1023]($80)|0);
   $$0$i$i$i$i = $131;
  } else {
   $132 = HEAP8[$123>>0]|0;
   $133 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($132)|0);
   $$0$i$i$i$i = $133;
  }
  $134 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $135 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$134)|0);
  if ($135) {
   HEAP32[$1>>2] = 0;
   $156 = 1;
  } else {
   $156 = 0;
  }
 }
 $136 = ($137|0)==(0|0);
 do {
  if ($136) {
   label = 48;
  } else {
   $138 = ((($137)) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($137)) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($139|0)==($141|0);
   if ($142) {
    $143 = HEAP32[$137>>2]|0;
    $144 = ((($143)) + 36|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (FUNCTION_TABLE_ii[$145 & 1023]($137)|0);
    $$0$i$i2$i$i = $146;
   } else {
    $147 = HEAP8[$139>>0]|0;
    $148 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($147)|0);
    $$0$i$i2$i$i = $148;
   }
   $149 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $150 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$149)|0);
   if ($150) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($156) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($156) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $151 = HEAP32[$4>>2]|0;
  $152 = $151 | 2;
  HEAP32[$4>>2] = $152;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = (getTempRet0() | 0);
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   do {
    if ($19) {
     $20 = ($15|0)==(34);
     $21 = ($13>>>0)>(0);
     $22 = ($12>>>0)>(65535);
     $23 = ($13|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $or$cond = $25 | $20;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $26 = $12&65535;
      $$0 = $26;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 224|0;
 $7 = sp + 160|0;
 $8 = sp + 212|0;
 $9 = sp + 200|0;
 $10 = sp + 196|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$3,$7)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 $21 = ((($9)) + 8|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$24,0);
 $25 = HEAP8[$18>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$9>>2]|0;
 $28 = $26 ? $27 : $9;
 HEAP32[$10>>2] = $28;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $29 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $28;$158 = $$pre;$31 = $$pre;
 L8: while(1) {
  $30 = ($31|0)==(0|0);
  if ($30) {
   $133 = 0;$159 = 1;$80 = 0;
  } else {
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($31)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$31>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
    $$0$i$i$i$i25 = $40;
   } else {
    $41 = HEAP8[$33>>0]|0;
    $42 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
    $$0$i$i$i$i25 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $133 = 0;$159 = 1;$80 = 0;
   } else {
    $133 = $158;$159 = 0;$80 = $31;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 1023]($45)|0);
     $$0$i$i2$i$i31 = $55;
    } else {
     $56 = HEAP8[$48>>0]|0;
     $57 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($56)|0);
     $$0$i$i2$i$i31 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($159) {
      $160 = $45;
      break;
     } else {
      $$2 = $$0;$142 = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($159) {
    $$2 = $$0;$142 = 0;
    break;
   } else {
    $160 = 0;
   }
  }
  $60 = HEAP32[$10>>2]|0;
  $61 = HEAP8[$18>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$29>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$68,0);
   $69 = HEAP8[$18>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$21>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i38 = (($72) + -1)|0;
    $73 = $phitmp$i38;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$73,0);
   $74 = HEAP8[$18>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$9>>2]|0;
   $77 = $75 ? $76 : $9;
   $78 = (($77) + ($65)|0);
   HEAP32[$10>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($80)) + 12|0);
  $81 = HEAP32[$79>>2]|0;
  $82 = ((($80)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$80>>2]|0;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 1023]($80)|0);
   $$0$i$i41 = $88;
  } else {
   $89 = HEAP8[$81>>0]|0;
   $90 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($89)|0);
   $$0$i$i41 = $90;
  }
  $91 = $$0$i$i41&255;
  $92 = HEAP8[$6>>0]|0;
  $93 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($91,$14,$$1,$10,$13,$92,$8,$11,$12,$15)|0);
  $94 = ($93|0)==(0);
  if (!($94)) {
   $$2 = $$1;$142 = $160;
   break;
  }
  $95 = HEAP32[$79>>2]|0;
  $96 = HEAP32[$82>>2]|0;
  $97 = ($95|0)==($96|0);
  if ($97) {
   $98 = HEAP32[$80>>2]|0;
   $99 = ((($98)) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   (FUNCTION_TABLE_ii[$100 & 1023]($80)|0);
  } else {
   $101 = ((($95)) + 1|0);
   HEAP32[$79>>2] = $101;
   $102 = HEAP8[$95>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
  }
  $$0 = $$1;$158 = $133;$31 = $80;
 }
 $103 = ((($8)) + 11|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = ($104<<24>>24)<(0);
 $106 = ((($8)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $104&255;
 $109 = $105 ? $107 : $108;
 $110 = ($109|0)==(0);
 if (!($110)) {
  $111 = HEAP32[$12>>2]|0;
  $112 = $111;
  $113 = $11;
  $114 = (($112) - ($113))|0;
  $115 = ($114|0)<(160);
  if ($115) {
   $116 = HEAP32[$13>>2]|0;
   $117 = ((($111)) + 4|0);
   HEAP32[$12>>2] = $117;
   HEAP32[$111>>2] = $116;
  }
 }
 $118 = HEAP32[$10>>2]|0;
 $119 = (__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($$2,$118,$4,$14)|0);
 $120 = (getTempRet0() | 0);
 $121 = $5;
 $122 = $121;
 HEAP32[$122>>2] = $119;
 $123 = (($121) + 4)|0;
 $124 = $123;
 HEAP32[$124>>2] = $120;
 $125 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$125,$4);
 $126 = ($80|0)==(0|0);
 if ($126) {
  $161 = 1;
 } else {
  $127 = ((($80)) + 12|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ((($80)) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ($128|0)==($130|0);
  if ($131) {
   $132 = HEAP32[$133>>2]|0;
   $134 = ((($132)) + 36|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (FUNCTION_TABLE_ii[$135 & 1023]($80)|0);
   $$0$i$i$i$i = $136;
  } else {
   $137 = HEAP8[$128>>0]|0;
   $138 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($137)|0);
   $$0$i$i$i$i = $138;
  }
  $139 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $140 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$139)|0);
  if ($140) {
   HEAP32[$1>>2] = 0;
   $161 = 1;
  } else {
   $161 = 0;
  }
 }
 $141 = ($142|0)==(0|0);
 do {
  if ($141) {
   label = 48;
  } else {
   $143 = ((($142)) + 12|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ((($142)) + 16|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = ($144|0)==($146|0);
   if ($147) {
    $148 = HEAP32[$142>>2]|0;
    $149 = ((($148)) + 36|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = (FUNCTION_TABLE_ii[$150 & 1023]($142)|0);
    $$0$i$i2$i$i = $151;
   } else {
    $152 = HEAP8[$144>>0]|0;
    $153 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($152)|0);
    $$0$i$i2$i$i = $153;
   }
   $154 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $155 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$154)|0);
   if ($155) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($161) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($161) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $156 = HEAP32[$4>>2]|0;
  $157 = $156 | 2;
  HEAP32[$4>>2] = $157;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 if ($5) {
  HEAP32[$2>>2] = 4;
  $26 = 0;$27 = 0;
 } else {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 0;
  $9 = (__ZNSt3__26__clocEv()|0);
  $10 = (_strtoll_l($0,$4,$3,$9)|0);
  $11 = (getTempRet0() | 0);
  $12 = (___errno_location()|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = (___errno_location()|0);
   HEAP32[$15>>2] = $7;
  }
  $16 = HEAP32[$4>>2]|0;
  $17 = ($16|0)==($1|0);
  if ($17) {
   $18 = ($13|0)==(34);
   if ($18) {
    HEAP32[$2>>2] = 4;
    $19 = ($11|0)>(0);
    $20 = ($10>>>0)>(0);
    $21 = ($11|0)==(0);
    $22 = $21 & $20;
    $23 = $19 | $22;
    $24 = $23 ? -1 : 0;
    $25 = $23 ? 2147483647 : -2147483648;
    $28 = $24;$29 = $25;
   } else {
    $28 = $10;$29 = $11;
   }
  } else {
   HEAP32[$2>>2] = 4;
   $28 = 0;$29 = 0;
  }
  $26 = $29;$27 = $28;
 }
 setTempRet0(($26) | 0);
 STACKTOP = sp;return ($27|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 224|0;
 $7 = sp + 160|0;
 $8 = sp + 212|0;
 $9 = sp + 200|0;
 $10 = sp + 196|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$3,$7)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 $21 = ((($9)) + 8|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$24,0);
 $25 = HEAP8[$18>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$9>>2]|0;
 $28 = $26 ? $27 : $9;
 HEAP32[$10>>2] = $28;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $29 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $28;$153 = $$pre;$31 = $$pre;
 L8: while(1) {
  $30 = ($31|0)==(0|0);
  if ($30) {
   $128 = 0;$154 = 1;$80 = 0;
  } else {
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($31)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$31>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
    $$0$i$i$i$i25 = $40;
   } else {
    $41 = HEAP8[$33>>0]|0;
    $42 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
    $$0$i$i$i$i25 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $128 = 0;$154 = 1;$80 = 0;
   } else {
    $128 = $153;$154 = 0;$80 = $31;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 1023]($45)|0);
     $$0$i$i2$i$i31 = $55;
    } else {
     $56 = HEAP8[$48>>0]|0;
     $57 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($56)|0);
     $$0$i$i2$i$i31 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($154) {
      $155 = $45;
      break;
     } else {
      $$2 = $$0;$137 = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($154) {
    $$2 = $$0;$137 = 0;
    break;
   } else {
    $155 = 0;
   }
  }
  $60 = HEAP32[$10>>2]|0;
  $61 = HEAP8[$18>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$29>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$68,0);
   $69 = HEAP8[$18>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$21>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i38 = (($72) + -1)|0;
    $73 = $phitmp$i38;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$73,0);
   $74 = HEAP8[$18>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$9>>2]|0;
   $77 = $75 ? $76 : $9;
   $78 = (($77) + ($65)|0);
   HEAP32[$10>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($80)) + 12|0);
  $81 = HEAP32[$79>>2]|0;
  $82 = ((($80)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$80>>2]|0;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 1023]($80)|0);
   $$0$i$i41 = $88;
  } else {
   $89 = HEAP8[$81>>0]|0;
   $90 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($89)|0);
   $$0$i$i41 = $90;
  }
  $91 = $$0$i$i41&255;
  $92 = HEAP8[$6>>0]|0;
  $93 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($91,$14,$$1,$10,$13,$92,$8,$11,$12,$15)|0);
  $94 = ($93|0)==(0);
  if (!($94)) {
   $$2 = $$1;$137 = $155;
   break;
  }
  $95 = HEAP32[$79>>2]|0;
  $96 = HEAP32[$82>>2]|0;
  $97 = ($95|0)==($96|0);
  if ($97) {
   $98 = HEAP32[$80>>2]|0;
   $99 = ((($98)) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   (FUNCTION_TABLE_ii[$100 & 1023]($80)|0);
  } else {
   $101 = ((($95)) + 1|0);
   HEAP32[$79>>2] = $101;
   $102 = HEAP8[$95>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
  }
  $$0 = $$1;$153 = $128;$31 = $80;
 }
 $103 = ((($8)) + 11|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = ($104<<24>>24)<(0);
 $106 = ((($8)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $104&255;
 $109 = $105 ? $107 : $108;
 $110 = ($109|0)==(0);
 if (!($110)) {
  $111 = HEAP32[$12>>2]|0;
  $112 = $111;
  $113 = $11;
  $114 = (($112) - ($113))|0;
  $115 = ($114|0)<(160);
  if ($115) {
   $116 = HEAP32[$13>>2]|0;
   $117 = ((($111)) + 4|0);
   HEAP32[$12>>2] = $117;
   HEAP32[$111>>2] = $116;
  }
 }
 $118 = HEAP32[$10>>2]|0;
 $119 = (__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($$2,$118,$4,$14)|0);
 HEAP32[$5>>2] = $119;
 $120 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$120,$4);
 $121 = ($80|0)==(0|0);
 if ($121) {
  $156 = 1;
 } else {
  $122 = ((($80)) + 12|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ((($80)) + 16|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($123|0)==($125|0);
  if ($126) {
   $127 = HEAP32[$128>>2]|0;
   $129 = ((($127)) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 1023]($80)|0);
   $$0$i$i$i$i = $131;
  } else {
   $132 = HEAP8[$123>>0]|0;
   $133 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($132)|0);
   $$0$i$i$i$i = $133;
  }
  $134 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $135 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$134)|0);
  if ($135) {
   HEAP32[$1>>2] = 0;
   $156 = 1;
  } else {
   $156 = 0;
  }
 }
 $136 = ($137|0)==(0|0);
 do {
  if ($136) {
   label = 48;
  } else {
   $138 = ((($137)) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($137)) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($139|0)==($141|0);
   if ($142) {
    $143 = HEAP32[$137>>2]|0;
    $144 = ((($143)) + 36|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (FUNCTION_TABLE_ii[$145 & 1023]($137)|0);
    $$0$i$i2$i$i = $146;
   } else {
    $147 = HEAP8[$139>>0]|0;
    $148 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($147)|0);
    $$0$i$i2$i$i = $148;
   }
   $149 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $150 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$149)|0);
   if ($150) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($156) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($156) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $151 = HEAP32[$4>>2]|0;
  $152 = $151 | 2;
  HEAP32[$4>>2] = $152;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 if ($5) {
  HEAP32[$2>>2] = 4;
  $$1 = 0;
 } else {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 0;
  $9 = (__ZNSt3__26__clocEv()|0);
  $10 = (_strtoll_l($0,$4,$3,$9)|0);
  $11 = (getTempRet0() | 0);
  $12 = (___errno_location()|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = (___errno_location()|0);
   HEAP32[$15>>2] = $7;
  }
  $16 = HEAP32[$4>>2]|0;
  $17 = ($16|0)==($1|0);
  L7: do {
   if ($17) {
    $18 = ($13|0)==(34);
    do {
     if ($18) {
      HEAP32[$2>>2] = 4;
      $29 = ($11|0)>(0);
      $30 = ($10>>>0)>(0);
      $31 = ($11|0)==(0);
      $32 = $31 & $30;
      $33 = $29 | $32;
      if ($33) {
       $$0 = 2147483647;
       break L7;
      }
     } else {
      $19 = ($11|0)<(-1);
      $20 = ($10>>>0)<(2147483648);
      $21 = ($11|0)==(-1);
      $22 = $21 & $20;
      $23 = $19 | $22;
      if ($23) {
       HEAP32[$2>>2] = 4;
       break;
      }
      $24 = ($11|0)>(0);
      $25 = ($10>>>0)>(2147483647);
      $26 = ($11|0)==(0);
      $27 = $26 & $25;
      $28 = $24 | $27;
      if ($28) {
       HEAP32[$2>>2] = 4;
       $$0 = 2147483647;
       break L7;
      } else {
       $$0 = $10;
       break L7;
      }
     }
    } while(0);
    $$0 = -2147483648;
   } else {
    HEAP32[$2>>2] = 4;
    $$0 = 0;
   }
  } while(0);
  $$1 = $$0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i112 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i118 = 0, $$0101 = 0, $$0107 = 0, $$0108 = 0, $$0108136 = 0, $$088 = 0, $$089 = 0, $$090$off0 = 0, $$091 = 0, $$092 = 0, $$093 = 0, $$094 = 0, $$097 = 0, $$1102 = 0, $$195 = 0;
 var $$198 = 0, $$2$off0 = 0, $$2103 = 0, $$296 = 0, $$299 = 0, $$299$be = 0, $$3 = 0, $$3100 = 0, $$3104 = 0, $$5 = 0, $$5106 = 0, $$6 = 0, $$7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i114 = 0, $$sroa$0125$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i115 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = $3;
 $9 = $2;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 $12 = ($11>>>0)>(100);
 if ($12) {
  $13 = (_malloc($11)|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$0107 = $13;$$sroa$0125$0 = $13;
  }
 } else {
  $$0107 = $7;$$sroa$0125$0 = 0;
 }
 $$0101 = $11;$$093 = $2;$$094 = $$0107;$$097 = 0;
 while(1) {
  $15 = ($$093|0)==($3|0);
  if ($15) {
   break;
  }
  $16 = ((($$093)) + 11|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)<(0);
  if ($18) {
   $19 = ((($$093)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $23 = $20;
  } else {
   $21 = $17&255;
   $23 = $21;
  }
  $22 = ($23|0)==(0);
  if ($22) {
   HEAP8[$$094>>0] = 2;
   $24 = (($$0101) + -1)|0;
   $25 = (($$097) + 1)|0;
   $$1102 = $24;$$198 = $25;
  } else {
   HEAP8[$$094>>0] = 1;
   $$1102 = $$0101;$$198 = $$097;
  }
  $26 = ((($$093)) + 12|0);
  $27 = ((($$094)) + 1|0);
  $$0101 = $$1102;$$093 = $26;$$094 = $27;$$097 = $$198;
 }
 $$092 = 0;$$2103 = $$0101;$$299 = $$097;
 while(1) {
  $28 = HEAP32[$0>>2]|0;
  $29 = ($28|0)==(0|0);
  do {
   if ($29) {
    $59 = 1;
   } else {
    $30 = ((($28)) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($28)) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($31|0)==($33|0);
    if ($34) {
     $35 = HEAP32[$28>>2]|0;
     $36 = ((($35)) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (FUNCTION_TABLE_ii[$37 & 1023]($28)|0);
     $$0$i$i$i$i = $38;
    } else {
     $39 = HEAP8[$31>>0]|0;
     $40 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($39)|0);
     $$0$i$i$i$i = $40;
    }
    $41 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $42 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$41)|0);
    if ($42) {
     HEAP32[$0>>2] = 0;
     $59 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$0>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $59 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $43 = HEAP32[$1>>2]|0;
  $44 = ($43|0)==(0|0);
  if ($44) {
   $60 = 1;$79 = 0;
  } else {
   $45 = ((($43)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($43)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($46|0)==($48|0);
   if ($49) {
    $50 = HEAP32[$43>>2]|0;
    $51 = ((($50)) + 36|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (FUNCTION_TABLE_ii[$52 & 1023]($43)|0);
    $$0$i$i2$i$i = $53;
   } else {
    $54 = HEAP8[$46>>0]|0;
    $55 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($54)|0);
    $$0$i$i2$i$i = $55;
   }
   $56 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $57 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$56)|0);
   if ($57) {
    HEAP32[$1>>2] = 0;
    $60 = 1;$79 = 0;
   } else {
    $60 = 0;$79 = $43;
   }
  }
  $58 = $59 ^ $60;
  $61 = ($$2103|0)!=(0);
  $62 = $61 & $58;
  $63 = HEAP32[$0>>2]|0;
  if (!($62)) {
   break;
  }
  $93 = ((($63)) + 12|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($63)) + 16|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($94|0)==($96|0);
  if ($97) {
   $98 = HEAP32[$63>>2]|0;
   $99 = ((($98)) + 36|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (FUNCTION_TABLE_ii[$100 & 1023]($63)|0);
   $$0$i$i = $101;
  } else {
   $102 = HEAP8[$94>>0]|0;
   $103 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
   $$0$i$i = $103;
  }
  $104 = $$0$i$i&255;
  if ($6) {
   $$091 = $104;
  } else {
   $105 = HEAP32[$4>>2]|0;
   $106 = ((($105)) + 12|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (FUNCTION_TABLE_iii[$107 & 511]($4,$104)|0);
   $$091 = $108;
  }
  $109 = (($$092) + 1)|0;
  $$089 = $2;$$090$off0 = 0;$$195 = $$0107;$$3100 = $$299;$$3104 = $$2103;
  while(1) {
   $110 = ($$089|0)==($3|0);
   if ($110) {
    break;
   }
   $111 = HEAP8[$$195>>0]|0;
   $112 = ($111<<24>>24)==(1);
   do {
    if ($112) {
     $113 = ((($$089)) + 11|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)<(0);
     if ($115) {
      $116 = HEAP32[$$089>>2]|0;
      $118 = $116;
     } else {
      $118 = $$089;
     }
     $117 = (($118) + ($$092)|0);
     $119 = HEAP8[$117>>0]|0;
     if ($6) {
      $$088 = $119;
     } else {
      $120 = HEAP32[$4>>2]|0;
      $121 = ((($120)) + 12|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (FUNCTION_TABLE_iii[$122 & 511]($4,$119)|0);
      $$088 = $123;
     }
     $124 = ($$091<<24>>24)==($$088<<24>>24);
     if (!($124)) {
      HEAP8[$$195>>0] = 0;
      $134 = (($$3104) + -1)|0;
      $$2$off0 = $$090$off0;$$5 = $$3100;$$5106 = $134;
      break;
     }
     $125 = HEAP8[$113>>0]|0;
     $126 = ($125<<24>>24)<(0);
     if ($126) {
      $127 = ((($$089)) + 4|0);
      $128 = HEAP32[$127>>2]|0;
      $131 = $128;
     } else {
      $129 = $125&255;
      $131 = $129;
     }
     $130 = ($131|0)==($109|0);
     if ($130) {
      $132 = (($$3104) + -1)|0;
      $133 = (($$3100) + 1)|0;
      HEAP8[$$195>>0] = 2;
      $$2$off0 = 1;$$5 = $133;$$5106 = $132;
     } else {
      $$2$off0 = 1;$$5 = $$3100;$$5106 = $$3104;
     }
    } else {
     $$2$off0 = $$090$off0;$$5 = $$3100;$$5106 = $$3104;
    }
   } while(0);
   $135 = ((($$089)) + 12|0);
   $136 = ((($$195)) + 1|0);
   $$089 = $135;$$090$off0 = $$2$off0;$$195 = $136;$$3100 = $$5;$$3104 = $$5106;
  }
  L67: do {
   if ($$090$off0) {
    $137 = HEAP32[$0>>2]|0;
    $138 = ((($137)) + 12|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($137)) + 16|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ($139|0)==($141|0);
    if ($142) {
     $143 = HEAP32[$137>>2]|0;
     $144 = ((($143)) + 40|0);
     $145 = HEAP32[$144>>2]|0;
     (FUNCTION_TABLE_ii[$145 & 1023]($137)|0);
    } else {
     $146 = ((($139)) + 1|0);
     HEAP32[$138>>2] = $146;
     $147 = HEAP8[$139>>0]|0;
     (__ZNSt3__211char_traitsIcE11to_int_typeEc($147)|0);
    }
    $148 = (($$3100) + ($$3104))|0;
    $149 = ($148>>>0)>(1);
    if ($149) {
     $$0 = $2;$$296 = $$0107;$$6 = $$3100;
     while(1) {
      $150 = ($$0|0)==($3|0);
      if ($150) {
       $$299$be = $$6;
       break L67;
      }
      $151 = HEAP8[$$296>>0]|0;
      $152 = ($151<<24>>24)==(2);
      if ($152) {
       $153 = ((($$0)) + 11|0);
       $154 = HEAP8[$153>>0]|0;
       $155 = ($154<<24>>24)<(0);
       if ($155) {
        $156 = ((($$0)) + 4|0);
        $157 = HEAP32[$156>>2]|0;
        $160 = $157;
       } else {
        $158 = $154&255;
        $160 = $158;
       }
       $159 = ($160|0)==($109|0);
       if ($159) {
        $$7 = $$6;
       } else {
        $161 = (($$6) + -1)|0;
        HEAP8[$$296>>0] = 0;
        $$7 = $161;
       }
      } else {
       $$7 = $$6;
      }
      $162 = ((($$0)) + 12|0);
      $163 = ((($$296)) + 1|0);
      $$0 = $162;$$296 = $163;$$6 = $$7;
     }
    } else {
     $$299$be = $$3100;
    }
   } else {
    $$299$be = $$3100;
   }
  } while(0);
  $$092 = $109;$$2103 = $$3104;$$299 = $$299$be;
 }
 $64 = ($63|0)==(0|0);
 do {
  if ($64) {
   $173 = 1;
  } else {
   $65 = ((($63)) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($63)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$63>>2]|0;
    $71 = ((($70)) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($63)|0);
    $$0$i$i$i$i112 = $73;
   } else {
    $74 = HEAP8[$66>>0]|0;
    $75 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($74)|0);
    $$0$i$i$i$i112 = $75;
   }
   $76 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $77 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i112,$76)|0);
   if ($77) {
    HEAP32[$0>>2] = 0;
    $173 = 1;
    break;
   } else {
    $$pre$i$i$i114 = HEAP32[$0>>2]|0;
    $phitmp$i$i$i115 = ($$pre$i$i$i114|0)==(0|0);
    $173 = $phitmp$i$i$i115;
    break;
   }
  }
 } while(0);
 $78 = ($79|0)==(0|0);
 do {
  if ($78) {
   label = 41;
  } else {
   $80 = ((($79)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($79)) + 16|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($81|0)==($83|0);
   if ($84) {
    $85 = HEAP32[$79>>2]|0;
    $86 = ((($85)) + 36|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (FUNCTION_TABLE_ii[$87 & 1023]($79)|0);
    $$0$i$i2$i$i118 = $88;
   } else {
    $89 = HEAP8[$81>>0]|0;
    $90 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($89)|0);
    $$0$i$i2$i$i118 = $90;
   }
   $91 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $92 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i118,$91)|0);
   if ($92) {
    HEAP32[$1>>2] = 0;
    label = 41;
    break;
   } else {
    if ($173) {
     break;
    } else {
     label = 79;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($173) {
   label = 79;
  }
 }
 if ((label|0) == 79) {
  $164 = HEAP32[$5>>2]|0;
  $165 = $164 | 2;
  HEAP32[$5>>2] = $165;
 }
 $$0108 = $2;$$3 = $$0107;
 while(1) {
  $166 = ($$0108|0)==($3|0);
  if ($166) {
   label = 84;
   break;
  }
  $167 = HEAP8[$$3>>0]|0;
  $168 = ($167<<24>>24)==(2);
  if ($168) {
   $$0108136 = $$0108;
   break;
  }
  $169 = ((($$0108)) + 12|0);
  $170 = ((($$3)) + 1|0);
  $$0108 = $169;$$3 = $170;
 }
 if ((label|0) == 84) {
  $171 = HEAP32[$5>>2]|0;
  $172 = $171 | 4;
  HEAP32[$5>>2] = $172;
  $$0108136 = $3;
 }
 _free($$sroa$0125$0);
 STACKTOP = sp;return ($$0108136|0);
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$022$0 = 0, $$sroa$022$0$copyload = 0, $$sroa$022$0$copyload24 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 52|0;
 $$byval_copy = sp + 48|0;
 $6 = sp + 44|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 32|0;
 $10 = sp + 28|0;
 $11 = sp;
 $12 = sp + 24|0;
 $13 = ((($3)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$6>>2] = -1;
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$1>>2]|0;
  HEAP32[$7>>2] = $20;
  $21 = HEAP32[$2>>2]|0;
  HEAP32[$8>>2] = $21;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$8>>2]|0;
  $22 = (FUNCTION_TABLE_iiiiiii[$19 & 255]($0,$$byval_copy,$$byval_copy1,$3,$4,$6)|0);
  HEAP32[$1>>2] = $22;
  $23 = HEAP32[$6>>2]|0;
  switch ($23|0) {
  case 0:  {
   HEAP8[$5>>0] = 0;
   break;
  }
  case 1:  {
   HEAP8[$5>>0] = 1;
   break;
  }
  default: {
   HEAP8[$5>>0] = 1;
   HEAP32[$4>>2] = 4;
  }
  }
  $$sroa$022$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$022$0 = $$sroa$022$0$copyload;
 } else {
  __ZNKSt3__28ios_base6getlocEv($9,$3);
  $24 = (__ZNKSt3__26locale9use_facetERNS0_2idE($9,71024)|0);
  __ZNSt3__26localeD2Ev($9);
  __ZNKSt3__28ios_base6getlocEv($10,$3);
  $25 = (__ZNKSt3__26locale9use_facetERNS0_2idE($10,71032)|0);
  __ZNSt3__26localeD2Ev($10);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vii[$28 & 511]($11,$25);
  $29 = ((($11)) + 12|0);
  $30 = HEAP32[$25>>2]|0;
  $31 = ((($30)) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 511]($29,$25);
  $33 = HEAP32[$2>>2]|0;
  HEAP32[$12>>2] = $33;
  $34 = ((($11)) + 24|0);
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$12>>2]|0;
  $35 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($1,$$byval_copy2,$11,$34,$24,$4,1)|0);
  $36 = ($35|0)==($11|0);
  $37 = $36&1;
  HEAP8[$5>>0] = $37;
  $$sroa$022$0$copyload24 = HEAP32[$1>>2]|0;
  $39 = $34;
  while(1) {
   $38 = ((($39)) + -12|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($38);
   $40 = ($38|0)==($11|0);
   if ($40) {
    break;
   } else {
    $39 = $38;
   }
  }
  $$sroa$022$0 = $$sroa$022$0$copyload24;
 }
 STACKTOP = sp;return ($$sroa$022$0|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i22 = 0, $$0$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i28 = 0, $$0$i$i38 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i20 = 0, $phitmp$i = 0;
 var $phitmp$i35 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp + 264|0;
 $6 = sp + 160|0;
 $7 = sp + 296|0;
 $8 = sp + 292|0;
 $9 = sp + 280|0;
 $10 = sp + 276|0;
 $11 = sp;
 $12 = sp + 272|0;
 $13 = sp + 268|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $14 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$14>>2] = 0;
  $15 = (($$0$i$i) + 1)|0;
  $$0$i$i = $15;
 }
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 $16 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,71024)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 (FUNCTION_TABLE_iiiii[$19 & 511]($16,49632,(49658),$6)|0);
 __ZNSt3__26localeD2Ev($8);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i19 = 0;
 while(1) {
  $exitcond$i$i20 = ($$0$i$i19|0)==(3);
  if ($exitcond$i$i20) {
   break;
  }
  $20 = (($9) + ($$0$i$i19<<2)|0);
  HEAP32[$20>>2] = 0;
  $21 = (($$0$i$i19) + 1)|0;
  $$0$i$i19 = $21;
 }
 $22 = ((($9)) + 11|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)<(0);
 $25 = ((($9)) + 8|0);
 if ($24) {
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & 2147483647;
  $phitmp$i = (($27) + -1)|0;
  $28 = $phitmp$i;
 } else {
  $28 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$28,0);
 $29 = HEAP8[$22>>0]|0;
 $30 = ($29<<24>>24)<(0);
 $31 = HEAP32[$9>>2]|0;
 $32 = $30 ? $31 : $9;
 HEAP32[$10>>2] = $32;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $33 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $32;$147 = $$pre;$35 = $$pre;
 L12: while(1) {
  $34 = ($35|0)==(0|0);
  if ($34) {
   $122 = 0;$148 = 1;$84 = 0;
  } else {
   $36 = ((($35)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($35)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($37|0)==($39|0);
   if ($40) {
    $41 = HEAP32[$35>>2]|0;
    $42 = ((($41)) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_ii[$43 & 1023]($35)|0);
    $$0$i$i$i$i22 = $44;
   } else {
    $45 = HEAP32[$37>>2]|0;
    $46 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($45)|0);
    $$0$i$i$i$i22 = $46;
   }
   $47 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $48 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i22,$47)|0);
   if ($48) {
    HEAP32[$1>>2] = 0;
    $122 = 0;$148 = 1;$84 = 0;
   } else {
    $122 = $147;$148 = 0;$84 = $35;
   }
  }
  $49 = HEAP32[$2>>2]|0;
  $50 = ($49|0)==(0|0);
  do {
   if ($50) {
    label = 22;
   } else {
    $51 = ((($49)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($49)) + 16|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($52|0)==($54|0);
    if ($55) {
     $56 = HEAP32[$49>>2]|0;
     $57 = ((($56)) + 36|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (FUNCTION_TABLE_ii[$58 & 1023]($49)|0);
     $$0$i$i2$i$i28 = $59;
    } else {
     $60 = HEAP32[$52>>2]|0;
     $61 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($60)|0);
     $$0$i$i2$i$i28 = $61;
    }
    $62 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $63 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i28,$62)|0);
    if ($63) {
     HEAP32[$2>>2] = 0;
     label = 22;
     break;
    } else {
     if ($148) {
      $149 = $49;
      break;
     } else {
      $$2 = $$0;$131 = $49;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($148) {
    $$2 = $$0;$131 = 0;
    break;
   } else {
    $149 = 0;
   }
  }
  $64 = HEAP32[$10>>2]|0;
  $65 = HEAP8[$22>>0]|0;
  $66 = ($65<<24>>24)<(0);
  $67 = HEAP32[$33>>2]|0;
  $68 = $65&255;
  $69 = $66 ? $67 : $68;
  $70 = (($$0) + ($69)|0);
  $71 = ($64|0)==($70|0);
  if ($71) {
   $72 = $69 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$72,0);
   $73 = HEAP8[$22>>0]|0;
   $74 = ($73<<24>>24)<(0);
   if ($74) {
    $75 = HEAP32[$25>>2]|0;
    $76 = $75 & 2147483647;
    $phitmp$i35 = (($76) + -1)|0;
    $77 = $phitmp$i35;
   } else {
    $77 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$77,0);
   $78 = HEAP8[$22>>0]|0;
   $79 = ($78<<24>>24)<(0);
   $80 = HEAP32[$9>>2]|0;
   $81 = $79 ? $80 : $9;
   $82 = (($81) + ($69)|0);
   HEAP32[$10>>2] = $82;
   $$1 = $81;
  } else {
   $$1 = $$0;
  }
  $83 = ((($84)) + 12|0);
  $85 = HEAP32[$83>>2]|0;
  $86 = ((($84)) + 16|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($85|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$84>>2]|0;
   $90 = ((($89)) + 36|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (FUNCTION_TABLE_ii[$91 & 1023]($84)|0);
   $$0$i$i38 = $92;
  } else {
   $93 = HEAP32[$85>>2]|0;
   $94 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($93)|0);
   $$0$i$i38 = $94;
  }
  $95 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i38,16,$$1,$10,$13,0,$7,$11,$12,$6)|0);
  $96 = ($95|0)==(0);
  if (!($96)) {
   $$2 = $$1;$131 = $149;
   break;
  }
  $97 = HEAP32[$83>>2]|0;
  $98 = HEAP32[$86>>2]|0;
  $99 = ($97|0)==($98|0);
  if ($99) {
   $100 = HEAP32[$84>>2]|0;
   $101 = ((($100)) + 40|0);
   $102 = HEAP32[$101>>2]|0;
   (FUNCTION_TABLE_ii[$102 & 1023]($84)|0);
  } else {
   $103 = ((($97)) + 4|0);
   HEAP32[$83>>2] = $103;
   $104 = HEAP32[$97>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($104)|0);
  }
  $$0 = $$1;$147 = $122;$35 = $84;
 }
 $105 = HEAP32[$10>>2]|0;
 $106 = $$2;
 $107 = (($105) - ($106))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$107,0);
 $108 = HEAP8[$22>>0]|0;
 $109 = ($108<<24>>24)<(0);
 $110 = HEAP32[$9>>2]|0;
 $111 = $109 ? $110 : $9;
 $112 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $5;
 $113 = (__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($111,$112,62182,$vararg_buffer)|0);
 $114 = ($113|0)==(1);
 if (!($114)) {
  HEAP32[$4>>2] = 4;
 }
 $115 = ($84|0)==(0|0);
 if ($115) {
  $150 = 1;
 } else {
  $116 = ((($84)) + 12|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ((($84)) + 16|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($117|0)==($119|0);
  if ($120) {
   $121 = HEAP32[$122>>2]|0;
   $123 = ((($121)) + 36|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (FUNCTION_TABLE_ii[$124 & 1023]($84)|0);
   $$0$i$i$i$i = $125;
  } else {
   $126 = HEAP32[$117>>2]|0;
   $127 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($126)|0);
   $$0$i$i$i$i = $127;
  }
  $128 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $129 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$128)|0);
  if ($129) {
   HEAP32[$1>>2] = 0;
   $150 = 1;
  } else {
   $150 = 0;
  }
 }
 $130 = ($131|0)==(0|0);
 do {
  if ($130) {
   label = 50;
  } else {
   $132 = ((($131)) + 12|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ((($131)) + 16|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ($133|0)==($135|0);
   if ($136) {
    $137 = HEAP32[$131>>2]|0;
    $138 = ((($137)) + 36|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (FUNCTION_TABLE_ii[$139 & 1023]($131)|0);
    $$0$i$i2$i$i = $140;
   } else {
    $141 = HEAP32[$133>>2]|0;
    $142 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($141)|0);
    $$0$i$i2$i$i = $142;
   }
   $143 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $144 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$143)|0);
   if ($144) {
    HEAP32[$2>>2] = 0;
    label = 50;
    break;
   } else {
    if ($150) {
     break;
    } else {
     label = 52;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 50) {
  if ($150) {
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $145 = HEAP32[$4>>2]|0;
  $146 = $145 | 2;
  HEAP32[$4>>2] = $146;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)==($2|0);
 do {
  if ($11) {
   $12 = ((($9)) + 96|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==($0|0);
   if (!($14)) {
    $15 = ((($9)) + 100|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($0|0);
    if (!($17)) {
     label = 5;
     break;
    }
   }
   $18 = $14 ? 43 : 45;
   $19 = ((($2)) + 1|0);
   HEAP32[$3>>2] = $19;
   HEAP8[$2>>0] = $18;
   HEAP32[$4>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $20 = ((($6)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = ((($6)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21&255;
   $26 = $22 ? $24 : $25;
   $27 = ($26|0)!=(0);
   $28 = ($0|0)==($5|0);
   $or$cond = $28 & $27;
   if ($or$cond) {
    $29 = HEAP32[$8>>2]|0;
    $30 = $29;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $33 = ($32|0)<(160);
    if (!($33)) {
     $$1 = 0;
     break;
    }
    $34 = HEAP32[$4>>2]|0;
    $35 = ((($29)) + 4|0);
    HEAP32[$8>>2] = $35;
    HEAP32[$29>>2] = $34;
    HEAP32[$4>>2] = 0;
    $$1 = 0;
    break;
   }
   $36 = ((($9)) + 104|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($9) + ($$0$i$idx<<2)|0);
    $37 = ($$0$i$idx|0)==(26);
    if ($37) {
     $$0$lcssa$i = $36;
     break;
    }
    $38 = HEAP32[$$0$i$ptr>>2]|0;
    $39 = ($38|0)==($0|0);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($39) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $40 = $$0$lcssa$i;
   $41 = $9;
   $42 = (($40) - ($41))|0;
   $43 = $42 >> 2;
   $44 = ($42|0)>(92);
   if ($44) {
    $$1 = -1;
   } else {
    switch ($1|0) {
    case 10: case 8:  {
     $45 = ($43|0)<($1|0);
     if (!($45)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $46 = ($42|0)<(88);
     if (!($46)) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      $47 = $10;
      $48 = $2;
      $49 = (($47) - ($48))|0;
      $50 = ($49|0)<(3);
      if (!($50)) {
       $$1 = -1;
       break L6;
      }
      $51 = ((($10)) + -1|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = ($52<<24>>24)==(48);
      if (!($53)) {
       $$1 = -1;
       break L6;
      }
      $54 = ((($10)) + 1|0);
      $55 = (49632 + ($43)|0);
      HEAP32[$4>>2] = 0;
      $56 = HEAP8[$55>>0]|0;
      HEAP32[$3>>2] = $54;
      HEAP8[$10>>0] = $56;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $57 = (49632 + ($43)|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = ((($10)) + 1|0);
    HEAP32[$3>>2] = $59;
    HEAP8[$10>>0] = $58;
    $60 = HEAP32[$4>>2]|0;
    $61 = (($60) + 1)|0;
    HEAP32[$4>>2] = $61;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $6 = sp + 160|0;
 $7 = sp + 328|0;
 $8 = sp + 324|0;
 $9 = sp + 312|0;
 $10 = sp + 300|0;
 $11 = sp + 296|0;
 $12 = sp;
 $13 = sp + 292|0;
 $14 = sp + 288|0;
 $15 = sp + 333|0;
 $16 = sp + 332|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$156 = $$pre;$32 = $$pre;
 L8: while(1) {
  $31 = ($32|0)==(0|0);
  if ($31) {
   $131 = 0;$157 = 1;$81 = 0;
  } else {
   $33 = ((($32)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($32)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34|0)==($36|0);
   if ($37) {
    $38 = HEAP32[$32>>2]|0;
    $39 = ((($38)) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 1023]($32)|0);
    $$0$i$i$i$i15 = $41;
   } else {
    $42 = HEAP32[$34>>2]|0;
    $43 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($42)|0);
    $$0$i$i$i$i15 = $43;
   }
   $44 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $45 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i15,$44)|0);
   if ($45) {
    HEAP32[$1>>2] = 0;
    $131 = 0;$157 = 1;$81 = 0;
   } else {
    $131 = $156;$157 = 0;$81 = $32;
   }
  }
  $46 = HEAP32[$2>>2]|0;
  $47 = ($46|0)==(0|0);
  do {
   if ($47) {
    label = 19;
   } else {
    $48 = ((($46)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($46)) + 16|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($49|0)==($51|0);
    if ($52) {
     $53 = HEAP32[$46>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (FUNCTION_TABLE_ii[$55 & 1023]($46)|0);
     $$0$i$i2$i$i21 = $56;
    } else {
     $57 = HEAP32[$49>>2]|0;
     $58 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($57)|0);
     $$0$i$i2$i$i21 = $58;
    }
    $59 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $60 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i21,$59)|0);
    if ($60) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($157) {
      $158 = $46;
      break;
     } else {
      $$2 = $$0;$140 = $46;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($157) {
    $$2 = $$0;$140 = 0;
    break;
   } else {
    $158 = 0;
   }
  }
  $61 = HEAP32[$11>>2]|0;
  $62 = HEAP8[$19>>0]|0;
  $63 = ($62<<24>>24)<(0);
  $64 = HEAP32[$30>>2]|0;
  $65 = $62&255;
  $66 = $63 ? $64 : $65;
  $67 = (($$0) + ($66)|0);
  $68 = ($61|0)==($67|0);
  if ($68) {
   $69 = $66 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$69,0);
   $70 = HEAP8[$19>>0]|0;
   $71 = ($70<<24>>24)<(0);
   if ($71) {
    $72 = HEAP32[$22>>2]|0;
    $73 = $72 & 2147483647;
    $phitmp$i28 = (($73) + -1)|0;
    $74 = $phitmp$i28;
   } else {
    $74 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$74,0);
   $75 = HEAP8[$19>>0]|0;
   $76 = ($75<<24>>24)<(0);
   $77 = HEAP32[$10>>2]|0;
   $78 = $76 ? $77 : $10;
   $79 = (($78) + ($66)|0);
   HEAP32[$11>>2] = $79;
   $$1 = $78;
  } else {
   $$1 = $$0;
  }
  $80 = ((($81)) + 12|0);
  $82 = HEAP32[$80>>2]|0;
  $83 = ((($81)) + 16|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($82|0)==($84|0);
  if ($85) {
   $86 = HEAP32[$81>>2]|0;
   $87 = ((($86)) + 36|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (FUNCTION_TABLE_ii[$88 & 1023]($81)|0);
   $$0$i$i31 = $89;
  } else {
   $90 = HEAP32[$82>>2]|0;
   $91 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($90)|0);
   $$0$i$i31 = $91;
  }
  $92 = HEAP32[$7>>2]|0;
  $93 = HEAP32[$8>>2]|0;
  $94 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i31,$15,$16,$$1,$11,$92,$93,$9,$12,$13,$14,$6)|0);
  $95 = ($94|0)==(0);
  if (!($95)) {
   $$2 = $$1;$140 = $158;
   break;
  }
  $96 = HEAP32[$80>>2]|0;
  $97 = HEAP32[$83>>2]|0;
  $98 = ($96|0)==($97|0);
  if ($98) {
   $99 = HEAP32[$81>>2]|0;
   $100 = ((($99)) + 40|0);
   $101 = HEAP32[$100>>2]|0;
   (FUNCTION_TABLE_ii[$101 & 1023]($81)|0);
  } else {
   $102 = ((($96)) + 4|0);
   HEAP32[$80>>2] = $102;
   $103 = HEAP32[$96>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($103)|0);
  }
  $$0 = $$1;$156 = $131;$32 = $81;
 }
 $104 = ((($9)) + 11|0);
 $105 = HEAP8[$104>>0]|0;
 $106 = ($105<<24>>24)<(0);
 $107 = ((($9)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = $105&255;
 $110 = $106 ? $108 : $109;
 $111 = ($110|0)==(0);
 $112 = HEAP8[$15>>0]|0;
 $113 = ($112<<24>>24)==(0);
 $or$cond = $111 | $113;
 if (!($or$cond)) {
  $114 = HEAP32[$13>>2]|0;
  $115 = $114;
  $116 = $12;
  $117 = (($115) - ($116))|0;
  $118 = ($117|0)<(160);
  if ($118) {
   $119 = HEAP32[$14>>2]|0;
   $120 = ((($114)) + 4|0);
   HEAP32[$13>>2] = $120;
   HEAP32[$114>>2] = $119;
  }
 }
 $121 = HEAP32[$11>>2]|0;
 $122 = (+__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($$2,$121,$4));
 HEAPF64[$5>>3] = $122;
 $123 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$123,$4);
 $124 = ($81|0)==(0|0);
 if ($124) {
  $159 = 1;
 } else {
  $125 = ((($81)) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ((($81)) + 16|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($126|0)==($128|0);
  if ($129) {
   $130 = HEAP32[$131>>2]|0;
   $132 = ((($130)) + 36|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (FUNCTION_TABLE_ii[$133 & 1023]($81)|0);
   $$0$i$i$i$i = $134;
  } else {
   $135 = HEAP32[$126>>2]|0;
   $136 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($135)|0);
   $$0$i$i$i$i = $136;
  }
  $137 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $138 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$137)|0);
  if ($138) {
   HEAP32[$1>>2] = 0;
   $159 = 1;
  } else {
   $159 = 0;
  }
 }
 $139 = ($140|0)==(0|0);
 do {
  if ($139) {
   label = 48;
  } else {
   $141 = ((($140)) + 12|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ((($140)) + 16|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($142|0)==($144|0);
   if ($145) {
    $146 = HEAP32[$140>>2]|0;
    $147 = ((($146)) + 36|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (FUNCTION_TABLE_ii[$148 & 1023]($140)|0);
    $$0$i$i2$i$i = $149;
   } else {
    $150 = HEAP32[$142>>2]|0;
    $151 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($150)|0);
    $$0$i$i2$i$i = $151;
   }
   $152 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $153 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$152)|0);
   if ($153) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($159) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($159) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $154 = HEAP32[$4>>2]|0;
  $155 = $154 | 2;
  HEAP32[$4>>2] = $155;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 __ZNKSt3__28ios_base6getlocEv($5,$1);
 $6 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,71024)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 (FUNCTION_TABLE_iiiii[$9 & 511]($6,49632,(49664),$2)|0);
 $10 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,71032)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
 HEAP32[$3>>2] = $14;
 $15 = HEAP32[$10>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 1023]($10)|0);
 HEAP32[$4>>2] = $18;
 $19 = HEAP32[$10>>2]|0;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_vii[$21 & 511]($0,$10);
 __ZNSt3__26localeD2Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $100 = 0, $101 = 0, $102 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $12 = ($0|0)==($5|0);
 L1: do {
  if ($12) {
   $13 = HEAP8[$1>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    $$2 = -1;
   } else {
    HEAP8[$1>>0] = 0;
    $15 = HEAP32[$4>>2]|0;
    $16 = ((($15)) + 1|0);
    HEAP32[$4>>2] = $16;
    HEAP8[$15>>0] = 46;
    $17 = ((($7)) + 11|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)<(0);
    $20 = ((($7)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $18&255;
    $23 = $19 ? $21 : $22;
    $24 = ($23|0)==(0);
    if ($24) {
     $$2 = 0;
    } else {
     $25 = HEAP32[$9>>2]|0;
     $26 = $25;
     $27 = $8;
     $28 = (($26) - ($27))|0;
     $29 = ($28|0)<(160);
     if ($29) {
      $30 = HEAP32[$10>>2]|0;
      $31 = ((($25)) + 4|0);
      HEAP32[$9>>2] = $31;
      HEAP32[$25>>2] = $30;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $32 = ($0|0)==($6|0);
   if ($32) {
    $33 = ((($7)) + 11|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = ((($7)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $34&255;
    $39 = $35 ? $37 : $38;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP8[$1>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $$2 = -1;
      break;
     }
     $43 = HEAP32[$9>>2]|0;
     $44 = $43;
     $45 = $8;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)<(160);
     if (!($47)) {
      $$2 = 0;
      break;
     }
     $48 = HEAP32[$10>>2]|0;
     $49 = ((($43)) + 4|0);
     HEAP32[$9>>2] = $49;
     HEAP32[$43>>2] = $48;
     HEAP32[$10>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $50 = ((($11)) + 128|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($11) + ($$0$i$idx<<2)|0);
    $51 = ($$0$i$idx|0)==(32);
    if ($51) {
     $$0$lcssa$i = $50;
     break;
    }
    $52 = HEAP32[$$0$i$ptr>>2]|0;
    $53 = ($52|0)==($0|0);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($53) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $54 = $$0$lcssa$i;
   $55 = $11;
   $56 = (($54) - ($55))|0;
   $57 = ($56|0)>(124);
   if ($57) {
    $$2 = -1;
   } else {
    $58 = $56 >> 2;
    $59 = (49632 + ($58)|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = (($56) + -88)|0;
    $62 = $61 >>> 2;
    $63 = $61 << 30;
    $64 = $62 | $63;
    switch ($64|0) {
    case 2: case 3:  {
     $65 = HEAP32[$4>>2]|0;
     $66 = ($65|0)==($3|0);
     if (!($66)) {
      $67 = ((($65)) + -1|0);
      $68 = HEAP8[$67>>0]|0;
      $69 = $68 & 95;
      $70 = HEAP8[$2>>0]|0;
      $71 = $70 & 127;
      $72 = ($69<<24>>24)==($71<<24>>24);
      if (!($72)) {
       $$2 = -1;
       break L1;
      }
     }
     $73 = ((($65)) + 1|0);
     HEAP32[$4>>2] = $73;
     HEAP8[$65>>0] = $60;
     $$2 = 0;
     break L1;
     break;
    }
    case 1: case 0:  {
     HEAP8[$2>>0] = 80;
     break;
    }
    default: {
     $74 = $60 & 95;
     $75 = $74&255;
     $76 = HEAP8[$2>>0]|0;
     $77 = $76 << 24 >> 24;
     $78 = ($75|0)==($77|0);
     if ($78) {
      $79 = $75 | 128;
      $80 = $79&255;
      HEAP8[$2>>0] = $80;
      $81 = HEAP8[$1>>0]|0;
      $82 = ($81<<24>>24)==(0);
      if (!($82)) {
       HEAP8[$1>>0] = 0;
       $83 = ((($7)) + 11|0);
       $84 = HEAP8[$83>>0]|0;
       $85 = ($84<<24>>24)<(0);
       $86 = ((($7)) + 4|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = $84&255;
       $89 = $85 ? $87 : $88;
       $90 = ($89|0)==(0);
       if (!($90)) {
        $91 = HEAP32[$9>>2]|0;
        $92 = $91;
        $93 = $8;
        $94 = (($92) - ($93))|0;
        $95 = ($94|0)<(160);
        if ($95) {
         $96 = HEAP32[$10>>2]|0;
         $97 = ((($91)) + 4|0);
         HEAP32[$9>>2] = $97;
         HEAP32[$91>>2] = $96;
        }
       }
      }
     }
    }
    }
    $98 = HEAP32[$4>>2]|0;
    $99 = ((($98)) + 1|0);
    HEAP32[$4>>2] = $99;
    HEAP8[$98>>0] = $60;
    $100 = ($56|0)>(84);
    if ($100) {
     $$2 = 0;
    } else {
     $101 = HEAP32[$10>>2]|0;
     $102 = (($101) + 1)|0;
     HEAP32[$10>>2] = $102;
     $$2 = 0;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $6 = sp + 160|0;
 $7 = sp + 328|0;
 $8 = sp + 324|0;
 $9 = sp + 312|0;
 $10 = sp + 300|0;
 $11 = sp + 296|0;
 $12 = sp;
 $13 = sp + 292|0;
 $14 = sp + 288|0;
 $15 = sp + 333|0;
 $16 = sp + 332|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$156 = $$pre;$32 = $$pre;
 L8: while(1) {
  $31 = ($32|0)==(0|0);
  if ($31) {
   $131 = 0;$157 = 1;$81 = 0;
  } else {
   $33 = ((($32)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($32)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34|0)==($36|0);
   if ($37) {
    $38 = HEAP32[$32>>2]|0;
    $39 = ((($38)) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 1023]($32)|0);
    $$0$i$i$i$i15 = $41;
   } else {
    $42 = HEAP32[$34>>2]|0;
    $43 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($42)|0);
    $$0$i$i$i$i15 = $43;
   }
   $44 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $45 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i15,$44)|0);
   if ($45) {
    HEAP32[$1>>2] = 0;
    $131 = 0;$157 = 1;$81 = 0;
   } else {
    $131 = $156;$157 = 0;$81 = $32;
   }
  }
  $46 = HEAP32[$2>>2]|0;
  $47 = ($46|0)==(0|0);
  do {
   if ($47) {
    label = 19;
   } else {
    $48 = ((($46)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($46)) + 16|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($49|0)==($51|0);
    if ($52) {
     $53 = HEAP32[$46>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (FUNCTION_TABLE_ii[$55 & 1023]($46)|0);
     $$0$i$i2$i$i21 = $56;
    } else {
     $57 = HEAP32[$49>>2]|0;
     $58 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($57)|0);
     $$0$i$i2$i$i21 = $58;
    }
    $59 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $60 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i21,$59)|0);
    if ($60) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($157) {
      $158 = $46;
      break;
     } else {
      $$2 = $$0;$140 = $46;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($157) {
    $$2 = $$0;$140 = 0;
    break;
   } else {
    $158 = 0;
   }
  }
  $61 = HEAP32[$11>>2]|0;
  $62 = HEAP8[$19>>0]|0;
  $63 = ($62<<24>>24)<(0);
  $64 = HEAP32[$30>>2]|0;
  $65 = $62&255;
  $66 = $63 ? $64 : $65;
  $67 = (($$0) + ($66)|0);
  $68 = ($61|0)==($67|0);
  if ($68) {
   $69 = $66 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$69,0);
   $70 = HEAP8[$19>>0]|0;
   $71 = ($70<<24>>24)<(0);
   if ($71) {
    $72 = HEAP32[$22>>2]|0;
    $73 = $72 & 2147483647;
    $phitmp$i28 = (($73) + -1)|0;
    $74 = $phitmp$i28;
   } else {
    $74 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$74,0);
   $75 = HEAP8[$19>>0]|0;
   $76 = ($75<<24>>24)<(0);
   $77 = HEAP32[$10>>2]|0;
   $78 = $76 ? $77 : $10;
   $79 = (($78) + ($66)|0);
   HEAP32[$11>>2] = $79;
   $$1 = $78;
  } else {
   $$1 = $$0;
  }
  $80 = ((($81)) + 12|0);
  $82 = HEAP32[$80>>2]|0;
  $83 = ((($81)) + 16|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($82|0)==($84|0);
  if ($85) {
   $86 = HEAP32[$81>>2]|0;
   $87 = ((($86)) + 36|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (FUNCTION_TABLE_ii[$88 & 1023]($81)|0);
   $$0$i$i31 = $89;
  } else {
   $90 = HEAP32[$82>>2]|0;
   $91 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($90)|0);
   $$0$i$i31 = $91;
  }
  $92 = HEAP32[$7>>2]|0;
  $93 = HEAP32[$8>>2]|0;
  $94 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i31,$15,$16,$$1,$11,$92,$93,$9,$12,$13,$14,$6)|0);
  $95 = ($94|0)==(0);
  if (!($95)) {
   $$2 = $$1;$140 = $158;
   break;
  }
  $96 = HEAP32[$80>>2]|0;
  $97 = HEAP32[$83>>2]|0;
  $98 = ($96|0)==($97|0);
  if ($98) {
   $99 = HEAP32[$81>>2]|0;
   $100 = ((($99)) + 40|0);
   $101 = HEAP32[$100>>2]|0;
   (FUNCTION_TABLE_ii[$101 & 1023]($81)|0);
  } else {
   $102 = ((($96)) + 4|0);
   HEAP32[$80>>2] = $102;
   $103 = HEAP32[$96>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($103)|0);
  }
  $$0 = $$1;$156 = $131;$32 = $81;
 }
 $104 = ((($9)) + 11|0);
 $105 = HEAP8[$104>>0]|0;
 $106 = ($105<<24>>24)<(0);
 $107 = ((($9)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = $105&255;
 $110 = $106 ? $108 : $109;
 $111 = ($110|0)==(0);
 $112 = HEAP8[$15>>0]|0;
 $113 = ($112<<24>>24)==(0);
 $or$cond = $111 | $113;
 if (!($or$cond)) {
  $114 = HEAP32[$13>>2]|0;
  $115 = $114;
  $116 = $12;
  $117 = (($115) - ($116))|0;
  $118 = ($117|0)<(160);
  if ($118) {
   $119 = HEAP32[$14>>2]|0;
   $120 = ((($114)) + 4|0);
   HEAP32[$13>>2] = $120;
   HEAP32[$114>>2] = $119;
  }
 }
 $121 = HEAP32[$11>>2]|0;
 $122 = (+__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($$2,$121,$4));
 HEAPF64[$5>>3] = $122;
 $123 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$123,$4);
 $124 = ($81|0)==(0|0);
 if ($124) {
  $159 = 1;
 } else {
  $125 = ((($81)) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ((($81)) + 16|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($126|0)==($128|0);
  if ($129) {
   $130 = HEAP32[$131>>2]|0;
   $132 = ((($130)) + 36|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (FUNCTION_TABLE_ii[$133 & 1023]($81)|0);
   $$0$i$i$i$i = $134;
  } else {
   $135 = HEAP32[$126>>2]|0;
   $136 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($135)|0);
   $$0$i$i$i$i = $136;
  }
  $137 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $138 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$137)|0);
  if ($138) {
   HEAP32[$1>>2] = 0;
   $159 = 1;
  } else {
   $159 = 0;
  }
 }
 $139 = ($140|0)==(0|0);
 do {
  if ($139) {
   label = 48;
  } else {
   $141 = ((($140)) + 12|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ((($140)) + 16|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($142|0)==($144|0);
   if ($145) {
    $146 = HEAP32[$140>>2]|0;
    $147 = ((($146)) + 36|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (FUNCTION_TABLE_ii[$148 & 1023]($140)|0);
    $$0$i$i2$i$i = $149;
   } else {
    $150 = HEAP32[$142>>2]|0;
    $151 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($150)|0);
    $$0$i$i2$i$i = $151;
   }
   $152 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $153 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$152)|0);
   if ($153) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($159) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($159) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $154 = HEAP32[$4>>2]|0;
  $155 = $154 | 2;
  HEAP32[$4>>2] = $155;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $6 = sp + 160|0;
 $7 = sp + 328|0;
 $8 = sp + 324|0;
 $9 = sp + 312|0;
 $10 = sp + 300|0;
 $11 = sp + 296|0;
 $12 = sp;
 $13 = sp + 292|0;
 $14 = sp + 288|0;
 $15 = sp + 333|0;
 $16 = sp + 332|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$156 = $$pre;$32 = $$pre;
 L8: while(1) {
  $31 = ($32|0)==(0|0);
  if ($31) {
   $131 = 0;$157 = 1;$81 = 0;
  } else {
   $33 = ((($32)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($32)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34|0)==($36|0);
   if ($37) {
    $38 = HEAP32[$32>>2]|0;
    $39 = ((($38)) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 1023]($32)|0);
    $$0$i$i$i$i15 = $41;
   } else {
    $42 = HEAP32[$34>>2]|0;
    $43 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($42)|0);
    $$0$i$i$i$i15 = $43;
   }
   $44 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $45 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i15,$44)|0);
   if ($45) {
    HEAP32[$1>>2] = 0;
    $131 = 0;$157 = 1;$81 = 0;
   } else {
    $131 = $156;$157 = 0;$81 = $32;
   }
  }
  $46 = HEAP32[$2>>2]|0;
  $47 = ($46|0)==(0|0);
  do {
   if ($47) {
    label = 19;
   } else {
    $48 = ((($46)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($46)) + 16|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($49|0)==($51|0);
    if ($52) {
     $53 = HEAP32[$46>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (FUNCTION_TABLE_ii[$55 & 1023]($46)|0);
     $$0$i$i2$i$i21 = $56;
    } else {
     $57 = HEAP32[$49>>2]|0;
     $58 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($57)|0);
     $$0$i$i2$i$i21 = $58;
    }
    $59 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $60 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i21,$59)|0);
    if ($60) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($157) {
      $158 = $46;
      break;
     } else {
      $$2 = $$0;$140 = $46;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($157) {
    $$2 = $$0;$140 = 0;
    break;
   } else {
    $158 = 0;
   }
  }
  $61 = HEAP32[$11>>2]|0;
  $62 = HEAP8[$19>>0]|0;
  $63 = ($62<<24>>24)<(0);
  $64 = HEAP32[$30>>2]|0;
  $65 = $62&255;
  $66 = $63 ? $64 : $65;
  $67 = (($$0) + ($66)|0);
  $68 = ($61|0)==($67|0);
  if ($68) {
   $69 = $66 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$69,0);
   $70 = HEAP8[$19>>0]|0;
   $71 = ($70<<24>>24)<(0);
   if ($71) {
    $72 = HEAP32[$22>>2]|0;
    $73 = $72 & 2147483647;
    $phitmp$i28 = (($73) + -1)|0;
    $74 = $phitmp$i28;
   } else {
    $74 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($10,$74,0);
   $75 = HEAP8[$19>>0]|0;
   $76 = ($75<<24>>24)<(0);
   $77 = HEAP32[$10>>2]|0;
   $78 = $76 ? $77 : $10;
   $79 = (($78) + ($66)|0);
   HEAP32[$11>>2] = $79;
   $$1 = $78;
  } else {
   $$1 = $$0;
  }
  $80 = ((($81)) + 12|0);
  $82 = HEAP32[$80>>2]|0;
  $83 = ((($81)) + 16|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($82|0)==($84|0);
  if ($85) {
   $86 = HEAP32[$81>>2]|0;
   $87 = ((($86)) + 36|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (FUNCTION_TABLE_ii[$88 & 1023]($81)|0);
   $$0$i$i31 = $89;
  } else {
   $90 = HEAP32[$82>>2]|0;
   $91 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($90)|0);
   $$0$i$i31 = $91;
  }
  $92 = HEAP32[$7>>2]|0;
  $93 = HEAP32[$8>>2]|0;
  $94 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i31,$15,$16,$$1,$11,$92,$93,$9,$12,$13,$14,$6)|0);
  $95 = ($94|0)==(0);
  if (!($95)) {
   $$2 = $$1;$140 = $158;
   break;
  }
  $96 = HEAP32[$80>>2]|0;
  $97 = HEAP32[$83>>2]|0;
  $98 = ($96|0)==($97|0);
  if ($98) {
   $99 = HEAP32[$81>>2]|0;
   $100 = ((($99)) + 40|0);
   $101 = HEAP32[$100>>2]|0;
   (FUNCTION_TABLE_ii[$101 & 1023]($81)|0);
  } else {
   $102 = ((($96)) + 4|0);
   HEAP32[$80>>2] = $102;
   $103 = HEAP32[$96>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($103)|0);
  }
  $$0 = $$1;$156 = $131;$32 = $81;
 }
 $104 = ((($9)) + 11|0);
 $105 = HEAP8[$104>>0]|0;
 $106 = ($105<<24>>24)<(0);
 $107 = ((($9)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = $105&255;
 $110 = $106 ? $108 : $109;
 $111 = ($110|0)==(0);
 $112 = HEAP8[$15>>0]|0;
 $113 = ($112<<24>>24)==(0);
 $or$cond = $111 | $113;
 if (!($or$cond)) {
  $114 = HEAP32[$13>>2]|0;
  $115 = $114;
  $116 = $12;
  $117 = (($115) - ($116))|0;
  $118 = ($117|0)<(160);
  if ($118) {
   $119 = HEAP32[$14>>2]|0;
   $120 = ((($114)) + 4|0);
   HEAP32[$13>>2] = $120;
   HEAP32[$114>>2] = $119;
  }
 }
 $121 = HEAP32[$11>>2]|0;
 $122 = (+__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($$2,$121,$4));
 HEAPF32[$5>>2] = $122;
 $123 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$123,$4);
 $124 = ($81|0)==(0|0);
 if ($124) {
  $159 = 1;
 } else {
  $125 = ((($81)) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ((($81)) + 16|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($126|0)==($128|0);
  if ($129) {
   $130 = HEAP32[$131>>2]|0;
   $132 = ((($130)) + 36|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (FUNCTION_TABLE_ii[$133 & 1023]($81)|0);
   $$0$i$i$i$i = $134;
  } else {
   $135 = HEAP32[$126>>2]|0;
   $136 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($135)|0);
   $$0$i$i$i$i = $136;
  }
  $137 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $138 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$137)|0);
  if ($138) {
   HEAP32[$1>>2] = 0;
   $159 = 1;
  } else {
   $159 = 0;
  }
 }
 $139 = ($140|0)==(0|0);
 do {
  if ($139) {
   label = 48;
  } else {
   $141 = ((($140)) + 12|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ((($140)) + 16|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($142|0)==($144|0);
   if ($145) {
    $146 = HEAP32[$140>>2]|0;
    $147 = ((($146)) + 36|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (FUNCTION_TABLE_ii[$148 & 1023]($140)|0);
    $$0$i$i2$i$i = $149;
   } else {
    $150 = HEAP32[$142>>2]|0;
    $151 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($150)|0);
    $$0$i$i2$i$i = $151;
   }
   $152 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $153 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$152)|0);
   if ($153) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($159) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($159) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $154 = HEAP32[$4>>2]|0;
  $155 = $154 | 2;
  HEAP32[$4>>2] = $155;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 300|0;
 $7 = sp + 160|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 272|0;
 $11 = sp;
 $12 = sp + 268|0;
 $13 = sp + 264|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$3,$7)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 $21 = ((($9)) + 8|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$24,0);
 $25 = HEAP8[$18>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$9>>2]|0;
 $28 = $26 ? $27 : $9;
 HEAP32[$10>>2] = $28;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $29 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $28;$157 = $$pre;$31 = $$pre;
 L8: while(1) {
  $30 = ($31|0)==(0|0);
  if ($30) {
   $132 = 0;$158 = 1;$80 = 0;
  } else {
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($31)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$31>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
    $$0$i$i$i$i25 = $40;
   } else {
    $41 = HEAP32[$33>>2]|0;
    $42 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
    $$0$i$i$i$i25 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i25,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $132 = 0;$158 = 1;$80 = 0;
   } else {
    $132 = $157;$158 = 0;$80 = $31;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 1023]($45)|0);
     $$0$i$i2$i$i31 = $55;
    } else {
     $56 = HEAP32[$48>>2]|0;
     $57 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($56)|0);
     $$0$i$i2$i$i31 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i31,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($158) {
      $159 = $45;
      break;
     } else {
      $$2 = $$0;$141 = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($158) {
    $$2 = $$0;$141 = 0;
    break;
   } else {
    $159 = 0;
   }
  }
  $60 = HEAP32[$10>>2]|0;
  $61 = HEAP8[$18>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$29>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$68,0);
   $69 = HEAP8[$18>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$21>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i38 = (($72) + -1)|0;
    $73 = $phitmp$i38;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$73,0);
   $74 = HEAP8[$18>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$9>>2]|0;
   $77 = $75 ? $76 : $9;
   $78 = (($77) + ($65)|0);
   HEAP32[$10>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($80)) + 12|0);
  $81 = HEAP32[$79>>2]|0;
  $82 = ((($80)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$80>>2]|0;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 1023]($80)|0);
   $$0$i$i41 = $88;
  } else {
   $89 = HEAP32[$81>>2]|0;
   $90 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($89)|0);
   $$0$i$i41 = $90;
  }
  $91 = HEAP32[$6>>2]|0;
  $92 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i41,$14,$$1,$10,$13,$91,$8,$11,$12,$15)|0);
  $93 = ($92|0)==(0);
  if (!($93)) {
   $$2 = $$1;$141 = $159;
   break;
  }
  $94 = HEAP32[$79>>2]|0;
  $95 = HEAP32[$82>>2]|0;
  $96 = ($94|0)==($95|0);
  if ($96) {
   $97 = HEAP32[$80>>2]|0;
   $98 = ((($97)) + 40|0);
   $99 = HEAP32[$98>>2]|0;
   (FUNCTION_TABLE_ii[$99 & 1023]($80)|0);
  } else {
   $100 = ((($94)) + 4|0);
   HEAP32[$79>>2] = $100;
   $101 = HEAP32[$94>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
  }
  $$0 = $$1;$157 = $132;$31 = $80;
 }
 $102 = ((($8)) + 11|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = ($103<<24>>24)<(0);
 $105 = ((($8)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $103&255;
 $108 = $104 ? $106 : $107;
 $109 = ($108|0)==(0);
 if (!($109)) {
  $110 = HEAP32[$12>>2]|0;
  $111 = $110;
  $112 = $11;
  $113 = (($111) - ($112))|0;
  $114 = ($113|0)<(160);
  if ($114) {
   $115 = HEAP32[$13>>2]|0;
   $116 = ((($110)) + 4|0);
   HEAP32[$12>>2] = $116;
   HEAP32[$110>>2] = $115;
  }
 }
 $117 = HEAP32[$10>>2]|0;
 $118 = (__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($$2,$117,$4,$14)|0);
 $119 = (getTempRet0() | 0);
 $120 = $5;
 $121 = $120;
 HEAP32[$121>>2] = $118;
 $122 = (($120) + 4)|0;
 $123 = $122;
 HEAP32[$123>>2] = $119;
 $124 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$124,$4);
 $125 = ($80|0)==(0|0);
 if ($125) {
  $160 = 1;
 } else {
  $126 = ((($80)) + 12|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ((($80)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($127|0)==($129|0);
  if ($130) {
   $131 = HEAP32[$132>>2]|0;
   $133 = ((($131)) + 36|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (FUNCTION_TABLE_ii[$134 & 1023]($80)|0);
   $$0$i$i$i$i = $135;
  } else {
   $136 = HEAP32[$127>>2]|0;
   $137 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($136)|0);
   $$0$i$i$i$i = $137;
  }
  $138 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $139 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$138)|0);
  if ($139) {
   HEAP32[$1>>2] = 0;
   $160 = 1;
  } else {
   $160 = 0;
  }
 }
 $140 = ($141|0)==(0|0);
 do {
  if ($140) {
   label = 48;
  } else {
   $142 = ((($141)) + 12|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ((($141)) + 16|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($143|0)==($145|0);
   if ($146) {
    $147 = HEAP32[$141>>2]|0;
    $148 = ((($147)) + 36|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (FUNCTION_TABLE_ii[$149 & 1023]($141)|0);
    $$0$i$i2$i$i = $150;
   } else {
    $151 = HEAP32[$143>>2]|0;
    $152 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($151)|0);
    $$0$i$i2$i$i = $152;
   }
   $153 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $154 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$153)|0);
   if ($154) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($160) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($160) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $155 = HEAP32[$4>>2]|0;
  $156 = $155 | 2;
  HEAP32[$4>>2] = $156;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNKSt3__28ios_base6getlocEv($3,$1);
 $4 = (__ZNKSt3__26locale9use_facetERNS0_2idE($3,71032)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($4)|0);
 HEAP32[$2>>2] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vii[$11 & 511]($0,$4);
 __ZNSt3__26localeD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNKSt3__28ios_base6getlocEv($3,$1);
 $4 = (__ZNKSt3__26locale9use_facetERNS0_2idE($3,71024)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 (FUNCTION_TABLE_iiiii[$7 & 511]($4,49632,(49658),$2)|0);
 __ZNSt3__26localeD2Ev($3);
 STACKTOP = sp;return ($2|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 300|0;
 $7 = sp + 160|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 272|0;
 $11 = sp;
 $12 = sp + 268|0;
 $13 = sp + 264|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$3,$7)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 $21 = ((($9)) + 8|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$24,0);
 $25 = HEAP8[$18>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$9>>2]|0;
 $28 = $26 ? $27 : $9;
 HEAP32[$10>>2] = $28;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $29 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $28;$152 = $$pre;$31 = $$pre;
 L8: while(1) {
  $30 = ($31|0)==(0|0);
  if ($30) {
   $127 = 0;$153 = 1;$80 = 0;
  } else {
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($31)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$31>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
    $$0$i$i$i$i25 = $40;
   } else {
    $41 = HEAP32[$33>>2]|0;
    $42 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
    $$0$i$i$i$i25 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i25,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $127 = 0;$153 = 1;$80 = 0;
   } else {
    $127 = $152;$153 = 0;$80 = $31;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 1023]($45)|0);
     $$0$i$i2$i$i31 = $55;
    } else {
     $56 = HEAP32[$48>>2]|0;
     $57 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($56)|0);
     $$0$i$i2$i$i31 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i31,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($153) {
      $154 = $45;
      break;
     } else {
      $$2 = $$0;$136 = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($153) {
    $$2 = $$0;$136 = 0;
    break;
   } else {
    $154 = 0;
   }
  }
  $60 = HEAP32[$10>>2]|0;
  $61 = HEAP8[$18>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$29>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$68,0);
   $69 = HEAP8[$18>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$21>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i38 = (($72) + -1)|0;
    $73 = $phitmp$i38;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$73,0);
   $74 = HEAP8[$18>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$9>>2]|0;
   $77 = $75 ? $76 : $9;
   $78 = (($77) + ($65)|0);
   HEAP32[$10>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($80)) + 12|0);
  $81 = HEAP32[$79>>2]|0;
  $82 = ((($80)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$80>>2]|0;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 1023]($80)|0);
   $$0$i$i41 = $88;
  } else {
   $89 = HEAP32[$81>>2]|0;
   $90 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($89)|0);
   $$0$i$i41 = $90;
  }
  $91 = HEAP32[$6>>2]|0;
  $92 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i41,$14,$$1,$10,$13,$91,$8,$11,$12,$15)|0);
  $93 = ($92|0)==(0);
  if (!($93)) {
   $$2 = $$1;$136 = $154;
   break;
  }
  $94 = HEAP32[$79>>2]|0;
  $95 = HEAP32[$82>>2]|0;
  $96 = ($94|0)==($95|0);
  if ($96) {
   $97 = HEAP32[$80>>2]|0;
   $98 = ((($97)) + 40|0);
   $99 = HEAP32[$98>>2]|0;
   (FUNCTION_TABLE_ii[$99 & 1023]($80)|0);
  } else {
   $100 = ((($94)) + 4|0);
   HEAP32[$79>>2] = $100;
   $101 = HEAP32[$94>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
  }
  $$0 = $$1;$152 = $127;$31 = $80;
 }
 $102 = ((($8)) + 11|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = ($103<<24>>24)<(0);
 $105 = ((($8)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $103&255;
 $108 = $104 ? $106 : $107;
 $109 = ($108|0)==(0);
 if (!($109)) {
  $110 = HEAP32[$12>>2]|0;
  $111 = $110;
  $112 = $11;
  $113 = (($111) - ($112))|0;
  $114 = ($113|0)<(160);
  if ($114) {
   $115 = HEAP32[$13>>2]|0;
   $116 = ((($110)) + 4|0);
   HEAP32[$12>>2] = $116;
   HEAP32[$110>>2] = $115;
  }
 }
 $117 = HEAP32[$10>>2]|0;
 $118 = (__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($$2,$117,$4,$14)|0);
 HEAP32[$5>>2] = $118;
 $119 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$119,$4);
 $120 = ($80|0)==(0|0);
 if ($120) {
  $155 = 1;
 } else {
  $121 = ((($80)) + 12|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ((($80)) + 16|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($122|0)==($124|0);
  if ($125) {
   $126 = HEAP32[$127>>2]|0;
   $128 = ((($126)) + 36|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (FUNCTION_TABLE_ii[$129 & 1023]($80)|0);
   $$0$i$i$i$i = $130;
  } else {
   $131 = HEAP32[$122>>2]|0;
   $132 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($131)|0);
   $$0$i$i$i$i = $132;
  }
  $133 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $134 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$133)|0);
  if ($134) {
   HEAP32[$1>>2] = 0;
   $155 = 1;
  } else {
   $155 = 0;
  }
 }
 $135 = ($136|0)==(0|0);
 do {
  if ($135) {
   label = 48;
  } else {
   $137 = ((($136)) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ((($136)) + 16|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($138|0)==($140|0);
   if ($141) {
    $142 = HEAP32[$136>>2]|0;
    $143 = ((($142)) + 36|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (FUNCTION_TABLE_ii[$144 & 1023]($136)|0);
    $$0$i$i2$i$i = $145;
   } else {
    $146 = HEAP32[$138>>2]|0;
    $147 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($146)|0);
    $$0$i$i2$i$i = $147;
   }
   $148 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $149 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$148)|0);
   if ($149) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($155) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($155) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $150 = HEAP32[$4>>2]|0;
  $151 = $150 | 2;
  HEAP32[$4>>2] = $151;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 300|0;
 $7 = sp + 160|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 272|0;
 $11 = sp;
 $12 = sp + 268|0;
 $13 = sp + 264|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$3,$7)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 $21 = ((($9)) + 8|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$24,0);
 $25 = HEAP8[$18>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$9>>2]|0;
 $28 = $26 ? $27 : $9;
 HEAP32[$10>>2] = $28;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $29 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $28;$152 = $$pre;$31 = $$pre;
 L8: while(1) {
  $30 = ($31|0)==(0|0);
  if ($30) {
   $127 = 0;$153 = 1;$80 = 0;
  } else {
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($31)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$31>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
    $$0$i$i$i$i25 = $40;
   } else {
    $41 = HEAP32[$33>>2]|0;
    $42 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
    $$0$i$i$i$i25 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i25,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $127 = 0;$153 = 1;$80 = 0;
   } else {
    $127 = $152;$153 = 0;$80 = $31;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 1023]($45)|0);
     $$0$i$i2$i$i31 = $55;
    } else {
     $56 = HEAP32[$48>>2]|0;
     $57 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($56)|0);
     $$0$i$i2$i$i31 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i31,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($153) {
      $154 = $45;
      break;
     } else {
      $$2 = $$0;$136 = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($153) {
    $$2 = $$0;$136 = 0;
    break;
   } else {
    $154 = 0;
   }
  }
  $60 = HEAP32[$10>>2]|0;
  $61 = HEAP8[$18>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$29>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$68,0);
   $69 = HEAP8[$18>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$21>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i38 = (($72) + -1)|0;
    $73 = $phitmp$i38;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$73,0);
   $74 = HEAP8[$18>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$9>>2]|0;
   $77 = $75 ? $76 : $9;
   $78 = (($77) + ($65)|0);
   HEAP32[$10>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($80)) + 12|0);
  $81 = HEAP32[$79>>2]|0;
  $82 = ((($80)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$80>>2]|0;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 1023]($80)|0);
   $$0$i$i41 = $88;
  } else {
   $89 = HEAP32[$81>>2]|0;
   $90 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($89)|0);
   $$0$i$i41 = $90;
  }
  $91 = HEAP32[$6>>2]|0;
  $92 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i41,$14,$$1,$10,$13,$91,$8,$11,$12,$15)|0);
  $93 = ($92|0)==(0);
  if (!($93)) {
   $$2 = $$1;$136 = $154;
   break;
  }
  $94 = HEAP32[$79>>2]|0;
  $95 = HEAP32[$82>>2]|0;
  $96 = ($94|0)==($95|0);
  if ($96) {
   $97 = HEAP32[$80>>2]|0;
   $98 = ((($97)) + 40|0);
   $99 = HEAP32[$98>>2]|0;
   (FUNCTION_TABLE_ii[$99 & 1023]($80)|0);
  } else {
   $100 = ((($94)) + 4|0);
   HEAP32[$79>>2] = $100;
   $101 = HEAP32[$94>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
  }
  $$0 = $$1;$152 = $127;$31 = $80;
 }
 $102 = ((($8)) + 11|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = ($103<<24>>24)<(0);
 $105 = ((($8)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $103&255;
 $108 = $104 ? $106 : $107;
 $109 = ($108|0)==(0);
 if (!($109)) {
  $110 = HEAP32[$12>>2]|0;
  $111 = $110;
  $112 = $11;
  $113 = (($111) - ($112))|0;
  $114 = ($113|0)<(160);
  if ($114) {
   $115 = HEAP32[$13>>2]|0;
   $116 = ((($110)) + 4|0);
   HEAP32[$12>>2] = $116;
   HEAP32[$110>>2] = $115;
  }
 }
 $117 = HEAP32[$10>>2]|0;
 $118 = (__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($$2,$117,$4,$14)|0);
 HEAP32[$5>>2] = $118;
 $119 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$119,$4);
 $120 = ($80|0)==(0|0);
 if ($120) {
  $155 = 1;
 } else {
  $121 = ((($80)) + 12|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ((($80)) + 16|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($122|0)==($124|0);
  if ($125) {
   $126 = HEAP32[$127>>2]|0;
   $128 = ((($126)) + 36|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (FUNCTION_TABLE_ii[$129 & 1023]($80)|0);
   $$0$i$i$i$i = $130;
  } else {
   $131 = HEAP32[$122>>2]|0;
   $132 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($131)|0);
   $$0$i$i$i$i = $132;
  }
  $133 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $134 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$133)|0);
  if ($134) {
   HEAP32[$1>>2] = 0;
   $155 = 1;
  } else {
   $155 = 0;
  }
 }
 $135 = ($136|0)==(0|0);
 do {
  if ($135) {
   label = 48;
  } else {
   $137 = ((($136)) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ((($136)) + 16|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($138|0)==($140|0);
   if ($141) {
    $142 = HEAP32[$136>>2]|0;
    $143 = ((($142)) + 36|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (FUNCTION_TABLE_ii[$144 & 1023]($136)|0);
    $$0$i$i2$i$i = $145;
   } else {
    $146 = HEAP32[$138>>2]|0;
    $147 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($146)|0);
    $$0$i$i2$i$i = $147;
   }
   $148 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $149 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$148)|0);
   if ($149) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($155) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($155) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $150 = HEAP32[$4>>2]|0;
  $151 = $150 | 2;
  HEAP32[$4>>2] = $151;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 300|0;
 $7 = sp + 160|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 272|0;
 $11 = sp;
 $12 = sp + 268|0;
 $13 = sp + 264|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$3,$7)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 $21 = ((($9)) + 8|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$24,0);
 $25 = HEAP8[$18>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$9>>2]|0;
 $28 = $26 ? $27 : $9;
 HEAP32[$10>>2] = $28;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $29 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $28;$152 = $$pre;$31 = $$pre;
 L8: while(1) {
  $30 = ($31|0)==(0|0);
  if ($30) {
   $127 = 0;$153 = 1;$80 = 0;
  } else {
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($31)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$31>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
    $$0$i$i$i$i25 = $40;
   } else {
    $41 = HEAP32[$33>>2]|0;
    $42 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
    $$0$i$i$i$i25 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i25,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $127 = 0;$153 = 1;$80 = 0;
   } else {
    $127 = $152;$153 = 0;$80 = $31;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 1023]($45)|0);
     $$0$i$i2$i$i31 = $55;
    } else {
     $56 = HEAP32[$48>>2]|0;
     $57 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($56)|0);
     $$0$i$i2$i$i31 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i31,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($153) {
      $154 = $45;
      break;
     } else {
      $$2 = $$0;$136 = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($153) {
    $$2 = $$0;$136 = 0;
    break;
   } else {
    $154 = 0;
   }
  }
  $60 = HEAP32[$10>>2]|0;
  $61 = HEAP8[$18>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$29>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$68,0);
   $69 = HEAP8[$18>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$21>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i38 = (($72) + -1)|0;
    $73 = $phitmp$i38;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$73,0);
   $74 = HEAP8[$18>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$9>>2]|0;
   $77 = $75 ? $76 : $9;
   $78 = (($77) + ($65)|0);
   HEAP32[$10>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($80)) + 12|0);
  $81 = HEAP32[$79>>2]|0;
  $82 = ((($80)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$80>>2]|0;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 1023]($80)|0);
   $$0$i$i41 = $88;
  } else {
   $89 = HEAP32[$81>>2]|0;
   $90 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($89)|0);
   $$0$i$i41 = $90;
  }
  $91 = HEAP32[$6>>2]|0;
  $92 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i41,$14,$$1,$10,$13,$91,$8,$11,$12,$15)|0);
  $93 = ($92|0)==(0);
  if (!($93)) {
   $$2 = $$1;$136 = $154;
   break;
  }
  $94 = HEAP32[$79>>2]|0;
  $95 = HEAP32[$82>>2]|0;
  $96 = ($94|0)==($95|0);
  if ($96) {
   $97 = HEAP32[$80>>2]|0;
   $98 = ((($97)) + 40|0);
   $99 = HEAP32[$98>>2]|0;
   (FUNCTION_TABLE_ii[$99 & 1023]($80)|0);
  } else {
   $100 = ((($94)) + 4|0);
   HEAP32[$79>>2] = $100;
   $101 = HEAP32[$94>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
  }
  $$0 = $$1;$152 = $127;$31 = $80;
 }
 $102 = ((($8)) + 11|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = ($103<<24>>24)<(0);
 $105 = ((($8)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $103&255;
 $108 = $104 ? $106 : $107;
 $109 = ($108|0)==(0);
 if (!($109)) {
  $110 = HEAP32[$12>>2]|0;
  $111 = $110;
  $112 = $11;
  $113 = (($111) - ($112))|0;
  $114 = ($113|0)<(160);
  if ($114) {
   $115 = HEAP32[$13>>2]|0;
   $116 = ((($110)) + 4|0);
   HEAP32[$12>>2] = $116;
   HEAP32[$110>>2] = $115;
  }
 }
 $117 = HEAP32[$10>>2]|0;
 $118 = (__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($$2,$117,$4,$14)|0);
 HEAP16[$5>>1] = $118;
 $119 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$119,$4);
 $120 = ($80|0)==(0|0);
 if ($120) {
  $155 = 1;
 } else {
  $121 = ((($80)) + 12|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ((($80)) + 16|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($122|0)==($124|0);
  if ($125) {
   $126 = HEAP32[$127>>2]|0;
   $128 = ((($126)) + 36|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (FUNCTION_TABLE_ii[$129 & 1023]($80)|0);
   $$0$i$i$i$i = $130;
  } else {
   $131 = HEAP32[$122>>2]|0;
   $132 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($131)|0);
   $$0$i$i$i$i = $132;
  }
  $133 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $134 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$133)|0);
  if ($134) {
   HEAP32[$1>>2] = 0;
   $155 = 1;
  } else {
   $155 = 0;
  }
 }
 $135 = ($136|0)==(0|0);
 do {
  if ($135) {
   label = 48;
  } else {
   $137 = ((($136)) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ((($136)) + 16|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($138|0)==($140|0);
   if ($141) {
    $142 = HEAP32[$136>>2]|0;
    $143 = ((($142)) + 36|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (FUNCTION_TABLE_ii[$144 & 1023]($136)|0);
    $$0$i$i2$i$i = $145;
   } else {
    $146 = HEAP32[$138>>2]|0;
    $147 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($146)|0);
    $$0$i$i2$i$i = $147;
   }
   $148 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $149 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$148)|0);
   if ($149) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($155) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($155) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $150 = HEAP32[$4>>2]|0;
  $151 = $150 | 2;
  HEAP32[$4>>2] = $151;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 300|0;
 $7 = sp + 160|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 272|0;
 $11 = sp;
 $12 = sp + 268|0;
 $13 = sp + 264|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$3,$7)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 $21 = ((($9)) + 8|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$24,0);
 $25 = HEAP8[$18>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$9>>2]|0;
 $28 = $26 ? $27 : $9;
 HEAP32[$10>>2] = $28;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $29 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $28;$157 = $$pre;$31 = $$pre;
 L8: while(1) {
  $30 = ($31|0)==(0|0);
  if ($30) {
   $132 = 0;$158 = 1;$80 = 0;
  } else {
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($31)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$31>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
    $$0$i$i$i$i25 = $40;
   } else {
    $41 = HEAP32[$33>>2]|0;
    $42 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
    $$0$i$i$i$i25 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i25,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $132 = 0;$158 = 1;$80 = 0;
   } else {
    $132 = $157;$158 = 0;$80 = $31;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 1023]($45)|0);
     $$0$i$i2$i$i31 = $55;
    } else {
     $56 = HEAP32[$48>>2]|0;
     $57 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($56)|0);
     $$0$i$i2$i$i31 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i31,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($158) {
      $159 = $45;
      break;
     } else {
      $$2 = $$0;$141 = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($158) {
    $$2 = $$0;$141 = 0;
    break;
   } else {
    $159 = 0;
   }
  }
  $60 = HEAP32[$10>>2]|0;
  $61 = HEAP8[$18>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$29>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$68,0);
   $69 = HEAP8[$18>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$21>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i38 = (($72) + -1)|0;
    $73 = $phitmp$i38;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$73,0);
   $74 = HEAP8[$18>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$9>>2]|0;
   $77 = $75 ? $76 : $9;
   $78 = (($77) + ($65)|0);
   HEAP32[$10>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($80)) + 12|0);
  $81 = HEAP32[$79>>2]|0;
  $82 = ((($80)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$80>>2]|0;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 1023]($80)|0);
   $$0$i$i41 = $88;
  } else {
   $89 = HEAP32[$81>>2]|0;
   $90 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($89)|0);
   $$0$i$i41 = $90;
  }
  $91 = HEAP32[$6>>2]|0;
  $92 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i41,$14,$$1,$10,$13,$91,$8,$11,$12,$15)|0);
  $93 = ($92|0)==(0);
  if (!($93)) {
   $$2 = $$1;$141 = $159;
   break;
  }
  $94 = HEAP32[$79>>2]|0;
  $95 = HEAP32[$82>>2]|0;
  $96 = ($94|0)==($95|0);
  if ($96) {
   $97 = HEAP32[$80>>2]|0;
   $98 = ((($97)) + 40|0);
   $99 = HEAP32[$98>>2]|0;
   (FUNCTION_TABLE_ii[$99 & 1023]($80)|0);
  } else {
   $100 = ((($94)) + 4|0);
   HEAP32[$79>>2] = $100;
   $101 = HEAP32[$94>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
  }
  $$0 = $$1;$157 = $132;$31 = $80;
 }
 $102 = ((($8)) + 11|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = ($103<<24>>24)<(0);
 $105 = ((($8)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $103&255;
 $108 = $104 ? $106 : $107;
 $109 = ($108|0)==(0);
 if (!($109)) {
  $110 = HEAP32[$12>>2]|0;
  $111 = $110;
  $112 = $11;
  $113 = (($111) - ($112))|0;
  $114 = ($113|0)<(160);
  if ($114) {
   $115 = HEAP32[$13>>2]|0;
   $116 = ((($110)) + 4|0);
   HEAP32[$12>>2] = $116;
   HEAP32[$110>>2] = $115;
  }
 }
 $117 = HEAP32[$10>>2]|0;
 $118 = (__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($$2,$117,$4,$14)|0);
 $119 = (getTempRet0() | 0);
 $120 = $5;
 $121 = $120;
 HEAP32[$121>>2] = $118;
 $122 = (($120) + 4)|0;
 $123 = $122;
 HEAP32[$123>>2] = $119;
 $124 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$124,$4);
 $125 = ($80|0)==(0|0);
 if ($125) {
  $160 = 1;
 } else {
  $126 = ((($80)) + 12|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ((($80)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($127|0)==($129|0);
  if ($130) {
   $131 = HEAP32[$132>>2]|0;
   $133 = ((($131)) + 36|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (FUNCTION_TABLE_ii[$134 & 1023]($80)|0);
   $$0$i$i$i$i = $135;
  } else {
   $136 = HEAP32[$127>>2]|0;
   $137 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($136)|0);
   $$0$i$i$i$i = $137;
  }
  $138 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $139 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$138)|0);
  if ($139) {
   HEAP32[$1>>2] = 0;
   $160 = 1;
  } else {
   $160 = 0;
  }
 }
 $140 = ($141|0)==(0|0);
 do {
  if ($140) {
   label = 48;
  } else {
   $142 = ((($141)) + 12|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ((($141)) + 16|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($143|0)==($145|0);
   if ($146) {
    $147 = HEAP32[$141>>2]|0;
    $148 = ((($147)) + 36|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (FUNCTION_TABLE_ii[$149 & 1023]($141)|0);
    $$0$i$i2$i$i = $150;
   } else {
    $151 = HEAP32[$143>>2]|0;
    $152 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($151)|0);
    $$0$i$i2$i$i = $152;
   }
   $153 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $154 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$153)|0);
   if ($154) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($160) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($160) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $155 = HEAP32[$4>>2]|0;
  $156 = $155 | 2;
  HEAP32[$4>>2] = $156;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i41 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 300|0;
 $7 = sp + 160|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 272|0;
 $11 = sp;
 $12 = sp + 268|0;
 $13 = sp + 264|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$3,$7)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 $21 = ((($9)) + 8|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$24,0);
 $25 = HEAP8[$18>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$9>>2]|0;
 $28 = $26 ? $27 : $9;
 HEAP32[$10>>2] = $28;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $29 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $28;$152 = $$pre;$31 = $$pre;
 L8: while(1) {
  $30 = ($31|0)==(0|0);
  if ($30) {
   $127 = 0;$153 = 1;$80 = 0;
  } else {
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($31)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$31>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 1023]($31)|0);
    $$0$i$i$i$i25 = $40;
   } else {
    $41 = HEAP32[$33>>2]|0;
    $42 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
    $$0$i$i$i$i25 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i25,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $127 = 0;$153 = 1;$80 = 0;
   } else {
    $127 = $152;$153 = 0;$80 = $31;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 1023]($45)|0);
     $$0$i$i2$i$i31 = $55;
    } else {
     $56 = HEAP32[$48>>2]|0;
     $57 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($56)|0);
     $$0$i$i2$i$i31 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i31,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($153) {
      $154 = $45;
      break;
     } else {
      $$2 = $$0;$136 = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($153) {
    $$2 = $$0;$136 = 0;
    break;
   } else {
    $154 = 0;
   }
  }
  $60 = HEAP32[$10>>2]|0;
  $61 = HEAP8[$18>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$29>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$68,0);
   $69 = HEAP8[$18>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$21>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i38 = (($72) + -1)|0;
    $73 = $phitmp$i38;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($9,$73,0);
   $74 = HEAP8[$18>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$9>>2]|0;
   $77 = $75 ? $76 : $9;
   $78 = (($77) + ($65)|0);
   HEAP32[$10>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($80)) + 12|0);
  $81 = HEAP32[$79>>2]|0;
  $82 = ((($80)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$80>>2]|0;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 1023]($80)|0);
   $$0$i$i41 = $88;
  } else {
   $89 = HEAP32[$81>>2]|0;
   $90 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($89)|0);
   $$0$i$i41 = $90;
  }
  $91 = HEAP32[$6>>2]|0;
  $92 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($$0$i$i41,$14,$$1,$10,$13,$91,$8,$11,$12,$15)|0);
  $93 = ($92|0)==(0);
  if (!($93)) {
   $$2 = $$1;$136 = $154;
   break;
  }
  $94 = HEAP32[$79>>2]|0;
  $95 = HEAP32[$82>>2]|0;
  $96 = ($94|0)==($95|0);
  if ($96) {
   $97 = HEAP32[$80>>2]|0;
   $98 = ((($97)) + 40|0);
   $99 = HEAP32[$98>>2]|0;
   (FUNCTION_TABLE_ii[$99 & 1023]($80)|0);
  } else {
   $100 = ((($94)) + 4|0);
   HEAP32[$79>>2] = $100;
   $101 = HEAP32[$94>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
  }
  $$0 = $$1;$152 = $127;$31 = $80;
 }
 $102 = ((($8)) + 11|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = ($103<<24>>24)<(0);
 $105 = ((($8)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $103&255;
 $108 = $104 ? $106 : $107;
 $109 = ($108|0)==(0);
 if (!($109)) {
  $110 = HEAP32[$12>>2]|0;
  $111 = $110;
  $112 = $11;
  $113 = (($111) - ($112))|0;
  $114 = ($113|0)<(160);
  if ($114) {
   $115 = HEAP32[$13>>2]|0;
   $116 = ((($110)) + 4|0);
   HEAP32[$12>>2] = $116;
   HEAP32[$110>>2] = $115;
  }
 }
 $117 = HEAP32[$10>>2]|0;
 $118 = (__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($$2,$117,$4,$14)|0);
 HEAP32[$5>>2] = $118;
 $119 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$119,$4);
 $120 = ($80|0)==(0|0);
 if ($120) {
  $155 = 1;
 } else {
  $121 = ((($80)) + 12|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ((($80)) + 16|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($122|0)==($124|0);
  if ($125) {
   $126 = HEAP32[$127>>2]|0;
   $128 = ((($126)) + 36|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (FUNCTION_TABLE_ii[$129 & 1023]($80)|0);
   $$0$i$i$i$i = $130;
  } else {
   $131 = HEAP32[$122>>2]|0;
   $132 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($131)|0);
   $$0$i$i$i$i = $132;
  }
  $133 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $134 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$133)|0);
  if ($134) {
   HEAP32[$1>>2] = 0;
   $155 = 1;
  } else {
   $155 = 0;
  }
 }
 $135 = ($136|0)==(0|0);
 do {
  if ($135) {
   label = 48;
  } else {
   $137 = ((($136)) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ((($136)) + 16|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($138|0)==($140|0);
   if ($141) {
    $142 = HEAP32[$136>>2]|0;
    $143 = ((($142)) + 36|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (FUNCTION_TABLE_ii[$144 & 1023]($136)|0);
    $$0$i$i2$i$i = $145;
   } else {
    $146 = HEAP32[$138>>2]|0;
    $147 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($146)|0);
    $$0$i$i2$i$i = $147;
   }
   $148 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $149 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$148)|0);
   if ($149) {
    HEAP32[$2>>2] = 0;
    label = 48;
    break;
   } else {
    if ($155) {
     break;
    } else {
     label = 50;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  if ($155) {
   label = 50;
  }
 }
 if ((label|0) == 50) {
  $150 = HEAP32[$4>>2]|0;
  $151 = $150 | 2;
  HEAP32[$4>>2] = $151;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i116 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i122 = 0, $$0101 = 0, $$0105 = 0, $$0111 = 0, $$0112 = 0, $$0112140 = 0, $$092 = 0, $$093 = 0, $$094$off0 = 0, $$095 = 0, $$096 = 0, $$097 = 0, $$098 = 0, $$1102 = 0, $$1106 = 0;
 var $$199 = 0, $$2$off0 = 0, $$2100 = 0, $$2103 = 0, $$2103$be = 0, $$2107 = 0, $$3 = 0, $$3104 = 0, $$3108 = 0, $$5 = 0, $$5110 = 0, $$6 = 0, $$7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i118 = 0, $$sroa$0129$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i119 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = $3;
 $9 = $2;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 $12 = ($11>>>0)>(100);
 if ($12) {
  $13 = (_malloc($11)|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$0111 = $13;$$sroa$0129$0 = $13;
  }
 } else {
  $$0111 = $7;$$sroa$0129$0 = 0;
 }
 $$0101 = 0;$$0105 = $11;$$097 = $2;$$098 = $$0111;
 while(1) {
  $15 = ($$097|0)==($3|0);
  if ($15) {
   break;
  }
  $16 = ((($$097)) + 8|0);
  $17 = ((($16)) + 3|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(0);
  if ($19) {
   $20 = ((($$097)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $24 = $21;
  } else {
   $22 = $18&255;
   $24 = $22;
  }
  $23 = ($24|0)==(0);
  if ($23) {
   HEAP8[$$098>>0] = 2;
   $25 = (($$0105) + -1)|0;
   $26 = (($$0101) + 1)|0;
   $$1102 = $26;$$1106 = $25;
  } else {
   HEAP8[$$098>>0] = 1;
   $$1102 = $$0101;$$1106 = $$0105;
  }
  $27 = ((($$097)) + 12|0);
  $28 = ((($$098)) + 1|0);
  $$0101 = $$1102;$$0105 = $$1106;$$097 = $27;$$098 = $28;
 }
 $$096 = 0;$$2103 = $$0101;$$2107 = $$0105;
 while(1) {
  $29 = HEAP32[$0>>2]|0;
  $30 = ($29|0)==(0|0);
  do {
   if ($30) {
    $60 = 1;
   } else {
    $31 = ((($29)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($29)) + 16|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($32|0)==($34|0);
    if ($35) {
     $36 = HEAP32[$29>>2]|0;
     $37 = ((($36)) + 36|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (FUNCTION_TABLE_ii[$38 & 1023]($29)|0);
     $$0$i$i$i$i = $39;
    } else {
     $40 = HEAP32[$32>>2]|0;
     $41 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($40)|0);
     $$0$i$i$i$i = $41;
    }
    $42 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $43 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$42)|0);
    if ($43) {
     HEAP32[$0>>2] = 0;
     $60 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$0>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $60 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $44 = HEAP32[$1>>2]|0;
  $45 = ($44|0)==(0|0);
  if ($45) {
   $61 = 1;$80 = 0;
  } else {
   $46 = ((($44)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($44)) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($47|0)==($49|0);
   if ($50) {
    $51 = HEAP32[$44>>2]|0;
    $52 = ((($51)) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (FUNCTION_TABLE_ii[$53 & 1023]($44)|0);
    $$0$i$i2$i$i = $54;
   } else {
    $55 = HEAP32[$47>>2]|0;
    $56 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($55)|0);
    $$0$i$i2$i$i = $56;
   }
   $57 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $58 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$57)|0);
   if ($58) {
    HEAP32[$1>>2] = 0;
    $61 = 1;$80 = 0;
   } else {
    $61 = 0;$80 = $44;
   }
  }
  $59 = $60 ^ $61;
  $62 = ($$2107|0)!=(0);
  $63 = $62 & $59;
  $64 = HEAP32[$0>>2]|0;
  if (!($63)) {
   break;
  }
  $94 = ((($64)) + 12|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ((($64)) + 16|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($95|0)==($97|0);
  if ($98) {
   $99 = HEAP32[$64>>2]|0;
   $100 = ((($99)) + 36|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (FUNCTION_TABLE_ii[$101 & 1023]($64)|0);
   $$0$i$i = $102;
  } else {
   $103 = HEAP32[$95>>2]|0;
   $104 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($103)|0);
   $$0$i$i = $104;
  }
  if ($6) {
   $$095 = $$0$i$i;
  } else {
   $105 = HEAP32[$4>>2]|0;
   $106 = ((($105)) + 28|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (FUNCTION_TABLE_iii[$107 & 511]($4,$$0$i$i)|0);
   $$095 = $108;
  }
  $109 = (($$096) + 1)|0;
  $$093 = $2;$$094$off0 = 0;$$199 = $$0111;$$3104 = $$2103;$$3108 = $$2107;
  while(1) {
   $110 = ($$093|0)==($3|0);
   if ($110) {
    break;
   }
   $111 = HEAP8[$$199>>0]|0;
   $112 = ($111<<24>>24)==(1);
   do {
    if ($112) {
     $113 = ((($$093)) + 8|0);
     $114 = ((($113)) + 3|0);
     $115 = HEAP8[$114>>0]|0;
     $116 = ($115<<24>>24)<(0);
     if ($116) {
      $117 = HEAP32[$$093>>2]|0;
      $119 = $117;
     } else {
      $119 = $$093;
     }
     $118 = (($119) + ($$096<<2)|0);
     $120 = HEAP32[$118>>2]|0;
     if ($6) {
      $$092 = $120;
     } else {
      $121 = HEAP32[$4>>2]|0;
      $122 = ((($121)) + 28|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = (FUNCTION_TABLE_iii[$123 & 511]($4,$120)|0);
      $$092 = $124;
     }
     $125 = ($$095|0)==($$092|0);
     if (!($125)) {
      HEAP8[$$199>>0] = 0;
      $135 = (($$3108) + -1)|0;
      $$2$off0 = $$094$off0;$$5 = $$3104;$$5110 = $135;
      break;
     }
     $126 = HEAP8[$114>>0]|0;
     $127 = ($126<<24>>24)<(0);
     if ($127) {
      $128 = ((($$093)) + 4|0);
      $129 = HEAP32[$128>>2]|0;
      $132 = $129;
     } else {
      $130 = $126&255;
      $132 = $130;
     }
     $131 = ($132|0)==($109|0);
     if ($131) {
      $133 = (($$3108) + -1)|0;
      $134 = (($$3104) + 1)|0;
      HEAP8[$$199>>0] = 2;
      $$2$off0 = 1;$$5 = $134;$$5110 = $133;
     } else {
      $$2$off0 = 1;$$5 = $$3104;$$5110 = $$3108;
     }
    } else {
     $$2$off0 = $$094$off0;$$5 = $$3104;$$5110 = $$3108;
    }
   } while(0);
   $136 = ((($$093)) + 12|0);
   $137 = ((($$199)) + 1|0);
   $$093 = $136;$$094$off0 = $$2$off0;$$199 = $137;$$3104 = $$5;$$3108 = $$5110;
  }
  L67: do {
   if ($$094$off0) {
    $138 = HEAP32[$0>>2]|0;
    $139 = ((($138)) + 12|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($138)) + 16|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($140|0)==($142|0);
    if ($143) {
     $144 = HEAP32[$138>>2]|0;
     $145 = ((($144)) + 40|0);
     $146 = HEAP32[$145>>2]|0;
     (FUNCTION_TABLE_ii[$146 & 1023]($138)|0);
    } else {
     $147 = ((($140)) + 4|0);
     HEAP32[$139>>2] = $147;
     $148 = HEAP32[$140>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($148)|0);
    }
    $149 = (($$3104) + ($$3108))|0;
    $150 = ($149>>>0)>(1);
    if ($150) {
     $$0 = $2;$$2100 = $$0111;$$6 = $$3104;
     while(1) {
      $151 = ($$0|0)==($3|0);
      if ($151) {
       $$2103$be = $$6;
       break L67;
      }
      $152 = HEAP8[$$2100>>0]|0;
      $153 = ($152<<24>>24)==(2);
      if ($153) {
       $154 = ((($$0)) + 8|0);
       $155 = ((($154)) + 3|0);
       $156 = HEAP8[$155>>0]|0;
       $157 = ($156<<24>>24)<(0);
       if ($157) {
        $158 = ((($$0)) + 4|0);
        $159 = HEAP32[$158>>2]|0;
        $162 = $159;
       } else {
        $160 = $156&255;
        $162 = $160;
       }
       $161 = ($162|0)==($109|0);
       if ($161) {
        $$7 = $$6;
       } else {
        $163 = (($$6) + -1)|0;
        HEAP8[$$2100>>0] = 0;
        $$7 = $163;
       }
      } else {
       $$7 = $$6;
      }
      $164 = ((($$0)) + 12|0);
      $165 = ((($$2100)) + 1|0);
      $$0 = $164;$$2100 = $165;$$6 = $$7;
     }
    } else {
     $$2103$be = $$3104;
    }
   } else {
    $$2103$be = $$3104;
   }
  } while(0);
  $$096 = $109;$$2103 = $$2103$be;$$2107 = $$3108;
 }
 $65 = ($64|0)==(0|0);
 do {
  if ($65) {
   $175 = 1;
  } else {
   $66 = ((($64)) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($64)) + 16|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($67|0)==($69|0);
   if ($70) {
    $71 = HEAP32[$64>>2]|0;
    $72 = ((($71)) + 36|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (FUNCTION_TABLE_ii[$73 & 1023]($64)|0);
    $$0$i$i$i$i116 = $74;
   } else {
    $75 = HEAP32[$67>>2]|0;
    $76 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($75)|0);
    $$0$i$i$i$i116 = $76;
   }
   $77 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $78 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i116,$77)|0);
   if ($78) {
    HEAP32[$0>>2] = 0;
    $175 = 1;
    break;
   } else {
    $$pre$i$i$i118 = HEAP32[$0>>2]|0;
    $phitmp$i$i$i119 = ($$pre$i$i$i118|0)==(0|0);
    $175 = $phitmp$i$i$i119;
    break;
   }
  }
 } while(0);
 $79 = ($80|0)==(0|0);
 do {
  if ($79) {
   label = 41;
  } else {
   $81 = ((($80)) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($80)) + 16|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($82|0)==($84|0);
   if ($85) {
    $86 = HEAP32[$80>>2]|0;
    $87 = ((($86)) + 36|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (FUNCTION_TABLE_ii[$88 & 1023]($80)|0);
    $$0$i$i2$i$i122 = $89;
   } else {
    $90 = HEAP32[$82>>2]|0;
    $91 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($90)|0);
    $$0$i$i2$i$i122 = $91;
   }
   $92 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $93 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i122,$92)|0);
   if ($93) {
    HEAP32[$1>>2] = 0;
    label = 41;
    break;
   } else {
    if ($175) {
     break;
    } else {
     label = 79;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($175) {
   label = 79;
  }
 }
 if ((label|0) == 79) {
  $166 = HEAP32[$5>>2]|0;
  $167 = $166 | 2;
  HEAP32[$5>>2] = $167;
 }
 $$0112 = $2;$$3 = $$0111;
 while(1) {
  $168 = ($$0112|0)==($3|0);
  if ($168) {
   label = 84;
   break;
  }
  $169 = HEAP8[$$3>>0]|0;
  $170 = ($169<<24>>24)==(2);
  if ($170) {
   $$0112140 = $$0112;
   break;
  }
  $171 = ((($$0112)) + 12|0);
  $172 = ((($$3)) + 1|0);
  $$0112 = $171;$$3 = $172;
 }
 if ((label|0) == 84) {
  $173 = HEAP32[$5>>2]|0;
  $174 = $173 | 4;
  HEAP32[$5>>2] = $174;
  $$0112140 = $3;
 }
 _free($$sroa$0129$0);
 STACKTOP = sp;return ($$0112140|0);
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$byval_copy = 0, $$pre = 0, $$pre13 = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$09$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = ((($12)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$1>>2]|0;
  HEAP32[$5>>2] = $15;
  $16 = $4&1;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
  $17 = (FUNCTION_TABLE_iiiiii[$14 & 511]($0,$$byval_copy,$2,$3,$16)|0);
  $$sroa$0$0 = $17;
 } else {
  __ZNKSt3__28ios_base6getlocEv($6,$2);
  $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,71008)|0);
  __ZNSt3__26localeD2Ev($6);
  $19 = HEAP32[$18>>2]|0;
  if ($4) {
   $20 = ((($19)) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   FUNCTION_TABLE_vii[$21 & 511]($7,$18);
  } else {
   $22 = ((($19)) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   FUNCTION_TABLE_vii[$23 & 511]($7,$18);
  }
  $24 = ((($7)) + 11|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)<(0);
  $27 = HEAP32[$7>>2]|0;
  $28 = $26 ? $27 : $7;
  $29 = ((($7)) + 4|0);
  $$sroa$09$0 = $28;$31 = $25;$35 = $27;
  while(1) {
   $30 = ($31<<24>>24)<(0);
   $32 = HEAP32[$29>>2]|0;
   $33 = $31&255;
   $34 = $30 ? $35 : $7;
   $36 = $30 ? $32 : $33;
   $37 = (($34) + ($36)|0);
   $38 = ($$sroa$09$0|0)==($37|0);
   if ($38) {
    break;
   }
   $39 = HEAP8[$$sroa$09$0>>0]|0;
   $40 = HEAP32[$1>>2]|0;
   $41 = ($40|0)==(0|0);
   if (!($41)) {
    $42 = ((($40)) + 24|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($40)) + 28|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($43|0)==($45|0);
    if ($46) {
     $47 = HEAP32[$40>>2]|0;
     $48 = ((($47)) + 52|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($39)|0);
     $51 = (FUNCTION_TABLE_iii[$49 & 511]($40,$50)|0);
     $$0$i$i = $51;
    } else {
     $52 = ((($43)) + 1|0);
     HEAP32[$42>>2] = $52;
     HEAP8[$43>>0] = $39;
     $53 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($39)|0);
     $$0$i$i = $53;
    }
    $54 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $55 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i,$54)|0);
    if ($55) {
     HEAP32[$1>>2] = 0;
    }
   }
   $56 = ((($$sroa$09$0)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $$pre13 = HEAP32[$7>>2]|0;
   $$sroa$09$0 = $56;$31 = $$pre;$35 = $$pre13;
  }
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  $$sroa$0$0 = $$sroa$0$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[62403>>0]|0;HEAP8[$5+1>>0]=HEAP8[62403+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[62403+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[62403+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[62403+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[62403+5>>0]|0;
 $10 = ((($5)) + 1|0);
 $11 = ((($2)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($10,62409,1,$12);
 $13 = HEAP32[$11>>2]|0;
 $14 = $13 >>> 9;
 $$lobit = $14 & 1;
 $15 = (($$lobit) + 13)|0;
 $16 = (_llvm_stacksave()|0);
 $$alloca_mul = $15;
 $17 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $18 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $19 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($17,$15,$18,$5,$vararg_buffer)|0);
 $20 = (($17) + ($19)|0);
 $21 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($17,$20,$2)|0);
 $22 = $$lobit << 1;
 $23 = $22 | 24;
 $24 = (($23) + -1)|0;
 $$alloca_mul6 = $24;
 $25 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($8,$2);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($17,$21,$20,$25,$6,$7,$8);
 __ZNSt3__26localeD2Ev($8);
 $26 = HEAP32[$1>>2]|0;
 HEAP32[$9>>2] = $26;
 $27 = HEAP32[$6>>2]|0;
 $28 = HEAP32[$7>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
 $29 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$25,$27,$28,$2,$3)|0);
 _llvm_stackrestore(($16|0));
 STACKTOP = sp;return ($29|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 20|0;
 $10 = sp + 16|0;
 $11 = $6;
 $12 = $11;
 HEAP32[$12>>2] = 37;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = ((($6)) + 1|0);
 $16 = ((($2)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($15,62400,1,$17);
 $18 = HEAP32[$16>>2]|0;
 $19 = $18 >>> 9;
 $$lobit = $19 & 1;
 $20 = (($$lobit) + 23)|0;
 $21 = (_llvm_stacksave()|0);
 $$alloca_mul = $20;
 $22 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $23 = (__ZNSt3__26__clocEv()|0);
 $24 = $vararg_buffer;
 $25 = $24;
 HEAP32[$25>>2] = $4;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $5;
 $28 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($22,$20,$23,$6,$vararg_buffer)|0);
 $29 = (($22) + ($28)|0);
 $30 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($22,$29,$2)|0);
 $31 = $$lobit << 1;
 $32 = $31 | 44;
 $33 = (($32) + -1)|0;
 $$alloca_mul6 = $33;
 $34 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($9,$2);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($22,$30,$29,$34,$7,$8,$9);
 __ZNSt3__26localeD2Ev($9);
 $35 = HEAP32[$1>>2]|0;
 HEAP32[$10>>2] = $35;
 $36 = HEAP32[$7>>2]|0;
 $37 = HEAP32[$8>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;
 $38 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$34,$36,$37,$2,$3)|0);
 _llvm_stackrestore(($21|0));
 STACKTOP = sp;return ($38|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[62403>>0]|0;HEAP8[$5+1>>0]=HEAP8[62403+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[62403+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[62403+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[62403+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[62403+5>>0]|0;
 $10 = ((($5)) + 1|0);
 $11 = ((($2)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($10,62409,0,$12);
 $13 = HEAP32[$11>>2]|0;
 $14 = $13 >>> 9;
 $$lobit = $14 & 1;
 $15 = $$lobit | 12;
 $16 = (_llvm_stacksave()|0);
 $$alloca_mul = $15;
 $17 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $18 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $19 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($17,$15,$18,$5,$vararg_buffer)|0);
 $20 = (($17) + ($19)|0);
 $21 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($17,$20,$2)|0);
 $22 = $$lobit << 1;
 $23 = $22 | 21;
 $$alloca_mul6 = $23;
 $24 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($8,$2);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($17,$21,$20,$24,$6,$7,$8);
 __ZNSt3__26localeD2Ev($8);
 $25 = HEAP32[$1>>2]|0;
 HEAP32[$9>>2] = $25;
 $26 = HEAP32[$6>>2]|0;
 $27 = HEAP32[$7>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
 $28 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$24,$26,$27,$2,$3)|0);
 _llvm_stackrestore(($16|0));
 STACKTOP = sp;return ($28|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 20|0;
 $10 = sp + 16|0;
 $11 = $6;
 $12 = $11;
 HEAP32[$12>>2] = 37;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = ((($6)) + 1|0);
 $16 = ((($2)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($15,62400,0,$17);
 $18 = HEAP32[$16>>2]|0;
 $19 = $18 >>> 9;
 $$lobit = $19 & 1;
 $20 = $$lobit | 22;
 $21 = (($20) + 1)|0;
 $22 = (_llvm_stacksave()|0);
 $$alloca_mul = $21;
 $23 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $24 = (__ZNSt3__26__clocEv()|0);
 $25 = $vararg_buffer;
 $26 = $25;
 HEAP32[$26>>2] = $4;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $5;
 $29 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($23,$21,$24,$6,$vararg_buffer)|0);
 $30 = (($23) + ($29)|0);
 $31 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($23,$30,$2)|0);
 $32 = $20 << 1;
 $33 = (($32) + -1)|0;
 $$alloca_mul6 = $33;
 $34 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($9,$2);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($23,$31,$30,$34,$7,$8,$9);
 __ZNSt3__26localeD2Ev($9);
 $35 = HEAP32[$1>>2]|0;
 HEAP32[$10>>2] = $35;
 $36 = HEAP32[$7>>2]|0;
 $37 = HEAP32[$8>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;
 $38 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$34,$36,$37,$2,$3)|0);
 _llvm_stackrestore(($22|0));
 STACKTOP = sp;return ($38|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$041$0 = 0, $$sroa$048$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 172|0;
 $vararg_buffer9 = sp + 144|0;
 $vararg_buffer5 = sp + 128|0;
 $vararg_buffer2 = sp + 120|0;
 $vararg_buffer = sp + 104|0;
 $5 = sp + 96|0;
 $6 = sp + 64|0;
 $7 = sp + 168|0;
 $8 = sp;
 $9 = sp + 164|0;
 $10 = sp + 160|0;
 $11 = sp + 156|0;
 $12 = sp + 152|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,71442,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 if ($26) {
  $27 = (__ZNSt3__26__clocEv()|0);
  if ($20) {
   $28 = ((($2)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $29;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $4;
   $30 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer5)|0);
   $$1 = $30;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $4;
   $31 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer9)|0);
   $$1 = $31;
  }
  $32 = HEAP32[$7>>2]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$2 = $$1;$$sroa$048$0 = $32;$35 = $32;
  }
 } else {
  $$pre = HEAP32[$7>>2]|0;
  $$2 = $$0;$$sroa$048$0 = 0;$35 = $$pre;
 }
 $34 = (($35) + ($$2)|0);
 $36 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($35,$34,$2)|0);
 $37 = ($35|0)==($6|0);
 if ($37) {
  $$037 = $8;$$sroa$041$0 = 0;
 } else {
  $38 = $$2 << 1;
  $39 = (_malloc($38)|0);
  $40 = ($39|0)==(0|0);
  if ($40) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$037 = $39;$$sroa$041$0 = $39;
  }
 }
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($35,$36,$34,$$037,$9,$10,$11);
 __ZNSt3__26localeD2Ev($11);
 $41 = HEAP32[$1>>2]|0;
 HEAP32[$12>>2] = $41;
 $42 = HEAP32[$9>>2]|0;
 $43 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $44 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$42,$43,$2,$3)|0);
 _free($$sroa$041$0);
 _free($$sroa$048$0);
 STACKTOP = sp;return ($44|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$041$0 = 0, $$sroa$048$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 172|0;
 $vararg_buffer9 = sp + 144|0;
 $vararg_buffer5 = sp + 128|0;
 $vararg_buffer2 = sp + 120|0;
 $vararg_buffer = sp + 104|0;
 $5 = sp + 96|0;
 $6 = sp + 64|0;
 $7 = sp + 168|0;
 $8 = sp;
 $9 = sp + 164|0;
 $10 = sp + 160|0;
 $11 = sp + 156|0;
 $12 = sp + 152|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,62398,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 if ($26) {
  $27 = (__ZNSt3__26__clocEv()|0);
  if ($20) {
   $28 = ((($2)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $29;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $4;
   $30 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer5)|0);
   $$1 = $30;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $4;
   $31 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer9)|0);
   $$1 = $31;
  }
  $32 = HEAP32[$7>>2]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$2 = $$1;$$sroa$048$0 = $32;$35 = $32;
  }
 } else {
  $$pre = HEAP32[$7>>2]|0;
  $$2 = $$0;$$sroa$048$0 = 0;$35 = $$pre;
 }
 $34 = (($35) + ($$2)|0);
 $36 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($35,$34,$2)|0);
 $37 = ($35|0)==($6|0);
 if ($37) {
  $$037 = $8;$$sroa$041$0 = 0;
 } else {
  $38 = $$2 << 1;
  $39 = (_malloc($38)|0);
  $40 = ($39|0)==(0|0);
  if ($40) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$037 = $39;$$sroa$041$0 = $39;
  }
 }
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($35,$36,$34,$$037,$9,$10,$11);
 __ZNSt3__26localeD2Ev($11);
 $41 = HEAP32[$1>>2]|0;
 HEAP32[$12>>2] = $41;
 $42 = HEAP32[$9>>2]|0;
 $43 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $44 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$42,$43,$2,$3)|0);
 _free($$sroa$041$0);
 _free($$sroa$048$0);
 STACKTOP = sp;return ($44|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 84|0;
 $vararg_buffer = sp + 72|0;
 $5 = sp + 88|0;
 $6 = sp + 48|0;
 $7 = sp;
 $8 = sp + 80|0;
 $9 = sp + 76|0;
 ;HEAP8[$5>>0]=HEAP8[62392>>0]|0;HEAP8[$5+1>>0]=HEAP8[62392+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[62392+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[62392+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[62392+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[62392+5>>0]|0;
 $10 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $11 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,20,$10,$5,$vararg_buffer)|0);
 $12 = (($6) + ($11)|0);
 $13 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$12,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($8,$2);
 $14 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,70992)|0);
 __ZNSt3__26localeD2Ev($8);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 (FUNCTION_TABLE_iiiii[$17 & 511]($14,$6,$12,$7)|0);
 $18 = (($7) + ($11)|0);
 $19 = ($13|0)==($12|0);
 $20 = $6;
 $21 = $13;
 $22 = (($21) - ($20))|0;
 $23 = (($7) + ($22)|0);
 $$0 = $19 ? $18 : $23;
 $24 = HEAP32[$1>>2]|0;
 HEAP32[$9>>2] = $24;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
 $25 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$$0,$18,$2,$3)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($0,$1,$2,$3,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $varargs = $varargs|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 HEAP32[$4>>2] = $varargs;
 $5 = (___uselocale($2)|0);
 $6 = (_vsnprintf($0,$1,$3,$4)|0);
 $7 = ($5|0)==(0|0);
 if (!($7)) {
  (___uselocale($5)|0);
 }
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 176;
 $trunc = $5&255;
 L1: do {
  switch ($trunc<<24>>24) {
  case 16:  {
   $6 = HEAP8[$0>>0]|0;
   switch ($6<<24>>24) {
   case 43: case 45:  {
    $7 = ((($0)) + 1|0);
    $$0 = $7;
    break L1;
    break;
   }
   default: {
   }
   }
   $8 = $1;
   $9 = $0;
   $10 = (($8) - ($9))|0;
   $11 = ($10|0)>(1);
   $12 = ($6<<24>>24)==(48);
   $or$cond = $11 & $12;
   if ($or$cond) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    switch ($14<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $15 = ((($0)) + 2|0);
    $$0 = $15;
   } else {
    label = 7;
   }
   break;
  }
  case 32:  {
   $$0 = $1;
   break;
  }
  default: {
   label = 7;
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $0;
 }
 return ($$0|0);
}
function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$022 = 0, $$023$off0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 & 2048;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = $0;
 } else {
  $5 = ((($0)) + 1|0);
  HEAP8[$0>>0] = 43;
  $$0 = $5;
 }
 $6 = $2 & 1024;
 $7 = ($6|0)==(0);
 if ($7) {
  $$1 = $$0;
 } else {
  $8 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $8;
 }
 $9 = $2 & 260;
 $10 = $2 & 16384;
 $11 = ($9|0)==(260);
 if ($11) {
  $$023$off0 = 0;$$2 = $$1;
 } else {
  $12 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = 46;
  $13 = ((($$1)) + 2|0);
  HEAP8[$12>>0] = 42;
  $$023$off0 = 1;$$2 = $13;
 }
 $$022 = $1;$$3 = $$2;
 while(1) {
  $14 = HEAP8[$$022>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   break;
  }
  $16 = ((($$022)) + 1|0);
  $17 = ((($$3)) + 1|0);
  HEAP8[$$3>>0] = $14;
  $$022 = $16;$$3 = $17;
 }
 $trunc = $9&65535;
 $trunc$clear = $trunc & 511;
 L14: do {
  switch ($trunc$clear<<16>>16) {
  case 4:  {
   $18 = $10 >>> 9;
   $19 = $18&255;
   $20 = $19 ^ 102;
   $$sink = $20;
   break;
  }
  case 256:  {
   $21 = $10 >>> 9;
   $22 = $21&255;
   $23 = $22 ^ 101;
   $$sink = $23;
   break;
  }
  default: {
   $24 = $10 >>> 9;
   $25 = $24&255;
   if ($11) {
    $26 = $25 ^ 97;
    $$sink = $26;
    break L14;
   } else {
    $27 = $25 ^ 103;
    $$sink = $27;
    break L14;
   }
  }
  }
 } while(0);
 HEAP8[$$3>>0] = $$sink;
 return ($$023$off0|0);
}
function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (___uselocale($1)|0);
 $5 = (_vasprintf($0,$2,$3)|0);
 $6 = ($4|0)==(0|0);
 if (!($6)) {
  (___uselocale($4)|0);
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i108 = 0, $$0100 = 0, $$0102 = 0, $$0104 = 0, $$07$i$i = 0, $$07$i$i107 = 0, $$099 = 0, $$1 = 0, $$1101 = 0, $$1103 = 0, $$1105 = 0, $$2 = 0, $$2106 = 0, $$3 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,70992)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,71008)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 511]($7,$9);
 HEAP32[$5>>2] = $3;
 $13 = HEAP8[$0>>0]|0;
 switch ($13<<24>>24) {
 case 43: case 45:  {
  $14 = ((($0)) + 1|0);
  $15 = HEAP32[$8>>2]|0;
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iii[$17 & 511]($8,$13)|0);
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($19)) + 1|0);
  HEAP32[$5>>2] = $20;
  HEAP8[$19>>0] = $18;
  $$0102 = $14;
  break;
 }
 default: {
  $$0102 = $0;
 }
 }
 $21 = $2;
 $22 = $$0102;
 $23 = (($21) - ($22))|0;
 $24 = ($23|0)>(1);
 L4: do {
  if ($24) {
   $25 = HEAP8[$$0102>>0]|0;
   $26 = ($25<<24>>24)==(48);
   if ($26) {
    $27 = ((($$0102)) + 1|0);
    $28 = HEAP8[$27>>0]|0;
    switch ($28<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 4;
     break L4;
    }
    }
    $29 = HEAP32[$8>>2]|0;
    $30 = ((($29)) + 28|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (FUNCTION_TABLE_iii[$31 & 511]($8,48)|0);
    $33 = HEAP32[$5>>2]|0;
    $34 = ((($33)) + 1|0);
    HEAP32[$5>>2] = $34;
    HEAP8[$33>>0] = $32;
    $35 = ((($$0102)) + 2|0);
    $36 = HEAP8[$27>>0]|0;
    $37 = HEAP32[$8>>2]|0;
    $38 = ((($37)) + 28|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_iii[$39 & 511]($8,$36)|0);
    $41 = HEAP32[$5>>2]|0;
    $42 = ((($41)) + 1|0);
    HEAP32[$5>>2] = $42;
    HEAP8[$41>>0] = $40;
    $$0104 = $35;
    while(1) {
     $43 = ($$0104>>>0)<($2>>>0);
     if (!($43)) {
      $$1103 = $35;$$2106 = $$0104;
      break L4;
     }
     $44 = HEAP8[$$0104>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = (__ZNSt3__26__clocEv()|0);
     $47 = (_isxdigit_l($45,$46)|0);
     $48 = ($47|0)==(0);
     if ($48) {
      $$1103 = $35;$$2106 = $$0104;
      break L4;
     }
     $49 = ((($$0104)) + 1|0);
     $$0104 = $49;
    }
   } else {
    label = 4;
   }
  } else {
   label = 4;
  }
 } while(0);
 L12: do {
  if ((label|0) == 4) {
   $$1105 = $$0102;
   while(1) {
    $50 = ($$1105>>>0)<($2>>>0);
    if (!($50)) {
     $$1103 = $$0102;$$2106 = $$1105;
     break L12;
    }
    $51 = HEAP8[$$1105>>0]|0;
    $52 = $51 << 24 >> 24;
    $53 = (__ZNSt3__26__clocEv()|0);
    $54 = (_isdigit_l($52,$53)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     $$1103 = $$0102;$$2106 = $$1105;
     break L12;
    }
    $56 = ((($$1105)) + 1|0);
    $$1105 = $56;
   }
  }
 } while(0);
 $57 = ((($7)) + 11|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = ($58<<24>>24)<(0);
 $60 = ((($7)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $58&255;
 $63 = $59 ? $61 : $62;
 $64 = ($63|0)==(0);
 L19: do {
  if ($64) {
   $65 = HEAP32[$5>>2]|0;
   $66 = HEAP32[$8>>2]|0;
   $67 = ((($66)) + 32|0);
   $68 = HEAP32[$67>>2]|0;
   (FUNCTION_TABLE_iiiii[$68 & 511]($8,$$1103,$$2106,$65)|0);
   $69 = $$2106;
   $70 = $$1103;
   $71 = (($69) - ($70))|0;
   $72 = HEAP32[$5>>2]|0;
   $73 = (($72) + ($71)|0);
   HEAP32[$5>>2] = $73;
   $$pre$phiZ2D = $8;
  } else {
   $74 = ($$1103|0)==($$2106|0);
   L22: do {
    if (!($74)) {
     $$0$i$i = $$2106;$$07$i$i = $$1103;
     while(1) {
      $75 = ((($$0$i$i)) + -1|0);
      $76 = ($$07$i$i>>>0)<($75>>>0);
      if (!($76)) {
       break L22;
      }
      $77 = HEAP8[$$07$i$i>>0]|0;
      $78 = HEAP8[$75>>0]|0;
      HEAP8[$$07$i$i>>0] = $78;
      HEAP8[$75>>0] = $77;
      $79 = ((($$07$i$i)) + 1|0);
      $$0$i$i = $75;$$07$i$i = $79;
     }
    }
   } while(0);
   $80 = HEAP32[$9>>2]|0;
   $81 = ((($80)) + 16|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (FUNCTION_TABLE_ii[$82 & 1023]($9)|0);
   $$0 = $$1103;$$0100 = 0;$$099 = 0;
   while(1) {
    $84 = ($$0>>>0)<($$2106>>>0);
    if (!($84)) {
     break;
    }
    $96 = HEAP8[$57>>0]|0;
    $97 = ($96<<24>>24)<(0);
    $98 = HEAP32[$7>>2]|0;
    $99 = $97 ? $98 : $7;
    $100 = (($99) + ($$099)|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = ($101<<24>>24)>(0);
    $103 = $101 << 24 >> 24;
    $104 = ($$0100|0)==($103|0);
    $or$cond = $102 & $104;
    if ($or$cond) {
     $105 = HEAP32[$5>>2]|0;
     $106 = ((($105)) + 1|0);
     HEAP32[$5>>2] = $106;
     HEAP8[$105>>0] = $83;
     $107 = HEAP8[$57>>0]|0;
     $108 = ($107<<24>>24)<(0);
     $109 = HEAP32[$60>>2]|0;
     $110 = $107&255;
     $111 = $108 ? $109 : $110;
     $112 = (($111) + -1)|0;
     $113 = ($$099>>>0)<($112>>>0);
     $114 = $113&1;
     $spec$select = (($$099) + ($114))|0;
     $$1 = $spec$select;$$1101 = 0;
    } else {
     $$1 = $$099;$$1101 = $$0100;
    }
    $115 = HEAP8[$$0>>0]|0;
    $116 = HEAP32[$8>>2]|0;
    $117 = ((($116)) + 28|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (FUNCTION_TABLE_iii[$118 & 511]($8,$115)|0);
    $120 = HEAP32[$5>>2]|0;
    $121 = ((($120)) + 1|0);
    HEAP32[$5>>2] = $121;
    HEAP8[$120>>0] = $119;
    $122 = (($$1101) + 1)|0;
    $123 = ((($$0)) + 1|0);
    $$0 = $123;$$0100 = $122;$$099 = $$1;
   }
   $85 = $$1103;
   $86 = $0;
   $87 = (($85) - ($86))|0;
   $88 = (($3) + ($87)|0);
   $89 = HEAP32[$5>>2]|0;
   $90 = ($88|0)==($89|0);
   if ($90) {
    $$pre$phiZ2D = $8;
   } else {
    $$0$i$i108 = $89;$$07$i$i107 = $88;
    while(1) {
     $91 = ((($$0$i$i108)) + -1|0);
     $92 = ($$07$i$i107>>>0)<($91>>>0);
     if (!($92)) {
      $$pre$phiZ2D = $8;
      break L19;
     }
     $93 = HEAP8[$$07$i$i107>>0]|0;
     $94 = HEAP8[$91>>0]|0;
     HEAP8[$$07$i$i107>>0] = $94;
     HEAP8[$91>>0] = $93;
     $95 = ((($$07$i$i107)) + 1|0);
     $$0$i$i108 = $91;$$07$i$i107 = $95;
    }
   }
  }
 } while(0);
 $$2 = $$2106;
 while(1) {
  $124 = ($$2>>>0)<($2>>>0);
  if (!($124)) {
   $$3 = $$2;
   break;
  }
  $125 = HEAP8[$$2>>0]|0;
  $126 = ($125<<24>>24)==(46);
  if ($126) {
   label = 32;
   break;
  }
  $134 = HEAP32[$$pre$phiZ2D>>2]|0;
  $135 = ((($134)) + 28|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (FUNCTION_TABLE_iii[$136 & 511]($8,$125)|0);
  $138 = HEAP32[$5>>2]|0;
  $139 = ((($138)) + 1|0);
  HEAP32[$5>>2] = $139;
  HEAP8[$138>>0] = $137;
  $140 = ((($$2)) + 1|0);
  $$2 = $140;
 }
 if ((label|0) == 32) {
  $127 = HEAP32[$9>>2]|0;
  $128 = ((($127)) + 12|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (FUNCTION_TABLE_ii[$129 & 1023]($9)|0);
  $131 = HEAP32[$5>>2]|0;
  $132 = ((($131)) + 1|0);
  HEAP32[$5>>2] = $132;
  HEAP8[$131>>0] = $130;
  $133 = ((($$2)) + 1|0);
  $$3 = $133;
 }
 $141 = HEAP32[$5>>2]|0;
 $142 = HEAP32[$8>>2]|0;
 $143 = ((($142)) + 32|0);
 $144 = HEAP32[$143>>2]|0;
 (FUNCTION_TABLE_iiiii[$144 & 511]($8,$$3,$2,$141)|0);
 $145 = $$3;
 $146 = (($21) - ($145))|0;
 $147 = HEAP32[$5>>2]|0;
 $148 = (($147) + ($146)|0);
 HEAP32[$5>>2] = $148;
 $149 = ($1|0)==($2|0);
 $150 = $1;
 $151 = $0;
 $152 = (($150) - ($151))|0;
 $153 = (($3) + ($152)|0);
 $storemerge = $149 ? $148 : $153;
 HEAP32[$4>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$013 = 0, $$14 = 0, $$2 = 0, $$2$ph = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3 & 2048;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = $0;
 } else {
  $6 = ((($0)) + 1|0);
  HEAP8[$0>>0] = 43;
  $$0 = $6;
 }
 $7 = $3 & 512;
 $8 = ($7|0)==(0);
 if ($8) {
  $$2$ph = $$0;
 } else {
  $9 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$2$ph = $9;
 }
 $$013 = $1;$$2 = $$2$ph;
 while(1) {
  $10 = HEAP8[$$013>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   break;
  }
  $12 = ((($$013)) + 1|0);
  $13 = ((($$2)) + 1|0);
  HEAP8[$$2>>0] = $10;
  $$013 = $12;$$2 = $13;
 }
 $14 = $3 & 74;
 $trunc = $14&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $$sink = 111;
  break;
 }
 case 8:  {
  $15 = $3 >>> 9;
  $16 = $15 & 32;
  $17 = $16&255;
  $18 = $17 ^ 120;
  $$sink = $18;
  break;
 }
 default: {
  $$14 = $2 ? 100 : 117;
  $$sink = $$14;
 }
 }
 HEAP8[$$2>>0] = $$sink;
 return;
}
function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i76 = 0, $$07$i$i = 0, $$07$i$i75 = 0, $$070 = 0, $$071 = 0, $$073 = 0, $$1 = 0, $$172 = 0, $$174 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $spec$select = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,70992)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,71008)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 511]($7,$9);
 $13 = ((($7)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14&255;
 $19 = $15 ? $17 : $18;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($21)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  (FUNCTION_TABLE_iiiii[$23 & 511]($8,$0,$2,$3)|0);
  $24 = $2;
  $25 = $0;
  $26 = (($24) - ($25))|0;
  $27 = (($3) + ($26)|0);
  HEAP32[$5>>2] = $27;
  $$pre$phiZ2D = $25;$112 = $27;
 } else {
  HEAP32[$5>>2] = $3;
  $28 = HEAP8[$0>>0]|0;
  switch ($28<<24>>24) {
  case 43: case 45:  {
   $29 = ((($0)) + 1|0);
   $30 = HEAP32[$8>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (FUNCTION_TABLE_iii[$32 & 511]($8,$28)|0);
   $34 = HEAP32[$5>>2]|0;
   $35 = ((($34)) + 1|0);
   HEAP32[$5>>2] = $35;
   HEAP8[$34>>0] = $33;
   $$073 = $29;
   break;
  }
  default: {
   $$073 = $0;
  }
  }
  $36 = $2;
  $37 = $$073;
  $38 = (($36) - ($37))|0;
  $39 = ($38|0)>(1);
  L7: do {
   if ($39) {
    $40 = HEAP8[$$073>>0]|0;
    $41 = ($40<<24>>24)==(48);
    if ($41) {
     $42 = ((($$073)) + 1|0);
     $43 = HEAP8[$42>>0]|0;
     switch ($43<<24>>24) {
     case 88: case 120:  {
      break;
     }
     default: {
      $$174 = $$073;
      break L7;
     }
     }
     $44 = HEAP32[$8>>2]|0;
     $45 = ((($44)) + 28|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (FUNCTION_TABLE_iii[$46 & 511]($8,48)|0);
     $48 = HEAP32[$5>>2]|0;
     $49 = ((($48)) + 1|0);
     HEAP32[$5>>2] = $49;
     HEAP8[$48>>0] = $47;
     $50 = ((($$073)) + 2|0);
     $51 = HEAP8[$42>>0]|0;
     $52 = HEAP32[$8>>2]|0;
     $53 = ((($52)) + 28|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_iii[$54 & 511]($8,$51)|0);
     $56 = HEAP32[$5>>2]|0;
     $57 = ((($56)) + 1|0);
     HEAP32[$5>>2] = $57;
     HEAP8[$56>>0] = $55;
     $$174 = $50;
    } else {
     $$174 = $$073;
    }
   } else {
    $$174 = $$073;
   }
  } while(0);
  $58 = ($$174|0)==($2|0);
  L12: do {
   if (!($58)) {
    $$0$i$i = $2;$$07$i$i = $$174;
    while(1) {
     $59 = ((($$0$i$i)) + -1|0);
     $60 = ($$07$i$i>>>0)<($59>>>0);
     if (!($60)) {
      break L12;
     }
     $61 = HEAP8[$$07$i$i>>0]|0;
     $62 = HEAP8[$59>>0]|0;
     HEAP8[$$07$i$i>>0] = $62;
     HEAP8[$59>>0] = $61;
     $63 = ((($$07$i$i)) + 1|0);
     $$0$i$i = $59;$$07$i$i = $63;
    }
   }
  } while(0);
  $64 = HEAP32[$9>>2]|0;
  $65 = ((($64)) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (FUNCTION_TABLE_ii[$66 & 1023]($9)|0);
  $$0 = $$174;$$070 = 0;$$071 = 0;
  while(1) {
   $68 = ($$0>>>0)<($2>>>0);
   if (!($68)) {
    break;
   }
   $80 = HEAP8[$13>>0]|0;
   $81 = ($80<<24>>24)<(0);
   $82 = HEAP32[$7>>2]|0;
   $83 = $81 ? $82 : $7;
   $84 = (($83) + ($$070)|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = ($85<<24>>24)!=(0);
   $87 = $85 << 24 >> 24;
   $88 = ($$071|0)==($87|0);
   $or$cond = $86 & $88;
   if ($or$cond) {
    $89 = HEAP32[$5>>2]|0;
    $90 = ((($89)) + 1|0);
    HEAP32[$5>>2] = $90;
    HEAP8[$89>>0] = $67;
    $91 = HEAP8[$13>>0]|0;
    $92 = ($91<<24>>24)<(0);
    $93 = HEAP32[$16>>2]|0;
    $94 = $91&255;
    $95 = $92 ? $93 : $94;
    $96 = (($95) + -1)|0;
    $97 = ($$070>>>0)<($96>>>0);
    $98 = $97&1;
    $spec$select = (($$070) + ($98))|0;
    $$1 = $spec$select;$$172 = 0;
   } else {
    $$1 = $$070;$$172 = $$071;
   }
   $99 = HEAP8[$$0>>0]|0;
   $100 = HEAP32[$8>>2]|0;
   $101 = ((($100)) + 28|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (FUNCTION_TABLE_iii[$102 & 511]($8,$99)|0);
   $104 = HEAP32[$5>>2]|0;
   $105 = ((($104)) + 1|0);
   HEAP32[$5>>2] = $105;
   HEAP8[$104>>0] = $103;
   $106 = (($$172) + 1)|0;
   $107 = ((($$0)) + 1|0);
   $$0 = $107;$$070 = $$1;$$071 = $106;
  }
  $69 = $$174;
  $70 = $0;
  $71 = (($69) - ($70))|0;
  $72 = (($3) + ($71)|0);
  $73 = HEAP32[$5>>2]|0;
  $74 = ($72|0)==($73|0);
  if ($74) {
   $$pre$phiZ2D = $70;$112 = $72;
  } else {
   $$0$i$i76 = $73;$$07$i$i75 = $72;
   while(1) {
    $75 = ((($$0$i$i76)) + -1|0);
    $76 = ($$07$i$i75>>>0)<($75>>>0);
    if (!($76)) {
     break;
    }
    $77 = HEAP8[$$07$i$i75>>0]|0;
    $78 = HEAP8[$75>>0]|0;
    HEAP8[$$07$i$i75>>0] = $78;
    HEAP8[$75>>0] = $77;
    $79 = ((($$07$i$i75)) + 1|0);
    $$0$i$i76 = $75;$$07$i$i75 = $79;
   }
   $$pre = HEAP32[$5>>2]|0;
   $$pre$phiZ2D = $70;$112 = $$pre;
  }
 }
 $108 = ($1|0)==($2|0);
 $109 = $1;
 $110 = (($109) - ($$pre$phiZ2D))|0;
 $111 = (($3) + ($110)|0);
 $storemerge = $108 ? $112 : $111;
 HEAP32[$4>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$byval_copy = 0, $$pre = 0, $$pre13 = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$09$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = ((($12)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$1>>2]|0;
  HEAP32[$5>>2] = $15;
  $16 = $4&1;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
  $17 = (FUNCTION_TABLE_iiiiii[$14 & 511]($0,$$byval_copy,$2,$3,$16)|0);
  $$sroa$0$0 = $17;
 } else {
  __ZNKSt3__28ios_base6getlocEv($6,$2);
  $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,71032)|0);
  __ZNSt3__26localeD2Ev($6);
  $19 = HEAP32[$18>>2]|0;
  if ($4) {
   $20 = ((($19)) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   FUNCTION_TABLE_vii[$21 & 511]($7,$18);
  } else {
   $22 = ((($19)) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   FUNCTION_TABLE_vii[$23 & 511]($7,$18);
  }
  $24 = ((($7)) + 8|0);
  $25 = ((($24)) + 3|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$7>>2]|0;
  $29 = $27 ? $28 : $7;
  $30 = ((($7)) + 4|0);
  $$sroa$09$0 = $29;$32 = $26;$36 = $28;
  while(1) {
   $31 = ($32<<24>>24)<(0);
   $33 = HEAP32[$30>>2]|0;
   $34 = $32&255;
   $35 = $31 ? $36 : $7;
   $37 = $31 ? $33 : $34;
   $38 = (($35) + ($37<<2)|0);
   $39 = ($$sroa$09$0|0)==($38|0);
   if ($39) {
    break;
   }
   $40 = HEAP32[$$sroa$09$0>>2]|0;
   $41 = HEAP32[$1>>2]|0;
   $42 = ($41|0)==(0|0);
   if (!($42)) {
    $43 = ((($41)) + 24|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 28|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)==($46|0);
    if ($47) {
     $48 = HEAP32[$41>>2]|0;
     $49 = ((($48)) + 52|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($40)|0);
     $52 = (FUNCTION_TABLE_iii[$50 & 511]($41,$51)|0);
     $$0$i$i = $52;
    } else {
     $53 = ((($44)) + 4|0);
     HEAP32[$43>>2] = $53;
     HEAP32[$44>>2] = $40;
     $54 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($40)|0);
     $$0$i$i = $54;
    }
    $55 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $56 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i,$55)|0);
    if ($56) {
     HEAP32[$1>>2] = 0;
    }
   }
   $57 = ((($$sroa$09$0)) + 4|0);
   $$pre = HEAP8[$25>>0]|0;
   $$pre13 = HEAP32[$7>>2]|0;
   $$sroa$09$0 = $57;$32 = $$pre;$36 = $$pre13;
  }
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  $$sroa$0$0 = $$sroa$0$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[62403>>0]|0;HEAP8[$5+1>>0]=HEAP8[62403+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[62403+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[62403+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[62403+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[62403+5>>0]|0;
 $10 = ((($5)) + 1|0);
 $11 = ((($2)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($10,62409,1,$12);
 $13 = HEAP32[$11>>2]|0;
 $14 = $13 >>> 9;
 $$lobit = $14 & 1;
 $15 = (($$lobit) + 13)|0;
 $16 = (_llvm_stacksave()|0);
 $$alloca_mul = $15;
 $17 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $18 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $19 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($17,$15,$18,$5,$vararg_buffer)|0);
 $20 = (($17) + ($19)|0);
 $21 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($17,$20,$2)|0);
 $22 = $$lobit << 1;
 $23 = $22 | 24;
 $24 = (($23) + -1)|0;
 $$alloca_mul6 = $24<<2;
 $25 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($8,$2);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($17,$21,$20,$25,$6,$7,$8);
 __ZNSt3__26localeD2Ev($8);
 $26 = HEAP32[$1>>2]|0;
 HEAP32[$9>>2] = $26;
 $27 = HEAP32[$6>>2]|0;
 $28 = HEAP32[$7>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
 $29 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$25,$27,$28,$2,$3)|0);
 _llvm_stackrestore(($16|0));
 STACKTOP = sp;return ($29|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 20|0;
 $10 = sp + 16|0;
 $11 = $6;
 $12 = $11;
 HEAP32[$12>>2] = 37;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = ((($6)) + 1|0);
 $16 = ((($2)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($15,62400,1,$17);
 $18 = HEAP32[$16>>2]|0;
 $19 = $18 >>> 9;
 $$lobit = $19 & 1;
 $20 = (($$lobit) + 23)|0;
 $21 = (_llvm_stacksave()|0);
 $$alloca_mul = $20;
 $22 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $23 = (__ZNSt3__26__clocEv()|0);
 $24 = $vararg_buffer;
 $25 = $24;
 HEAP32[$25>>2] = $4;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $5;
 $28 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($22,$20,$23,$6,$vararg_buffer)|0);
 $29 = (($22) + ($28)|0);
 $30 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($22,$29,$2)|0);
 $31 = $$lobit << 1;
 $32 = $31 | 44;
 $33 = (($32) + -1)|0;
 $$alloca_mul6 = $33<<2;
 $34 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($9,$2);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($22,$30,$29,$34,$7,$8,$9);
 __ZNSt3__26localeD2Ev($9);
 $35 = HEAP32[$1>>2]|0;
 HEAP32[$10>>2] = $35;
 $36 = HEAP32[$7>>2]|0;
 $37 = HEAP32[$8>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;
 $38 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$34,$36,$37,$2,$3)|0);
 _llvm_stackrestore(($21|0));
 STACKTOP = sp;return ($38|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[62403>>0]|0;HEAP8[$5+1>>0]=HEAP8[62403+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[62403+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[62403+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[62403+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[62403+5>>0]|0;
 $10 = ((($5)) + 1|0);
 $11 = ((($2)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($10,62409,0,$12);
 $13 = HEAP32[$11>>2]|0;
 $14 = $13 >>> 9;
 $$lobit = $14 & 1;
 $15 = $$lobit | 12;
 $16 = (_llvm_stacksave()|0);
 $$alloca_mul = $15;
 $17 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $18 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $19 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($17,$15,$18,$5,$vararg_buffer)|0);
 $20 = (($17) + ($19)|0);
 $21 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($17,$20,$2)|0);
 $22 = $$lobit << 1;
 $23 = $22 | 21;
 $$alloca_mul6 = $23<<2;
 $24 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($8,$2);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($17,$21,$20,$24,$6,$7,$8);
 __ZNSt3__26localeD2Ev($8);
 $25 = HEAP32[$1>>2]|0;
 HEAP32[$9>>2] = $25;
 $26 = HEAP32[$6>>2]|0;
 $27 = HEAP32[$7>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
 $28 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$24,$26,$27,$2,$3)|0);
 _llvm_stackrestore(($16|0));
 STACKTOP = sp;return ($28|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 20|0;
 $10 = sp + 16|0;
 $11 = $6;
 $12 = $11;
 HEAP32[$12>>2] = 37;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = ((($6)) + 1|0);
 $16 = ((($2)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($15,62400,0,$17);
 $18 = HEAP32[$16>>2]|0;
 $19 = $18 >>> 9;
 $$lobit = $19 & 1;
 $20 = $$lobit | 22;
 $21 = (($20) + 1)|0;
 $22 = (_llvm_stacksave()|0);
 $$alloca_mul = $21;
 $23 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $24 = (__ZNSt3__26__clocEv()|0);
 $25 = $vararg_buffer;
 $26 = $25;
 HEAP32[$26>>2] = $4;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $5;
 $29 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($23,$21,$24,$6,$vararg_buffer)|0);
 $30 = (($23) + ($29)|0);
 $31 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($23,$30,$2)|0);
 $32 = $20 << 1;
 $33 = (($32) + -1)|0;
 $$alloca_mul6 = $33<<2;
 $34 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($9,$2);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($23,$31,$30,$34,$7,$8,$9);
 __ZNSt3__26localeD2Ev($9);
 $35 = HEAP32[$1>>2]|0;
 HEAP32[$10>>2] = $35;
 $36 = HEAP32[$7>>2]|0;
 $37 = HEAP32[$8>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;
 $38 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$34,$36,$37,$2,$3)|0);
 _llvm_stackrestore(($22|0));
 STACKTOP = sp;return ($38|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$039$0 = 0, $$sroa$046$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy = sp + 348|0;
 $vararg_buffer9 = sp + 320|0;
 $vararg_buffer5 = sp + 304|0;
 $vararg_buffer2 = sp + 296|0;
 $vararg_buffer = sp + 280|0;
 $5 = sp + 272|0;
 $6 = sp + 240|0;
 $7 = sp + 344|0;
 $8 = sp;
 $9 = sp + 340|0;
 $10 = sp + 336|0;
 $11 = sp + 332|0;
 $12 = sp + 328|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,71442,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 if ($26) {
  $27 = (__ZNSt3__26__clocEv()|0);
  if ($20) {
   $28 = ((($2)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $29;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $4;
   $30 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer5)|0);
   $$1 = $30;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $4;
   $31 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer9)|0);
   $$1 = $31;
  }
  $32 = HEAP32[$7>>2]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$2 = $$1;$$sroa$046$0 = $32;$35 = $32;
  }
 } else {
  $$pre = HEAP32[$7>>2]|0;
  $$2 = $$0;$$sroa$046$0 = 0;$35 = $$pre;
 }
 $34 = (($35) + ($$2)|0);
 $36 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($35,$34,$2)|0);
 $37 = ($35|0)==($6|0);
 do {
  if ($37) {
   $$037 = $8;$$sroa$039$0 = 1;$45 = 0;
  } else {
   $38 = $$2 << 3;
   $39 = (_malloc($38)|0);
   $40 = ($39|0)==(0|0);
   if ($40) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $$037 = $39;$$sroa$039$0 = 0;$45 = $39;
    break;
   }
  }
 } while(0);
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($35,$36,$34,$$037,$9,$10,$11);
 __ZNSt3__26localeD2Ev($11);
 $41 = HEAP32[$1>>2]|0;
 HEAP32[$12>>2] = $41;
 $42 = HEAP32[$9>>2]|0;
 $43 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $44 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$42,$43,$2,$3)|0);
 HEAP32[$1>>2] = $44;
 if (!($$sroa$039$0)) {
  _free($45);
 }
 _free($$sroa$046$0);
 STACKTOP = sp;return ($44|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$039$0 = 0, $$sroa$046$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy = sp + 348|0;
 $vararg_buffer9 = sp + 320|0;
 $vararg_buffer5 = sp + 304|0;
 $vararg_buffer2 = sp + 296|0;
 $vararg_buffer = sp + 280|0;
 $5 = sp + 272|0;
 $6 = sp + 240|0;
 $7 = sp + 344|0;
 $8 = sp;
 $9 = sp + 340|0;
 $10 = sp + 336|0;
 $11 = sp + 332|0;
 $12 = sp + 328|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,62398,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 if ($26) {
  $27 = (__ZNSt3__26__clocEv()|0);
  if ($20) {
   $28 = ((($2)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $29;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $4;
   $30 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer5)|0);
   $$1 = $30;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $4;
   $31 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer9)|0);
   $$1 = $31;
  }
  $32 = HEAP32[$7>>2]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$2 = $$1;$$sroa$046$0 = $32;$35 = $32;
  }
 } else {
  $$pre = HEAP32[$7>>2]|0;
  $$2 = $$0;$$sroa$046$0 = 0;$35 = $$pre;
 }
 $34 = (($35) + ($$2)|0);
 $36 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($35,$34,$2)|0);
 $37 = ($35|0)==($6|0);
 do {
  if ($37) {
   $$037 = $8;$$sroa$039$0 = 1;$45 = 0;
  } else {
   $38 = $$2 << 3;
   $39 = (_malloc($38)|0);
   $40 = ($39|0)==(0|0);
   if ($40) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $$037 = $39;$$sroa$039$0 = 0;$45 = $39;
    break;
   }
  }
 } while(0);
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($35,$36,$34,$$037,$9,$10,$11);
 __ZNSt3__26localeD2Ev($11);
 $41 = HEAP32[$1>>2]|0;
 HEAP32[$12>>2] = $41;
 $42 = HEAP32[$9>>2]|0;
 $43 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $44 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$42,$43,$2,$3)|0);
 HEAP32[$1>>2] = $44;
 if (!($$sroa$039$0)) {
  _free($45);
 }
 _free($$sroa$046$0);
 STACKTOP = sp;return ($44|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy = sp + 196|0;
 $vararg_buffer = sp + 184|0;
 $5 = sp + 200|0;
 $6 = sp + 160|0;
 $7 = sp;
 $8 = sp + 192|0;
 $9 = sp + 188|0;
 ;HEAP8[$5>>0]=HEAP8[62392>>0]|0;HEAP8[$5+1>>0]=HEAP8[62392+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[62392+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[62392+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[62392+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[62392+5>>0]|0;
 $10 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $11 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,20,$10,$5,$vararg_buffer)|0);
 $12 = (($6) + ($11)|0);
 $13 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$12,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($8,$2);
 $14 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,71024)|0);
 __ZNSt3__26localeD2Ev($8);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 (FUNCTION_TABLE_iiiii[$17 & 511]($14,$6,$12,$7)|0);
 $18 = (($7) + ($11<<2)|0);
 $19 = ($13|0)==($12|0);
 $20 = $6;
 $21 = $13;
 $22 = (($21) - ($20))|0;
 $23 = (($7) + ($22<<2)|0);
 $$0 = $19 ? $18 : $23;
 $24 = HEAP32[$1>>2]|0;
 HEAP32[$9>>2] = $24;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
 $25 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$$0,$18,$2,$3)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$038 = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 L1: do {
  if ($8) {
   $$sroa$0$2 = 0;
  } else {
   $9 = $3;
   $10 = $1;
   $11 = (($9) - ($10))|0;
   $12 = $11 >> 2;
   $13 = ((($4)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)>($12|0);
   $16 = (($14) - ($12))|0;
   $$038 = $15 ? $16 : 0;
   $17 = $2;
   $18 = (($17) - ($10))|0;
   $19 = $18 >> 2;
   $20 = ($18|0)>(0);
   if ($20) {
    $21 = HEAP32[$7>>2]|0;
    $22 = ((($21)) + 48|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_iiii[$23 & 1023]($7,$1,$19)|0);
    $25 = ($24|0)==($19|0);
    if (!($25)) {
     HEAP32[$0>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   $26 = ($$038|0)>(0);
   do {
    if ($26) {
     ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($6,$$038,$5);
     $27 = ((($6)) + 8|0);
     $28 = ((($27)) + 3|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = ($29<<24>>24)<(0);
     $31 = HEAP32[$6>>2]|0;
     $32 = $30 ? $31 : $6;
     $33 = HEAP32[$7>>2]|0;
     $34 = ((($33)) + 48|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (FUNCTION_TABLE_iiii[$35 & 1023]($7,$32,$$038)|0);
     $37 = ($36|0)==($$038|0);
     if ($37) {
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
      break;
     } else {
      HEAP32[$0>>2] = 0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
      $$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $38 = (($9) - ($17))|0;
   $39 = $38 >> 2;
   $40 = ($38|0)>(0);
   if ($40) {
    $41 = HEAP32[$7>>2]|0;
    $42 = ((($41)) + 48|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($7,$2,$39)|0);
    $45 = ($44|0)==($39|0);
    if (!($45)) {
     HEAP32[$0>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$13>>2] = 0;
   $$sroa$0$2 = $7;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i110 = 0, $$0101 = 0, $$0102 = 0, $$0104 = 0, $$0106 = 0, $$07$i$i = 0, $$07$i$i109 = 0, $$1 = 0, $$1103 = 0, $$1105 = 0, $$1107 = 0, $$2 = 0, $$2108 = 0, $$3 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,71024)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,71032)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 511]($7,$9);
 HEAP32[$5>>2] = $3;
 $13 = HEAP8[$0>>0]|0;
 switch ($13<<24>>24) {
 case 43: case 45:  {
  $14 = ((($0)) + 1|0);
  $15 = HEAP32[$8>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iii[$17 & 511]($8,$13)|0);
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($19)) + 4|0);
  HEAP32[$5>>2] = $20;
  HEAP32[$19>>2] = $18;
  $$0104 = $14;
  break;
 }
 default: {
  $$0104 = $0;
 }
 }
 $21 = $2;
 $22 = $$0104;
 $23 = (($21) - ($22))|0;
 $24 = ($23|0)>(1);
 L4: do {
  if ($24) {
   $25 = HEAP8[$$0104>>0]|0;
   $26 = ($25<<24>>24)==(48);
   if ($26) {
    $27 = ((($$0104)) + 1|0);
    $28 = HEAP8[$27>>0]|0;
    switch ($28<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 4;
     break L4;
    }
    }
    $29 = HEAP32[$8>>2]|0;
    $30 = ((($29)) + 44|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (FUNCTION_TABLE_iii[$31 & 511]($8,48)|0);
    $33 = HEAP32[$5>>2]|0;
    $34 = ((($33)) + 4|0);
    HEAP32[$5>>2] = $34;
    HEAP32[$33>>2] = $32;
    $35 = ((($$0104)) + 2|0);
    $36 = HEAP8[$27>>0]|0;
    $37 = HEAP32[$8>>2]|0;
    $38 = ((($37)) + 44|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_iii[$39 & 511]($8,$36)|0);
    $41 = HEAP32[$5>>2]|0;
    $42 = ((($41)) + 4|0);
    HEAP32[$5>>2] = $42;
    HEAP32[$41>>2] = $40;
    $$0106 = $35;
    while(1) {
     $43 = ($$0106>>>0)<($2>>>0);
     if (!($43)) {
      $$1105 = $35;$$2108 = $$0106;
      break L4;
     }
     $44 = HEAP8[$$0106>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = (__ZNSt3__26__clocEv()|0);
     $47 = (_isxdigit_l($45,$46)|0);
     $48 = ($47|0)==(0);
     if ($48) {
      $$1105 = $35;$$2108 = $$0106;
      break L4;
     }
     $49 = ((($$0106)) + 1|0);
     $$0106 = $49;
    }
   } else {
    label = 4;
   }
  } else {
   label = 4;
  }
 } while(0);
 L12: do {
  if ((label|0) == 4) {
   $$1107 = $$0104;
   while(1) {
    $50 = ($$1107>>>0)<($2>>>0);
    if (!($50)) {
     $$1105 = $$0104;$$2108 = $$1107;
     break L12;
    }
    $51 = HEAP8[$$1107>>0]|0;
    $52 = $51 << 24 >> 24;
    $53 = (__ZNSt3__26__clocEv()|0);
    $54 = (_isdigit_l($52,$53)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     $$1105 = $$0104;$$2108 = $$1107;
     break L12;
    }
    $56 = ((($$1107)) + 1|0);
    $$1107 = $56;
   }
  }
 } while(0);
 $57 = ((($7)) + 11|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = ($58<<24>>24)<(0);
 $60 = ((($7)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $58&255;
 $63 = $59 ? $61 : $62;
 $64 = ($63|0)==(0);
 L19: do {
  if ($64) {
   $65 = HEAP32[$5>>2]|0;
   $66 = HEAP32[$8>>2]|0;
   $67 = ((($66)) + 48|0);
   $68 = HEAP32[$67>>2]|0;
   (FUNCTION_TABLE_iiiii[$68 & 511]($8,$$1105,$$2108,$65)|0);
   $69 = $$2108;
   $70 = $$1105;
   $71 = (($69) - ($70))|0;
   $72 = HEAP32[$5>>2]|0;
   $73 = (($72) + ($71<<2)|0);
   HEAP32[$5>>2] = $73;
   $$pre$phiZ2D = $8;$154 = $73;
  } else {
   $74 = ($$1105|0)==($$2108|0);
   L22: do {
    if (!($74)) {
     $$0$i$i = $$2108;$$07$i$i = $$1105;
     while(1) {
      $75 = ((($$0$i$i)) + -1|0);
      $76 = ($$07$i$i>>>0)<($75>>>0);
      if (!($76)) {
       break L22;
      }
      $77 = HEAP8[$$07$i$i>>0]|0;
      $78 = HEAP8[$75>>0]|0;
      HEAP8[$$07$i$i>>0] = $78;
      HEAP8[$75>>0] = $77;
      $79 = ((($$07$i$i)) + 1|0);
      $$0$i$i = $75;$$07$i$i = $79;
     }
    }
   } while(0);
   $80 = HEAP32[$9>>2]|0;
   $81 = ((($80)) + 16|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (FUNCTION_TABLE_ii[$82 & 1023]($9)|0);
   $$0 = $$1105;$$0101 = 0;$$0102 = 0;
   while(1) {
    $84 = ($$0>>>0)<($$2108>>>0);
    if (!($84)) {
     break;
    }
    $96 = HEAP8[$57>>0]|0;
    $97 = ($96<<24>>24)<(0);
    $98 = HEAP32[$7>>2]|0;
    $99 = $97 ? $98 : $7;
    $100 = (($99) + ($$0101)|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = ($101<<24>>24)>(0);
    $103 = $101 << 24 >> 24;
    $104 = ($$0102|0)==($103|0);
    $or$cond = $102 & $104;
    if ($or$cond) {
     $105 = HEAP32[$5>>2]|0;
     $106 = ((($105)) + 4|0);
     HEAP32[$5>>2] = $106;
     HEAP32[$105>>2] = $83;
     $107 = HEAP8[$57>>0]|0;
     $108 = ($107<<24>>24)<(0);
     $109 = HEAP32[$60>>2]|0;
     $110 = $107&255;
     $111 = $108 ? $109 : $110;
     $112 = (($111) + -1)|0;
     $113 = ($$0101>>>0)<($112>>>0);
     $114 = $113&1;
     $spec$select = (($$0101) + ($114))|0;
     $$1 = $spec$select;$$1103 = 0;
    } else {
     $$1 = $$0101;$$1103 = $$0102;
    }
    $115 = HEAP8[$$0>>0]|0;
    $116 = HEAP32[$8>>2]|0;
    $117 = ((($116)) + 44|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (FUNCTION_TABLE_iii[$118 & 511]($8,$115)|0);
    $120 = HEAP32[$5>>2]|0;
    $121 = ((($120)) + 4|0);
    HEAP32[$5>>2] = $121;
    HEAP32[$120>>2] = $119;
    $122 = (($$1103) + 1)|0;
    $123 = ((($$0)) + 1|0);
    $$0 = $123;$$0101 = $$1;$$0102 = $122;
   }
   $85 = $$1105;
   $86 = $0;
   $87 = (($85) - ($86))|0;
   $88 = (($3) + ($87<<2)|0);
   $89 = HEAP32[$5>>2]|0;
   $90 = ($88|0)==($89|0);
   if ($90) {
    $$pre$phiZ2D = $8;$154 = $88;
   } else {
    $$0$i$i110 = $89;$$07$i$i109 = $88;
    while(1) {
     $91 = ((($$0$i$i110)) + -4|0);
     $92 = ($$07$i$i109>>>0)<($91>>>0);
     if (!($92)) {
      $$pre$phiZ2D = $8;$154 = $89;
      break L19;
     }
     $93 = HEAP32[$$07$i$i109>>2]|0;
     $94 = HEAP32[$91>>2]|0;
     HEAP32[$$07$i$i109>>2] = $94;
     HEAP32[$91>>2] = $93;
     $95 = ((($$07$i$i109)) + 4|0);
     $$0$i$i110 = $91;$$07$i$i109 = $95;
    }
   }
  }
 } while(0);
 $$2 = $$2108;$155 = $154;
 while(1) {
  $124 = ($$2>>>0)<($2>>>0);
  if (!($124)) {
   $$3 = $$2;$144 = $155;
   break;
  }
  $125 = HEAP8[$$2>>0]|0;
  $126 = ($125<<24>>24)==(46);
  if ($126) {
   label = 32;
   break;
  }
  $134 = HEAP32[$$pre$phiZ2D>>2]|0;
  $135 = ((($134)) + 44|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (FUNCTION_TABLE_iii[$136 & 511]($8,$125)|0);
  $138 = HEAP32[$5>>2]|0;
  $139 = ((($138)) + 4|0);
  HEAP32[$5>>2] = $139;
  HEAP32[$138>>2] = $137;
  $140 = ((($$2)) + 1|0);
  $$2 = $140;$155 = $139;
 }
 if ((label|0) == 32) {
  $127 = HEAP32[$9>>2]|0;
  $128 = ((($127)) + 12|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (FUNCTION_TABLE_ii[$129 & 1023]($9)|0);
  $131 = HEAP32[$5>>2]|0;
  $132 = ((($131)) + 4|0);
  HEAP32[$5>>2] = $132;
  HEAP32[$131>>2] = $130;
  $133 = ((($$2)) + 1|0);
  $$3 = $133;$144 = $132;
 }
 $141 = HEAP32[$8>>2]|0;
 $142 = ((($141)) + 48|0);
 $143 = HEAP32[$142>>2]|0;
 (FUNCTION_TABLE_iiiii[$143 & 511]($8,$$3,$2,$144)|0);
 $145 = $$3;
 $146 = (($21) - ($145))|0;
 $147 = HEAP32[$5>>2]|0;
 $148 = (($147) + ($146<<2)|0);
 HEAP32[$5>>2] = $148;
 $149 = ($1|0)==($2|0);
 $150 = $1;
 $151 = $0;
 $152 = (($150) - ($151))|0;
 $153 = (($3) + ($152<<2)|0);
 $storemerge = $149 ? $148 : $153;
 HEAP32[$4>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i78 = 0, $$07$i$i = 0, $$07$i$i77 = 0, $$072 = 0, $$073 = 0, $$075 = 0, $$1 = 0, $$174 = 0, $$176 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $spec$select = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,71024)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,71032)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 511]($7,$9);
 $13 = ((($7)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14&255;
 $19 = $15 ? $17 : $18;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($21)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  (FUNCTION_TABLE_iiiii[$23 & 511]($8,$0,$2,$3)|0);
  $24 = $2;
  $25 = $0;
  $26 = (($24) - ($25))|0;
  $27 = (($3) + ($26<<2)|0);
  HEAP32[$5>>2] = $27;
  $$pre$phiZ2D = $25;$112 = $27;
 } else {
  HEAP32[$5>>2] = $3;
  $28 = HEAP8[$0>>0]|0;
  switch ($28<<24>>24) {
  case 43: case 45:  {
   $29 = ((($0)) + 1|0);
   $30 = HEAP32[$8>>2]|0;
   $31 = ((($30)) + 44|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (FUNCTION_TABLE_iii[$32 & 511]($8,$28)|0);
   $34 = HEAP32[$5>>2]|0;
   $35 = ((($34)) + 4|0);
   HEAP32[$5>>2] = $35;
   HEAP32[$34>>2] = $33;
   $$075 = $29;
   break;
  }
  default: {
   $$075 = $0;
  }
  }
  $36 = $2;
  $37 = $$075;
  $38 = (($36) - ($37))|0;
  $39 = ($38|0)>(1);
  L7: do {
   if ($39) {
    $40 = HEAP8[$$075>>0]|0;
    $41 = ($40<<24>>24)==(48);
    if ($41) {
     $42 = ((($$075)) + 1|0);
     $43 = HEAP8[$42>>0]|0;
     switch ($43<<24>>24) {
     case 88: case 120:  {
      break;
     }
     default: {
      $$176 = $$075;
      break L7;
     }
     }
     $44 = HEAP32[$8>>2]|0;
     $45 = ((($44)) + 44|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (FUNCTION_TABLE_iii[$46 & 511]($8,48)|0);
     $48 = HEAP32[$5>>2]|0;
     $49 = ((($48)) + 4|0);
     HEAP32[$5>>2] = $49;
     HEAP32[$48>>2] = $47;
     $50 = ((($$075)) + 2|0);
     $51 = HEAP8[$42>>0]|0;
     $52 = HEAP32[$8>>2]|0;
     $53 = ((($52)) + 44|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_iii[$54 & 511]($8,$51)|0);
     $56 = HEAP32[$5>>2]|0;
     $57 = ((($56)) + 4|0);
     HEAP32[$5>>2] = $57;
     HEAP32[$56>>2] = $55;
     $$176 = $50;
    } else {
     $$176 = $$075;
    }
   } else {
    $$176 = $$075;
   }
  } while(0);
  $58 = ($$176|0)==($2|0);
  L12: do {
   if (!($58)) {
    $$0$i$i = $2;$$07$i$i = $$176;
    while(1) {
     $59 = ((($$0$i$i)) + -1|0);
     $60 = ($$07$i$i>>>0)<($59>>>0);
     if (!($60)) {
      break L12;
     }
     $61 = HEAP8[$$07$i$i>>0]|0;
     $62 = HEAP8[$59>>0]|0;
     HEAP8[$$07$i$i>>0] = $62;
     HEAP8[$59>>0] = $61;
     $63 = ((($$07$i$i)) + 1|0);
     $$0$i$i = $59;$$07$i$i = $63;
    }
   }
  } while(0);
  $64 = HEAP32[$9>>2]|0;
  $65 = ((($64)) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (FUNCTION_TABLE_ii[$66 & 1023]($9)|0);
  $$0 = $$176;$$072 = 0;$$073 = 0;
  while(1) {
   $68 = ($$0>>>0)<($2>>>0);
   if (!($68)) {
    break;
   }
   $80 = HEAP8[$13>>0]|0;
   $81 = ($80<<24>>24)<(0);
   $82 = HEAP32[$7>>2]|0;
   $83 = $81 ? $82 : $7;
   $84 = (($83) + ($$072)|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = ($85<<24>>24)!=(0);
   $87 = $85 << 24 >> 24;
   $88 = ($$073|0)==($87|0);
   $or$cond = $86 & $88;
   if ($or$cond) {
    $89 = HEAP32[$5>>2]|0;
    $90 = ((($89)) + 4|0);
    HEAP32[$5>>2] = $90;
    HEAP32[$89>>2] = $67;
    $91 = HEAP8[$13>>0]|0;
    $92 = ($91<<24>>24)<(0);
    $93 = HEAP32[$16>>2]|0;
    $94 = $91&255;
    $95 = $92 ? $93 : $94;
    $96 = (($95) + -1)|0;
    $97 = ($$072>>>0)<($96>>>0);
    $98 = $97&1;
    $spec$select = (($$072) + ($98))|0;
    $$1 = $spec$select;$$174 = 0;
   } else {
    $$1 = $$072;$$174 = $$073;
   }
   $99 = HEAP8[$$0>>0]|0;
   $100 = HEAP32[$8>>2]|0;
   $101 = ((($100)) + 44|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (FUNCTION_TABLE_iii[$102 & 511]($8,$99)|0);
   $104 = HEAP32[$5>>2]|0;
   $105 = ((($104)) + 4|0);
   HEAP32[$5>>2] = $105;
   HEAP32[$104>>2] = $103;
   $106 = (($$174) + 1)|0;
   $107 = ((($$0)) + 1|0);
   $$0 = $107;$$072 = $$1;$$073 = $106;
  }
  $69 = $$176;
  $70 = $0;
  $71 = (($69) - ($70))|0;
  $72 = (($3) + ($71<<2)|0);
  $73 = HEAP32[$5>>2]|0;
  $74 = ($72|0)==($73|0);
  if ($74) {
   $$pre$phiZ2D = $70;$112 = $72;
  } else {
   $$0$i$i78 = $73;$$07$i$i77 = $72;
   while(1) {
    $75 = ((($$0$i$i78)) + -4|0);
    $76 = ($$07$i$i77>>>0)<($75>>>0);
    if (!($76)) {
     break;
    }
    $77 = HEAP32[$$07$i$i77>>2]|0;
    $78 = HEAP32[$75>>2]|0;
    HEAP32[$$07$i$i77>>2] = $78;
    HEAP32[$75>>2] = $77;
    $79 = ((($$07$i$i77)) + 4|0);
    $$0$i$i78 = $75;$$07$i$i77 = $79;
   }
   $$pre = HEAP32[$5>>2]|0;
   $$pre$phiZ2D = $70;$112 = $$pre;
  }
 }
 $108 = ($1|0)==($2|0);
 $109 = $1;
 $110 = (($109) - ($$pre$phiZ2D))|0;
 $111 = (($3) + ($110<<2)|0);
 $storemerge = $108 ? $112 : $111;
 HEAP32[$4>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,62928,(62936))|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
 $13 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $14;
 $15 = ((($12)) + 11|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)<(0);
 $18 = HEAP32[$12>>2]|0;
 $19 = ((($12)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $16&255;
 $22 = $17 ? $18 : $12;
 $23 = $17 ? $20 : $21;
 $24 = (($22) + ($23)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $25 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$22,$24)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,70992)|0);
 __ZNSt3__26localeD2Ev($6);
 $9 = ((($5)) + 24|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,70992)|0);
 __ZNSt3__26localeD2Ev($6);
 $9 = ((($5)) + 16|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,70992)|0);
 __ZNSt3__26localeD2Ev($6);
 $9 = ((($5)) + 20|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$095$0 = 0, $$sroa$095$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$4>>2] = 0;
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 $40 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,70992)|0);
 __ZNSt3__26localeD2Ev($8);
 $41 = $6 << 24 >> 24;
 do {
  switch ($41|0) {
  case 65: case 97:  {
   $42 = ((($5)) + 24|0);
   $43 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = $43;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$42,$1,$$byval_copy,$4,$40);
   label = 26;
   break;
  }
  case 104: case 66: case 98:  {
   $44 = ((($5)) + 16|0);
   $45 = HEAP32[$2>>2]|0;
   HEAP32[$10>>2] = $45;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$44,$1,$$byval_copy1,$4,$40);
   label = 26;
   break;
  }
  case 99:  {
   $46 = ((($0)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (FUNCTION_TABLE_ii[$49 & 1023]($46)|0);
   $51 = HEAP32[$1>>2]|0;
   HEAP32[$11>>2] = $51;
   $52 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $52;
   $53 = ((($50)) + 11|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = ($54<<24>>24)<(0);
   $56 = HEAP32[$50>>2]|0;
   $57 = ((($50)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $54&255;
   $60 = $55 ? $56 : $50;
   $61 = $55 ? $58 : $59;
   $62 = (($60) + ($61)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$11>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$12>>2]|0;
   $63 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy2,$$byval_copy3,$3,$4,$5,$60,$62)|0);
   HEAP32[$1>>2] = $63;
   label = 26;
   break;
  }
  case 101: case 100:  {
   $64 = ((($5)) + 12|0);
   $65 = HEAP32[$2>>2]|0;
   HEAP32[$13>>2] = $65;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$64,$1,$$byval_copy4,$4,$40);
   label = 26;
   break;
  }
  case 68:  {
   $66 = HEAP32[$1>>2]|0;
   HEAP32[$14>>2] = $66;
   $67 = HEAP32[$2>>2]|0;
   HEAP32[$15>>2] = $67;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$14>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$15>>2]|0;
   $68 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy5,$$byval_copy6,$3,$4,$5,62888,(62896))|0);
   HEAP32[$1>>2] = $68;
   label = 26;
   break;
  }
  case 70:  {
   $69 = HEAP32[$1>>2]|0;
   HEAP32[$16>>2] = $69;
   $70 = HEAP32[$2>>2]|0;
   HEAP32[$17>>2] = $70;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$16>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$17>>2]|0;
   $71 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy7,$$byval_copy8,$3,$4,$5,62896,(62904))|0);
   HEAP32[$1>>2] = $71;
   label = 26;
   break;
  }
  case 72:  {
   $72 = ((($5)) + 8|0);
   $73 = HEAP32[$2>>2]|0;
   HEAP32[$18>>2] = $73;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$18>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$72,$1,$$byval_copy9,$4,$40);
   label = 26;
   break;
  }
  case 73:  {
   $74 = ((($5)) + 8|0);
   $75 = HEAP32[$2>>2]|0;
   HEAP32[$19>>2] = $75;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$19>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$74,$1,$$byval_copy10,$4,$40);
   label = 26;
   break;
  }
  case 106:  {
   $76 = ((($5)) + 28|0);
   $77 = HEAP32[$2>>2]|0;
   HEAP32[$20>>2] = $77;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$20>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0,$76,$1,$$byval_copy11,$4,$40);
   label = 26;
   break;
  }
  case 109:  {
   $78 = ((($5)) + 16|0);
   $79 = HEAP32[$2>>2]|0;
   HEAP32[$21>>2] = $79;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$21>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0,$78,$1,$$byval_copy12,$4,$40);
   label = 26;
   break;
  }
  case 77:  {
   $80 = ((($5)) + 4|0);
   $81 = HEAP32[$2>>2]|0;
   HEAP32[$22>>2] = $81;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0,$80,$1,$$byval_copy13,$4,$40);
   label = 26;
   break;
  }
  case 116: case 110:  {
   $82 = HEAP32[$2>>2]|0;
   HEAP32[$23>>2] = $82;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$23>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$$byval_copy14,$4,$40);
   label = 26;
   break;
  }
  case 112:  {
   $83 = ((($5)) + 8|0);
   $84 = HEAP32[$2>>2]|0;
   HEAP32[$24>>2] = $84;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$24>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0,$83,$1,$$byval_copy15,$4,$40);
   label = 26;
   break;
  }
  case 114:  {
   $85 = HEAP32[$1>>2]|0;
   HEAP32[$25>>2] = $85;
   $86 = HEAP32[$2>>2]|0;
   HEAP32[$26>>2] = $86;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$25>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$26>>2]|0;
   $87 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy16,$$byval_copy17,$3,$4,$5,62904,(62915))|0);
   HEAP32[$1>>2] = $87;
   label = 26;
   break;
  }
  case 82:  {
   $88 = HEAP32[$1>>2]|0;
   HEAP32[$27>>2] = $88;
   $89 = HEAP32[$2>>2]|0;
   HEAP32[$28>>2] = $89;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$27>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$28>>2]|0;
   $90 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy18,$$byval_copy19,$3,$4,$5,62915,(62920))|0);
   HEAP32[$1>>2] = $90;
   label = 26;
   break;
  }
  case 83:  {
   $91 = HEAP32[$2>>2]|0;
   HEAP32[$29>>2] = $91;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$29>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0,$5,$1,$$byval_copy20,$4,$40);
   label = 26;
   break;
  }
  case 84:  {
   $92 = HEAP32[$1>>2]|0;
   HEAP32[$30>>2] = $92;
   $93 = HEAP32[$2>>2]|0;
   HEAP32[$31>>2] = $93;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$30>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$31>>2]|0;
   $94 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy21,$$byval_copy22,$3,$4,$5,62920,(62928))|0);
   HEAP32[$1>>2] = $94;
   label = 26;
   break;
  }
  case 119:  {
   $95 = ((($5)) + 24|0);
   $96 = HEAP32[$2>>2]|0;
   HEAP32[$32>>2] = $96;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$95,$1,$$byval_copy23,$4,$40);
   label = 26;
   break;
  }
  case 120:  {
   $97 = HEAP32[$0>>2]|0;
   $98 = ((($97)) + 20|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$1>>2]|0;
   HEAP32[$33>>2] = $100;
   $101 = HEAP32[$2>>2]|0;
   HEAP32[$34>>2] = $101;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$33>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$34>>2]|0;
   $102 = (FUNCTION_TABLE_iiiiiii[$99 & 255]($0,$$byval_copy24,$$byval_copy25,$3,$4,$5)|0);
   $$sroa$095$0 = $102;
   break;
  }
  case 88:  {
   $103 = ((($0)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 24|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (FUNCTION_TABLE_ii[$106 & 1023]($103)|0);
   $108 = HEAP32[$1>>2]|0;
   HEAP32[$35>>2] = $108;
   $109 = HEAP32[$2>>2]|0;
   HEAP32[$36>>2] = $109;
   $110 = ((($107)) + 11|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = ($111<<24>>24)<(0);
   $113 = HEAP32[$107>>2]|0;
   $114 = ((($107)) + 4|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $111&255;
   $117 = $112 ? $113 : $107;
   $118 = $112 ? $115 : $116;
   $119 = (($117) + ($118)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$35>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$36>>2]|0;
   $120 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy27,$3,$4,$5,$117,$119)|0);
   HEAP32[$1>>2] = $120;
   label = 26;
   break;
  }
  case 121:  {
   $121 = ((($5)) + 20|0);
   $122 = HEAP32[$2>>2]|0;
   HEAP32[$37>>2] = $122;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$37>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$121,$1,$$byval_copy28,$4,$40);
   label = 26;
   break;
  }
  case 89:  {
   $123 = ((($5)) + 20|0);
   $124 = HEAP32[$2>>2]|0;
   HEAP32[$38>>2] = $124;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$38>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0,$123,$1,$$byval_copy29,$4,$40);
   label = 26;
   break;
  }
  case 37:  {
   $125 = HEAP32[$2>>2]|0;
   HEAP32[$39>>2] = $125;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$39>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  default: {
   $126 = HEAP32[$4>>2]|0;
   $127 = $126 | 4;
   HEAP32[$4>>2] = $127;
   label = 26;
  }
  }
 } while(0);
 if ((label|0) == 26) {
  $$sroa$095$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$095$0 = $$sroa$095$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$095$0|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68720]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68720)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   __ZNSt3__2L10init_weeksEv();
   HEAP32[17780] = 67696;
  }
 }
 $5 = HEAP32[17780]|0;
 return ($5|0);
}
function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68704]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68704)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   __ZNSt3__2L11init_monthsEv();
   HEAP32[17779] = 67408;
  }
 }
 $5 = HEAP32[17779]|0;
 return ($5|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68688]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68688)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   __ZNSt3__2L10init_am_pmEv();
   HEAP32[17778] = 67120;
  }
 }
 $5 = HEAP32[17778]|0;
 return ($5|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__cEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68680]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68680)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[71100>>2]=0|0;HEAP32[71100+4>>2]=0|0;HEAP32[71100+8>>2]=0|0;
   $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc(62646)|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(71100,62646,$5);
  }
 }
 return (71100|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__rEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68672]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68672)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[71088>>2]=0|0;HEAP32[71088+4>>2]=0|0;HEAP32[71088+8>>2]=0|0;
   $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc(62634)|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(71088,62634,$5);
  }
 }
 return (71088|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__xEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68664]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68664)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[71076>>2]=0|0;HEAP32[71076+4>>2]=0|0;HEAP32[71076+8>>2]=0|0;
   $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc(62625)|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(71076,62625,$5);
  }
 }
 return (71076|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__XEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68656]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68656)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[71064>>2]=0|0;HEAP32[71064+4>>2]=0|0;HEAP32[71064+8>>2]=0|0;
   $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc(62616)|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(71064,62616,$5);
  }
 }
 return (71064|0);
}
function __ZNSt3__2L10init_am_pmEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[68696]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(68696)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 67120;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((67408)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(67120,62667)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67132),62670)|0);
 return;
}
function __ZNSt3__2L11init_monthsEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[68712]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(68712)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 67408;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((67696)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(67408,62673)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67420),62681)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67432),62690)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67444),62696)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67456),62702)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67468),62706)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67480),62711)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67492),62716)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67504),62723)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67516),62733)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67528),62741)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67540),62750)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67552),62759)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67564),62763)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67576),62767)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67588),62771)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67600),62702)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67612),62775)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67624),62779)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67636),62783)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67648),62787)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67660),62791)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67672),62795)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67684),62799)|0);
 return;
}
function __ZNSt3__2L10init_weeksEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[68728]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(68728)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 67696;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((67864)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(67696,62803)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67708),62810)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67720),62817)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67732),62825)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67744),62835)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67756),62844)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67768),62851)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67780),62860)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67792),62864)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67804),62868)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67816),62872)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67828),62876)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67840),62880)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((67852),62884)|0);
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($7)|0);
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = ((($10)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$10,$12,$5,$4,0)|0);
 $14 = $13;
 $15 = $10;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)<(168);
 if ($17) {
  $18 = (($16|0) / 12)&-1;
  $19 = (($18|0) % 7)&-1;
  HEAP32[$1>>2] = $19;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $12;
 $13 = ((($11)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $14 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$13,$5,$4,0)|0);
 $15 = $14;
 $16 = $11;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(288);
 if ($18) {
  $19 = (($17|0) / 12)&-1;
  $20 = (($19|0) % 12)&-1;
  HEAP32[$1>>2] = $20;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i53 = 0, $$0$i$i$i$i68 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i59 = 0, $$0$i$i2$i$i74 = 0, $$0$i$i65 = 0, $$0$pn = 0, $$049 = 0, $$050 = 0, $$3 = 0, $$3$lcssa = 0, $$4 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$pre = 0, $$sroa$047$0$copyload = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 $11 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,70992)|0);
 __ZNSt3__26localeD2Ev($8);
 HEAP32[$4>>2] = 0;
 $12 = ((($11)) + 8|0);
 $$0 = $6;$15 = 0;
 L1: while(1) {
  $13 = ($$0|0)!=($7|0);
  $14 = ($15|0)==(0);
  $or$cond = $13 & $14;
  $16 = HEAP32[$1>>2]|0;
  if (!($or$cond)) {
   $183 = $16;
   break;
  }
  $17 = ($16|0)==(0|0);
  $18 = $16;
  if ($17) {
   $151 = 0;$214 = 1;$71 = $18;
  } else {
   $19 = ((($16)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($16)) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$16>>2]|0;
    $25 = ((($24)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 1023]($16)|0);
    $$0$i$i$i$i = $27;
   } else {
    $28 = HEAP8[$20>>0]|0;
    $29 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($28)|0);
    $$0$i$i$i$i = $29;
   }
   $30 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $31 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$30)|0);
   if ($31) {
    HEAP32[$1>>2] = 0;
    $151 = 0;$214 = 1;$71 = 0;
   } else {
    $151 = $16;$214 = 0;$71 = $18;
   }
  }
  $32 = HEAP32[$2>>2]|0;
  $33 = ($32|0)==(0|0);
  $34 = $32;
  do {
   if ($33) {
    $$ph = $34;
    label = 15;
   } else {
    $35 = ((($32)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($32)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$32>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (FUNCTION_TABLE_ii[$42 & 1023]($32)|0);
     $$0$i$i2$i$i = $43;
    } else {
     $44 = HEAP8[$36>>0]|0;
     $45 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($44)|0);
     $$0$i$i2$i$i = $45;
    }
    $46 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$46)|0);
    if ($47) {
     HEAP32[$2>>2] = 0;
     $$ph = 0;
     label = 15;
     break;
    } else {
     if ($214) {
      $215 = $32;$72 = $34;
      break;
     } else {
      label = 63;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($214) {
    label = 63;
    break;
   } else {
    $215 = 0;$72 = $$ph;
   }
  }
  $48 = HEAP8[$$0>>0]|0;
  $49 = HEAP32[$11>>2]|0;
  $50 = ((($49)) + 36|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($11,$48,0)|0);
  $53 = ($52<<24>>24)==(37);
  L24: do {
   if ($53) {
    $54 = ((($$0)) + 1|0);
    $55 = ($54|0)==($7|0);
    if ($55) {
     label = 63;
     break L1;
    }
    $56 = HEAP8[$54>>0]|0;
    $57 = HEAP32[$11>>2]|0;
    $58 = ((($57)) + 36|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (FUNCTION_TABLE_iiii[$59 & 1023]($11,$56,0)|0);
    switch ($60<<24>>24) {
    case 48: case 69:  {
     $61 = ((($$0)) + 2|0);
     $62 = ($61|0)==($7|0);
     if ($62) {
      label = 63;
      break L1;
     }
     $63 = HEAP8[$61>>0]|0;
     $64 = HEAP32[$11>>2]|0;
     $65 = ((($64)) + 36|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (FUNCTION_TABLE_iiii[$66 & 1023]($11,$63,0)|0);
     $$049 = $60;$$050 = $67;$75 = $54;
     break;
    }
    default: {
     $$049 = 0;$$050 = $60;$75 = $$0;
    }
    }
    $68 = HEAP32[$0>>2]|0;
    $69 = ((($68)) + 36|0);
    $70 = HEAP32[$69>>2]|0;
    HEAP32[$9>>2] = $71;
    HEAP32[$10>>2] = $72;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
    $73 = (FUNCTION_TABLE_iiiiiiiii[$70 & 511]($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$$050,$$049)|0);
    HEAP32[$1>>2] = $73;
    $74 = ((($75)) + 2|0);
    $$4 = $74;
   } else {
    $76 = HEAP8[$$0>>0]|0;
    $77 = ($76<<24>>24)>(-1);
    if ($77) {
     $78 = $76 << 24 >> 24;
     $79 = HEAP32[$12>>2]|0;
     $80 = (($79) + ($78<<1)|0);
     $81 = HEAP16[$80>>1]|0;
     $82 = $81 & 8192;
     $83 = ($82<<16>>16)==(0);
     if (!($83)) {
      $$0$pn = $$0;
      while(1) {
       $$3 = ((($$0$pn)) + 1|0);
       $84 = ($$3|0)==($7|0);
       if ($84) {
        $$3$lcssa = $7;
        break;
       }
       $85 = HEAP8[$$3>>0]|0;
       $86 = ($85<<24>>24)>(-1);
       if (!($86)) {
        $$3$lcssa = $$3;
        break;
       }
       $87 = $85 << 24 >> 24;
       $88 = (($79) + ($87<<1)|0);
       $89 = HEAP16[$88>>1]|0;
       $90 = $89 & 8192;
       $91 = ($90<<16>>16)==(0);
       if ($91) {
        $$3$lcssa = $$3;
        break;
       } else {
        $$0$pn = $$3;
       }
      }
      $108 = $215;$93 = $151;
      while(1) {
       $92 = ($93|0)==(0|0);
       if ($92) {
        $123 = 0;$216 = 1;
       } else {
        $94 = ((($93)) + 12|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = ((($93)) + 16|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ($95|0)==($97|0);
        if ($98) {
         $99 = HEAP32[$93>>2]|0;
         $100 = ((($99)) + 36|0);
         $101 = HEAP32[$100>>2]|0;
         $102 = (FUNCTION_TABLE_ii[$101 & 1023]($93)|0);
         $$0$i$i$i$i53 = $102;
        } else {
         $103 = HEAP8[$95>>0]|0;
         $104 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($103)|0);
         $$0$i$i$i$i53 = $104;
        }
        $105 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $106 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i53,$105)|0);
        if ($106) {
         HEAP32[$1>>2] = 0;
         $123 = 0;$216 = 1;
        } else {
         $123 = $93;$216 = 0;
        }
       }
       $107 = ($108|0)==(0|0);
       do {
        if ($107) {
         label = 42;
        } else {
         $109 = ((($108)) + 12|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = ((($108)) + 16|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = ($110|0)==($112|0);
         if ($113) {
          $114 = HEAP32[$108>>2]|0;
          $115 = ((($114)) + 36|0);
          $116 = HEAP32[$115>>2]|0;
          $117 = (FUNCTION_TABLE_ii[$116 & 1023]($108)|0);
          $$0$i$i2$i$i59 = $117;
         } else {
          $118 = HEAP8[$110>>0]|0;
          $119 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($118)|0);
          $$0$i$i2$i$i59 = $119;
         }
         $120 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $121 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i59,$120)|0);
         if ($121) {
          HEAP32[$2>>2] = 0;
          label = 42;
          break;
         } else {
          if ($216) {
           $217 = $108;
           break;
          } else {
           $$4 = $$3$lcssa;
           break L24;
          }
         }
        }
       } while(0);
       if ((label|0) == 42) {
        label = 0;
        if ($216) {
         $$4 = $$3$lcssa;
         break L24;
        } else {
         $217 = 0;
        }
       }
       $122 = ((($123)) + 12|0);
       $124 = HEAP32[$122>>2]|0;
       $125 = ((($123)) + 16|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = ($124|0)==($126|0);
       if ($127) {
        $128 = HEAP32[$123>>2]|0;
        $129 = ((($128)) + 36|0);
        $130 = HEAP32[$129>>2]|0;
        $131 = (FUNCTION_TABLE_ii[$130 & 1023]($123)|0);
        $$0$i$i = $131;
       } else {
        $132 = HEAP8[$124>>0]|0;
        $133 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($132)|0);
        $$0$i$i = $133;
       }
       $134 = $$0$i$i&255;
       $135 = ($134<<24>>24)>(-1);
       if (!($135)) {
        $$4 = $$3$lcssa;
        break L24;
       }
       $sext = $$0$i$i << 24;
       $136 = $sext >> 24;
       $137 = HEAP32[$12>>2]|0;
       $138 = (($137) + ($136<<1)|0);
       $139 = HEAP16[$138>>1]|0;
       $140 = $139 & 8192;
       $141 = ($140<<16>>16)==(0);
       if ($141) {
        $$4 = $$3$lcssa;
        break L24;
       }
       $142 = HEAP32[$122>>2]|0;
       $143 = HEAP32[$125>>2]|0;
       $144 = ($142|0)==($143|0);
       if ($144) {
        $145 = HEAP32[$123>>2]|0;
        $146 = ((($145)) + 40|0);
        $147 = HEAP32[$146>>2]|0;
        (FUNCTION_TABLE_ii[$147 & 1023]($123)|0);
       } else {
        $148 = ((($142)) + 1|0);
        HEAP32[$122>>2] = $148;
        $149 = HEAP8[$142>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($149)|0);
       }
       $108 = $217;$93 = $123;
      }
     }
    }
    $150 = ((($151)) + 12|0);
    $152 = HEAP32[$150>>2]|0;
    $153 = ((($151)) + 16|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($152|0)==($154|0);
    if ($155) {
     $156 = HEAP32[$151>>2]|0;
     $157 = ((($156)) + 36|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (FUNCTION_TABLE_ii[$158 & 1023]($151)|0);
     $$0$i$i65 = $159;
    } else {
     $160 = HEAP8[$152>>0]|0;
     $161 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($160)|0);
     $$0$i$i65 = $161;
    }
    $162 = $$0$i$i65&255;
    $163 = HEAP32[$11>>2]|0;
    $164 = ((($163)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (FUNCTION_TABLE_iii[$165 & 511]($11,$162)|0);
    $167 = HEAP8[$$0>>0]|0;
    $168 = HEAP32[$11>>2]|0;
    $169 = ((($168)) + 12|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (FUNCTION_TABLE_iii[$170 & 511]($11,$167)|0);
    $172 = ($166<<24>>24)==($171<<24>>24);
    if (!($172)) {
     HEAP32[$4>>2] = 4;
     $$4 = $$0;
     break;
    }
    $173 = HEAP32[$150>>2]|0;
    $174 = HEAP32[$153>>2]|0;
    $175 = ($173|0)==($174|0);
    if ($175) {
     $176 = HEAP32[$151>>2]|0;
     $177 = ((($176)) + 40|0);
     $178 = HEAP32[$177>>2]|0;
     (FUNCTION_TABLE_ii[$178 & 1023]($151)|0);
    } else {
     $179 = ((($173)) + 1|0);
     HEAP32[$150>>2] = $179;
     $180 = HEAP8[$173>>0]|0;
     (__ZNSt3__211char_traitsIcE11to_int_typeEc($180)|0);
    }
    $181 = ((($$0)) + 1|0);
    $$4 = $181;
   }
  } while(0);
  $$pre = HEAP32[$4>>2]|0;
  $$0 = $$4;$15 = $$pre;
 }
 if ((label|0) == 63) {
  HEAP32[$4>>2] = 4;
  $183 = $151;
 }
 $182 = ($183|0)==(0|0);
 if ($182) {
  $$sroa$047$0$copyload = 0;$218 = 1;
 } else {
  $184 = ((($183)) + 12|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = ((($183)) + 16|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = ($185|0)==($187|0);
  if ($188) {
   $189 = HEAP32[$183>>2]|0;
   $190 = ((($189)) + 36|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = (FUNCTION_TABLE_ii[$191 & 1023]($183)|0);
   $$0$i$i$i$i68 = $192;
  } else {
   $193 = HEAP8[$185>>0]|0;
   $194 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($193)|0);
   $$0$i$i$i$i68 = $194;
  }
  $195 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $196 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i68,$195)|0);
  if ($196) {
   HEAP32[$1>>2] = 0;
   $$sroa$047$0$copyload = 0;$218 = 1;
  } else {
   $$sroa$047$0$copyload = $183;$218 = 0;
  }
 }
 $197 = HEAP32[$2>>2]|0;
 $198 = ($197|0)==(0|0);
 do {
  if ($198) {
   label = 76;
  } else {
   $199 = ((($197)) + 12|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ((($197)) + 16|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = ($200|0)==($202|0);
   if ($203) {
    $204 = HEAP32[$197>>2]|0;
    $205 = ((($204)) + 36|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = (FUNCTION_TABLE_ii[$206 & 1023]($197)|0);
    $$0$i$i2$i$i74 = $207;
   } else {
    $208 = HEAP8[$200>>0]|0;
    $209 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($208)|0);
    $$0$i$i2$i$i74 = $209;
   }
   $210 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $211 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i74,$210)|0);
   if ($211) {
    HEAP32[$2>>2] = 0;
    label = 76;
    break;
   } else {
    if ($218) {
     break;
    } else {
     label = 78;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 76) {
  if ($218) {
   label = 78;
  }
 }
 if ((label|0) == 78) {
  $212 = HEAP32[$4>>2]|0;
  $213 = $212 | 2;
  HEAP32[$4>>2] = $213;
 }
 STACKTOP = sp;return ($$sroa$047$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(31);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(24);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(12);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,3)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(366);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(13);
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = (($8) + -1)|0;
  HEAP32[$1>>2] = $13;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(60);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $$pre$i$i$i = 0, $$pre$i$i$i9 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i10 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($4)) + 8|0);
 L1: while(1) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0|0);
  do {
   if ($7) {
    $99 = 1;
   } else {
    $8 = ((($6)) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($6)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($9|0)==($11|0);
    if ($12) {
     $13 = HEAP32[$6>>2]|0;
     $14 = ((($13)) + 36|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_ii[$15 & 1023]($6)|0);
     $$0$i$i$i$i = $16;
    } else {
     $17 = HEAP8[$9>>0]|0;
     $18 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($17)|0);
     $$0$i$i$i$i = $18;
    }
    $19 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $20 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$19)|0);
    if ($20) {
     HEAP32[$1>>2] = 0;
     $99 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $99 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $21 = HEAP32[$2>>2]|0;
  $22 = ($21|0)==(0|0);
  do {
   if ($22) {
    label = 15;
   } else {
    $23 = ((($21)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($21)) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($24|0)==($26|0);
    if ($27) {
     $28 = HEAP32[$21>>2]|0;
     $29 = ((($28)) + 36|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (FUNCTION_TABLE_ii[$30 & 1023]($21)|0);
     $$0$i$i2$i$i = $31;
    } else {
     $32 = HEAP8[$24>>0]|0;
     $33 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($32)|0);
     $$0$i$i2$i$i = $33;
    }
    $34 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $35 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$34)|0);
    if ($35) {
     HEAP32[$2>>2] = 0;
     label = 15;
     break;
    } else {
     if ($99) {
      $100 = $21;
      break;
     } else {
      $83 = $21;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($99) {
    $83 = 0;
    break;
   } else {
    $100 = 0;
   }
  }
  $36 = HEAP32[$1>>2]|0;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($36)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)==($40|0);
  if ($41) {
   $42 = HEAP32[$36>>2]|0;
   $43 = ((($42)) + 36|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_ii[$44 & 1023]($36)|0);
   $$0$i$i = $45;
  } else {
   $46 = HEAP8[$38>>0]|0;
   $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
   $$0$i$i = $47;
  }
  $48 = $$0$i$i&255;
  $49 = ($48<<24>>24)>(-1);
  if (!($49)) {
   $83 = $100;
   break;
  }
  $sext = $$0$i$i << 24;
  $50 = $sext >> 24;
  $51 = HEAP32[$5>>2]|0;
  $52 = (($51) + ($50<<1)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 & 8192;
  $55 = ($54<<16>>16)==(0);
  if ($55) {
   $83 = $100;
   break;
  }
  $56 = HEAP32[$1>>2]|0;
  $57 = ((($56)) + 12|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($56)) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($58|0)==($60|0);
  if ($61) {
   $62 = HEAP32[$56>>2]|0;
   $63 = ((($62)) + 40|0);
   $64 = HEAP32[$63>>2]|0;
   (FUNCTION_TABLE_ii[$64 & 1023]($56)|0);
  } else {
   $65 = ((($58)) + 1|0);
   HEAP32[$57>>2] = $65;
   $66 = HEAP8[$58>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($66)|0);
  }
 }
 $67 = HEAP32[$1>>2]|0;
 $68 = ($67|0)==(0|0);
 do {
  if ($68) {
   $101 = 1;
  } else {
   $69 = ((($67)) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($67)) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($70|0)==($72|0);
   if ($73) {
    $74 = HEAP32[$67>>2]|0;
    $75 = ((($74)) + 36|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (FUNCTION_TABLE_ii[$76 & 1023]($67)|0);
    $$0$i$i$i$i7 = $77;
   } else {
    $78 = HEAP8[$70>>0]|0;
    $79 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($78)|0);
    $$0$i$i$i$i7 = $79;
   }
   $80 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $81 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i7,$80)|0);
   if ($81) {
    HEAP32[$1>>2] = 0;
    $101 = 1;
    break;
   } else {
    $$pre$i$i$i9 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i10 = ($$pre$i$i$i9|0)==(0|0);
    $101 = $phitmp$i$i$i10;
    break;
   }
  }
 } while(0);
 $82 = ($83|0)==(0|0);
 do {
  if ($82) {
   label = 39;
  } else {
   $84 = ((($83)) + 12|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($83)) + 16|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($85|0)==($87|0);
   if ($88) {
    $89 = HEAP32[$83>>2]|0;
    $90 = ((($89)) + 36|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (FUNCTION_TABLE_ii[$91 & 1023]($83)|0);
    $$0$i$i2$i$i13 = $92;
   } else {
    $93 = HEAP8[$85>>0]|0;
    $94 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($93)|0);
    $$0$i$i2$i$i13 = $94;
   }
   $95 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $96 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i13,$95)|0);
   if ($96) {
    HEAP32[$2>>2] = 0;
    label = 39;
    break;
   } else {
    if ($101) {
     break;
    } else {
     label = 41;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 39) {
  if ($101) {
   label = 41;
  }
 }
 if ((label|0) == 41) {
  $97 = HEAP32[$3>>2]|0;
  $98 = $97 | 2;
  HEAP32[$3>>2] = $98;
 }
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond20 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = ((($11)) + 11|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = ((($11)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $28 = $16;
 } else {
  $17 = $13&255;
  $28 = $17;
 }
 $18 = ((($11)) + 12|0);
 $19 = ((($18)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($11)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $26 = $23;
 } else {
  $24 = $20&255;
  $26 = $24;
 }
 $25 = (0 - ($26))|0;
 $27 = ($28|0)==($25|0);
 do {
  if ($27) {
   $29 = HEAP32[$4>>2]|0;
   $30 = $29 | 4;
   HEAP32[$4>>2] = $30;
  } else {
   $31 = HEAP32[$3>>2]|0;
   HEAP32[$6>>2] = $31;
   $32 = ((($11)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
   $33 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$32,$5,$4,0)|0);
   $34 = $33;
   $35 = $11;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)==(0);
   $38 = HEAP32[$1>>2]|0;
   $39 = ($38|0)==(12);
   $or$cond = $39 & $37;
   if ($or$cond) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $40 = ($36|0)==(12);
   $41 = ($38|0)<(12);
   $or$cond20 = $41 & $40;
   if ($or$cond20) {
    $42 = (($38) + 12)|0;
    HEAP32[$1>>2] = $42;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(61);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,1)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(7);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ($8|0)<(69);
  if ($12) {
   $13 = (($8) + 2000)|0;
   $$0 = $13;
  } else {
   $14 = ($8|0)<(100);
   $15 = (($8) + 1900)|0;
   $spec$select = $14 ? $15 : $8;
   $$0 = $spec$select;
  }
  $16 = (($$0) + -1900)|0;
  HEAP32[$1>>2] = $16;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (($8) + -1900)|0;
  HEAP32[$1>>2] = $12;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i14 = 0, $$pre$i$i$i = 0, $$pre$i$i$i10 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $100 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP8[$8>>0]|0;
    $17 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$1>>2] = 0;
    $100 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $100 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$2>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 1023]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP8[$23>>0]|0;
    $32 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$2>>2] = 0;
    label = 14;
    break;
   } else {
    if ($100) {
     $84 = $20;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($100) {
   label = 16;
  } else {
   $84 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$3>>2]|0;
   $36 = $35 | 6;
   HEAP32[$3>>2] = $36;
  }
  else if ((label|0) == 17) {
   $37 = HEAP32[$1>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($37)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$37>>2]|0;
    $44 = ((($43)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 1023]($37)|0);
    $$0$i$i = $46;
   } else {
    $47 = HEAP8[$39>>0]|0;
    $48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
    $$0$i$i = $48;
   }
   $49 = $$0$i$i&255;
   $50 = HEAP32[$4>>2]|0;
   $51 = ((($50)) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($4,$49,0)|0);
   $54 = ($53<<24>>24)==(37);
   if (!($54)) {
    $55 = HEAP32[$3>>2]|0;
    $56 = $55 | 4;
    HEAP32[$3>>2] = $56;
    break;
   }
   $57 = HEAP32[$1>>2]|0;
   $58 = ((($57)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($57)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$57>>2]|0;
    $64 = ((($63)) + 40|0);
    $65 = HEAP32[$64>>2]|0;
    (FUNCTION_TABLE_ii[$65 & 1023]($57)|0);
   } else {
    $66 = ((($59)) + 1|0);
    HEAP32[$58>>2] = $66;
    $67 = HEAP8[$59>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($67)|0);
   }
   $68 = HEAP32[$1>>2]|0;
   $69 = ($68|0)==(0|0);
   do {
    if ($69) {
     $101 = 1;
    } else {
     $70 = ((($68)) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($68)) + 16|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = HEAP32[$68>>2]|0;
      $76 = ((($75)) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (FUNCTION_TABLE_ii[$77 & 1023]($68)|0);
      $$0$i$i$i$i8 = $78;
     } else {
      $79 = HEAP8[$71>>0]|0;
      $80 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($79)|0);
      $$0$i$i$i$i8 = $80;
     }
     $81 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $82 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i8,$81)|0);
     if ($82) {
      HEAP32[$1>>2] = 0;
      $101 = 1;
      break;
     } else {
      $$pre$i$i$i10 = HEAP32[$1>>2]|0;
      $phitmp$i$i$i11 = ($$pre$i$i$i10|0)==(0|0);
      $101 = $phitmp$i$i$i11;
      break;
     }
    }
   } while(0);
   $83 = ($84|0)==(0|0);
   do {
    if ($83) {
     label = 38;
    } else {
     $85 = ((($84)) + 12|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ((($84)) + 16|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ($86|0)==($88|0);
     if ($89) {
      $90 = HEAP32[$84>>2]|0;
      $91 = ((($90)) + 36|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (FUNCTION_TABLE_ii[$92 & 1023]($84)|0);
      $$0$i$i2$i$i14 = $93;
     } else {
      $94 = HEAP8[$86>>0]|0;
      $95 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($94)|0);
      $$0$i$i2$i$i14 = $95;
     }
     $96 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $97 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i14,$96)|0);
     if ($97) {
      HEAP32[$2>>2] = 0;
      label = 38;
      break;
     } else {
      if ($101) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 38) {
    if (!($101)) {
     break;
    }
   }
   $98 = HEAP32[$3>>2]|0;
   $99 = $98 | 2;
   HEAP32[$3>>2] = $99;
  }
 } while(0);
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i$i$i40 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i2$i$i46 = 0, $$0$i$i36 = 0, $$0$in = 0, $$023 = 0, $$023$in = 0, $$2 = 0, $$pre$i$i$i = 0, $$pre$i$i$i27 = 0, $$pre$i$i$i42 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i28 = 0, $phitmp$i$i$i43 = 0, $sext = 0;
 var $sext52 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $180 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP8[$8>>0]|0;
    $17 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$0>>2] = 0;
    $180 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$0>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $180 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 1023]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP8[$23>>0]|0;
    $32 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$1>>2] = 0;
    label = 14;
    break;
   } else {
    if ($180) {
     $181 = $20;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($180) {
   label = 16;
  } else {
   $181 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$2>>2]|0;
   $36 = $35 | 6;
   HEAP32[$2>>2] = $36;
   $$2 = 0;
  }
  else if ((label|0) == 17) {
   $37 = HEAP32[$0>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($37)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$37>>2]|0;
    $44 = ((($43)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 1023]($37)|0);
    $$0$i$i = $46;
   } else {
    $47 = HEAP8[$39>>0]|0;
    $48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
    $$0$i$i = $48;
   }
   $49 = $$0$i$i&255;
   $50 = ($49<<24>>24)>(-1);
   if ($50) {
    $sext = $$0$i$i << 24;
    $51 = $sext >> 24;
    $52 = ((($3)) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + ($51<<1)|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55 & 2048;
    $57 = ($56<<16>>16)==(0);
    if (!($57)) {
     $60 = HEAP32[$3>>2]|0;
     $61 = ((($60)) + 36|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (FUNCTION_TABLE_iiii[$62 & 1023]($3,$49,0)|0);
     $64 = $63 << 24 >> 24;
     $65 = HEAP32[$0>>2]|0;
     $66 = ((($65)) + 12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($65)) + 16|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($67|0)==($69|0);
     if ($70) {
      $71 = HEAP32[$65>>2]|0;
      $72 = ((($71)) + 40|0);
      $73 = HEAP32[$72>>2]|0;
      (FUNCTION_TABLE_ii[$73 & 1023]($65)|0);
     } else {
      $74 = ((($67)) + 1|0);
      HEAP32[$66>>2] = $74;
      $75 = HEAP8[$67>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($75)|0);
     }
     $$0$in = $64;$$023$in = $4;$182 = $181;$92 = $181;
     while(1) {
      $$0 = (($$0$in) + -48)|0;
      $$023 = (($$023$in) + -1)|0;
      $76 = HEAP32[$0>>2]|0;
      $77 = ($76|0)==(0|0);
      do {
       if ($77) {
        $107 = 1;
       } else {
        $78 = ((($76)) + 12|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = ((($76)) + 16|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = ($79|0)==($81|0);
        if ($82) {
         $83 = HEAP32[$76>>2]|0;
         $84 = ((($83)) + 36|0);
         $85 = HEAP32[$84>>2]|0;
         $86 = (FUNCTION_TABLE_ii[$85 & 1023]($76)|0);
         $$0$i$i$i$i25 = $86;
        } else {
         $87 = HEAP8[$79>>0]|0;
         $88 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($87)|0);
         $$0$i$i$i$i25 = $88;
        }
        $89 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $90 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25,$89)|0);
        if ($90) {
         HEAP32[$0>>2] = 0;
         $107 = 1;
         break;
        } else {
         $$pre$i$i$i27 = HEAP32[$0>>2]|0;
         $phitmp$i$i$i28 = ($$pre$i$i$i27|0)==(0|0);
         $107 = $phitmp$i$i$i28;
         break;
        }
       }
      } while(0);
      $91 = ($92|0)==(0|0);
      if ($91) {
       $108 = 1;$164 = $182;$183 = 0;
      } else {
       $93 = ((($92)) + 12|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ((($92)) + 16|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = ($94|0)==($96|0);
       if ($97) {
        $98 = HEAP32[$92>>2]|0;
        $99 = ((($98)) + 36|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = (FUNCTION_TABLE_ii[$100 & 1023]($92)|0);
        $$0$i$i2$i$i31 = $101;
       } else {
        $102 = HEAP8[$94>>0]|0;
        $103 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
        $$0$i$i2$i$i31 = $103;
       }
       $104 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $105 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31,$104)|0);
       if ($105) {
        HEAP32[$1>>2] = 0;
        $108 = 1;$164 = 0;$183 = 0;
       } else {
        $108 = 0;$164 = $182;$183 = $92;
       }
      }
      $106 = $107 ^ $108;
      $109 = ($$023$in|0)>(1);
      $110 = $109 & $106;
      $111 = HEAP32[$0>>2]|0;
      if (!($110)) {
       break;
      }
      $112 = ((($111)) + 12|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ((($111)) + 16|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($113|0)==($115|0);
      if ($116) {
       $117 = HEAP32[$111>>2]|0;
       $118 = ((($117)) + 36|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = (FUNCTION_TABLE_ii[$119 & 1023]($111)|0);
       $$0$i$i36 = $120;
      } else {
       $121 = HEAP8[$113>>0]|0;
       $122 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($121)|0);
       $$0$i$i36 = $122;
      }
      $123 = $$0$i$i36&255;
      $124 = ($123<<24>>24)>(-1);
      if (!($124)) {
       $$2 = $$0;
       break L22;
      }
      $sext52 = $$0$i$i36 << 24;
      $125 = $sext52 >> 24;
      $126 = HEAP32[$52>>2]|0;
      $127 = (($126) + ($125<<1)|0);
      $128 = HEAP16[$127>>1]|0;
      $129 = $128 & 2048;
      $130 = ($129<<16>>16)==(0);
      if ($130) {
       $$2 = $$0;
       break L22;
      }
      $131 = ($$0*10)|0;
      $132 = HEAP32[$3>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (FUNCTION_TABLE_iiii[$134 & 1023]($3,$123,0)|0);
      $136 = $135 << 24 >> 24;
      $137 = (($131) + ($136))|0;
      $138 = HEAP32[$0>>2]|0;
      $139 = ((($138)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($138)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$138>>2]|0;
       $145 = ((($144)) + 40|0);
       $146 = HEAP32[$145>>2]|0;
       (FUNCTION_TABLE_ii[$146 & 1023]($138)|0);
      } else {
       $147 = ((($140)) + 1|0);
       HEAP32[$139>>2] = $147;
       $148 = HEAP8[$140>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($148)|0);
      }
      $$0$in = $137;$$023$in = $$023;$182 = $164;$92 = $183;
     }
     $149 = ($111|0)==(0|0);
     do {
      if ($149) {
       $184 = 1;
      } else {
       $150 = ((($111)) + 12|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ((($111)) + 16|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($151|0)==($153|0);
       if ($154) {
        $155 = HEAP32[$111>>2]|0;
        $156 = ((($155)) + 36|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = (FUNCTION_TABLE_ii[$157 & 1023]($111)|0);
        $$0$i$i$i$i40 = $158;
       } else {
        $159 = HEAP8[$151>>0]|0;
        $160 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($159)|0);
        $$0$i$i$i$i40 = $160;
       }
       $161 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $162 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i40,$161)|0);
       if ($162) {
        HEAP32[$0>>2] = 0;
        $184 = 1;
        break;
       } else {
        $$pre$i$i$i42 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i43 = ($$pre$i$i$i42|0)==(0|0);
        $184 = $phitmp$i$i$i43;
        break;
       }
      }
     } while(0);
     $163 = ($164|0)==(0|0);
     do {
      if ($163) {
       label = 63;
      } else {
       $165 = ((($164)) + 12|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ((($164)) + 16|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($166|0)==($168|0);
       if ($169) {
        $170 = HEAP32[$164>>2]|0;
        $171 = ((($170)) + 36|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (FUNCTION_TABLE_ii[$172 & 1023]($164)|0);
        $$0$i$i2$i$i46 = $173;
       } else {
        $174 = HEAP8[$166>>0]|0;
        $175 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($174)|0);
        $$0$i$i2$i$i46 = $175;
       }
       $176 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $177 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i46,$176)|0);
       if ($177) {
        HEAP32[$1>>2] = 0;
        label = 63;
        break;
       } else {
        if ($184) {
         $$2 = $$0;
         break L22;
        } else {
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 63) {
      if (!($184)) {
       $$2 = $$0;
       break;
      }
     }
     $178 = HEAP32[$2>>2]|0;
     $179 = $178 | 2;
     HEAP32[$2>>2] = $179;
     $$2 = $$0;
     break;
    }
   }
   $58 = HEAP32[$2>>2]|0;
   $59 = $58 | 4;
   HEAP32[$2>>2] = $59;
   $$2 = 0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,49856,(49888))|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
 $13 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $14;
 $15 = ((($12)) + 8|0);
 $16 = ((($15)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)<(0);
 $19 = HEAP32[$12>>2]|0;
 $20 = ((($12)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $17&255;
 $23 = $18 ? $19 : $12;
 $24 = $18 ? $21 : $22;
 $25 = (($23) + ($24<<2)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $26 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$23,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,71024)|0);
 __ZNSt3__26localeD2Ev($6);
 $9 = ((($5)) + 24|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,71024)|0);
 __ZNSt3__26localeD2Ev($6);
 $9 = ((($5)) + 16|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,71024)|0);
 __ZNSt3__26localeD2Ev($6);
 $9 = ((($5)) + 20|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$095$0 = 0, $$sroa$095$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$4>>2] = 0;
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 $40 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,71024)|0);
 __ZNSt3__26localeD2Ev($8);
 $41 = $6 << 24 >> 24;
 do {
  switch ($41|0) {
  case 65: case 97:  {
   $42 = ((($5)) + 24|0);
   $43 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = $43;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$42,$1,$$byval_copy,$4,$40);
   label = 26;
   break;
  }
  case 104: case 66: case 98:  {
   $44 = ((($5)) + 16|0);
   $45 = HEAP32[$2>>2]|0;
   HEAP32[$10>>2] = $45;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$44,$1,$$byval_copy1,$4,$40);
   label = 26;
   break;
  }
  case 99:  {
   $46 = ((($0)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (FUNCTION_TABLE_ii[$49 & 1023]($46)|0);
   $51 = HEAP32[$1>>2]|0;
   HEAP32[$11>>2] = $51;
   $52 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $52;
   $53 = ((($50)) + 8|0);
   $54 = ((($53)) + 3|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = ($55<<24>>24)<(0);
   $57 = HEAP32[$50>>2]|0;
   $58 = ((($50)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $55&255;
   $61 = $56 ? $57 : $50;
   $62 = $56 ? $59 : $60;
   $63 = (($61) + ($62<<2)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$11>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$12>>2]|0;
   $64 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy2,$$byval_copy3,$3,$4,$5,$61,$63)|0);
   HEAP32[$1>>2] = $64;
   label = 26;
   break;
  }
  case 101: case 100:  {
   $65 = ((($5)) + 12|0);
   $66 = HEAP32[$2>>2]|0;
   HEAP32[$13>>2] = $66;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$65,$1,$$byval_copy4,$4,$40);
   label = 26;
   break;
  }
  case 68:  {
   $67 = HEAP32[$1>>2]|0;
   HEAP32[$14>>2] = $67;
   $68 = HEAP32[$2>>2]|0;
   HEAP32[$15>>2] = $68;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$14>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$15>>2]|0;
   $69 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy5,$$byval_copy6,$3,$4,$5,49680,(49712))|0);
   HEAP32[$1>>2] = $69;
   label = 26;
   break;
  }
  case 70:  {
   $70 = HEAP32[$1>>2]|0;
   HEAP32[$16>>2] = $70;
   $71 = HEAP32[$2>>2]|0;
   HEAP32[$17>>2] = $71;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$16>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$17>>2]|0;
   $72 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy7,$$byval_copy8,$3,$4,$5,49712,(49744))|0);
   HEAP32[$1>>2] = $72;
   label = 26;
   break;
  }
  case 72:  {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$2>>2]|0;
   HEAP32[$18>>2] = $74;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$18>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$73,$1,$$byval_copy9,$4,$40);
   label = 26;
   break;
  }
  case 73:  {
   $75 = ((($5)) + 8|0);
   $76 = HEAP32[$2>>2]|0;
   HEAP32[$19>>2] = $76;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$19>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$75,$1,$$byval_copy10,$4,$40);
   label = 26;
   break;
  }
  case 106:  {
   $77 = ((($5)) + 28|0);
   $78 = HEAP32[$2>>2]|0;
   HEAP32[$20>>2] = $78;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$20>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0,$77,$1,$$byval_copy11,$4,$40);
   label = 26;
   break;
  }
  case 109:  {
   $79 = ((($5)) + 16|0);
   $80 = HEAP32[$2>>2]|0;
   HEAP32[$21>>2] = $80;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$21>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0,$79,$1,$$byval_copy12,$4,$40);
   label = 26;
   break;
  }
  case 77:  {
   $81 = ((($5)) + 4|0);
   $82 = HEAP32[$2>>2]|0;
   HEAP32[$22>>2] = $82;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0,$81,$1,$$byval_copy13,$4,$40);
   label = 26;
   break;
  }
  case 116: case 110:  {
   $83 = HEAP32[$2>>2]|0;
   HEAP32[$23>>2] = $83;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$23>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$$byval_copy14,$4,$40);
   label = 26;
   break;
  }
  case 112:  {
   $84 = ((($5)) + 8|0);
   $85 = HEAP32[$2>>2]|0;
   HEAP32[$24>>2] = $85;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$24>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0,$84,$1,$$byval_copy15,$4,$40);
   label = 26;
   break;
  }
  case 114:  {
   $86 = HEAP32[$1>>2]|0;
   HEAP32[$25>>2] = $86;
   $87 = HEAP32[$2>>2]|0;
   HEAP32[$26>>2] = $87;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$25>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$26>>2]|0;
   $88 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy16,$$byval_copy17,$3,$4,$5,49744,(49788))|0);
   HEAP32[$1>>2] = $88;
   label = 26;
   break;
  }
  case 82:  {
   $89 = HEAP32[$1>>2]|0;
   HEAP32[$27>>2] = $89;
   $90 = HEAP32[$2>>2]|0;
   HEAP32[$28>>2] = $90;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$27>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$28>>2]|0;
   $91 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy18,$$byval_copy19,$3,$4,$5,49792,(49812))|0);
   HEAP32[$1>>2] = $91;
   label = 26;
   break;
  }
  case 83:  {
   $92 = HEAP32[$2>>2]|0;
   HEAP32[$29>>2] = $92;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$29>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0,$5,$1,$$byval_copy20,$4,$40);
   label = 26;
   break;
  }
  case 84:  {
   $93 = HEAP32[$1>>2]|0;
   HEAP32[$30>>2] = $93;
   $94 = HEAP32[$2>>2]|0;
   HEAP32[$31>>2] = $94;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$30>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$31>>2]|0;
   $95 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy21,$$byval_copy22,$3,$4,$5,49824,(49856))|0);
   HEAP32[$1>>2] = $95;
   label = 26;
   break;
  }
  case 119:  {
   $96 = ((($5)) + 24|0);
   $97 = HEAP32[$2>>2]|0;
   HEAP32[$32>>2] = $97;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$96,$1,$$byval_copy23,$4,$40);
   label = 26;
   break;
  }
  case 120:  {
   $98 = HEAP32[$0>>2]|0;
   $99 = ((($98)) + 20|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = HEAP32[$1>>2]|0;
   HEAP32[$33>>2] = $101;
   $102 = HEAP32[$2>>2]|0;
   HEAP32[$34>>2] = $102;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$33>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$34>>2]|0;
   $103 = (FUNCTION_TABLE_iiiiiii[$100 & 255]($0,$$byval_copy24,$$byval_copy25,$3,$4,$5)|0);
   $$sroa$095$0 = $103;
   break;
  }
  case 88:  {
   $104 = ((($0)) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($105)) + 24|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (FUNCTION_TABLE_ii[$107 & 1023]($104)|0);
   $109 = HEAP32[$1>>2]|0;
   HEAP32[$35>>2] = $109;
   $110 = HEAP32[$2>>2]|0;
   HEAP32[$36>>2] = $110;
   $111 = ((($108)) + 8|0);
   $112 = ((($111)) + 3|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = ($113<<24>>24)<(0);
   $115 = HEAP32[$108>>2]|0;
   $116 = ((($108)) + 4|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $113&255;
   $119 = $114 ? $115 : $108;
   $120 = $114 ? $117 : $118;
   $121 = (($119) + ($120<<2)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$35>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$36>>2]|0;
   $122 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy27,$3,$4,$5,$119,$121)|0);
   HEAP32[$1>>2] = $122;
   label = 26;
   break;
  }
  case 121:  {
   $123 = ((($5)) + 20|0);
   $124 = HEAP32[$2>>2]|0;
   HEAP32[$37>>2] = $124;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$37>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$123,$1,$$byval_copy28,$4,$40);
   label = 26;
   break;
  }
  case 89:  {
   $125 = ((($5)) + 20|0);
   $126 = HEAP32[$2>>2]|0;
   HEAP32[$38>>2] = $126;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$38>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0,$125,$1,$$byval_copy29,$4,$40);
   label = 26;
   break;
  }
  case 37:  {
   $127 = HEAP32[$2>>2]|0;
   HEAP32[$39>>2] = $127;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$39>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  default: {
   $128 = HEAP32[$4>>2]|0;
   $129 = $128 | 4;
   HEAP32[$4>>2] = $129;
   label = 26;
  }
  }
 } while(0);
 if ((label|0) == 26) {
  $$sroa$095$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$095$0 = $$sroa$095$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$095$0|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68800]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68800)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   __ZNSt3__2L11init_wweeksEv();
   HEAP32[17797] = 68448;
  }
 }
 $5 = HEAP32[17797]|0;
 return ($5|0);
}
function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68784]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68784)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   __ZNSt3__2L12init_wmonthsEv();
   HEAP32[17796] = 68160;
  }
 }
 $5 = HEAP32[17796]|0;
 return ($5|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68768]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68768)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   __ZNSt3__2L11init_wam_pmEv();
   HEAP32[17795] = 67872;
  }
 }
 $5 = HEAP32[17795]|0;
 return ($5|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__cEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68760]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68760)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[71168>>2]=0|0;HEAP32[71168+4>>2]=0|0;HEAP32[71168+8>>2]=0|0;
   $5 = (__ZNSt3__211char_traitsIwE6lengthEPKw(54504)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(71168,54504,$5);
  }
 }
 return (71168|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__rEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68752]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68752)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[71156>>2]=0|0;HEAP32[71156+4>>2]=0|0;HEAP32[71156+8>>2]=0|0;
   $5 = (__ZNSt3__211char_traitsIwE6lengthEPKw(54456)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(71156,54456,$5);
  }
 }
 return (71156|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__xEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68744]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68744)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[71144>>2]=0|0;HEAP32[71144+4>>2]=0|0;HEAP32[71144+8>>2]=0|0;
   $5 = (__ZNSt3__211char_traitsIwE6lengthEPKw(54420)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(71144,54420,$5);
  }
 }
 return (71144|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__XEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[68736]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(68736)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[71132>>2]=0|0;HEAP32[71132+4>>2]=0|0;HEAP32[71132+8>>2]=0|0;
   $5 = (__ZNSt3__211char_traitsIwE6lengthEPKw(54384)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(71132,54384,$5);
  }
 }
 return (71132|0);
}
function __ZNSt3__211char_traitsIwE6lengthEPKw($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_wcslen($0)|0);
 return ($1|0);
}
function __ZNSt3__2L11init_wam_pmEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[68776]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(68776)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 67872;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((68160)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(67872,54588)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((67884),54600)|0);
 return;
}
function __ZNSt3__2L12init_wmonthsEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[68792]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(68792)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 68160;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((68448)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68160,54612)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68172),54644)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68184),54680)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68196),54704)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68208),54728)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68220),54744)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68232),54764)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68244),54784)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68256),54812)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68268),54852)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68280),54884)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68292),54920)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68304),54956)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68316),54972)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68328),54988)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68340),55004)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68352),54728)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68364),55020)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68376),55036)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68388),55052)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68400),55068)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68412),55084)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68424),55100)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68436),55116)|0);
 return;
}
function __ZNSt3__2L11init_wweeksEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[68808]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(68808)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 68448;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((68616)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(68448,55132)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68460),55160)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68472),55188)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68484),55220)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68496),55260)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68508),55296)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68520),55324)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68532),55360)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68544),55376)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68556),55392)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68568),55408)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68580),55424)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68592),55440)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((68604),55456)|0);
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($7)|0);
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = ((($10)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$10,$12,$5,$4,0)|0);
 $14 = $13;
 $15 = $10;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)<(168);
 if ($17) {
  $18 = (($16|0) / 12)&-1;
  $19 = (($18|0) % 7)&-1;
  HEAP32[$1>>2] = $19;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $12;
 $13 = ((($11)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $14 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$13,$5,$4,0)|0);
 $15 = $14;
 $16 = $11;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(288);
 if ($18) {
  $19 = (($17|0) / 12)&-1;
  $20 = (($19|0) % 12)&-1;
  HEAP32[$1>>2] = $20;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i52 = 0, $$0$i$i$i$i66 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i58 = 0, $$0$i$i2$i$i72 = 0, $$0$i$i63 = 0, $$0$pn = 0, $$049 = 0, $$050 = 0, $$3 = 0, $$3$lcssa = 0, $$4 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$pre = 0, $$sroa$047$0$copyload = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 $11 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,71024)|0);
 __ZNSt3__26localeD2Ev($8);
 HEAP32[$4>>2] = 0;
 $$0 = $6;$14 = 0;
 L1: while(1) {
  $12 = ($$0|0)!=($7|0);
  $13 = ($14|0)==(0);
  $or$cond = $12 & $13;
  $15 = HEAP32[$1>>2]|0;
  if (!($or$cond)) {
   $172 = $15;
   break;
  }
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if ($16) {
   $141 = 0;$203 = 1;$70 = $17;
  } else {
   $18 = ((($15)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($15)) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($19|0)==($21|0);
   if ($22) {
    $23 = HEAP32[$15>>2]|0;
    $24 = ((($23)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (FUNCTION_TABLE_ii[$25 & 1023]($15)|0);
    $$0$i$i$i$i = $26;
   } else {
    $27 = HEAP32[$19>>2]|0;
    $28 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($27)|0);
    $$0$i$i$i$i = $28;
   }
   $29 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $30 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$29)|0);
   if ($30) {
    HEAP32[$1>>2] = 0;
    $141 = 0;$203 = 1;$70 = 0;
   } else {
    $141 = $15;$203 = 0;$70 = $17;
   }
  }
  $31 = HEAP32[$2>>2]|0;
  $32 = ($31|0)==(0|0);
  $33 = $31;
  do {
   if ($32) {
    $$ph = $33;
    label = 15;
   } else {
    $34 = ((($31)) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($31)) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($35|0)==($37|0);
    if ($38) {
     $39 = HEAP32[$31>>2]|0;
     $40 = ((($39)) + 36|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (FUNCTION_TABLE_ii[$41 & 1023]($31)|0);
     $$0$i$i2$i$i = $42;
    } else {
     $43 = HEAP32[$35>>2]|0;
     $44 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($43)|0);
     $$0$i$i2$i$i = $44;
    }
    $45 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $46 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$45)|0);
    if ($46) {
     HEAP32[$2>>2] = 0;
     $$ph = 0;
     label = 15;
     break;
    } else {
     if ($203) {
      $204 = $31;$71 = $33;
      break;
     } else {
      label = 60;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($203) {
    label = 60;
    break;
   } else {
    $204 = 0;$71 = $$ph;
   }
  }
  $47 = HEAP32[$$0>>2]|0;
  $48 = HEAP32[$11>>2]|0;
  $49 = ((($48)) + 52|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (FUNCTION_TABLE_iiii[$50 & 1023]($11,$47,0)|0);
  $52 = ($51<<24>>24)==(37);
  L24: do {
   if ($52) {
    $53 = ((($$0)) + 4|0);
    $54 = ($53|0)==($7|0);
    if ($54) {
     label = 60;
     break L1;
    }
    $55 = HEAP32[$53>>2]|0;
    $56 = HEAP32[$11>>2]|0;
    $57 = ((($56)) + 52|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (FUNCTION_TABLE_iiii[$58 & 1023]($11,$55,0)|0);
    switch ($59<<24>>24) {
    case 48: case 69:  {
     $60 = ((($$0)) + 8|0);
     $61 = ($60|0)==($7|0);
     if ($61) {
      label = 60;
      break L1;
     }
     $62 = HEAP32[$60>>2]|0;
     $63 = HEAP32[$11>>2]|0;
     $64 = ((($63)) + 52|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (FUNCTION_TABLE_iiii[$65 & 1023]($11,$62,0)|0);
     $$049 = $59;$$050 = $66;$74 = $53;
     break;
    }
    default: {
     $$049 = 0;$$050 = $59;$74 = $$0;
    }
    }
    $67 = HEAP32[$0>>2]|0;
    $68 = ((($67)) + 36|0);
    $69 = HEAP32[$68>>2]|0;
    HEAP32[$9>>2] = $70;
    HEAP32[$10>>2] = $71;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
    $72 = (FUNCTION_TABLE_iiiiiiiii[$69 & 511]($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$$050,$$049)|0);
    HEAP32[$1>>2] = $72;
    $73 = ((($74)) + 8|0);
    $$4 = $73;
   } else {
    $75 = HEAP32[$$0>>2]|0;
    $76 = HEAP32[$11>>2]|0;
    $77 = ((($76)) + 12|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_iiii[$78 & 1023]($11,8192,$75)|0);
    if (!($79)) {
     $140 = ((($141)) + 12|0);
     $142 = HEAP32[$140>>2]|0;
     $143 = ((($141)) + 16|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($142|0)==($144|0);
     if ($145) {
      $146 = HEAP32[$141>>2]|0;
      $147 = ((($146)) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = (FUNCTION_TABLE_ii[$148 & 1023]($141)|0);
      $$0$i$i63 = $149;
     } else {
      $150 = HEAP32[$142>>2]|0;
      $151 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($150)|0);
      $$0$i$i63 = $151;
     }
     $152 = HEAP32[$11>>2]|0;
     $153 = ((($152)) + 28|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (FUNCTION_TABLE_iii[$154 & 511]($11,$$0$i$i63)|0);
     $156 = HEAP32[$$0>>2]|0;
     $157 = HEAP32[$11>>2]|0;
     $158 = ((($157)) + 28|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = (FUNCTION_TABLE_iii[$159 & 511]($11,$156)|0);
     $161 = ($155|0)==($160|0);
     if (!($161)) {
      HEAP32[$4>>2] = 4;
      $$4 = $$0;
      break;
     }
     $162 = HEAP32[$140>>2]|0;
     $163 = HEAP32[$143>>2]|0;
     $164 = ($162|0)==($163|0);
     if ($164) {
      $165 = HEAP32[$141>>2]|0;
      $166 = ((($165)) + 40|0);
      $167 = HEAP32[$166>>2]|0;
      (FUNCTION_TABLE_ii[$167 & 1023]($141)|0);
     } else {
      $168 = ((($162)) + 4|0);
      HEAP32[$140>>2] = $168;
      $169 = HEAP32[$162>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($169)|0);
     }
     $170 = ((($$0)) + 4|0);
     $$4 = $170;
     break;
    }
    $$0$pn = $$0;
    while(1) {
     $$3 = ((($$0$pn)) + 4|0);
     $80 = ($$3|0)==($7|0);
     if ($80) {
      $$3$lcssa = $7;
      break;
     }
     $81 = HEAP32[$$3>>2]|0;
     $82 = HEAP32[$11>>2]|0;
     $83 = ((($82)) + 12|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (FUNCTION_TABLE_iiii[$84 & 1023]($11,8192,$81)|0);
     if ($85) {
      $$0$pn = $$3;
     } else {
      $$3$lcssa = $$3;
      break;
     }
    }
    $102 = $204;$87 = $141;
    while(1) {
     $86 = ($87|0)==(0|0);
     if ($86) {
      $117 = 0;$205 = 1;
     } else {
      $88 = ((($87)) + 12|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = ((($87)) + 16|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ($89|0)==($91|0);
      if ($92) {
       $93 = HEAP32[$87>>2]|0;
       $94 = ((($93)) + 36|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (FUNCTION_TABLE_ii[$95 & 1023]($87)|0);
       $$0$i$i$i$i52 = $96;
      } else {
       $97 = HEAP32[$89>>2]|0;
       $98 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($97)|0);
       $$0$i$i$i$i52 = $98;
      }
      $99 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $100 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i52,$99)|0);
      if ($100) {
       HEAP32[$1>>2] = 0;
       $117 = 0;$205 = 1;
      } else {
       $117 = $87;$205 = 0;
      }
     }
     $101 = ($102|0)==(0|0);
     do {
      if ($101) {
       label = 40;
      } else {
       $103 = ((($102)) + 12|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ((($102)) + 16|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ($104|0)==($106|0);
       if ($107) {
        $108 = HEAP32[$102>>2]|0;
        $109 = ((($108)) + 36|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = (FUNCTION_TABLE_ii[$110 & 1023]($102)|0);
        $$0$i$i2$i$i58 = $111;
       } else {
        $112 = HEAP32[$104>>2]|0;
        $113 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($112)|0);
        $$0$i$i2$i$i58 = $113;
       }
       $114 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $115 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i58,$114)|0);
       if ($115) {
        HEAP32[$2>>2] = 0;
        label = 40;
        break;
       } else {
        if ($205) {
         $206 = $102;
         break;
        } else {
         $$4 = $$3$lcssa;
         break L24;
        }
       }
      }
     } while(0);
     if ((label|0) == 40) {
      label = 0;
      if ($205) {
       $$4 = $$3$lcssa;
       break L24;
      } else {
       $206 = 0;
      }
     }
     $116 = ((($117)) + 12|0);
     $118 = HEAP32[$116>>2]|0;
     $119 = ((($117)) + 16|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ($118|0)==($120|0);
     if ($121) {
      $122 = HEAP32[$117>>2]|0;
      $123 = ((($122)) + 36|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = (FUNCTION_TABLE_ii[$124 & 1023]($117)|0);
      $$0$i$i = $125;
     } else {
      $126 = HEAP32[$118>>2]|0;
      $127 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($126)|0);
      $$0$i$i = $127;
     }
     $128 = HEAP32[$11>>2]|0;
     $129 = ((($128)) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (FUNCTION_TABLE_iiii[$130 & 1023]($11,8192,$$0$i$i)|0);
     if (!($131)) {
      $$4 = $$3$lcssa;
      break L24;
     }
     $132 = HEAP32[$116>>2]|0;
     $133 = HEAP32[$119>>2]|0;
     $134 = ($132|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$117>>2]|0;
      $136 = ((($135)) + 40|0);
      $137 = HEAP32[$136>>2]|0;
      (FUNCTION_TABLE_ii[$137 & 1023]($117)|0);
     } else {
      $138 = ((($132)) + 4|0);
      HEAP32[$116>>2] = $138;
      $139 = HEAP32[$132>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($139)|0);
     }
     $102 = $206;$87 = $117;
    }
   }
  } while(0);
  $$pre = HEAP32[$4>>2]|0;
  $$0 = $$4;$14 = $$pre;
 }
 if ((label|0) == 60) {
  HEAP32[$4>>2] = 4;
  $172 = $141;
 }
 $171 = ($172|0)==(0|0);
 if ($171) {
  $$sroa$047$0$copyload = 0;$207 = 1;
 } else {
  $173 = ((($172)) + 12|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ((($172)) + 16|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($174|0)==($176|0);
  if ($177) {
   $178 = HEAP32[$172>>2]|0;
   $179 = ((($178)) + 36|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (FUNCTION_TABLE_ii[$180 & 1023]($172)|0);
   $$0$i$i$i$i66 = $181;
  } else {
   $182 = HEAP32[$174>>2]|0;
   $183 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($182)|0);
   $$0$i$i$i$i66 = $183;
  }
  $184 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $185 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i66,$184)|0);
  if ($185) {
   HEAP32[$1>>2] = 0;
   $$sroa$047$0$copyload = 0;$207 = 1;
  } else {
   $$sroa$047$0$copyload = $172;$207 = 0;
  }
 }
 $186 = HEAP32[$2>>2]|0;
 $187 = ($186|0)==(0|0);
 do {
  if ($187) {
   label = 73;
  } else {
   $188 = ((($186)) + 12|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ((($186)) + 16|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = ($189|0)==($191|0);
   if ($192) {
    $193 = HEAP32[$186>>2]|0;
    $194 = ((($193)) + 36|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = (FUNCTION_TABLE_ii[$195 & 1023]($186)|0);
    $$0$i$i2$i$i72 = $196;
   } else {
    $197 = HEAP32[$189>>2]|0;
    $198 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($197)|0);
    $$0$i$i2$i$i72 = $198;
   }
   $199 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $200 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i72,$199)|0);
   if ($200) {
    HEAP32[$2>>2] = 0;
    label = 73;
    break;
   } else {
    if ($207) {
     break;
    } else {
     label = 75;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 73) {
  if ($207) {
   label = 75;
  }
 }
 if ((label|0) == 75) {
  $201 = HEAP32[$4>>2]|0;
  $202 = $201 | 2;
  HEAP32[$4>>2] = $202;
 }
 STACKTOP = sp;return ($$sroa$047$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(31);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(24);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(12);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,3)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(366);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(13);
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = (($8) + -1)|0;
  HEAP32[$1>>2] = $13;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(60);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $$pre$i$i$i = 0, $$pre$i$i$i9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $phitmp$i$i$i = 0;
 var $phitmp$i$i$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  do {
   if ($6) {
    $94 = 1;
   } else {
    $7 = ((($5)) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ((($5)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($8|0)==($10|0);
    if ($11) {
     $12 = HEAP32[$5>>2]|0;
     $13 = ((($12)) + 36|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
     $$0$i$i$i$i = $15;
    } else {
     $16 = HEAP32[$8>>2]|0;
     $17 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($16)|0);
     $$0$i$i$i$i = $17;
    }
    $18 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $19 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$18)|0);
    if ($19) {
     HEAP32[$1>>2] = 0;
     $94 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $94 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  do {
   if ($21) {
    label = 15;
   } else {
    $22 = ((($20)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($20)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23|0)==($25|0);
    if ($26) {
     $27 = HEAP32[$20>>2]|0;
     $28 = ((($27)) + 36|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (FUNCTION_TABLE_ii[$29 & 1023]($20)|0);
     $$0$i$i2$i$i = $30;
    } else {
     $31 = HEAP32[$23>>2]|0;
     $32 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
     $$0$i$i2$i$i = $32;
    }
    $33 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $34 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$33)|0);
    if ($34) {
     HEAP32[$2>>2] = 0;
     label = 15;
     break;
    } else {
     if ($94) {
      $95 = $20;
      break;
     } else {
      $78 = $20;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($94) {
    $78 = 0;
    break;
   } else {
    $95 = 0;
   }
  }
  $35 = HEAP32[$1>>2]|0;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($35)) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37|0)==($39|0);
  if ($40) {
   $41 = HEAP32[$35>>2]|0;
   $42 = ((($41)) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_ii[$43 & 1023]($35)|0);
   $$0$i$i = $44;
  } else {
   $45 = HEAP32[$37>>2]|0;
   $46 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($45)|0);
   $$0$i$i = $46;
  }
  $47 = HEAP32[$4>>2]|0;
  $48 = ((($47)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_iiii[$49 & 1023]($4,8192,$$0$i$i)|0);
  if (!($50)) {
   $78 = $95;
   break;
  }
  $51 = HEAP32[$1>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($51)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53|0)==($55|0);
  if ($56) {
   $57 = HEAP32[$51>>2]|0;
   $58 = ((($57)) + 40|0);
   $59 = HEAP32[$58>>2]|0;
   (FUNCTION_TABLE_ii[$59 & 1023]($51)|0);
  } else {
   $60 = ((($53)) + 4|0);
   HEAP32[$52>>2] = $60;
   $61 = HEAP32[$53>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($61)|0);
  }
 }
 $62 = HEAP32[$1>>2]|0;
 $63 = ($62|0)==(0|0);
 do {
  if ($63) {
   $96 = 1;
  } else {
   $64 = ((($62)) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($62)) + 16|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($65|0)==($67|0);
   if ($68) {
    $69 = HEAP32[$62>>2]|0;
    $70 = ((($69)) + 36|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (FUNCTION_TABLE_ii[$71 & 1023]($62)|0);
    $$0$i$i$i$i7 = $72;
   } else {
    $73 = HEAP32[$65>>2]|0;
    $74 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($73)|0);
    $$0$i$i$i$i7 = $74;
   }
   $75 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $76 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i7,$75)|0);
   if ($76) {
    HEAP32[$1>>2] = 0;
    $96 = 1;
    break;
   } else {
    $$pre$i$i$i9 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i10 = ($$pre$i$i$i9|0)==(0|0);
    $96 = $phitmp$i$i$i10;
    break;
   }
  }
 } while(0);
 $77 = ($78|0)==(0|0);
 do {
  if ($77) {
   label = 38;
  } else {
   $79 = ((($78)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ((($78)) + 16|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($80|0)==($82|0);
   if ($83) {
    $84 = HEAP32[$78>>2]|0;
    $85 = ((($84)) + 36|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (FUNCTION_TABLE_ii[$86 & 1023]($78)|0);
    $$0$i$i2$i$i13 = $87;
   } else {
    $88 = HEAP32[$80>>2]|0;
    $89 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($88)|0);
    $$0$i$i2$i$i13 = $89;
   }
   $90 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $91 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i13,$90)|0);
   if ($91) {
    HEAP32[$2>>2] = 0;
    label = 38;
    break;
   } else {
    if ($96) {
     break;
    } else {
     label = 40;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if ($96) {
   label = 40;
  }
 }
 if ((label|0) == 40) {
  $92 = HEAP32[$3>>2]|0;
  $93 = $92 | 2;
  HEAP32[$3>>2] = $93;
 }
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = ((($11)) + 8|0);
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 if ($15) {
  $16 = ((($11)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $29 = $17;
 } else {
  $18 = $14&255;
  $29 = $18;
 }
 $19 = ((($11)) + 20|0);
 $20 = ((($19)) + 3|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)<(0);
 if ($22) {
  $23 = ((($11)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 } else {
  $25 = $21&255;
  $27 = $25;
 }
 $26 = (0 - ($27))|0;
 $28 = ($29|0)==($26|0);
 do {
  if ($28) {
   $30 = HEAP32[$4>>2]|0;
   $31 = $30 | 4;
   HEAP32[$4>>2] = $31;
  } else {
   $32 = HEAP32[$3>>2]|0;
   HEAP32[$6>>2] = $32;
   $33 = ((($11)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
   $34 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$33,$5,$4,0)|0);
   $35 = $34;
   $36 = $11;
   $37 = (($35) - ($36))|0;
   $38 = ($37|0)==(0);
   $39 = HEAP32[$1>>2]|0;
   $40 = ($39|0)==(12);
   $or$cond = $40 & $38;
   if ($or$cond) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $41 = ($37|0)==(12);
   $42 = ($39|0)<(12);
   $or$cond20 = $42 & $41;
   if ($or$cond20) {
    $43 = (($39) + 12)|0;
    HEAP32[$1>>2] = $43;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(61);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,1)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(7);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ($8|0)<(69);
  if ($12) {
   $13 = (($8) + 2000)|0;
   $$0 = $13;
  } else {
   $14 = ($8|0)<(100);
   $15 = (($8) + 1900)|0;
   $spec$select = $14 ? $15 : $8;
   $$0 = $spec$select;
  }
  $16 = (($$0) + -1900)|0;
  HEAP32[$1>>2] = $16;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (($8) + -1900)|0;
  HEAP32[$1>>2] = $12;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i14 = 0, $$pre$i$i$i = 0, $$pre$i$i$i10 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $99 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP32[$8>>2]|0;
    $17 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$1>>2] = 0;
    $99 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $99 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$2>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 1023]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP32[$23>>2]|0;
    $32 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$2>>2] = 0;
    label = 14;
    break;
   } else {
    if ($99) {
     $83 = $20;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($99) {
   label = 16;
  } else {
   $83 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$3>>2]|0;
   $36 = $35 | 6;
   HEAP32[$3>>2] = $36;
  }
  else if ((label|0) == 17) {
   $37 = HEAP32[$1>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($37)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$37>>2]|0;
    $44 = ((($43)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 1023]($37)|0);
    $$0$i$i = $46;
   } else {
    $47 = HEAP32[$39>>2]|0;
    $48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
    $$0$i$i = $48;
   }
   $49 = HEAP32[$4>>2]|0;
   $50 = ((($49)) + 52|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($4,$$0$i$i,0)|0);
   $53 = ($52<<24>>24)==(37);
   if (!($53)) {
    $54 = HEAP32[$3>>2]|0;
    $55 = $54 | 4;
    HEAP32[$3>>2] = $55;
    break;
   }
   $56 = HEAP32[$1>>2]|0;
   $57 = ((($56)) + 12|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($56)) + 16|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($58|0)==($60|0);
   if ($61) {
    $62 = HEAP32[$56>>2]|0;
    $63 = ((($62)) + 40|0);
    $64 = HEAP32[$63>>2]|0;
    (FUNCTION_TABLE_ii[$64 & 1023]($56)|0);
   } else {
    $65 = ((($58)) + 4|0);
    HEAP32[$57>>2] = $65;
    $66 = HEAP32[$58>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($66)|0);
   }
   $67 = HEAP32[$1>>2]|0;
   $68 = ($67|0)==(0|0);
   do {
    if ($68) {
     $100 = 1;
    } else {
     $69 = ((($67)) + 12|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ((($67)) + 16|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($70|0)==($72|0);
     if ($73) {
      $74 = HEAP32[$67>>2]|0;
      $75 = ((($74)) + 36|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (FUNCTION_TABLE_ii[$76 & 1023]($67)|0);
      $$0$i$i$i$i8 = $77;
     } else {
      $78 = HEAP32[$70>>2]|0;
      $79 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($78)|0);
      $$0$i$i$i$i8 = $79;
     }
     $80 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $81 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i8,$80)|0);
     if ($81) {
      HEAP32[$1>>2] = 0;
      $100 = 1;
      break;
     } else {
      $$pre$i$i$i10 = HEAP32[$1>>2]|0;
      $phitmp$i$i$i11 = ($$pre$i$i$i10|0)==(0|0);
      $100 = $phitmp$i$i$i11;
      break;
     }
    }
   } while(0);
   $82 = ($83|0)==(0|0);
   do {
    if ($82) {
     label = 38;
    } else {
     $84 = ((($83)) + 12|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ((($83)) + 16|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($85|0)==($87|0);
     if ($88) {
      $89 = HEAP32[$83>>2]|0;
      $90 = ((($89)) + 36|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = (FUNCTION_TABLE_ii[$91 & 1023]($83)|0);
      $$0$i$i2$i$i14 = $92;
     } else {
      $93 = HEAP32[$85>>2]|0;
      $94 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($93)|0);
      $$0$i$i2$i$i14 = $94;
     }
     $95 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $96 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i14,$95)|0);
     if ($96) {
      HEAP32[$2>>2] = 0;
      label = 38;
      break;
     } else {
      if ($100) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 38) {
    if (!($100)) {
     break;
    }
   }
   $97 = HEAP32[$3>>2]|0;
   $98 = $97 | 2;
   HEAP32[$3>>2] = $98;
  }
 } while(0);
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i27 = 0, $$0$i$i$i$i41 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i33 = 0, $$0$i$i2$i$i47 = 0, $$0$i$i38 = 0, $$0$in = 0, $$025 = 0, $$025$in = 0, $$2 = 0, $$pre$i$i$i = 0, $$pre$i$i$i29 = 0, $$pre$i$i$i43 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i30 = 0, $phitmp$i$i$i44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $171 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP32[$8>>2]|0;
    $17 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$0>>2] = 0;
    $171 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$0>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $171 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 1023]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP32[$23>>2]|0;
    $32 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$1>>2] = 0;
    label = 14;
    break;
   } else {
    if ($171) {
     $172 = $20;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($171) {
   label = 16;
  } else {
   $172 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$2>>2]|0;
   $36 = $35 | 6;
   HEAP32[$2>>2] = $36;
   $$2 = 0;
  }
  else if ((label|0) == 17) {
   $37 = HEAP32[$0>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($37)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$37>>2]|0;
    $44 = ((($43)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 1023]($37)|0);
    $$0$i$i = $46;
   } else {
    $47 = HEAP32[$39>>2]|0;
    $48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
    $$0$i$i = $48;
   }
   $49 = HEAP32[$3>>2]|0;
   $50 = ((($49)) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($3,2048,$$0$i$i)|0);
   if (!($52)) {
    $53 = HEAP32[$2>>2]|0;
    $54 = $53 | 4;
    HEAP32[$2>>2] = $54;
    $$2 = 0;
    break;
   }
   $55 = HEAP32[$3>>2]|0;
   $56 = ((($55)) + 52|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (FUNCTION_TABLE_iiii[$57 & 1023]($3,$$0$i$i,0)|0);
   $59 = $58 << 24 >> 24;
   $60 = HEAP32[$0>>2]|0;
   $61 = ((($60)) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($60)) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($62|0)==($64|0);
   if ($65) {
    $66 = HEAP32[$60>>2]|0;
    $67 = ((($66)) + 40|0);
    $68 = HEAP32[$67>>2]|0;
    (FUNCTION_TABLE_ii[$68 & 1023]($60)|0);
   } else {
    $69 = ((($62)) + 4|0);
    HEAP32[$61>>2] = $69;
    $70 = HEAP32[$62>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($70)|0);
   }
   $$0$in = $59;$$025$in = $4;$173 = $172;$87 = $172;
   while(1) {
    $$0 = (($$0$in) + -48)|0;
    $$025 = (($$025$in) + -1)|0;
    $71 = HEAP32[$0>>2]|0;
    $72 = ($71|0)==(0|0);
    do {
     if ($72) {
      $102 = 1;
     } else {
      $73 = ((($71)) + 12|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ((($71)) + 16|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($74|0)==($76|0);
      if ($77) {
       $78 = HEAP32[$71>>2]|0;
       $79 = ((($78)) + 36|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (FUNCTION_TABLE_ii[$80 & 1023]($71)|0);
       $$0$i$i$i$i27 = $81;
      } else {
       $82 = HEAP32[$74>>2]|0;
       $83 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($82)|0);
       $$0$i$i$i$i27 = $83;
      }
      $84 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $85 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i27,$84)|0);
      if ($85) {
       HEAP32[$0>>2] = 0;
       $102 = 1;
       break;
      } else {
       $$pre$i$i$i29 = HEAP32[$0>>2]|0;
       $phitmp$i$i$i30 = ($$pre$i$i$i29|0)==(0|0);
       $102 = $phitmp$i$i$i30;
       break;
      }
     }
    } while(0);
    $86 = ($87|0)==(0|0);
    if ($86) {
     $103 = 1;$155 = $173;$174 = 0;
    } else {
     $88 = ((($87)) + 12|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ((($87)) + 16|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($89|0)==($91|0);
     if ($92) {
      $93 = HEAP32[$87>>2]|0;
      $94 = ((($93)) + 36|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (FUNCTION_TABLE_ii[$95 & 1023]($87)|0);
      $$0$i$i2$i$i33 = $96;
     } else {
      $97 = HEAP32[$89>>2]|0;
      $98 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($97)|0);
      $$0$i$i2$i$i33 = $98;
     }
     $99 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $100 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i33,$99)|0);
     if ($100) {
      HEAP32[$1>>2] = 0;
      $103 = 1;$155 = 0;$174 = 0;
     } else {
      $103 = 0;$155 = $173;$174 = $87;
     }
    }
    $101 = $102 ^ $103;
    $104 = ($$025$in|0)>(1);
    $105 = $104 & $101;
    $106 = HEAP32[$0>>2]|0;
    if (!($105)) {
     break;
    }
    $107 = ((($106)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($106)) + 16|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($108|0)==($110|0);
    if ($111) {
     $112 = HEAP32[$106>>2]|0;
     $113 = ((($112)) + 36|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (FUNCTION_TABLE_ii[$114 & 1023]($106)|0);
     $$0$i$i38 = $115;
    } else {
     $116 = HEAP32[$108>>2]|0;
     $117 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($116)|0);
     $$0$i$i38 = $117;
    }
    $118 = HEAP32[$3>>2]|0;
    $119 = ((($118)) + 12|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (FUNCTION_TABLE_iiii[$120 & 1023]($3,2048,$$0$i$i38)|0);
    if (!($121)) {
     $$2 = $$0;
     break L22;
    }
    $122 = ($$0*10)|0;
    $123 = HEAP32[$3>>2]|0;
    $124 = ((($123)) + 52|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (FUNCTION_TABLE_iiii[$125 & 1023]($3,$$0$i$i38,0)|0);
    $127 = $126 << 24 >> 24;
    $128 = (($122) + ($127))|0;
    $129 = HEAP32[$0>>2]|0;
    $130 = ((($129)) + 12|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ((($129)) + 16|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($131|0)==($133|0);
    if ($134) {
     $135 = HEAP32[$129>>2]|0;
     $136 = ((($135)) + 40|0);
     $137 = HEAP32[$136>>2]|0;
     (FUNCTION_TABLE_ii[$137 & 1023]($129)|0);
    } else {
     $138 = ((($131)) + 4|0);
     HEAP32[$130>>2] = $138;
     $139 = HEAP32[$131>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($139)|0);
    }
    $$0$in = $128;$$025$in = $$025;$173 = $155;$87 = $174;
   }
   $140 = ($106|0)==(0|0);
   do {
    if ($140) {
     $175 = 1;
    } else {
     $141 = ((($106)) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ((($106)) + 16|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($142|0)==($144|0);
     if ($145) {
      $146 = HEAP32[$106>>2]|0;
      $147 = ((($146)) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = (FUNCTION_TABLE_ii[$148 & 1023]($106)|0);
      $$0$i$i$i$i41 = $149;
     } else {
      $150 = HEAP32[$142>>2]|0;
      $151 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($150)|0);
      $$0$i$i$i$i41 = $151;
     }
     $152 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $153 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i41,$152)|0);
     if ($153) {
      HEAP32[$0>>2] = 0;
      $175 = 1;
      break;
     } else {
      $$pre$i$i$i43 = HEAP32[$0>>2]|0;
      $phitmp$i$i$i44 = ($$pre$i$i$i43|0)==(0|0);
      $175 = $phitmp$i$i$i44;
      break;
     }
    }
   } while(0);
   $154 = ($155|0)==(0|0);
   do {
    if ($154) {
     label = 61;
    } else {
     $156 = ((($155)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ((($155)) + 16|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($157|0)==($159|0);
     if ($160) {
      $161 = HEAP32[$155>>2]|0;
      $162 = ((($161)) + 36|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = (FUNCTION_TABLE_ii[$163 & 1023]($155)|0);
      $$0$i$i2$i$i47 = $164;
     } else {
      $165 = HEAP32[$157>>2]|0;
      $166 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($165)|0);
      $$0$i$i2$i$i47 = $166;
     }
     $167 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $168 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i47,$167)|0);
     if ($168) {
      HEAP32[$1>>2] = 0;
      label = 61;
      break;
     } else {
      if ($175) {
       $$2 = $$0;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 61) {
    if (!($175)) {
     $$2 = $$0;
     break;
    }
   }
   $169 = HEAP32[$2>>2]|0;
   $170 = $169 | 2;
   HEAP32[$2>>2] = $170;
   $$2 = $$0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = sp + 100|0;
 $9 = ((($7)) + 100|0);
 HEAP32[$8>>2] = $9;
 $10 = ((($0)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($10,$7,$8,$4,$5,$6);
 $11 = HEAP32[$8>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $$0$i$i = $7;$$sroa$04$0$i = $12;
 while(1) {
  $13 = ($$0$i$i|0)==($11|0);
  if ($13) {
   break;
  }
  $14 = HEAP8[$$0$i$i>>0]|0;
  $15 = ($$sroa$04$0$i|0)==(0|0);
  if ($15) {
   $$sroa$04$1$i = 0;
  } else {
   $16 = ((($$sroa$04$0$i)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($$sroa$04$0$i)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$$sroa$04$0$i>>2]|0;
    $22 = ((($21)) + 52|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
    $25 = (FUNCTION_TABLE_iii[$23 & 511]($$sroa$04$0$i,$24)|0);
    $$0$i$i$i$i = $25;
   } else {
    $26 = ((($17)) + 1|0);
    HEAP32[$16>>2] = $26;
    HEAP8[$17>>0] = $14;
    $27 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
    $$0$i$i$i$i = $27;
   }
   $28 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $29 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$28)|0);
   $spec$select$i = $29 ? 0 : $$sroa$04$0$i;
   $$sroa$04$1$i = $spec$select$i;
  }
  $30 = ((($$0$i$i)) + 1|0);
  $$0$i$i = $30;$$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;return ($$sroa$04$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 HEAP8[$6>>0] = 37;
 $7 = ((($6)) + 1|0);
 HEAP8[$7>>0] = $4;
 $8 = ((($6)) + 2|0);
 HEAP8[$8>>0] = $5;
 $9 = ((($6)) + 3|0);
 HEAP8[$9>>0] = 0;
 $10 = ($5<<24>>24)==(0);
 if (!($10)) {
  HEAP8[$7>>0] = $5;
  HEAP8[$8>>0] = $4;
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = (__ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($1,$11)|0);
 $13 = HEAP32[$0>>2]|0;
 $14 = (_strftime_l(($1|0),($12|0),($6|0),($3|0),($13|0))|0);
 $15 = (($1) + ($14)|0);
 HEAP32[$2>>2] = $15;
 STACKTOP = sp;return;
}
function __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = (($2) - ($3))|0;
 return ($4|0);
}
function __ZNSt3__210__time_putD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__26__clocEv()|0);
 $3 = ($1|0)==($2|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  _freelocale($4);
 }
 return;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $7 = sp;
 $8 = sp + 400|0;
 $9 = ((($7)) + 400|0);
 HEAP32[$8>>2] = $9;
 $10 = ((($0)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($10,$7,$8,$4,$5,$6);
 $11 = HEAP32[$8>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $$0$i$i = $7;$$sroa$04$0$i = $12;
 while(1) {
  $13 = ($$0$i$i|0)==($11|0);
  if ($13) {
   break;
  }
  $14 = HEAP32[$$0$i$i>>2]|0;
  $15 = ($$sroa$04$0$i|0)==(0|0);
  if ($15) {
   $$sroa$04$1$i = 0;
  } else {
   $16 = ((($$sroa$04$0$i)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($$sroa$04$0$i)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$$sroa$04$0$i>>2]|0;
    $22 = ((($21)) + 52|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
    $25 = (FUNCTION_TABLE_iii[$23 & 511]($$sroa$04$0$i,$24)|0);
    $$0$i$i$i$i = $25;
   } else {
    $26 = ((($17)) + 4|0);
    HEAP32[$16>>2] = $26;
    HEAP32[$17>>2] = $14;
    $27 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
    $$0$i$i$i$i = $27;
   }
   $28 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $29 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$28)|0);
   $spec$select$i = $29 ? 0 : $$sroa$04$0$i;
   $$sroa$04$1$i = $spec$select$i;
  }
  $30 = ((($$0$i$i)) + 4|0);
  $$0$i$i = $30;$$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;return ($$sroa$04$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = sp;
 $7 = sp + 116|0;
 $8 = sp + 104|0;
 $9 = sp + 112|0;
 $10 = ((($6)) + 100|0);
 HEAP32[$7>>2] = $10;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0,$6,$7,$3,$4,$5);
 $11 = $8;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = $6;
 $15 = HEAP32[$2>>2]|0;
 $16 = (__ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($1,$15)|0);
 $17 = HEAP32[$0>>2]|0;
 $18 = (___uselocale($17)|0);
 $19 = (_mbsrtowcs($1,$9,$16,$8)|0);
 $20 = ($18|0)==(0|0);
 if (!($20)) {
  (___uselocale($18)|0);
 }
 $21 = ($19|0)==(-1);
 if ($21) {
  __ZNSt3__221__throw_runtime_errorEPKc(0);
  // unreachable;
 } else {
  $22 = (($1) + ($19<<2)|0);
  HEAP32[$2>>2] = $22;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 return ($5|0);
}
function __ZNSt3__221__throw_runtime_errorEPKc($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__210moneypunctIcLb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIcLb0EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIcLb1EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIcLb1EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIwLb0EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb1EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIwLb1EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$025 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $$sroa$028$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy = sp + 240|0;
 $vararg_buffer = sp + 216|0;
 $7 = sp + 112|0;
 $8 = sp + 232|0;
 $9 = sp + 228|0;
 $10 = sp + 224|0;
 $11 = sp + 254|0;
 $12 = sp + 220|0;
 $13 = sp + 244|0;
 $14 = sp;
 $15 = $7;
 HEAP32[$8>>2] = $15;
 $16 = ((($8)) + 4|0);
 HEAP32[$16>>2] = (518);
 $17 = ((($7)) + 100|0);
 __ZNKSt3__28ios_base6getlocEv($10,$4);
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($10,70992)|0);
 HEAP8[$11>>0] = 0;
 $19 = HEAP32[$2>>2]|0;
 HEAP32[$12>>2] = $19;
 $20 = ((($4)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $22 = (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($1,$$byval_copy,$3,$10,$21,$5,$11,$18,$8,$9,$17)|0);
 if ($22) {
  $23 = HEAP32[$18>>2]|0;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  (FUNCTION_TABLE_iiiii[$25 & 511]($18,63453,(63463),$13)|0);
  $26 = HEAP32[$9>>2]|0;
  $27 = HEAP32[$8>>2]|0;
  $28 = (($26) - ($27))|0;
  $29 = ($28|0)>(98);
  $30 = $27;
  $31 = $26;
  if ($29) {
   $32 = (($28) + 2)|0;
   $33 = (_malloc($32)|0);
   $34 = $33;
   $35 = ($33|0)==(0|0);
   if ($35) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $$025 = $33;$$sroa$028$0 = $34;
   }
  } else {
   $$025 = $14;$$sroa$028$0 = 0;
  }
  $36 = HEAP8[$11>>0]|0;
  $37 = ($36<<24>>24)==(0);
  if ($37) {
   $$1 = $$025;
  } else {
   $38 = ((($$025)) + 1|0);
   HEAP8[$$025>>0] = 45;
   $$1 = $38;
  }
  $39 = ((($13)) + 10|0);
  $40 = $13;
  $$0 = $30;$$2 = $$1;$42 = $31;
  while(1) {
   $41 = ($$0>>>0)<($42>>>0);
   if (!($41)) {
    break;
   }
   $45 = HEAP8[$$0>>0]|0;
   $$0$i = $13;
   while(1) {
    $46 = ($$0$i|0)==($39|0);
    if ($46) {
     $$0$lcssa$i = $39;
     break;
    }
    $47 = HEAP8[$$0$i>>0]|0;
    $48 = ($47<<24>>24)==($45<<24>>24);
    if ($48) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $49 = ((($$0$i)) + 1|0);
    $$0$i = $49;
   }
   $50 = $$0$lcssa$i;
   $51 = (($50) - ($40))|0;
   $52 = (63453 + ($51)|0);
   $53 = HEAP8[$52>>0]|0;
   HEAP8[$$2>>0] = $53;
   $54 = ((($$0)) + 1|0);
   $55 = ((($$2)) + 1|0);
   $$pre = HEAP32[$9>>2]|0;
   $$0 = $54;$$2 = $55;$42 = $$pre;
  }
  HEAP8[$$2>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $6;
  $43 = (_sscanf($14,63464,$vararg_buffer)|0);
  $44 = ($43|0)==(1);
  if (!($44)) {
   __ZNSt3__221__throw_runtime_errorEPKc(0);
   // unreachable;
  }
  $56 = ($$sroa$028$0|0)==(0);
  if (!($56)) {
   $57 = $$sroa$028$0;
   _free($57);
  }
 }
 $58 = HEAP32[$1>>2]|0;
 $59 = ($58|0)==(0|0);
 do {
  if ($59) {
   $94 = 1;
  } else {
   $60 = ((($58)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($58)) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = HEAP32[$58>>2]|0;
    $66 = ((($65)) + 36|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (FUNCTION_TABLE_ii[$67 & 1023]($58)|0);
    $$0$i$i$i$i = $68;
   } else {
    $69 = HEAP8[$61>>0]|0;
    $70 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($69)|0);
    $$0$i$i$i$i = $70;
   }
   $71 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $72 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$71)|0);
   if ($72) {
    HEAP32[$1>>2] = 0;
    $94 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $94 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $73 = HEAP32[$2>>2]|0;
 $74 = ($73|0)==(0|0);
 do {
  if ($74) {
   label = 32;
  } else {
   $75 = ((($73)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($73)) + 16|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($76|0)==($78|0);
   if ($79) {
    $80 = HEAP32[$73>>2]|0;
    $81 = ((($80)) + 36|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (FUNCTION_TABLE_ii[$82 & 1023]($73)|0);
    $$0$i$i2$i$i = $83;
   } else {
    $84 = HEAP8[$76>>0]|0;
    $85 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($84)|0);
    $$0$i$i2$i$i = $85;
   }
   $86 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $87 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$86)|0);
   if ($87) {
    HEAP32[$2>>2] = 0;
    label = 32;
    break;
   } else {
    if ($94) {
     break;
    } else {
     label = 34;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($94) {
   label = 34;
  }
 }
 if ((label|0) == 34) {
  $88 = HEAP32[$5>>2]|0;
  $89 = $88 | 2;
  HEAP32[$5>>2] = $89;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__26localeD2Ev($10);
 $90 = HEAP32[$8>>2]|0;
 HEAP32[$8>>2] = 0;
 $91 = ($90|0)==(0|0);
 if (!($91)) {
  $92 = ((($8)) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  FUNCTION_TABLE_vi[$93 & 1023]($90);
 }
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp + 120|0;
 $7 = sp + 126|0;
 $8 = sp + 125|0;
 $9 = sp;
 $10 = sp + 112|0;
 $11 = sp + 108|0;
 $12 = sp + 104|0;
 $13 = sp + 124|0;
 $14 = sp + 100|0;
 $15 = $9;
 HEAP32[$10>>2] = $15;
 $16 = ((($10)) + 4|0);
 HEAP32[$16>>2] = (518);
 $17 = ((($9)) + 100|0);
 __ZNKSt3__28ios_base6getlocEv($12,$4);
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($12,70992)|0);
 HEAP8[$13>>0] = 0;
 $19 = HEAP32[$2>>2]|0;
 HEAP32[$14>>2] = $19;
 $20 = ((($4)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$14>>2]|0;
 $22 = (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($1,$$byval_copy,$3,$12,$21,$5,$13,$18,$10,$11,$17)|0);
 $23 = $19;
 if ($22) {
  $24 = ((($6)) + 11|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)<(0);
  if ($26) {
   $27 = HEAP32[$6>>2]|0;
   HEAP8[$7>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($27,$7);
   $28 = ((($6)) + 4|0);
   HEAP32[$28>>2] = 0;
  } else {
   HEAP8[$8>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$8);
   HEAP8[$24>>0] = 0;
  }
  $29 = HEAP8[$13>>0]|0;
  $30 = ($29<<24>>24)==(0);
  if (!($30)) {
   $31 = HEAP32[$18>>2]|0;
   $32 = ((($31)) + 28|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (FUNCTION_TABLE_iii[$33 & 511]($18,45)|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($6,$34);
  }
  $35 = HEAP32[$18>>2]|0;
  $36 = ((($35)) + 28|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iii[$37 & 511]($18,48)|0);
  $39 = HEAP32[$10>>2]|0;
  $40 = HEAP32[$11>>2]|0;
  $41 = ((($40)) + -1|0);
  $$0 = $39;
  while(1) {
   $42 = ($$0>>>0)<($41>>>0);
   if (!($42)) {
    break;
   }
   $43 = HEAP8[$$0>>0]|0;
   $44 = ($43<<24>>24)==($38<<24>>24);
   if (!($44)) {
    break;
   }
   $45 = ((($$0)) + 1|0);
   $$0 = $45;
  }
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($6,$$0,$40)|0);
 }
 $46 = HEAP32[$1>>2]|0;
 $47 = ($46|0)==(0|0);
 do {
  if ($47) {
   $82 = 1;
  } else {
   $48 = ((($46)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($46)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($49|0)==($51|0);
   if ($52) {
    $53 = HEAP32[$46>>2]|0;
    $54 = ((($53)) + 36|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (FUNCTION_TABLE_ii[$55 & 1023]($46)|0);
    $$0$i$i$i$i = $56;
   } else {
    $57 = HEAP8[$49>>0]|0;
    $58 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($57)|0);
    $$0$i$i$i$i = $58;
   }
   $59 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $60 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$59)|0);
   if ($60) {
    HEAP32[$1>>2] = 0;
    $82 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $82 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $61 = ($19|0)==(0);
 do {
  if ($61) {
   label = 25;
  } else {
   $62 = ((($23)) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($23)) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($63|0)==($65|0);
   if ($66) {
    $67 = $19;
    $68 = HEAP32[$67>>2]|0;
    $69 = ((($68)) + 36|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (FUNCTION_TABLE_ii[$70 & 1023]($23)|0);
    $$0$i$i2$i$i = $71;
   } else {
    $72 = HEAP8[$63>>0]|0;
    $73 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($72)|0);
    $$0$i$i2$i$i = $73;
   }
   $74 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $75 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$74)|0);
   if ($75) {
    HEAP32[$2>>2] = 0;
    label = 25;
    break;
   } else {
    if ($82) {
     break;
    } else {
     label = 27;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 25) {
  if ($82) {
   label = 27;
  }
 }
 if ((label|0) == 27) {
  $76 = HEAP32[$5>>2]|0;
  $77 = $76 | 2;
  HEAP32[$5>>2] = $77;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__26localeD2Ev($12);
 $78 = HEAP32[$10>>2]|0;
 HEAP32[$10>>2] = 0;
 $79 = ($78|0)==(0|0);
 if (!($79)) {
  $80 = ((($10)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  FUNCTION_TABLE_vi[$81 & 1023]($78);
 }
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i161 = 0, $$0$i$i$i$i205 = 0, $$0$i$i$i$i221 = 0, $$0$i$i$i$i237 = 0, $$0$i$i$i$i254 = 0, $$0$i$i$i$i269 = 0, $$0$i$i147 = 0, $$0$i$i150 = 0, $$0$i$i153 = 0, $$0$i$i156 = 0, $$0$i$i159 = 0, $$0$i$i160 = 0, $$0$i$i173 = 0, $$0$i$i176 = 0, $$0$i$i182 = 0, $$0$i$i189 = 0, $$0$i$i194 = 0;
 var $$0$i$i2$i$i = 0, $$0$i$i2$i$i167 = 0, $$0$i$i2$i$i211 = 0, $$0$i$i2$i$i227 = 0, $$0$i$i2$i$i243 = 0, $$0$i$i2$i$i260 = 0, $$0$i$i2$i$i275 = 0, $$0$i$i202 = 0, $$0$i$i233 = 0, $$0$i$i249 = 0, $$0$i$i266 = 0, $$0$i$i281 = 0, $$0$i$i284 = 0, $$0124 = 0, $$0129 = 0, $$0131 = 0, $$10 = 0, $$1130 = 0, $$2126$ph = 0, $$pre = 0;
 var $$pre$i$i$i = 0, $$pre$i$i$i163 = 0, $$pre$i$i$i207 = 0, $$pre$i$i$i223 = 0, $$pre$i$i$i239 = 0, $$pre$i$i$i256 = 0, $$pre$i$i$i271 = 0, $$pre$phiZ2D = 0, $$pre361 = 0, $$pre362 = 0, $$pre363 = 0, $$pre364 = 0, $$sroa$0293$0$ptr = 0, $$sroa$0313$0 = 0, $$sroa$0313$1 = 0, $$sroa$0313$1$ptr = 0, $$sroa$08$0$ptr$i = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $cond146 = 0, $exitcond$i$i = 0, $exitcond$i$i148 = 0, $exitcond$i$i151 = 0, $exitcond$i$i154 = 0, $exitcond$i$i157 = 0, $or$cond = 0;
 var $or$cond13 = 0, $or$cond143 = 0, $or$cond15 = 0, $or$cond371 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i164 = 0, $phitmp$i$i$i208 = 0, $phitmp$i$i$i224 = 0, $phitmp$i$i$i240 = 0, $phitmp$i$i$i257 = 0, $phitmp$i$i$i272 = 0, $sext = 0, $sext345 = 0, $sext346 = 0, $sext347 = 0, $spec$select = 0, $spec$select139 = 0, $spec$select140 = 0, $spec$select141 = 0, $switch = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $11 = sp + 488|0;
 $12 = sp;
 $13 = sp + 480|0;
 $14 = sp + 472|0;
 $15 = sp + 468|0;
 $16 = sp + 496|0;
 $17 = sp + 493|0;
 $18 = sp + 492|0;
 $19 = sp + 456|0;
 $20 = sp + 444|0;
 $21 = sp + 432|0;
 $22 = sp + 420|0;
 $23 = sp + 408|0;
 $24 = sp + 404|0;
 $25 = sp + 400|0;
 HEAP32[$11>>2] = $10;
 $26 = $12;
 HEAP32[$13>>2] = $26;
 $27 = ((($13)) + 4|0);
 HEAP32[$27>>2] = (518);
 HEAP32[$14>>2] = $12;
 $28 = ((($12)) + 400|0);
 HEAP32[$15>>2] = $28;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $29 = (($19) + ($$0$i$i<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = (($$0$i$i) + 1)|0;
  $$0$i$i = $30;
 }
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
 $$0$i$i147 = 0;
 while(1) {
  $exitcond$i$i148 = ($$0$i$i147|0)==(3);
  if ($exitcond$i$i148) {
   break;
  }
  $31 = (($20) + ($$0$i$i147<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (($$0$i$i147) + 1)|0;
  $$0$i$i147 = $32;
 }
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $$0$i$i150 = 0;
 while(1) {
  $exitcond$i$i151 = ($$0$i$i150|0)==(3);
  if ($exitcond$i$i151) {
   break;
  }
  $33 = (($21) + ($$0$i$i150<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$0$i$i150) + 1)|0;
  $$0$i$i150 = $34;
 }
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
 $$0$i$i153 = 0;
 while(1) {
  $exitcond$i$i154 = ($$0$i$i153|0)==(3);
  if ($exitcond$i$i154) {
   break;
  }
  $35 = (($22) + ($$0$i$i153<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i153) + 1)|0;
  $$0$i$i153 = $36;
 }
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
 $$0$i$i156 = 0;
 while(1) {
  $exitcond$i$i157 = ($$0$i$i156|0)==(3);
  if ($exitcond$i$i157) {
   break;
  }
  $37 = (($23) + ($$0$i$i156<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i156) + 1)|0;
  $$0$i$i156 = $38;
 }
 __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($2,$3,$16,$17,$18,$19,$20,$21,$22,$24);
 $39 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = $39;
 $40 = ((($7)) + 8|0);
 $41 = ((($21)) + 11|0);
 $42 = ((($21)) + 4|0);
 $43 = ((($22)) + 11|0);
 $44 = ((($22)) + 4|0);
 $45 = ((($19)) + 11|0);
 $46 = ((($19)) + 4|0);
 $47 = $4 & 512;
 $48 = ($47|0)!=(0);
 $49 = ((($20)) + 11|0);
 $50 = ((($16)) + 3|0);
 $51 = ((($20)) + 4|0);
 $52 = ((($23)) + 11|0);
 $53 = ((($23)) + 4|0);
 $$0129 = 0;$$0131 = 0;
 L21: while(1) {
  $54 = ($$0131>>>0)<(4);
  if (!($54)) {
   label = 243;
   break;
  }
  $55 = HEAP32[$0>>2]|0;
  $56 = ($55|0)==(0|0);
  do {
   if ($56) {
    $787 = 1;
   } else {
    $57 = ((($55)) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ((($55)) + 16|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($58|0)==($60|0);
    if ($61) {
     $62 = HEAP32[$55>>2]|0;
     $63 = ((($62)) + 36|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (FUNCTION_TABLE_ii[$64 & 1023]($55)|0);
     $$0$i$i$i$i = $65;
    } else {
     $66 = HEAP8[$58>>0]|0;
     $67 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($66)|0);
     $$0$i$i$i$i = $67;
    }
    $68 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $69 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$68)|0);
    if ($69) {
     HEAP32[$0>>2] = 0;
     $787 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$0>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $787 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $70 = HEAP32[$1>>2]|0;
  $71 = ($70|0)==(0|0);
  do {
   if ($71) {
    label = 31;
   } else {
    $72 = ((($70)) + 12|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ((($70)) + 16|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($73|0)==($75|0);
    if ($76) {
     $77 = HEAP32[$70>>2]|0;
     $78 = ((($77)) + 36|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (FUNCTION_TABLE_ii[$79 & 1023]($70)|0);
     $$0$i$i2$i$i = $80;
    } else {
     $81 = HEAP8[$73>>0]|0;
     $82 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($81)|0);
     $$0$i$i2$i$i = $82;
    }
    $83 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $84 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$83)|0);
    if ($84) {
     HEAP32[$1>>2] = 0;
     label = 31;
     break;
    } else {
     if ($787) {
      $788 = $70;
      break;
     } else {
      label = 243;
      break L21;
     }
    }
   }
  } while(0);
  if ((label|0) == 31) {
   label = 0;
   if ($787) {
    label = 243;
    break;
   } else {
    $788 = 0;
   }
  }
  $85 = (($16) + ($$0131)|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86 << 24 >> 24;
  L46: do {
   switch ($87|0) {
   case 1:  {
    $cond146 = ($$0131|0)==(3);
    if ($cond146) {
     $$1130 = $$0129;
    } else {
     $88 = HEAP32[$0>>2]|0;
     $89 = ((($88)) + 12|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($88)) + 16|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ($90|0)==($92|0);
     if ($93) {
      $94 = HEAP32[$88>>2]|0;
      $95 = ((($94)) + 36|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (FUNCTION_TABLE_ii[$96 & 1023]($88)|0);
      $$0$i$i159 = $97;
     } else {
      $98 = HEAP8[$90>>0]|0;
      $99 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($98)|0);
      $$0$i$i159 = $99;
     }
     $100 = $$0$i$i159&255;
     $101 = ($100<<24>>24)>(-1);
     if (!($101)) {
      label = 45;
      break L21;
     }
     $sext347 = $$0$i$i159 << 24;
     $102 = $sext347 >> 24;
     $103 = HEAP32[$40>>2]|0;
     $104 = (($103) + ($102<<1)|0);
     $105 = HEAP16[$104>>1]|0;
     $106 = $105 & 8192;
     $107 = ($106<<16>>16)==(0);
     if ($107) {
      label = 45;
      break L21;
     }
     $108 = HEAP32[$0>>2]|0;
     $109 = ((($108)) + 12|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ((($108)) + 16|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($110|0)==($112|0);
     if ($113) {
      $114 = HEAP32[$108>>2]|0;
      $115 = ((($114)) + 40|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (FUNCTION_TABLE_ii[$116 & 1023]($108)|0);
      $$0$i$i160 = $117;
     } else {
      $118 = ((($110)) + 1|0);
      HEAP32[$109>>2] = $118;
      $119 = HEAP8[$110>>0]|0;
      $120 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($119)|0);
      $$0$i$i160 = $120;
     }
     $121 = $$0$i$i160&255;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($23,$121);
     label = 47;
    }
    break;
   }
   case 0:  {
    $124 = ($$0131|0)==(3);
    if ($124) {
     $$1130 = $$0129;
    } else {
     label = 47;
    }
    break;
   }
   case 3:  {
    $189 = HEAP8[$41>>0]|0;
    $190 = ($189<<24>>24)<(0);
    $191 = HEAP32[$42>>2]|0;
    $192 = $189&255;
    $193 = $190 ? $191 : $192;
    $194 = HEAP8[$43>>0]|0;
    $195 = ($194<<24>>24)<(0);
    $196 = HEAP32[$44>>2]|0;
    $197 = $194&255;
    $198 = $195 ? $196 : $197;
    $199 = (0 - ($198))|0;
    $200 = ($193|0)==($199|0);
    if ($200) {
     $$1130 = $$0129;
    } else {
     $201 = ($193|0)==(0);
     $202 = ($198|0)==(0);
     $or$cond371 = $201 | $202;
     $203 = HEAP32[$0>>2]|0;
     $204 = ((($203)) + 12|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = ((($203)) + 16|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($205|0)==($207|0);
     if ($or$cond371) {
      if ($208) {
       $209 = HEAP32[$203>>2]|0;
       $210 = ((($209)) + 36|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = (FUNCTION_TABLE_ii[$211 & 1023]($203)|0);
       $$0$i$i182 = $212;
      } else {
       $213 = HEAP8[$205>>0]|0;
       $214 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($213)|0);
       $$0$i$i182 = $214;
      }
      $215 = $$0$i$i182&255;
      if ($201) {
       $239 = HEAP8[$43>>0]|0;
       $240 = ($239<<24>>24)<(0);
       $241 = HEAP32[$22>>2]|0;
       $242 = $240 ? $241 : $22;
       $243 = HEAP8[$242>>0]|0;
       $244 = ($243<<24>>24)==($215<<24>>24);
       if (!($244)) {
        $$1130 = $$0129;
        break L46;
       }
       $245 = HEAP32[$0>>2]|0;
       $246 = ((($245)) + 12|0);
       $247 = HEAP32[$246>>2]|0;
       $248 = ((($245)) + 16|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = ($247|0)==($249|0);
       if ($250) {
        $251 = HEAP32[$245>>2]|0;
        $252 = ((($251)) + 40|0);
        $253 = HEAP32[$252>>2]|0;
        (FUNCTION_TABLE_ii[$253 & 1023]($245)|0);
       } else {
        $254 = ((($247)) + 1|0);
        HEAP32[$246>>2] = $254;
        $255 = HEAP8[$247>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($255)|0);
       }
       HEAP8[$6>>0] = 1;
       $256 = HEAP8[$43>>0]|0;
       $257 = ($256<<24>>24)<(0);
       $258 = HEAP32[$44>>2]|0;
       $259 = $256&255;
       $260 = $257 ? $258 : $259;
       $261 = ($260>>>0)>(1);
       $spec$select139 = $261 ? $22 : $$0129;
       $$1130 = $spec$select139;
       break L46;
      }
      $216 = HEAP8[$41>>0]|0;
      $217 = ($216<<24>>24)<(0);
      $218 = HEAP32[$21>>2]|0;
      $219 = $217 ? $218 : $21;
      $220 = HEAP8[$219>>0]|0;
      $221 = ($220<<24>>24)==($215<<24>>24);
      if (!($221)) {
       HEAP8[$6>>0] = 1;
       $$1130 = $$0129;
       break L46;
      }
      $222 = HEAP32[$0>>2]|0;
      $223 = ((($222)) + 12|0);
      $224 = HEAP32[$223>>2]|0;
      $225 = ((($222)) + 16|0);
      $226 = HEAP32[$225>>2]|0;
      $227 = ($224|0)==($226|0);
      if ($227) {
       $228 = HEAP32[$222>>2]|0;
       $229 = ((($228)) + 40|0);
       $230 = HEAP32[$229>>2]|0;
       (FUNCTION_TABLE_ii[$230 & 1023]($222)|0);
      } else {
       $231 = ((($224)) + 1|0);
       HEAP32[$223>>2] = $231;
       $232 = HEAP8[$224>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($232)|0);
      }
      $233 = HEAP8[$41>>0]|0;
      $234 = ($233<<24>>24)<(0);
      $235 = HEAP32[$42>>2]|0;
      $236 = $233&255;
      $237 = $234 ? $235 : $236;
      $238 = ($237>>>0)>(1);
      $spec$select = $238 ? $21 : $$0129;
      $$1130 = $spec$select;
      break L46;
     }
     if ($208) {
      $262 = HEAP32[$203>>2]|0;
      $263 = ((($262)) + 36|0);
      $264 = HEAP32[$263>>2]|0;
      $265 = (FUNCTION_TABLE_ii[$264 & 1023]($203)|0);
      $$0$i$i189 = $265;
     } else {
      $266 = HEAP8[$205>>0]|0;
      $267 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($266)|0);
      $$0$i$i189 = $267;
     }
     $268 = $$0$i$i189&255;
     $269 = HEAP8[$41>>0]|0;
     $270 = ($269<<24>>24)<(0);
     $271 = HEAP32[$21>>2]|0;
     $272 = $270 ? $271 : $21;
     $273 = HEAP8[$272>>0]|0;
     $274 = ($273<<24>>24)==($268<<24>>24);
     $275 = HEAP32[$0>>2]|0;
     $276 = ((($275)) + 12|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ((($275)) + 16|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($277|0)==($279|0);
     if ($274) {
      if ($280) {
       $281 = HEAP32[$275>>2]|0;
       $282 = ((($281)) + 40|0);
       $283 = HEAP32[$282>>2]|0;
       (FUNCTION_TABLE_ii[$283 & 1023]($275)|0);
      } else {
       $284 = ((($277)) + 1|0);
       HEAP32[$276>>2] = $284;
       $285 = HEAP8[$277>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($285)|0);
      }
      $286 = HEAP8[$41>>0]|0;
      $287 = ($286<<24>>24)<(0);
      $288 = HEAP32[$42>>2]|0;
      $289 = $286&255;
      $290 = $287 ? $288 : $289;
      $291 = ($290>>>0)>(1);
      $spec$select140 = $291 ? $21 : $$0129;
      $$1130 = $spec$select140;
      break L46;
     }
     if ($280) {
      $292 = HEAP32[$275>>2]|0;
      $293 = ((($292)) + 36|0);
      $294 = HEAP32[$293>>2]|0;
      $295 = (FUNCTION_TABLE_ii[$294 & 1023]($275)|0);
      $$0$i$i194 = $295;
     } else {
      $296 = HEAP8[$277>>0]|0;
      $297 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($296)|0);
      $$0$i$i194 = $297;
     }
     $298 = $$0$i$i194&255;
     $299 = HEAP8[$43>>0]|0;
     $300 = ($299<<24>>24)<(0);
     $301 = HEAP32[$22>>2]|0;
     $302 = $300 ? $301 : $22;
     $303 = HEAP8[$302>>0]|0;
     $304 = ($303<<24>>24)==($298<<24>>24);
     if (!($304)) {
      label = 105;
      break L21;
     }
     $305 = HEAP32[$0>>2]|0;
     $306 = ((($305)) + 12|0);
     $307 = HEAP32[$306>>2]|0;
     $308 = ((($305)) + 16|0);
     $309 = HEAP32[$308>>2]|0;
     $310 = ($307|0)==($309|0);
     if ($310) {
      $311 = HEAP32[$305>>2]|0;
      $312 = ((($311)) + 40|0);
      $313 = HEAP32[$312>>2]|0;
      (FUNCTION_TABLE_ii[$313 & 1023]($305)|0);
     } else {
      $314 = ((($307)) + 1|0);
      HEAP32[$306>>2] = $314;
      $315 = HEAP8[$307>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($315)|0);
     }
     HEAP8[$6>>0] = 1;
     $316 = HEAP8[$43>>0]|0;
     $317 = ($316<<24>>24)<(0);
     $318 = HEAP32[$44>>2]|0;
     $319 = $316&255;
     $320 = $317 ? $318 : $319;
     $321 = ($320>>>0)>(1);
     $spec$select141 = $321 ? $22 : $$0129;
     $$1130 = $spec$select141;
    }
    break;
   }
   case 2:  {
    $324 = ($$0129|0)!=(0|0);
    $325 = ($$0131>>>0)<(2);
    $or$cond = $325 | $324;
    if ($or$cond) {
     $335 = HEAP8[$49>>0]|0;
     $336 = ($335<<24>>24)<(0);
     $337 = HEAP32[$20>>2]|0;
     $338 = $336 ? $337 : $20;
     $339 = $338;
     $340 = ($$0131|0)==(0);
     if ($340) {
      $$sroa$0313$1 = $339;$793 = $337;$794 = $335;
     } else {
      $346 = $335;$348 = $336;$350 = $338;$364 = $339;$792 = $337;
      label = 110;
     }
    } else {
     $326 = ($$0131|0)==(2);
     $327 = HEAP8[$50>>0]|0;
     $328 = ($327<<24>>24)!=(0);
     $329 = $326 & $328;
     $brmerge = $48 | $329;
     if (!($brmerge)) {
      $$1130 = 0;
      break L46;
     }
     $330 = HEAP8[$49>>0]|0;
     $331 = ($330<<24>>24)<(0);
     $332 = HEAP32[$20>>2]|0;
     $333 = $331 ? $332 : $20;
     $334 = $333;
     $346 = $330;$348 = $331;$350 = $333;$364 = $334;$792 = $332;
     label = 110;
    }
    L109: do {
     if ((label|0) == 110) {
      label = 0;
      $341 = (($$0131) + -1)|0;
      $342 = (($16) + ($341)|0);
      $343 = HEAP8[$342>>0]|0;
      $switch = ($343&255)<(2);
      if ($switch) {
       $344 = HEAP32[$51>>2]|0;
       $345 = $346&255;
       $347 = $348 ? $344 : $345;
       $349 = (($350) + ($347)|0);
       $$sroa$0313$0 = $364;
       while(1) {
        $351 = $$sroa$0313$0;
        $352 = ($349|0)==($351|0);
        if ($352) {
         break;
        }
        $353 = HEAP8[$351>>0]|0;
        $354 = ($353<<24>>24)>(-1);
        if (!($354)) {
         break;
        }
        $355 = $353 << 24 >> 24;
        $356 = HEAP32[$40>>2]|0;
        $357 = (($356) + ($355<<1)|0);
        $358 = HEAP16[$357>>1]|0;
        $359 = $358 & 8192;
        $360 = ($359<<16>>16)==(0);
        if ($360) {
         break;
        }
        $361 = ((($351)) + 1|0);
        $362 = $361;
        $$sroa$0313$0 = $362;
       }
       $363 = (($$sroa$0313$0) - ($364))|0;
       $365 = HEAP8[$52>>0]|0;
       $366 = ($365<<24>>24)<(0);
       $367 = HEAP32[$53>>2]|0;
       $368 = $365&255;
       $369 = $366 ? $367 : $368;
       $370 = ($363>>>0)>($369>>>0);
       if ($370) {
        $$sroa$0313$1 = $364;$793 = $792;$794 = $346;
       } else {
        $371 = HEAP32[$23>>2]|0;
        $372 = (($371) + ($367)|0);
        $373 = (0 - ($363))|0;
        $374 = (($372) + ($373)|0);
        $375 = (($23) + ($368)|0);
        $376 = (0 - ($363))|0;
        $377 = (($375) + ($376)|0);
        $$pre$phiZ2D = $366 ? $372 : $375;
        $378 = $366 ? $374 : $377;
        $$sroa$08$0$ptr$i = $350;$380 = $378;
        while(1) {
         $379 = ($380|0)==($$pre$phiZ2D|0);
         if ($379) {
          $$sroa$0313$1 = $$sroa$0313$0;$793 = $792;$794 = $346;
          break L109;
         }
         $381 = HEAP8[$380>>0]|0;
         $382 = HEAP8[$$sroa$08$0$ptr$i>>0]|0;
         $383 = ($381<<24>>24)==($382<<24>>24);
         if (!($383)) {
          $$sroa$0313$1 = $364;$793 = $792;$794 = $346;
          break L109;
         }
         $384 = ((($380)) + 1|0);
         $385 = ((($$sroa$08$0$ptr$i)) + 1|0);
         $$sroa$08$0$ptr$i = $385;$380 = $384;
        }
       }
      } else {
       $$sroa$0313$1 = $364;$793 = $792;$794 = $346;
      }
     }
    } while(0);
    $$sroa$0313$1$ptr = $$sroa$0313$1;
    $$sroa$0293$0$ptr = $$sroa$0313$1$ptr;$387 = $794;$391 = $793;$411 = $788;
    L124: while(1) {
     $386 = ($387<<24>>24)<(0);
     $388 = HEAP32[$51>>2]|0;
     $389 = $387&255;
     $390 = $386 ? $391 : $20;
     $392 = $386 ? $388 : $389;
     $393 = (($390) + ($392)|0);
     $394 = ($$sroa$0293$0$ptr|0)==($393|0);
     if ($394) {
      break;
     }
     $395 = HEAP32[$0>>2]|0;
     $396 = ($395|0)==(0|0);
     do {
      if ($396) {
       $795 = 1;
      } else {
       $397 = ((($395)) + 12|0);
       $398 = HEAP32[$397>>2]|0;
       $399 = ((($395)) + 16|0);
       $400 = HEAP32[$399>>2]|0;
       $401 = ($398|0)==($400|0);
       if ($401) {
        $402 = HEAP32[$395>>2]|0;
        $403 = ((($402)) + 36|0);
        $404 = HEAP32[$403>>2]|0;
        $405 = (FUNCTION_TABLE_ii[$404 & 1023]($395)|0);
        $$0$i$i$i$i221 = $405;
       } else {
        $406 = HEAP8[$398>>0]|0;
        $407 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($406)|0);
        $$0$i$i$i$i221 = $407;
       }
       $408 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $409 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i221,$408)|0);
       if ($409) {
        HEAP32[$0>>2] = 0;
        $795 = 1;
        break;
       } else {
        $$pre$i$i$i223 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i224 = ($$pre$i$i$i223|0)==(0|0);
        $795 = $phitmp$i$i$i224;
        break;
       }
      }
     } while(0);
     $410 = ($411|0)==(0|0);
     do {
      if ($410) {
       label = 136;
      } else {
       $412 = ((($411)) + 12|0);
       $413 = HEAP32[$412>>2]|0;
       $414 = ((($411)) + 16|0);
       $415 = HEAP32[$414>>2]|0;
       $416 = ($413|0)==($415|0);
       if ($416) {
        $417 = HEAP32[$411>>2]|0;
        $418 = ((($417)) + 36|0);
        $419 = HEAP32[$418>>2]|0;
        $420 = (FUNCTION_TABLE_ii[$419 & 1023]($411)|0);
        $$0$i$i2$i$i227 = $420;
       } else {
        $421 = HEAP8[$413>>0]|0;
        $422 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($421)|0);
        $$0$i$i2$i$i227 = $422;
       }
       $423 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $424 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i227,$423)|0);
       if ($424) {
        HEAP32[$1>>2] = 0;
        label = 136;
        break;
       } else {
        if ($795) {
         $796 = $411;
         break;
        } else {
         break L124;
        }
       }
      }
     } while(0);
     if ((label|0) == 136) {
      label = 0;
      if ($795) {
       break;
      } else {
       $796 = 0;
      }
     }
     $425 = HEAP32[$0>>2]|0;
     $426 = ((($425)) + 12|0);
     $427 = HEAP32[$426>>2]|0;
     $428 = ((($425)) + 16|0);
     $429 = HEAP32[$428>>2]|0;
     $430 = ($427|0)==($429|0);
     if ($430) {
      $431 = HEAP32[$425>>2]|0;
      $432 = ((($431)) + 36|0);
      $433 = HEAP32[$432>>2]|0;
      $434 = (FUNCTION_TABLE_ii[$433 & 1023]($425)|0);
      $$0$i$i233 = $434;
     } else {
      $435 = HEAP8[$427>>0]|0;
      $436 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($435)|0);
      $$0$i$i233 = $436;
     }
     $437 = $$0$i$i233&255;
     $438 = HEAP8[$$sroa$0293$0$ptr>>0]|0;
     $439 = ($438<<24>>24)==($437<<24>>24);
     if (!($439)) {
      break;
     }
     $440 = HEAP32[$0>>2]|0;
     $441 = ((($440)) + 12|0);
     $442 = HEAP32[$441>>2]|0;
     $443 = ((($440)) + 16|0);
     $444 = HEAP32[$443>>2]|0;
     $445 = ($442|0)==($444|0);
     if ($445) {
      $446 = HEAP32[$440>>2]|0;
      $447 = ((($446)) + 40|0);
      $448 = HEAP32[$447>>2]|0;
      (FUNCTION_TABLE_ii[$448 & 1023]($440)|0);
     } else {
      $449 = ((($442)) + 1|0);
      HEAP32[$441>>2] = $449;
      $450 = HEAP8[$442>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($450)|0);
     }
     $451 = ((($$sroa$0293$0$ptr)) + 1|0);
     $$pre363 = HEAP8[$49>>0]|0;
     $$pre364 = HEAP32[$20>>2]|0;
     $$sroa$0293$0$ptr = $451;$387 = $$pre363;$391 = $$pre364;$411 = $796;
    }
    if ($48) {
     $452 = HEAP8[$49>>0]|0;
     $453 = ($452<<24>>24)<(0);
     $454 = HEAP32[$20>>2]|0;
     $455 = HEAP32[$51>>2]|0;
     $456 = $452&255;
     $457 = $453 ? $454 : $20;
     $458 = $453 ? $455 : $456;
     $459 = (($457) + ($458)|0);
     $460 = ($$sroa$0293$0$ptr|0)==($459|0);
     if ($460) {
      $$1130 = $$0129;
     } else {
      label = 148;
      break L21;
     }
    } else {
     $$1130 = $$0129;
    }
    break;
   }
   case 4:  {
    $$0124 = 0;$479 = $788;$789 = $788;
    L161: while(1) {
     $463 = HEAP32[$0>>2]|0;
     $464 = ($463|0)==(0|0);
     do {
      if ($464) {
       $797 = 1;
      } else {
       $465 = ((($463)) + 12|0);
       $466 = HEAP32[$465>>2]|0;
       $467 = ((($463)) + 16|0);
       $468 = HEAP32[$467>>2]|0;
       $469 = ($466|0)==($468|0);
       if ($469) {
        $470 = HEAP32[$463>>2]|0;
        $471 = ((($470)) + 36|0);
        $472 = HEAP32[$471>>2]|0;
        $473 = (FUNCTION_TABLE_ii[$472 & 1023]($463)|0);
        $$0$i$i$i$i237 = $473;
       } else {
        $474 = HEAP8[$466>>0]|0;
        $475 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($474)|0);
        $$0$i$i$i$i237 = $475;
       }
       $476 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $477 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i237,$476)|0);
       if ($477) {
        HEAP32[$0>>2] = 0;
        $797 = 1;
        break;
       } else {
        $$pre$i$i$i239 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i240 = ($$pre$i$i$i239|0)==(0|0);
        $797 = $phitmp$i$i$i240;
        break;
       }
      }
     } while(0);
     $478 = ($479|0)==(0|0);
     do {
      if ($478) {
       $798 = $789;
       label = 162;
      } else {
       $480 = ((($479)) + 12|0);
       $481 = HEAP32[$480>>2]|0;
       $482 = ((($479)) + 16|0);
       $483 = HEAP32[$482>>2]|0;
       $484 = ($481|0)==($483|0);
       if ($484) {
        $485 = HEAP32[$479>>2]|0;
        $486 = ((($485)) + 36|0);
        $487 = HEAP32[$486>>2]|0;
        $488 = (FUNCTION_TABLE_ii[$487 & 1023]($479)|0);
        $$0$i$i2$i$i243 = $488;
       } else {
        $489 = HEAP8[$481>>0]|0;
        $490 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($489)|0);
        $$0$i$i2$i$i243 = $490;
       }
       $491 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $492 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i243,$491)|0);
       if ($492) {
        HEAP32[$1>>2] = 0;
        $798 = 0;
        label = 162;
        break;
       } else {
        if ($797) {
         $799 = $789;$800 = $479;
         break;
        } else {
         $570 = $789;
         break L161;
        }
       }
      }
     } while(0);
     if ((label|0) == 162) {
      label = 0;
      if ($797) {
       $570 = $798;
       break;
      } else {
       $799 = $798;$800 = 0;
      }
     }
     $493 = HEAP32[$0>>2]|0;
     $494 = ((($493)) + 12|0);
     $495 = HEAP32[$494>>2]|0;
     $496 = ((($493)) + 16|0);
     $497 = HEAP32[$496>>2]|0;
     $498 = ($495|0)==($497|0);
     if ($498) {
      $499 = HEAP32[$493>>2]|0;
      $500 = ((($499)) + 36|0);
      $501 = HEAP32[$500>>2]|0;
      $502 = (FUNCTION_TABLE_ii[$501 & 1023]($493)|0);
      $$0$i$i249 = $502;
     } else {
      $503 = HEAP8[$495>>0]|0;
      $504 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($503)|0);
      $$0$i$i249 = $504;
     }
     $505 = $$0$i$i249&255;
     $506 = ($505<<24>>24)>(-1);
     if ($506) {
      $sext345 = $$0$i$i249 << 24;
      $507 = $sext345 >> 24;
      $508 = HEAP32[$40>>2]|0;
      $509 = (($508) + ($507<<1)|0);
      $510 = HEAP16[$509>>1]|0;
      $511 = $510 & 2048;
      $512 = ($511<<16>>16)==(0);
      if ($512) {
       label = 172;
      } else {
       $513 = HEAP32[$9>>2]|0;
       $514 = HEAP32[$11>>2]|0;
       $515 = ($513|0)==($514|0);
       if ($515) {
        __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8,$9,$11);
        $$pre = HEAP32[$9>>2]|0;
        $517 = $$pre;
       } else {
        $517 = $513;
       }
       $516 = ((($517)) + 1|0);
       HEAP32[$9>>2] = $516;
       HEAP8[$517>>0] = $505;
       $518 = (($$0124) + 1)|0;
       $$2126$ph = $518;
      }
     } else {
      label = 172;
     }
     if ((label|0) == 172) {
      label = 0;
      $519 = HEAP8[$45>>0]|0;
      $520 = ($519<<24>>24)<(0);
      $521 = HEAP32[$46>>2]|0;
      $522 = $519&255;
      $523 = $520 ? $521 : $522;
      $524 = ($523|0)!=(0);
      $525 = ($$0124|0)!=(0);
      $or$cond13 = $525 & $524;
      $526 = HEAP8[$18>>0]|0;
      $527 = ($526<<24>>24)==($505<<24>>24);
      $or$cond143 = $527 & $or$cond13;
      if (!($or$cond143)) {
       $570 = $799;
       break;
      }
      $528 = HEAP32[$14>>2]|0;
      $529 = HEAP32[$15>>2]|0;
      $530 = ($528|0)==($529|0);
      if ($530) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13,$14,$15);
       $$pre361 = HEAP32[$14>>2]|0;
       $532 = $$pre361;
      } else {
       $532 = $528;
      }
      $531 = ((($532)) + 4|0);
      HEAP32[$14>>2] = $531;
      HEAP32[$532>>2] = $$0124;
      $$2126$ph = 0;
     }
     $533 = HEAP32[$0>>2]|0;
     $534 = ((($533)) + 12|0);
     $535 = HEAP32[$534>>2]|0;
     $536 = ((($533)) + 16|0);
     $537 = HEAP32[$536>>2]|0;
     $538 = ($535|0)==($537|0);
     if ($538) {
      $539 = HEAP32[$533>>2]|0;
      $540 = ((($539)) + 40|0);
      $541 = HEAP32[$540>>2]|0;
      (FUNCTION_TABLE_ii[$541 & 1023]($533)|0);
     } else {
      $542 = ((($535)) + 1|0);
      HEAP32[$534>>2] = $542;
      $543 = HEAP8[$535>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($543)|0);
     }
     $$0124 = $$2126$ph;$479 = $800;$789 = $799;
    }
    $544 = HEAP32[$13>>2]|0;
    $545 = HEAP32[$14>>2]|0;
    $546 = ($544|0)!=($545|0);
    $547 = ($$0124|0)!=(0);
    $or$cond15 = $547 & $546;
    if ($or$cond15) {
     $548 = HEAP32[$15>>2]|0;
     $549 = ($545|0)==($548|0);
     if ($549) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13,$14,$15);
      $$pre362 = HEAP32[$14>>2]|0;
      $551 = $$pre362;
     } else {
      $551 = $545;
     }
     $550 = ((($551)) + 4|0);
     HEAP32[$14>>2] = $550;
     HEAP32[$551>>2] = $$0124;
    }
    $552 = HEAP32[$24>>2]|0;
    $553 = ($552|0)>(0);
    L213: do {
     if ($553) {
      $554 = HEAP32[$0>>2]|0;
      $555 = ($554|0)==(0|0);
      do {
       if ($555) {
        $801 = 1;
       } else {
        $556 = ((($554)) + 12|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = ((($554)) + 16|0);
        $559 = HEAP32[$558>>2]|0;
        $560 = ($557|0)==($559|0);
        if ($560) {
         $561 = HEAP32[$554>>2]|0;
         $562 = ((($561)) + 36|0);
         $563 = HEAP32[$562>>2]|0;
         $564 = (FUNCTION_TABLE_ii[$563 & 1023]($554)|0);
         $$0$i$i$i$i254 = $564;
        } else {
         $565 = HEAP8[$557>>0]|0;
         $566 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($565)|0);
         $$0$i$i$i$i254 = $566;
        }
        $567 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $568 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i254,$567)|0);
        if ($568) {
         HEAP32[$0>>2] = 0;
         $801 = 1;
         break;
        } else {
         $$pre$i$i$i256 = HEAP32[$0>>2]|0;
         $phitmp$i$i$i257 = ($$pre$i$i$i256|0)==(0|0);
         $801 = $phitmp$i$i$i257;
         break;
        }
       }
      } while(0);
      $569 = ($570|0)==(0|0);
      do {
       if ($569) {
        label = 198;
       } else {
        $571 = ((($570)) + 12|0);
        $572 = HEAP32[$571>>2]|0;
        $573 = ((($570)) + 16|0);
        $574 = HEAP32[$573>>2]|0;
        $575 = ($572|0)==($574|0);
        if ($575) {
         $576 = HEAP32[$570>>2]|0;
         $577 = ((($576)) + 36|0);
         $578 = HEAP32[$577>>2]|0;
         $579 = (FUNCTION_TABLE_ii[$578 & 1023]($570)|0);
         $$0$i$i2$i$i260 = $579;
        } else {
         $580 = HEAP8[$572>>0]|0;
         $581 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($580)|0);
         $$0$i$i2$i$i260 = $581;
        }
        $582 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $583 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i260,$582)|0);
        if ($583) {
         HEAP32[$1>>2] = 0;
         label = 198;
         break;
        } else {
         if ($801) {
          $802 = $570;
          break;
         } else {
          label = 204;
          break L21;
         }
        }
       }
      } while(0);
      if ((label|0) == 198) {
       label = 0;
       if ($801) {
        label = 204;
        break L21;
       } else {
        $802 = 0;
       }
      }
      $584 = HEAP32[$0>>2]|0;
      $585 = ((($584)) + 12|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = ((($584)) + 16|0);
      $588 = HEAP32[$587>>2]|0;
      $589 = ($586|0)==($588|0);
      if ($589) {
       $590 = HEAP32[$584>>2]|0;
       $591 = ((($590)) + 36|0);
       $592 = HEAP32[$591>>2]|0;
       $593 = (FUNCTION_TABLE_ii[$592 & 1023]($584)|0);
       $$0$i$i266 = $593;
      } else {
       $594 = HEAP8[$586>>0]|0;
       $595 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($594)|0);
       $$0$i$i266 = $595;
      }
      $596 = $$0$i$i266&255;
      $597 = HEAP8[$17>>0]|0;
      $598 = ($597<<24>>24)==($596<<24>>24);
      if (!($598)) {
       label = 204;
       break L21;
      }
      $601 = HEAP32[$0>>2]|0;
      $602 = ((($601)) + 12|0);
      $603 = HEAP32[$602>>2]|0;
      $604 = ((($601)) + 16|0);
      $605 = HEAP32[$604>>2]|0;
      $606 = ($603|0)==($605|0);
      if ($606) {
       $607 = HEAP32[$601>>2]|0;
       $608 = ((($607)) + 40|0);
       $609 = HEAP32[$608>>2]|0;
       (FUNCTION_TABLE_ii[$609 & 1023]($601)|0);
      } else {
       $610 = ((($603)) + 1|0);
       HEAP32[$602>>2] = $610;
       $611 = HEAP8[$603>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($611)|0);
      }
      $630 = $802;
      while(1) {
       $612 = HEAP32[$24>>2]|0;
       $613 = ($612|0)>(0);
       if (!($613)) {
        break L213;
       }
       $614 = HEAP32[$0>>2]|0;
       $615 = ($614|0)==(0|0);
       do {
        if ($615) {
         $803 = 1;
        } else {
         $616 = ((($614)) + 12|0);
         $617 = HEAP32[$616>>2]|0;
         $618 = ((($614)) + 16|0);
         $619 = HEAP32[$618>>2]|0;
         $620 = ($617|0)==($619|0);
         if ($620) {
          $621 = HEAP32[$614>>2]|0;
          $622 = ((($621)) + 36|0);
          $623 = HEAP32[$622>>2]|0;
          $624 = (FUNCTION_TABLE_ii[$623 & 1023]($614)|0);
          $$0$i$i$i$i269 = $624;
         } else {
          $625 = HEAP8[$617>>0]|0;
          $626 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($625)|0);
          $$0$i$i$i$i269 = $626;
         }
         $627 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $628 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i269,$627)|0);
         if ($628) {
          HEAP32[$0>>2] = 0;
          $803 = 1;
          break;
         } else {
          $$pre$i$i$i271 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i272 = ($$pre$i$i$i271|0)==(0|0);
          $803 = $phitmp$i$i$i272;
          break;
         }
        }
       } while(0);
       $629 = ($630|0)==(0|0);
       do {
        if ($629) {
         label = 223;
        } else {
         $631 = ((($630)) + 12|0);
         $632 = HEAP32[$631>>2]|0;
         $633 = ((($630)) + 16|0);
         $634 = HEAP32[$633>>2]|0;
         $635 = ($632|0)==($634|0);
         if ($635) {
          $636 = HEAP32[$630>>2]|0;
          $637 = ((($636)) + 36|0);
          $638 = HEAP32[$637>>2]|0;
          $639 = (FUNCTION_TABLE_ii[$638 & 1023]($630)|0);
          $$0$i$i2$i$i275 = $639;
         } else {
          $640 = HEAP8[$632>>0]|0;
          $641 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($640)|0);
          $$0$i$i2$i$i275 = $641;
         }
         $642 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $643 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i275,$642)|0);
         if ($643) {
          HEAP32[$1>>2] = 0;
          label = 223;
          break;
         } else {
          if ($803) {
           $804 = $630;
           break;
          } else {
           label = 230;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 223) {
        label = 0;
        if ($803) {
         label = 230;
         break L21;
        } else {
         $804 = 0;
        }
       }
       $644 = HEAP32[$0>>2]|0;
       $645 = ((($644)) + 12|0);
       $646 = HEAP32[$645>>2]|0;
       $647 = ((($644)) + 16|0);
       $648 = HEAP32[$647>>2]|0;
       $649 = ($646|0)==($648|0);
       if ($649) {
        $650 = HEAP32[$644>>2]|0;
        $651 = ((($650)) + 36|0);
        $652 = HEAP32[$651>>2]|0;
        $653 = (FUNCTION_TABLE_ii[$652 & 1023]($644)|0);
        $$0$i$i281 = $653;
       } else {
        $654 = HEAP8[$646>>0]|0;
        $655 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($654)|0);
        $$0$i$i281 = $655;
       }
       $656 = $$0$i$i281&255;
       $657 = ($656<<24>>24)>(-1);
       if (!($657)) {
        label = 230;
        break L21;
       }
       $sext = $$0$i$i281 << 24;
       $658 = $sext >> 24;
       $659 = HEAP32[$40>>2]|0;
       $660 = (($659) + ($658<<1)|0);
       $661 = HEAP16[$660>>1]|0;
       $662 = $661 & 2048;
       $663 = ($662<<16>>16)==(0);
       if ($663) {
        label = 230;
        break L21;
       }
       $666 = HEAP32[$9>>2]|0;
       $667 = HEAP32[$11>>2]|0;
       $668 = ($666|0)==($667|0);
       if ($668) {
        __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8,$9,$11);
       }
       $669 = HEAP32[$0>>2]|0;
       $670 = ((($669)) + 12|0);
       $671 = HEAP32[$670>>2]|0;
       $672 = ((($669)) + 16|0);
       $673 = HEAP32[$672>>2]|0;
       $674 = ($671|0)==($673|0);
       if ($674) {
        $675 = HEAP32[$669>>2]|0;
        $676 = ((($675)) + 36|0);
        $677 = HEAP32[$676>>2]|0;
        $678 = (FUNCTION_TABLE_ii[$677 & 1023]($669)|0);
        $$0$i$i284 = $678;
       } else {
        $679 = HEAP8[$671>>0]|0;
        $680 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($679)|0);
        $$0$i$i284 = $680;
       }
       $681 = $$0$i$i284&255;
       $682 = HEAP32[$9>>2]|0;
       $683 = ((($682)) + 1|0);
       HEAP32[$9>>2] = $683;
       HEAP8[$682>>0] = $681;
       $684 = HEAP32[$24>>2]|0;
       $685 = (($684) + -1)|0;
       HEAP32[$24>>2] = $685;
       $686 = HEAP32[$0>>2]|0;
       $687 = ((($686)) + 12|0);
       $688 = HEAP32[$687>>2]|0;
       $689 = ((($686)) + 16|0);
       $690 = HEAP32[$689>>2]|0;
       $691 = ($688|0)==($690|0);
       if ($691) {
        $692 = HEAP32[$686>>2]|0;
        $693 = ((($692)) + 40|0);
        $694 = HEAP32[$693>>2]|0;
        (FUNCTION_TABLE_ii[$694 & 1023]($686)|0);
       } else {
        $695 = ((($688)) + 1|0);
        HEAP32[$687>>2] = $695;
        $696 = HEAP8[$688>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($696)|0);
       }
       $630 = $804;
      }
     }
    } while(0);
    $697 = HEAP32[$9>>2]|0;
    $698 = HEAP32[$8>>2]|0;
    $699 = ($697|0)==($698|0);
    if ($699) {
     label = 241;
     break L21;
    } else {
     $$1130 = $$0129;
    }
    break;
   }
   default: {
    $$1130 = $$0129;
   }
   }
  } while(0);
  L289: do {
   if ((label|0) == 47) {
    label = 0;
    $141 = $788;
    while(1) {
     $125 = HEAP32[$0>>2]|0;
     $126 = ($125|0)==(0|0);
     do {
      if ($126) {
       $790 = 1;
      } else {
       $127 = ((($125)) + 12|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = ((($125)) + 16|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = ($128|0)==($130|0);
       if ($131) {
        $132 = HEAP32[$125>>2]|0;
        $133 = ((($132)) + 36|0);
        $134 = HEAP32[$133>>2]|0;
        $135 = (FUNCTION_TABLE_ii[$134 & 1023]($125)|0);
        $$0$i$i$i$i161 = $135;
       } else {
        $136 = HEAP8[$128>>0]|0;
        $137 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($136)|0);
        $$0$i$i$i$i161 = $137;
       }
       $138 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $139 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i161,$138)|0);
       if ($139) {
        HEAP32[$0>>2] = 0;
        $790 = 1;
        break;
       } else {
        $$pre$i$i$i163 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i164 = ($$pre$i$i$i163|0)==(0|0);
        $790 = $phitmp$i$i$i164;
        break;
       }
      }
     } while(0);
     $140 = ($141|0)==(0|0);
     do {
      if ($140) {
       label = 61;
      } else {
       $142 = ((($141)) + 12|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ((($141)) + 16|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($143|0)==($145|0);
       if ($146) {
        $147 = HEAP32[$141>>2]|0;
        $148 = ((($147)) + 36|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = (FUNCTION_TABLE_ii[$149 & 1023]($141)|0);
        $$0$i$i2$i$i167 = $150;
       } else {
        $151 = HEAP8[$143>>0]|0;
        $152 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($151)|0);
        $$0$i$i2$i$i167 = $152;
       }
       $153 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $154 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i167,$153)|0);
       if ($154) {
        HEAP32[$1>>2] = 0;
        label = 61;
        break;
       } else {
        if ($790) {
         $791 = $141;
         break;
        } else {
         $$1130 = $$0129;
         break L289;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      label = 0;
      if ($790) {
       $$1130 = $$0129;
       break L289;
      } else {
       $791 = 0;
      }
     }
     $155 = HEAP32[$0>>2]|0;
     $156 = ((($155)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ((($155)) + 16|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($157|0)==($159|0);
     if ($160) {
      $161 = HEAP32[$155>>2]|0;
      $162 = ((($161)) + 36|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = (FUNCTION_TABLE_ii[$163 & 1023]($155)|0);
      $$0$i$i173 = $164;
     } else {
      $165 = HEAP8[$157>>0]|0;
      $166 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($165)|0);
      $$0$i$i173 = $166;
     }
     $167 = $$0$i$i173&255;
     $168 = ($167<<24>>24)>(-1);
     if (!($168)) {
      $$1130 = $$0129;
      break L289;
     }
     $sext346 = $$0$i$i173 << 24;
     $169 = $sext346 >> 24;
     $170 = HEAP32[$40>>2]|0;
     $171 = (($170) + ($169<<1)|0);
     $172 = HEAP16[$171>>1]|0;
     $173 = $172 & 8192;
     $174 = ($173<<16>>16)==(0);
     if ($174) {
      $$1130 = $$0129;
      break L289;
     }
     $175 = HEAP32[$0>>2]|0;
     $176 = ((($175)) + 12|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = ((($175)) + 16|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = ($177|0)==($179|0);
     if ($180) {
      $181 = HEAP32[$175>>2]|0;
      $182 = ((($181)) + 40|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = (FUNCTION_TABLE_ii[$183 & 1023]($175)|0);
      $$0$i$i176 = $184;
     } else {
      $185 = ((($177)) + 1|0);
      HEAP32[$176>>2] = $185;
      $186 = HEAP8[$177>>0]|0;
      $187 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($186)|0);
      $$0$i$i176 = $187;
     }
     $188 = $$0$i$i176&255;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($23,$188);
     $141 = $791;
    }
   }
  } while(0);
  $702 = (($$0131) + 1)|0;
  $$0129 = $$1130;$$0131 = $702;
 }
 L326: do {
  if ((label|0) == 45) {
   $122 = HEAP32[$5>>2]|0;
   $123 = $122 | 4;
   HEAP32[$5>>2] = $123;
   $$10 = 0;
  }
  else if ((label|0) == 105) {
   $322 = HEAP32[$5>>2]|0;
   $323 = $322 | 4;
   HEAP32[$5>>2] = $323;
   $$10 = 0;
  }
  else if ((label|0) == 148) {
   $461 = HEAP32[$5>>2]|0;
   $462 = $461 | 4;
   HEAP32[$5>>2] = $462;
   $$10 = 0;
  }
  else if ((label|0) == 204) {
   $599 = HEAP32[$5>>2]|0;
   $600 = $599 | 4;
   HEAP32[$5>>2] = $600;
   $$10 = 0;
  }
  else if ((label|0) == 230) {
   $664 = HEAP32[$5>>2]|0;
   $665 = $664 | 4;
   HEAP32[$5>>2] = $665;
   $$10 = 0;
  }
  else if ((label|0) == 241) {
   $700 = HEAP32[$5>>2]|0;
   $701 = $700 | 4;
   HEAP32[$5>>2] = $701;
   $$10 = 0;
  }
  else if ((label|0) == 243) {
   $703 = ($$0129|0)==(0|0);
   L328: do {
    if (!($703)) {
     $704 = ((($$0129)) + 11|0);
     $705 = ((($$0129)) + 4|0);
     $$0 = 1;
     L330: while(1) {
      $706 = HEAP8[$704>>0]|0;
      $707 = ($706<<24>>24)<(0);
      if ($707) {
       $708 = HEAP32[$705>>2]|0;
       $711 = $708;
      } else {
       $709 = $706&255;
       $711 = $709;
      }
      $710 = ($$0>>>0)<($711>>>0);
      if (!($710)) {
       break L328;
      }
      $712 = HEAP32[$0>>2]|0;
      $713 = ($712|0)==(0|0);
      do {
       if ($713) {
        $805 = 1;
       } else {
        $714 = ((($712)) + 12|0);
        $715 = HEAP32[$714>>2]|0;
        $716 = ((($712)) + 16|0);
        $717 = HEAP32[$716>>2]|0;
        $718 = ($715|0)==($717|0);
        if ($718) {
         $719 = HEAP32[$712>>2]|0;
         $720 = ((($719)) + 36|0);
         $721 = HEAP32[$720>>2]|0;
         $722 = (FUNCTION_TABLE_ii[$721 & 1023]($712)|0);
         $$0$i$i$i$i205 = $722;
        } else {
         $723 = HEAP8[$715>>0]|0;
         $724 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($723)|0);
         $$0$i$i$i$i205 = $724;
        }
        $725 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $726 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i205,$725)|0);
        if ($726) {
         HEAP32[$0>>2] = 0;
         $805 = 1;
         break;
        } else {
         $$pre$i$i$i207 = HEAP32[$0>>2]|0;
         $phitmp$i$i$i208 = ($$pre$i$i$i207|0)==(0|0);
         $805 = $phitmp$i$i$i208;
         break;
        }
       }
      } while(0);
      $727 = HEAP32[$1>>2]|0;
      $728 = ($727|0)==(0|0);
      do {
       if ($728) {
        label = 262;
       } else {
        $729 = ((($727)) + 12|0);
        $730 = HEAP32[$729>>2]|0;
        $731 = ((($727)) + 16|0);
        $732 = HEAP32[$731>>2]|0;
        $733 = ($730|0)==($732|0);
        if ($733) {
         $734 = HEAP32[$727>>2]|0;
         $735 = ((($734)) + 36|0);
         $736 = HEAP32[$735>>2]|0;
         $737 = (FUNCTION_TABLE_ii[$736 & 1023]($727)|0);
         $$0$i$i2$i$i211 = $737;
        } else {
         $738 = HEAP8[$730>>0]|0;
         $739 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($738)|0);
         $$0$i$i2$i$i211 = $739;
        }
        $740 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $741 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i211,$740)|0);
        if ($741) {
         HEAP32[$1>>2] = 0;
         label = 262;
         break;
        } else {
         if ($805) {
          break;
         } else {
          break L330;
         }
        }
       }
      } while(0);
      if ((label|0) == 262) {
       label = 0;
       if ($805) {
        break;
       }
      }
      $742 = HEAP32[$0>>2]|0;
      $743 = ((($742)) + 12|0);
      $744 = HEAP32[$743>>2]|0;
      $745 = ((($742)) + 16|0);
      $746 = HEAP32[$745>>2]|0;
      $747 = ($744|0)==($746|0);
      if ($747) {
       $748 = HEAP32[$742>>2]|0;
       $749 = ((($748)) + 36|0);
       $750 = HEAP32[$749>>2]|0;
       $751 = (FUNCTION_TABLE_ii[$750 & 1023]($742)|0);
       $$0$i$i202 = $751;
      } else {
       $752 = HEAP8[$744>>0]|0;
       $753 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($752)|0);
       $$0$i$i202 = $753;
      }
      $754 = $$0$i$i202&255;
      $755 = HEAP8[$704>>0]|0;
      $756 = ($755<<24>>24)<(0);
      if ($756) {
       $757 = HEAP32[$$0129>>2]|0;
       $759 = $757;
      } else {
       $759 = $$0129;
      }
      $758 = (($759) + ($$0)|0);
      $760 = HEAP8[$758>>0]|0;
      $761 = ($760<<24>>24)==($754<<24>>24);
      if (!($761)) {
       break;
      }
      $764 = (($$0) + 1)|0;
      $765 = HEAP32[$0>>2]|0;
      $766 = ((($765)) + 12|0);
      $767 = HEAP32[$766>>2]|0;
      $768 = ((($765)) + 16|0);
      $769 = HEAP32[$768>>2]|0;
      $770 = ($767|0)==($769|0);
      if ($770) {
       $771 = HEAP32[$765>>2]|0;
       $772 = ((($771)) + 40|0);
       $773 = HEAP32[$772>>2]|0;
       (FUNCTION_TABLE_ii[$773 & 1023]($765)|0);
      } else {
       $774 = ((($767)) + 1|0);
       HEAP32[$766>>2] = $774;
       $775 = HEAP8[$767>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($775)|0);
      }
      $$0 = $764;
     }
     $762 = HEAP32[$5>>2]|0;
     $763 = $762 | 4;
     HEAP32[$5>>2] = $763;
     $$10 = 0;
     break L326;
    }
   } while(0);
   $776 = HEAP32[$13>>2]|0;
   $777 = HEAP32[$14>>2]|0;
   $778 = ($776|0)==($777|0);
   if ($778) {
    $$10 = 1;
   } else {
    HEAP32[$25>>2] = 0;
    __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($19,$776,$777,$25);
    $779 = HEAP32[$25>>2]|0;
    $780 = ($779|0)==(0);
    if ($780) {
     $$10 = 1;
     break;
    } else {
     $781 = HEAP32[$5>>2]|0;
     $782 = $781 | 4;
     HEAP32[$5>>2] = $782;
     $$10 = 0;
     break;
    }
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $783 = HEAP32[$13>>2]|0;
 HEAP32[$13>>2] = 0;
 $784 = ($783|0)==(0|0);
 if (!($784)) {
  $785 = ((($13)) + 4|0);
  $786 = HEAP32[$785>>2]|0;
  FUNCTION_TABLE_vi[$786 & 1023]($783);
 }
 STACKTOP = sp;return ($$10|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$034 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep38 = 0, $scevgep39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = sp;
 $5 = sp + 12|0;
 $6 = ((($0)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 if ($8) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 2147483647;
  $phitmp$i = (($14) + -1)|0;
  $36 = $11;$37 = $phitmp$i;
 } else {
  $9 = $7&255;
  $36 = $9;$37 = 10;
 }
 $15 = $2;
 $16 = (($15) - ($3))|0;
 $17 = ($16|0)==(0);
 do {
  if (!($17)) {
   if ($8) {
    $18 = HEAP32[$0>>2]|0;
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $18;$24 = $20;
   } else {
    $21 = $7&255;
    $23 = $0;$24 = $21;
   }
   $22 = (($23) + ($24)|0);
   $25 = (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($1,$23,$22)|0);
   if ($25) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($4,$1,$2);
    $26 = ((($4)) + 11|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = ($27<<24>>24)<(0);
    $29 = HEAP32[$4>>2]|0;
    $30 = ((($4)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $27&255;
    $33 = $28 ? $29 : $4;
    $34 = $28 ? $31 : $32;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($0,$33,$34)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
    break;
   }
   $35 = (($37) - ($36))|0;
   $38 = ($35>>>0)<($16>>>0);
   if ($38) {
    $39 = (($36) + ($16))|0;
    $40 = (($39) - ($37))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0,$37,$40,$36,$36,0,0);
   }
   $41 = HEAP8[$6>>0]|0;
   $42 = ($41<<24>>24)<(0);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $45 = $43;
   } else {
    $45 = $0;
   }
   $44 = (($45) + ($36)|0);
   $46 = (($36) - ($3))|0;
   $scevgep = (($2) + ($46)|0);
   $scevgep38 = $scevgep;
   $$0 = $44;$$034 = $1;
   while(1) {
    $47 = ($$034|0)==($2|0);
    if ($47) {
     break;
    }
    __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$$034);
    $48 = ((($$0)) + 1|0);
    $49 = ((($$034)) + 1|0);
    $$0 = $48;$$034 = $49;
   }
   $scevgep39 = (($45) + ($scevgep38)|0);
   HEAP8[$5>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep39,$5);
   $50 = (($36) + ($16))|0;
   $51 = HEAP8[$6>>0]|0;
   $52 = ($51<<24>>24)<(0);
   if ($52) {
    $53 = ((($0)) + 4|0);
    HEAP32[$53>>2] = $50;
    break;
   } else {
    $54 = $50&255;
    HEAP8[$6>>0] = $54;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)<=($0>>>0);
 $4 = ($0>>>0)<($2>>>0);
 $spec$select = $3 & $4;
 return ($spec$select|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $scevgep23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = sp;
 $5 = $2;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)>(4294967279);
 if ($7) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $8 = ($6>>>0)<(11);
 if ($8) {
  $9 = $6&255;
  $10 = ((($0)) + 11|0);
  HEAP8[$10>>0] = $9;
  $$021 = $0;
 } else {
  $11 = (($6) + 16)|0;
  $12 = $11 & -16;
  $13 = (__Znwm($12)|0);
  HEAP32[$0>>2] = $13;
  $14 = $12 | -2147483648;
  $15 = ((($0)) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 4|0);
  HEAP32[$16>>2] = $6;
  $$021 = $13;
 }
 $17 = $2;
 $18 = (($17) - ($3))|0;
 $$0 = $1;$$1 = $$021;
 while(1) {
  $19 = ($$0|0)==($2|0);
  if ($19) {
   break;
  }
  __ZNSt3__211char_traitsIcE6assignERcRKc($$1,$$0);
  $20 = ((($$0)) + 1|0);
  $21 = ((($$1)) + 1|0);
  $$0 = $20;$$1 = $21;
 }
 $scevgep23 = (($$021) + ($18)|0);
 HEAP8[$4>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23,$4);
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i41 = 0, $$0$i$i$i47 = 0, $$0$i$i$i53 = 0, $$0$i$i$i59 = 0, $$0$i$i$i65 = 0, $$0$i$i$i71 = 0, $$0$i$i$i77 = 0, $$pre$phi$i$i39Z2D = 0, $$pre$phi$i$i45Z2D = 0, $$pre$phi$i$i51Z2D = 0, $$pre$phi$i$i57Z2D = 0, $$pre$phi$i$i63Z2D = 0, $$pre$phi$i$i69Z2D = 0, $$pre$phi$i$i75Z2D = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i42 = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i54 = 0;
 var $exitcond$i$i$i60 = 0, $exitcond$i$i$i66 = 0, $exitcond$i$i$i72 = 0, $exitcond$i$i$i78 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $10 = sp + 119|0;
 $11 = sp + 118|0;
 $12 = sp + 117|0;
 $13 = sp + 116|0;
 $14 = sp + 115|0;
 $15 = sp + 114|0;
 $16 = sp + 113|0;
 $17 = sp + 112|0;
 $18 = sp + 111|0;
 $19 = sp + 110|0;
 $20 = sp + 109|0;
 $21 = sp + 108|0;
 $22 = sp + 107|0;
 $23 = sp + 106|0;
 $24 = sp + 105|0;
 $25 = sp + 104|0;
 $26 = sp + 100|0;
 $27 = sp + 88|0;
 $28 = sp + 76|0;
 $29 = sp + 64|0;
 $30 = sp + 52|0;
 $31 = sp + 48|0;
 $32 = sp + 36|0;
 $33 = sp + 24|0;
 $34 = sp + 12|0;
 $35 = sp;
 if ($0) {
  $36 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,71224)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_vii[$39 & 511]($26,$36);
  $40 = HEAP32[$26>>2]|0;
  HEAP8[$2>>0]=$40&255;HEAP8[$2+1>>0]=($40>>8)&255;HEAP8[$2+2>>0]=($40>>16)&255;HEAP8[$2+3>>0]=$40>>24;
  $41 = HEAP32[$36>>2]|0;
  $42 = ((($41)) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  FUNCTION_TABLE_vii[$43 & 511]($27,$36);
  $44 = ((($8)) + 11|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = ($45<<24>>24)<(0);
  if ($46) {
   $47 = HEAP32[$8>>2]|0;
   HEAP8[$24>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($47,$24);
   $48 = ((($8)) + 4|0);
   HEAP32[$48>>2] = 0;
   $$pre$phi$i$iZ2D = $8;
  } else {
   HEAP8[$25>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($8,$25);
   HEAP8[$44>>0] = 0;
   $$pre$phi$i$iZ2D = $8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($8,0);
  ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$27>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$27+8>>2]|0;
  $$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $49 = (($27) + ($$0$i$i$i<<2)|0);
   HEAP32[$49>>2] = 0;
   $50 = (($$0$i$i$i) + 1)|0;
   $$0$i$i$i = $50;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
  $51 = HEAP32[$36>>2]|0;
  $52 = ((($51)) + 28|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_vii[$53 & 511]($28,$36);
  $54 = ((($7)) + 11|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = ($55<<24>>24)<(0);
  if ($56) {
   $57 = HEAP32[$7>>2]|0;
   HEAP8[$22>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($57,$22);
   $58 = ((($7)) + 4|0);
   HEAP32[$58>>2] = 0;
   $$pre$phi$i$i39Z2D = $7;
  } else {
   HEAP8[$23>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$23);
   HEAP8[$54>>0] = 0;
   $$pre$phi$i$i39Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($7,0);
  ;HEAP32[$$pre$phi$i$i39Z2D>>2]=HEAP32[$28>>2]|0;HEAP32[$$pre$phi$i$i39Z2D+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$pre$phi$i$i39Z2D+8>>2]=HEAP32[$28+8>>2]|0;
  $$0$i$i$i41 = 0;
  while(1) {
   $exitcond$i$i$i42 = ($$0$i$i$i41|0)==(3);
   if ($exitcond$i$i$i42) {
    break;
   }
   $59 = (($28) + ($$0$i$i$i41<<2)|0);
   HEAP32[$59>>2] = 0;
   $60 = (($$0$i$i$i41) + 1)|0;
   $$0$i$i$i41 = $60;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($28);
  $61 = HEAP32[$36>>2]|0;
  $62 = ((($61)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (FUNCTION_TABLE_ii[$63 & 1023]($36)|0);
  HEAP8[$3>>0] = $64;
  $65 = HEAP32[$36>>2]|0;
  $66 = ((($65)) + 16|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (FUNCTION_TABLE_ii[$67 & 1023]($36)|0);
  HEAP8[$4>>0] = $68;
  $69 = HEAP32[$36>>2]|0;
  $70 = ((($69)) + 20|0);
  $71 = HEAP32[$70>>2]|0;
  FUNCTION_TABLE_vii[$71 & 511]($29,$36);
  $72 = ((($5)) + 11|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = ($73<<24>>24)<(0);
  if ($74) {
   $75 = HEAP32[$5>>2]|0;
   HEAP8[$20>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($75,$20);
   $76 = ((($5)) + 4|0);
   HEAP32[$76>>2] = 0;
   $$pre$phi$i$i45Z2D = $5;
  } else {
   HEAP8[$21>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$21);
   HEAP8[$72>>0] = 0;
   $$pre$phi$i$i45Z2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($5,0);
  ;HEAP32[$$pre$phi$i$i45Z2D>>2]=HEAP32[$29>>2]|0;HEAP32[$$pre$phi$i$i45Z2D+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$$pre$phi$i$i45Z2D+8>>2]=HEAP32[$29+8>>2]|0;
  $$0$i$i$i47 = 0;
  while(1) {
   $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
   if ($exitcond$i$i$i48) {
    break;
   }
   $77 = (($29) + ($$0$i$i$i47<<2)|0);
   HEAP32[$77>>2] = 0;
   $78 = (($$0$i$i$i47) + 1)|0;
   $$0$i$i$i47 = $78;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($29);
  $79 = HEAP32[$36>>2]|0;
  $80 = ((($79)) + 24|0);
  $81 = HEAP32[$80>>2]|0;
  FUNCTION_TABLE_vii[$81 & 511]($30,$36);
  $82 = ((($6)) + 11|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = ($83<<24>>24)<(0);
  if ($84) {
   $85 = HEAP32[$6>>2]|0;
   HEAP8[$18>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($85,$18);
   $86 = ((($6)) + 4|0);
   HEAP32[$86>>2] = 0;
   $$pre$phi$i$i51Z2D = $6;
  } else {
   HEAP8[$19>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$19);
   HEAP8[$82>>0] = 0;
   $$pre$phi$i$i51Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($6,0);
  ;HEAP32[$$pre$phi$i$i51Z2D>>2]=HEAP32[$30>>2]|0;HEAP32[$$pre$phi$i$i51Z2D+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$$pre$phi$i$i51Z2D+8>>2]=HEAP32[$30+8>>2]|0;
  $$0$i$i$i53 = 0;
  while(1) {
   $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
   if ($exitcond$i$i$i54) {
    break;
   }
   $87 = (($30) + ($$0$i$i$i53<<2)|0);
   HEAP32[$87>>2] = 0;
   $88 = (($$0$i$i$i53) + 1)|0;
   $$0$i$i$i53 = $88;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
  $89 = HEAP32[$36>>2]|0;
  $90 = ((($89)) + 36|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (FUNCTION_TABLE_ii[$91 & 1023]($36)|0);
  $storemerge = $92;
 } else {
  $93 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,71216)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($94)) + 44|0);
  $96 = HEAP32[$95>>2]|0;
  FUNCTION_TABLE_vii[$96 & 511]($31,$93);
  $97 = HEAP32[$31>>2]|0;
  HEAP8[$2>>0]=$97&255;HEAP8[$2+1>>0]=($97>>8)&255;HEAP8[$2+2>>0]=($97>>16)&255;HEAP8[$2+3>>0]=$97>>24;
  $98 = HEAP32[$93>>2]|0;
  $99 = ((($98)) + 32|0);
  $100 = HEAP32[$99>>2]|0;
  FUNCTION_TABLE_vii[$100 & 511]($32,$93);
  $101 = ((($8)) + 11|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = ($102<<24>>24)<(0);
  if ($103) {
   $104 = HEAP32[$8>>2]|0;
   HEAP8[$16>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($104,$16);
   $105 = ((($8)) + 4|0);
   HEAP32[$105>>2] = 0;
   $$pre$phi$i$i57Z2D = $8;
  } else {
   HEAP8[$17>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($8,$17);
   HEAP8[$101>>0] = 0;
   $$pre$phi$i$i57Z2D = $8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($8,0);
  ;HEAP32[$$pre$phi$i$i57Z2D>>2]=HEAP32[$32>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+8>>2]=HEAP32[$32+8>>2]|0;
  $$0$i$i$i59 = 0;
  while(1) {
   $exitcond$i$i$i60 = ($$0$i$i$i59|0)==(3);
   if ($exitcond$i$i$i60) {
    break;
   }
   $106 = (($32) + ($$0$i$i$i59<<2)|0);
   HEAP32[$106>>2] = 0;
   $107 = (($$0$i$i$i59) + 1)|0;
   $$0$i$i$i59 = $107;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
  $108 = HEAP32[$93>>2]|0;
  $109 = ((($108)) + 28|0);
  $110 = HEAP32[$109>>2]|0;
  FUNCTION_TABLE_vii[$110 & 511]($33,$93);
  $111 = ((($7)) + 11|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = ($112<<24>>24)<(0);
  if ($113) {
   $114 = HEAP32[$7>>2]|0;
   HEAP8[$14>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($114,$14);
   $115 = ((($7)) + 4|0);
   HEAP32[$115>>2] = 0;
   $$pre$phi$i$i63Z2D = $7;
  } else {
   HEAP8[$15>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$15);
   HEAP8[$111>>0] = 0;
   $$pre$phi$i$i63Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($7,0);
  ;HEAP32[$$pre$phi$i$i63Z2D>>2]=HEAP32[$33>>2]|0;HEAP32[$$pre$phi$i$i63Z2D+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$pre$phi$i$i63Z2D+8>>2]=HEAP32[$33+8>>2]|0;
  $$0$i$i$i65 = 0;
  while(1) {
   $exitcond$i$i$i66 = ($$0$i$i$i65|0)==(3);
   if ($exitcond$i$i$i66) {
    break;
   }
   $116 = (($33) + ($$0$i$i$i65<<2)|0);
   HEAP32[$116>>2] = 0;
   $117 = (($$0$i$i$i65) + 1)|0;
   $$0$i$i$i65 = $117;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
  $118 = HEAP32[$93>>2]|0;
  $119 = ((($118)) + 12|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (FUNCTION_TABLE_ii[$120 & 1023]($93)|0);
  HEAP8[$3>>0] = $121;
  $122 = HEAP32[$93>>2]|0;
  $123 = ((($122)) + 16|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (FUNCTION_TABLE_ii[$124 & 1023]($93)|0);
  HEAP8[$4>>0] = $125;
  $126 = HEAP32[$93>>2]|0;
  $127 = ((($126)) + 20|0);
  $128 = HEAP32[$127>>2]|0;
  FUNCTION_TABLE_vii[$128 & 511]($34,$93);
  $129 = ((($5)) + 11|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = ($130<<24>>24)<(0);
  if ($131) {
   $132 = HEAP32[$5>>2]|0;
   HEAP8[$12>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($132,$12);
   $133 = ((($5)) + 4|0);
   HEAP32[$133>>2] = 0;
   $$pre$phi$i$i69Z2D = $5;
  } else {
   HEAP8[$13>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$13);
   HEAP8[$129>>0] = 0;
   $$pre$phi$i$i69Z2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($5,0);
  ;HEAP32[$$pre$phi$i$i69Z2D>>2]=HEAP32[$34>>2]|0;HEAP32[$$pre$phi$i$i69Z2D+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$$pre$phi$i$i69Z2D+8>>2]=HEAP32[$34+8>>2]|0;
  $$0$i$i$i71 = 0;
  while(1) {
   $exitcond$i$i$i72 = ($$0$i$i$i71|0)==(3);
   if ($exitcond$i$i$i72) {
    break;
   }
   $134 = (($34) + ($$0$i$i$i71<<2)|0);
   HEAP32[$134>>2] = 0;
   $135 = (($$0$i$i$i71) + 1)|0;
   $$0$i$i$i71 = $135;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($34);
  $136 = HEAP32[$93>>2]|0;
  $137 = ((($136)) + 24|0);
  $138 = HEAP32[$137>>2]|0;
  FUNCTION_TABLE_vii[$138 & 511]($35,$93);
  $139 = ((($6)) + 11|0);
  $140 = HEAP8[$139>>0]|0;
  $141 = ($140<<24>>24)<(0);
  if ($141) {
   $142 = HEAP32[$6>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($142,$10);
   $143 = ((($6)) + 4|0);
   HEAP32[$143>>2] = 0;
   $$pre$phi$i$i75Z2D = $6;
  } else {
   HEAP8[$11>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$11);
   HEAP8[$139>>0] = 0;
   $$pre$phi$i$i75Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($6,0);
  ;HEAP32[$$pre$phi$i$i75Z2D>>2]=HEAP32[$35>>2]|0;HEAP32[$$pre$phi$i$i75Z2D+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$$pre$phi$i$i75Z2D+8>>2]=HEAP32[$35+8>>2]|0;
  $$0$i$i$i77 = 0;
  while(1) {
   $exitcond$i$i$i78 = ($$0$i$i$i77|0)==(3);
   if ($exitcond$i$i$i78) {
    break;
   }
   $144 = (($35) + ($$0$i$i$i77<<2)|0);
   HEAP32[$144>>2] = 0;
   $145 = (($$0$i$i$i77) + 1)|0;
   $$0$i$i$i77 = $145;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35);
  $146 = HEAP32[$93>>2]|0;
  $147 = ((($146)) + 36|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (FUNCTION_TABLE_ii[$148 & 1023]($93)|0);
  $storemerge = $149;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(518|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7;
 $9 = (($6) - ($8))|0;
 $10 = ($9>>>0)<(2147483647);
 $11 = $9 << 1;
 $12 = ($11|0)==(0);
 $spec$select = $12 ? 1 : $11;
 $13 = $10 ? $spec$select : -1;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) - ($8))|0;
 $spec$select35 = $5 ? $7 : 0;
 $16 = (_realloc($spec$select35,$13)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($5) {
  $18 = $16;
  HEAP32[$0>>2] = $18;
  $23 = $16;
 } else {
  $$pr = HEAP32[$0>>2]|0;
  $19 = $16;
  HEAP32[$0>>2] = $19;
  $20 = ($$pr|0)==(0|0);
  if ($20) {
   $23 = $16;
  } else {
   $21 = HEAP32[$3>>2]|0;
   FUNCTION_TABLE_vi[$21 & 1023]($$pr);
   $$pre = HEAP32[$0>>2]|0;
   $23 = $$pre;
  }
 }
 HEAP32[$3>>2] = (519);
 $22 = (($23) + ($15)|0);
 HEAP32[$1>>2] = $22;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($24) + ($13)|0);
 HEAP32[$2>>2] = $25;
 return;
}
function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(518|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7;
 $9 = (($6) - ($8))|0;
 $10 = ($9>>>0)<(2147483647);
 $11 = $9 << 1;
 $12 = ($11|0)==(0);
 $spec$select = $12 ? 4 : $11;
 $13 = $10 ? $spec$select : -1;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) - ($8))|0;
 $16 = $15 >> 2;
 $spec$select35 = $5 ? $7 : 0;
 $17 = (_realloc($spec$select35,$13)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($5) {
  $19 = $17;
  HEAP32[$0>>2] = $19;
  $25 = $17;
 } else {
  $$pr = HEAP32[$0>>2]|0;
  $20 = $17;
  HEAP32[$0>>2] = $20;
  $21 = ($$pr|0)==(0|0);
  if ($21) {
   $25 = $17;
  } else {
   $22 = HEAP32[$3>>2]|0;
   FUNCTION_TABLE_vi[$22 & 1023]($$pr);
   $$pre = HEAP32[$0>>2]|0;
   $25 = $$pre;
  }
 }
 HEAP32[$3>>2] = (519);
 $23 = $13 >>> 2;
 $24 = (($25) + ($16<<2)|0);
 HEAP32[$1>>2] = $24;
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$2>>2] = $27;
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$025 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $$sroa$027$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $$byval_copy = sp + 584|0;
 $vararg_buffer = sp + 560|0;
 $7 = sp + 160|0;
 $8 = sp + 576|0;
 $9 = sp + 572|0;
 $10 = sp + 568|0;
 $11 = sp + 588|0;
 $12 = sp + 564|0;
 $13 = sp + 112|0;
 $14 = sp;
 $15 = $7;
 HEAP32[$8>>2] = $15;
 $16 = ((($8)) + 4|0);
 HEAP32[$16>>2] = (518);
 $17 = ((($7)) + 400|0);
 __ZNKSt3__28ios_base6getlocEv($10,$4);
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($10,71024)|0);
 HEAP8[$11>>0] = 0;
 $19 = HEAP32[$2>>2]|0;
 HEAP32[$12>>2] = $19;
 $20 = ((($4)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $22 = (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($1,$$byval_copy,$3,$10,$21,$5,$11,$18,$8,$9,$17)|0);
 if ($22) {
  $23 = HEAP32[$18>>2]|0;
  $24 = ((($23)) + 48|0);
  $25 = HEAP32[$24>>2]|0;
  (FUNCTION_TABLE_iiiii[$25 & 511]($18,63563,(63573),$13)|0);
  $26 = HEAP32[$9>>2]|0;
  $27 = HEAP32[$8>>2]|0;
  $28 = (($26) - ($27))|0;
  $29 = ($28|0)>(392);
  $30 = $27;
  $31 = $26;
  if ($29) {
   $32 = $28 >>> 2;
   $33 = (($32) + 2)|0;
   $34 = (_malloc($33)|0);
   $35 = $34;
   $36 = ($34|0)==(0|0);
   if ($36) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $$025 = $34;$$sroa$027$0 = $35;
   }
  } else {
   $$025 = $14;$$sroa$027$0 = 0;
  }
  $37 = HEAP8[$11>>0]|0;
  $38 = ($37<<24>>24)==(0);
  if ($38) {
   $$1 = $$025;
  } else {
   $39 = ((($$025)) + 1|0);
   HEAP8[$$025>>0] = 45;
   $$1 = $39;
  }
  $40 = ((($13)) + 40|0);
  $41 = $13;
  $$0 = $30;$$2 = $$1;$43 = $31;
  while(1) {
   $42 = ($$0>>>0)<($43>>>0);
   if (!($42)) {
    break;
   }
   $46 = HEAP32[$$0>>2]|0;
   $$0$i = $13;
   while(1) {
    $47 = ($$0$i|0)==($40|0);
    if ($47) {
     $$0$lcssa$i = $40;
     break;
    }
    $48 = HEAP32[$$0$i>>2]|0;
    $49 = ($48|0)==($46|0);
    if ($49) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $50 = ((($$0$i)) + 4|0);
    $$0$i = $50;
   }
   $51 = $$0$lcssa$i;
   $52 = (($51) - ($41))|0;
   $53 = $52 >> 2;
   $54 = (63563 + ($53)|0);
   $55 = HEAP8[$54>>0]|0;
   HEAP8[$$2>>0] = $55;
   $56 = ((($$0)) + 4|0);
   $57 = ((($$2)) + 1|0);
   $$pre = HEAP32[$9>>2]|0;
   $$0 = $56;$$2 = $57;$43 = $$pre;
  }
  HEAP8[$$2>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $6;
  $44 = (_sscanf($14,63464,$vararg_buffer)|0);
  $45 = ($44|0)==(1);
  if (!($45)) {
   __ZNSt3__221__throw_runtime_errorEPKc(0);
   // unreachable;
  }
  $58 = ($$sroa$027$0|0)==(0);
  if (!($58)) {
   $59 = $$sroa$027$0;
   _free($59);
  }
 }
 $60 = HEAP32[$1>>2]|0;
 $61 = ($60|0)==(0|0);
 do {
  if ($61) {
   $96 = 1;
  } else {
   $62 = ((($60)) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($60)) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($63|0)==($65|0);
   if ($66) {
    $67 = HEAP32[$60>>2]|0;
    $68 = ((($67)) + 36|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
    $$0$i$i$i$i = $70;
   } else {
    $71 = HEAP32[$63>>2]|0;
    $72 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($71)|0);
    $$0$i$i$i$i = $72;
   }
   $73 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $74 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$73)|0);
   if ($74) {
    HEAP32[$1>>2] = 0;
    $96 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $96 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $75 = HEAP32[$2>>2]|0;
 $76 = ($75|0)==(0|0);
 do {
  if ($76) {
   label = 32;
  } else {
   $77 = ((($75)) + 12|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($75)) + 16|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($78|0)==($80|0);
   if ($81) {
    $82 = HEAP32[$75>>2]|0;
    $83 = ((($82)) + 36|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (FUNCTION_TABLE_ii[$84 & 1023]($75)|0);
    $$0$i$i2$i$i = $85;
   } else {
    $86 = HEAP32[$78>>2]|0;
    $87 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($86)|0);
    $$0$i$i2$i$i = $87;
   }
   $88 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $89 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$88)|0);
   if ($89) {
    HEAP32[$2>>2] = 0;
    label = 32;
    break;
   } else {
    if ($96) {
     break;
    } else {
     label = 34;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($96) {
   label = 34;
  }
 }
 if ((label|0) == 34) {
  $90 = HEAP32[$5>>2]|0;
  $91 = $90 | 2;
  HEAP32[$5>>2] = $91;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__26localeD2Ev($10);
 $92 = HEAP32[$8>>2]|0;
 HEAP32[$8>>2] = 0;
 $93 = ($92|0)==(0|0);
 if (!($93)) {
  $94 = ((($8)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  FUNCTION_TABLE_vi[$95 & 1023]($92);
 }
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $$byval_copy = sp + 432|0;
 $7 = sp + 428|0;
 $8 = sp + 424|0;
 $9 = sp;
 $10 = sp + 416|0;
 $11 = sp + 408|0;
 $12 = sp + 404|0;
 $13 = sp + 436|0;
 $14 = sp + 400|0;
 $15 = $9;
 HEAP32[$10>>2] = $15;
 $16 = ((($10)) + 4|0);
 HEAP32[$16>>2] = (518);
 $17 = ((($9)) + 400|0);
 __ZNKSt3__28ios_base6getlocEv($12,$4);
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($12,71024)|0);
 HEAP8[$13>>0] = 0;
 $19 = HEAP32[$2>>2]|0;
 HEAP32[$14>>2] = $19;
 $20 = ((($4)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$14>>2]|0;
 $22 = (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($1,$$byval_copy,$3,$12,$21,$5,$13,$18,$10,$11,$17)|0);
 $23 = $19;
 if ($22) {
  $24 = ((($6)) + 8|0);
  $25 = ((($24)) + 3|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)<(0);
  if ($27) {
   $28 = HEAP32[$6>>2]|0;
   HEAP32[$7>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($28,$7);
   $29 = ((($6)) + 4|0);
   HEAP32[$29>>2] = 0;
  } else {
   HEAP32[$8>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6,$8);
   HEAP8[$25>>0] = 0;
  }
  $30 = HEAP8[$13>>0]|0;
  $31 = ($30<<24>>24)==(0);
  if (!($31)) {
   $32 = HEAP32[$18>>2]|0;
   $33 = ((($32)) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_iii[$34 & 511]($18,45)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($6,$35);
  }
  $36 = HEAP32[$18>>2]|0;
  $37 = ((($36)) + 44|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (FUNCTION_TABLE_iii[$38 & 511]($18,48)|0);
  $40 = HEAP32[$10>>2]|0;
  $41 = HEAP32[$11>>2]|0;
  $42 = ((($41)) + -4|0);
  $$0 = $40;
  while(1) {
   $43 = ($$0>>>0)<($42>>>0);
   if (!($43)) {
    break;
   }
   $44 = HEAP32[$$0>>2]|0;
   $45 = ($44|0)==($39|0);
   if (!($45)) {
    break;
   }
   $46 = ((($$0)) + 4|0);
   $$0 = $46;
  }
  (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($6,$$0,$41)|0);
 }
 $47 = HEAP32[$1>>2]|0;
 $48 = ($47|0)==(0|0);
 do {
  if ($48) {
   $83 = 1;
  } else {
   $49 = ((($47)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($47)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)==($52|0);
   if ($53) {
    $54 = HEAP32[$47>>2]|0;
    $55 = ((($54)) + 36|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (FUNCTION_TABLE_ii[$56 & 1023]($47)|0);
    $$0$i$i$i$i = $57;
   } else {
    $58 = HEAP32[$50>>2]|0;
    $59 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($58)|0);
    $$0$i$i$i$i = $59;
   }
   $60 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $61 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$60)|0);
   if ($61) {
    HEAP32[$1>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $62 = ($19|0)==(0);
 do {
  if ($62) {
   label = 25;
  } else {
   $63 = ((($23)) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($23)) + 16|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($64|0)==($66|0);
   if ($67) {
    $68 = $19;
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($69)) + 36|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (FUNCTION_TABLE_ii[$71 & 1023]($23)|0);
    $$0$i$i2$i$i = $72;
   } else {
    $73 = HEAP32[$64>>2]|0;
    $74 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($73)|0);
    $$0$i$i2$i$i = $74;
   }
   $75 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $76 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$75)|0);
   if ($76) {
    HEAP32[$2>>2] = 0;
    label = 25;
    break;
   } else {
    if ($83) {
     break;
    } else {
     label = 27;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 25) {
  if ($83) {
   label = 27;
  }
 }
 if ((label|0) == 27) {
  $77 = HEAP32[$5>>2]|0;
  $78 = $77 | 2;
  HEAP32[$5>>2] = $78;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__26localeD2Ev($12);
 $79 = HEAP32[$10>>2]|0;
 HEAP32[$10>>2] = 0;
 $80 = ($79|0)==(0|0);
 if (!($80)) {
  $81 = ((($10)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  FUNCTION_TABLE_vi[$82 & 1023]($79);
 }
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i162 = 0, $$0$i$i$i$i207 = 0, $$0$i$i$i$i220 = 0, $$0$i$i$i$i236 = 0, $$0$i$i$i$i251 = 0, $$0$i$i$i$i266 = 0, $$0$i$i149 = 0, $$0$i$i151 = 0, $$0$i$i154 = 0, $$0$i$i157 = 0, $$0$i$i160 = 0, $$0$i$i161 = 0, $$0$i$i174 = 0, $$0$i$i176 = 0, $$0$i$i182 = 0, $$0$i$i189 = 0, $$0$i$i194 = 0;
 var $$0$i$i2$i$i = 0, $$0$i$i2$i$i168 = 0, $$0$i$i2$i$i213 = 0, $$0$i$i2$i$i226 = 0, $$0$i$i2$i$i242 = 0, $$0$i$i2$i$i257 = 0, $$0$i$i2$i$i272 = 0, $$0$i$i203 = 0, $$0$i$i232 = 0, $$0$i$i248 = 0, $$0$i$i263 = 0, $$0$i$i278 = 0, $$0$i$i280 = 0, $$0126 = 0, $$0131 = 0, $$0133 = 0, $$10 = 0, $$1132 = 0, $$2128$ph = 0, $$pre = 0;
 var $$pre$i$i$i = 0, $$pre$i$i$i164 = 0, $$pre$i$i$i209 = 0, $$pre$i$i$i222 = 0, $$pre$i$i$i238 = 0, $$pre$i$i$i253 = 0, $$pre$i$i$i268 = 0, $$pre$phiZ2D = 0, $$pre354 = 0, $$pre355 = 0, $$pre356 = 0, $$pre357 = 0, $$pre358 = 0, $$pre359 = 0, $$pre360 = 0, $$pre361 = 0, $$sink = 0, $$sroa$0289$0$ptr = 0, $$sroa$0309$0 = 0, $$sroa$0309$1 = 0;
 var $$sroa$0309$1$ptr = 0, $$sroa$08$0$ptr$i = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $79 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $cond148 = 0;
 var $exitcond$i$i = 0, $exitcond$i$i150 = 0, $exitcond$i$i152 = 0, $exitcond$i$i155 = 0, $exitcond$i$i158 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond145 = 0, $or$cond15 = 0, $or$cond373 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i165 = 0, $phitmp$i$i$i210 = 0, $phitmp$i$i$i223 = 0, $phitmp$i$i$i239 = 0, $phitmp$i$i$i254 = 0, $phitmp$i$i$i269 = 0, $spec$select = 0, $spec$select141 = 0, $spec$select142 = 0;
 var $spec$select143 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $11 = sp + 496|0;
 $12 = sp;
 $13 = sp + 488|0;
 $14 = sp + 480|0;
 $15 = sp + 476|0;
 $16 = sp + 500|0;
 $17 = sp + 472|0;
 $18 = sp + 468|0;
 $19 = sp + 456|0;
 $20 = sp + 444|0;
 $21 = sp + 432|0;
 $22 = sp + 420|0;
 $23 = sp + 408|0;
 $24 = sp + 404|0;
 $25 = sp + 400|0;
 HEAP32[$11>>2] = $10;
 $26 = $12;
 HEAP32[$13>>2] = $26;
 $27 = ((($13)) + 4|0);
 HEAP32[$27>>2] = (518);
 HEAP32[$14>>2] = $12;
 $28 = ((($12)) + 400|0);
 HEAP32[$15>>2] = $28;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $29 = (($19) + ($$0$i$i<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = (($$0$i$i) + 1)|0;
  $$0$i$i = $30;
 }
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
 $$0$i$i149 = 0;
 while(1) {
  $exitcond$i$i150 = ($$0$i$i149|0)==(3);
  if ($exitcond$i$i150) {
   break;
  }
  $31 = (($20) + ($$0$i$i149<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (($$0$i$i149) + 1)|0;
  $$0$i$i149 = $32;
 }
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $$0$i$i151 = 0;
 while(1) {
  $exitcond$i$i152 = ($$0$i$i151|0)==(3);
  if ($exitcond$i$i152) {
   break;
  }
  $33 = (($21) + ($$0$i$i151<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$0$i$i151) + 1)|0;
  $$0$i$i151 = $34;
 }
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
 $$0$i$i154 = 0;
 while(1) {
  $exitcond$i$i155 = ($$0$i$i154|0)==(3);
  if ($exitcond$i$i155) {
   break;
  }
  $35 = (($22) + ($$0$i$i154<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i154) + 1)|0;
  $$0$i$i154 = $36;
 }
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
 $$0$i$i157 = 0;
 while(1) {
  $exitcond$i$i158 = ($$0$i$i157|0)==(3);
  if ($exitcond$i$i158) {
   break;
  }
  $37 = (($23) + ($$0$i$i157<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i157) + 1)|0;
  $$0$i$i157 = $38;
 }
 __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($2,$3,$16,$17,$18,$19,$20,$21,$22,$24);
 $39 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = $39;
 $40 = ((($21)) + 8|0);
 $41 = ((($40)) + 3|0);
 $42 = ((($21)) + 4|0);
 $43 = ((($22)) + 8|0);
 $44 = ((($43)) + 3|0);
 $45 = ((($22)) + 4|0);
 $46 = ((($19)) + 11|0);
 $47 = ((($19)) + 4|0);
 $48 = $4 & 512;
 $49 = ($48|0)!=(0);
 $50 = ((($20)) + 8|0);
 $51 = ((($50)) + 3|0);
 $52 = ((($16)) + 3|0);
 $53 = ((($20)) + 4|0);
 $54 = ((($23)) + 8|0);
 $55 = ((($54)) + 3|0);
 $56 = ((($23)) + 4|0);
 $$0131 = 0;$$0133 = 0;
 L21: while(1) {
  $57 = ($$0133>>>0)<(4);
  if (!($57)) {
   label = 239;
   break;
  }
  $58 = HEAP32[$0>>2]|0;
  $59 = ($58|0)==(0|0);
  do {
   if ($59) {
    $766 = 1;
   } else {
    $60 = ((($58)) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($58)) + 16|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($61|0)==($63|0);
    if ($64) {
     $65 = HEAP32[$58>>2]|0;
     $66 = ((($65)) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (FUNCTION_TABLE_ii[$67 & 1023]($58)|0);
     $$0$i$i$i$i = $68;
    } else {
     $69 = HEAP32[$61>>2]|0;
     $70 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($69)|0);
     $$0$i$i$i$i = $70;
    }
    $71 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $72 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$71)|0);
    if ($72) {
     HEAP32[$0>>2] = 0;
     $766 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$0>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $766 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $73 = HEAP32[$1>>2]|0;
  $74 = ($73|0)==(0|0);
  do {
   if ($74) {
    label = 31;
   } else {
    $75 = ((($73)) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ((($73)) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($76|0)==($78|0);
    if ($79) {
     $80 = HEAP32[$73>>2]|0;
     $81 = ((($80)) + 36|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 1023]($73)|0);
     $$0$i$i2$i$i = $83;
    } else {
     $84 = HEAP32[$76>>2]|0;
     $85 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($84)|0);
     $$0$i$i2$i$i = $85;
    }
    $86 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $87 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$86)|0);
    if ($87) {
     HEAP32[$1>>2] = 0;
     label = 31;
     break;
    } else {
     if ($766) {
      $767 = $73;
      break;
     } else {
      label = 239;
      break L21;
     }
    }
   }
  } while(0);
  if ((label|0) == 31) {
   label = 0;
   if ($766) {
    label = 239;
    break;
   } else {
    $767 = 0;
   }
  }
  $88 = (($16) + ($$0133)|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89 << 24 >> 24;
  L46: do {
   switch ($90|0) {
   case 1:  {
    $cond148 = ($$0133|0)==(3);
    if ($cond148) {
     $$1132 = $$0131;
    } else {
     $91 = HEAP32[$0>>2]|0;
     $92 = ((($91)) + 12|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ((($91)) + 16|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($93|0)==($95|0);
     if ($96) {
      $97 = HEAP32[$91>>2]|0;
      $98 = ((($97)) + 36|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (FUNCTION_TABLE_ii[$99 & 1023]($91)|0);
      $$0$i$i160 = $100;
     } else {
      $101 = HEAP32[$93>>2]|0;
      $102 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
      $$0$i$i160 = $102;
     }
     $103 = HEAP32[$7>>2]|0;
     $104 = ((($103)) + 12|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (FUNCTION_TABLE_iiii[$105 & 1023]($7,8192,$$0$i$i160)|0);
     if (!($106)) {
      label = 44;
      break L21;
     }
     $107 = HEAP32[$0>>2]|0;
     $108 = ((($107)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ((($107)) + 16|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($109|0)==($111|0);
     if ($112) {
      $113 = HEAP32[$107>>2]|0;
      $114 = ((($113)) + 40|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = (FUNCTION_TABLE_ii[$115 & 1023]($107)|0);
      $$0$i$i161 = $116;
     } else {
      $117 = ((($109)) + 4|0);
      HEAP32[$108>>2] = $117;
      $118 = HEAP32[$109>>2]|0;
      $119 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($118)|0);
      $$0$i$i161 = $119;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($23,$$0$i$i161);
     label = 46;
    }
    break;
   }
   case 0:  {
    $122 = ($$0133|0)==(3);
    if ($122) {
     $$1132 = $$0131;
    } else {
     label = 46;
    }
    break;
   }
   case 3:  {
    $182 = HEAP8[$41>>0]|0;
    $183 = ($182<<24>>24)<(0);
    $184 = HEAP32[$42>>2]|0;
    $185 = $182&255;
    $186 = $183 ? $184 : $185;
    $187 = HEAP8[$44>>0]|0;
    $188 = ($187<<24>>24)<(0);
    $189 = HEAP32[$45>>2]|0;
    $190 = $187&255;
    $191 = $188 ? $189 : $190;
    $192 = (0 - ($191))|0;
    $193 = ($186|0)==($192|0);
    if ($193) {
     $$1132 = $$0131;
    } else {
     $194 = ($186|0)==(0);
     $195 = ($191|0)==(0);
     $or$cond373 = $194 | $195;
     $196 = HEAP32[$0>>2]|0;
     $197 = ((($196)) + 12|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = ((($196)) + 16|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = ($198|0)==($200|0);
     if ($or$cond373) {
      if ($201) {
       $202 = HEAP32[$196>>2]|0;
       $203 = ((($202)) + 36|0);
       $204 = HEAP32[$203>>2]|0;
       $205 = (FUNCTION_TABLE_ii[$204 & 1023]($196)|0);
       $$0$i$i182 = $205;
      } else {
       $206 = HEAP32[$198>>2]|0;
       $207 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($206)|0);
       $$0$i$i182 = $207;
      }
      if ($194) {
       $231 = HEAP8[$44>>0]|0;
       $232 = ($231<<24>>24)<(0);
       $233 = HEAP32[$22>>2]|0;
       $234 = $232 ? $233 : $22;
       $235 = HEAP32[$234>>2]|0;
       $236 = ($$0$i$i182|0)==($235|0);
       if (!($236)) {
        $$1132 = $$0131;
        break L46;
       }
       $237 = HEAP32[$0>>2]|0;
       $238 = ((($237)) + 12|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = ((($237)) + 16|0);
       $241 = HEAP32[$240>>2]|0;
       $242 = ($239|0)==($241|0);
       if ($242) {
        $243 = HEAP32[$237>>2]|0;
        $244 = ((($243)) + 40|0);
        $245 = HEAP32[$244>>2]|0;
        (FUNCTION_TABLE_ii[$245 & 1023]($237)|0);
       } else {
        $246 = ((($239)) + 4|0);
        HEAP32[$238>>2] = $246;
        $247 = HEAP32[$239>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($247)|0);
       }
       HEAP8[$6>>0] = 1;
       $248 = HEAP8[$44>>0]|0;
       $249 = ($248<<24>>24)<(0);
       $250 = HEAP32[$45>>2]|0;
       $251 = $248&255;
       $252 = $249 ? $250 : $251;
       $253 = ($252>>>0)>(1);
       $spec$select141 = $253 ? $22 : $$0131;
       $$1132 = $spec$select141;
       break L46;
      }
      $208 = HEAP8[$41>>0]|0;
      $209 = ($208<<24>>24)<(0);
      $210 = HEAP32[$21>>2]|0;
      $211 = $209 ? $210 : $21;
      $212 = HEAP32[$211>>2]|0;
      $213 = ($$0$i$i182|0)==($212|0);
      if (!($213)) {
       HEAP8[$6>>0] = 1;
       $$1132 = $$0131;
       break L46;
      }
      $214 = HEAP32[$0>>2]|0;
      $215 = ((($214)) + 12|0);
      $216 = HEAP32[$215>>2]|0;
      $217 = ((($214)) + 16|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = ($216|0)==($218|0);
      if ($219) {
       $220 = HEAP32[$214>>2]|0;
       $221 = ((($220)) + 40|0);
       $222 = HEAP32[$221>>2]|0;
       (FUNCTION_TABLE_ii[$222 & 1023]($214)|0);
      } else {
       $223 = ((($216)) + 4|0);
       HEAP32[$215>>2] = $223;
       $224 = HEAP32[$216>>2]|0;
       (__ZNSt3__211char_traitsIwE11to_int_typeEw($224)|0);
      }
      $225 = HEAP8[$41>>0]|0;
      $226 = ($225<<24>>24)<(0);
      $227 = HEAP32[$42>>2]|0;
      $228 = $225&255;
      $229 = $226 ? $227 : $228;
      $230 = ($229>>>0)>(1);
      $spec$select = $230 ? $21 : $$0131;
      $$1132 = $spec$select;
      break L46;
     }
     if ($201) {
      $254 = HEAP32[$196>>2]|0;
      $255 = ((($254)) + 36|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = (FUNCTION_TABLE_ii[$256 & 1023]($196)|0);
      $$0$i$i189 = $257;
     } else {
      $258 = HEAP32[$198>>2]|0;
      $259 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($258)|0);
      $$0$i$i189 = $259;
     }
     $260 = HEAP8[$41>>0]|0;
     $261 = ($260<<24>>24)<(0);
     $262 = HEAP32[$21>>2]|0;
     $263 = $261 ? $262 : $21;
     $264 = HEAP32[$263>>2]|0;
     $265 = ($$0$i$i189|0)==($264|0);
     $266 = HEAP32[$0>>2]|0;
     $267 = ((($266)) + 12|0);
     $268 = HEAP32[$267>>2]|0;
     $269 = ((($266)) + 16|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = ($268|0)==($270|0);
     if ($265) {
      if ($271) {
       $272 = HEAP32[$266>>2]|0;
       $273 = ((($272)) + 40|0);
       $274 = HEAP32[$273>>2]|0;
       (FUNCTION_TABLE_ii[$274 & 1023]($266)|0);
      } else {
       $275 = ((($268)) + 4|0);
       HEAP32[$267>>2] = $275;
       $276 = HEAP32[$268>>2]|0;
       (__ZNSt3__211char_traitsIwE11to_int_typeEw($276)|0);
      }
      $277 = HEAP8[$41>>0]|0;
      $278 = ($277<<24>>24)<(0);
      $279 = HEAP32[$42>>2]|0;
      $280 = $277&255;
      $281 = $278 ? $279 : $280;
      $282 = ($281>>>0)>(1);
      $spec$select142 = $282 ? $21 : $$0131;
      $$1132 = $spec$select142;
      break L46;
     }
     if ($271) {
      $283 = HEAP32[$266>>2]|0;
      $284 = ((($283)) + 36|0);
      $285 = HEAP32[$284>>2]|0;
      $286 = (FUNCTION_TABLE_ii[$285 & 1023]($266)|0);
      $$0$i$i194 = $286;
     } else {
      $287 = HEAP32[$268>>2]|0;
      $288 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($287)|0);
      $$0$i$i194 = $288;
     }
     $289 = HEAP8[$44>>0]|0;
     $290 = ($289<<24>>24)<(0);
     $291 = HEAP32[$22>>2]|0;
     $292 = $290 ? $291 : $22;
     $293 = HEAP32[$292>>2]|0;
     $294 = ($$0$i$i194|0)==($293|0);
     if (!($294)) {
      label = 103;
      break L21;
     }
     $295 = HEAP32[$0>>2]|0;
     $296 = ((($295)) + 12|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = ((($295)) + 16|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = ($297|0)==($299|0);
     if ($300) {
      $301 = HEAP32[$295>>2]|0;
      $302 = ((($301)) + 40|0);
      $303 = HEAP32[$302>>2]|0;
      (FUNCTION_TABLE_ii[$303 & 1023]($295)|0);
     } else {
      $304 = ((($297)) + 4|0);
      HEAP32[$296>>2] = $304;
      $305 = HEAP32[$297>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($305)|0);
     }
     HEAP8[$6>>0] = 1;
     $306 = HEAP8[$44>>0]|0;
     $307 = ($306<<24>>24)<(0);
     $308 = HEAP32[$45>>2]|0;
     $309 = $306&255;
     $310 = $307 ? $308 : $309;
     $311 = ($310>>>0)>(1);
     $spec$select143 = $311 ? $22 : $$0131;
     $$1132 = $spec$select143;
    }
    break;
   }
   case 2:  {
    $314 = ($$0131|0)!=(0|0);
    $315 = ($$0133>>>0)<(2);
    $or$cond = $315 | $314;
    if ($or$cond) {
     $325 = HEAP8[$51>>0]|0;
     $326 = ($325<<24>>24)<(0);
     $327 = HEAP32[$20>>2]|0;
     $328 = $326 ? $327 : $20;
     $329 = $328;
     $330 = ($$0133|0)==(0);
     if ($330) {
      $$sroa$0309$1 = $329;$774 = $327;$775 = $325;
     } else {
      $771 = $329;$772 = $327;$773 = $325;
      label = 108;
     }
    } else {
     $316 = ($$0133|0)==(2);
     $317 = HEAP8[$52>>0]|0;
     $318 = ($317<<24>>24)!=(0);
     $319 = $316 & $318;
     $brmerge = $49 | $319;
     if (!($brmerge)) {
      $$1132 = 0;
      break L46;
     }
     $320 = HEAP8[$51>>0]|0;
     $321 = ($320<<24>>24)<(0);
     $322 = HEAP32[$20>>2]|0;
     $323 = $321 ? $322 : $20;
     $324 = $323;
     $771 = $324;$772 = $322;$773 = $320;
     label = 108;
    }
    L108: do {
     if ((label|0) == 108) {
      label = 0;
      $331 = (($$0133) + -1)|0;
      $332 = (($16) + ($331)|0);
      $333 = HEAP8[$332>>0]|0;
      $switch = ($333&255)<(2);
      if ($switch) {
       $$sroa$0309$0 = $771;$335 = $773;$339 = $772;
       while(1) {
        $334 = ($335<<24>>24)<(0);
        $336 = HEAP32[$53>>2]|0;
        $337 = $335&255;
        $338 = $334 ? $339 : $20;
        $340 = $334 ? $336 : $337;
        $341 = (($338) + ($340<<2)|0);
        $342 = $$sroa$0309$0;
        $343 = ($341|0)==($342|0);
        if ($343) {
         $352 = $335;$354 = $339;
         break;
        }
        $344 = HEAP32[$342>>2]|0;
        $345 = HEAP32[$7>>2]|0;
        $346 = ((($345)) + 12|0);
        $347 = HEAP32[$346>>2]|0;
        $348 = (FUNCTION_TABLE_iiii[$347 & 1023]($7,8192,$344)|0);
        if (!($348)) {
         label = 112;
         break;
        }
        $349 = ((($342)) + 4|0);
        $350 = $349;
        $$pre356 = HEAP8[$51>>0]|0;
        $$pre357 = HEAP32[$20>>2]|0;
        $$sroa$0309$0 = $350;$335 = $$pre356;$339 = $$pre357;
       }
       if ((label|0) == 112) {
        label = 0;
        $$pre358 = HEAP8[$51>>0]|0;
        $$pre359 = HEAP32[$20>>2]|0;
        $352 = $$pre358;$354 = $$pre359;
       }
       $351 = ($352<<24>>24)<(0);
       $353 = $351 ? $354 : $20;
       $355 = $353;
       $356 = (($$sroa$0309$0) - ($355))|0;
       $357 = $356 >> 2;
       $358 = HEAP8[$55>>0]|0;
       $359 = ($358<<24>>24)<(0);
       $360 = HEAP32[$56>>2]|0;
       $361 = $358&255;
       $362 = $359 ? $360 : $361;
       $363 = ($357>>>0)>($362>>>0);
       if ($363) {
        $$sroa$0309$1 = $355;$774 = $354;$775 = $352;
       } else {
        $364 = HEAP32[$23>>2]|0;
        $365 = (($364) + ($360<<2)|0);
        $366 = (($23) + ($361<<2)|0);
        $$sink = $359 ? $365 : $366;
        $$pre$phiZ2D = $359 ? $365 : $366;
        $367 = (0 - ($357))|0;
        $368 = (($$sink) + ($367<<2)|0);
        $$sroa$08$0$ptr$i = $353;$370 = $368;
        while(1) {
         $369 = ($370|0)==($$pre$phiZ2D|0);
         if ($369) {
          $$sroa$0309$1 = $$sroa$0309$0;$774 = $354;$775 = $352;
          break L108;
         }
         $371 = HEAP32[$370>>2]|0;
         $372 = HEAP32[$$sroa$08$0$ptr$i>>2]|0;
         $373 = ($371|0)==($372|0);
         if (!($373)) {
          $$sroa$0309$1 = $355;$774 = $354;$775 = $352;
          break L108;
         }
         $374 = ((($370)) + 4|0);
         $375 = ((($$sroa$08$0$ptr$i)) + 4|0);
         $$sroa$08$0$ptr$i = $375;$370 = $374;
        }
       }
      } else {
       $$sroa$0309$1 = $771;$774 = $772;$775 = $773;
      }
     }
    } while(0);
    $$sroa$0309$1$ptr = $$sroa$0309$1;
    $$sroa$0289$0$ptr = $$sroa$0309$1$ptr;$377 = $775;$381 = $774;$401 = $767;
    L124: while(1) {
     $376 = ($377<<24>>24)<(0);
     $378 = HEAP32[$53>>2]|0;
     $379 = $377&255;
     $380 = $376 ? $381 : $20;
     $382 = $376 ? $378 : $379;
     $383 = (($380) + ($382<<2)|0);
     $384 = ($$sroa$0289$0$ptr|0)==($383|0);
     if ($384) {
      break;
     }
     $385 = HEAP32[$0>>2]|0;
     $386 = ($385|0)==(0|0);
     do {
      if ($386) {
       $776 = 1;
      } else {
       $387 = ((($385)) + 12|0);
       $388 = HEAP32[$387>>2]|0;
       $389 = ((($385)) + 16|0);
       $390 = HEAP32[$389>>2]|0;
       $391 = ($388|0)==($390|0);
       if ($391) {
        $392 = HEAP32[$385>>2]|0;
        $393 = ((($392)) + 36|0);
        $394 = HEAP32[$393>>2]|0;
        $395 = (FUNCTION_TABLE_ii[$394 & 1023]($385)|0);
        $$0$i$i$i$i220 = $395;
       } else {
        $396 = HEAP32[$388>>2]|0;
        $397 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($396)|0);
        $$0$i$i$i$i220 = $397;
       }
       $398 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $399 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i220,$398)|0);
       if ($399) {
        HEAP32[$0>>2] = 0;
        $776 = 1;
        break;
       } else {
        $$pre$i$i$i222 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i223 = ($$pre$i$i$i222|0)==(0|0);
        $776 = $phitmp$i$i$i223;
        break;
       }
      }
     } while(0);
     $400 = ($401|0)==(0|0);
     do {
      if ($400) {
       label = 134;
      } else {
       $402 = ((($401)) + 12|0);
       $403 = HEAP32[$402>>2]|0;
       $404 = ((($401)) + 16|0);
       $405 = HEAP32[$404>>2]|0;
       $406 = ($403|0)==($405|0);
       if ($406) {
        $407 = HEAP32[$401>>2]|0;
        $408 = ((($407)) + 36|0);
        $409 = HEAP32[$408>>2]|0;
        $410 = (FUNCTION_TABLE_ii[$409 & 1023]($401)|0);
        $$0$i$i2$i$i226 = $410;
       } else {
        $411 = HEAP32[$403>>2]|0;
        $412 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($411)|0);
        $$0$i$i2$i$i226 = $412;
       }
       $413 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $414 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i226,$413)|0);
       if ($414) {
        HEAP32[$1>>2] = 0;
        label = 134;
        break;
       } else {
        if ($776) {
         $777 = $401;
         break;
        } else {
         break L124;
        }
       }
      }
     } while(0);
     if ((label|0) == 134) {
      label = 0;
      if ($776) {
       break;
      } else {
       $777 = 0;
      }
     }
     $415 = HEAP32[$0>>2]|0;
     $416 = ((($415)) + 12|0);
     $417 = HEAP32[$416>>2]|0;
     $418 = ((($415)) + 16|0);
     $419 = HEAP32[$418>>2]|0;
     $420 = ($417|0)==($419|0);
     if ($420) {
      $421 = HEAP32[$415>>2]|0;
      $422 = ((($421)) + 36|0);
      $423 = HEAP32[$422>>2]|0;
      $424 = (FUNCTION_TABLE_ii[$423 & 1023]($415)|0);
      $$0$i$i232 = $424;
     } else {
      $425 = HEAP32[$417>>2]|0;
      $426 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($425)|0);
      $$0$i$i232 = $426;
     }
     $427 = HEAP32[$$sroa$0289$0$ptr>>2]|0;
     $428 = ($$0$i$i232|0)==($427|0);
     if (!($428)) {
      break;
     }
     $429 = HEAP32[$0>>2]|0;
     $430 = ((($429)) + 12|0);
     $431 = HEAP32[$430>>2]|0;
     $432 = ((($429)) + 16|0);
     $433 = HEAP32[$432>>2]|0;
     $434 = ($431|0)==($433|0);
     if ($434) {
      $435 = HEAP32[$429>>2]|0;
      $436 = ((($435)) + 40|0);
      $437 = HEAP32[$436>>2]|0;
      (FUNCTION_TABLE_ii[$437 & 1023]($429)|0);
     } else {
      $438 = ((($431)) + 4|0);
      HEAP32[$430>>2] = $438;
      $439 = HEAP32[$431>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($439)|0);
     }
     $440 = ((($$sroa$0289$0$ptr)) + 4|0);
     $$pre360 = HEAP8[$51>>0]|0;
     $$pre361 = HEAP32[$20>>2]|0;
     $$sroa$0289$0$ptr = $440;$377 = $$pre360;$381 = $$pre361;$401 = $777;
    }
    if ($49) {
     $441 = HEAP8[$51>>0]|0;
     $442 = ($441<<24>>24)<(0);
     $443 = HEAP32[$20>>2]|0;
     $444 = HEAP32[$53>>2]|0;
     $445 = $441&255;
     $446 = $442 ? $443 : $20;
     $447 = $442 ? $444 : $445;
     $448 = (($446) + ($447<<2)|0);
     $449 = ($$sroa$0289$0$ptr|0)==($448|0);
     if ($449) {
      $$1132 = $$0131;
     } else {
      label = 146;
      break L21;
     }
    } else {
     $$1132 = $$0131;
    }
    break;
   }
   case 4:  {
    $$0126 = 0;$468 = $767;$768 = $767;
    L161: while(1) {
     $452 = HEAP32[$0>>2]|0;
     $453 = ($452|0)==(0|0);
     do {
      if ($453) {
       $778 = 1;
      } else {
       $454 = ((($452)) + 12|0);
       $455 = HEAP32[$454>>2]|0;
       $456 = ((($452)) + 16|0);
       $457 = HEAP32[$456>>2]|0;
       $458 = ($455|0)==($457|0);
       if ($458) {
        $459 = HEAP32[$452>>2]|0;
        $460 = ((($459)) + 36|0);
        $461 = HEAP32[$460>>2]|0;
        $462 = (FUNCTION_TABLE_ii[$461 & 1023]($452)|0);
        $$0$i$i$i$i236 = $462;
       } else {
        $463 = HEAP32[$455>>2]|0;
        $464 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($463)|0);
        $$0$i$i$i$i236 = $464;
       }
       $465 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $466 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i236,$465)|0);
       if ($466) {
        HEAP32[$0>>2] = 0;
        $778 = 1;
        break;
       } else {
        $$pre$i$i$i238 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i239 = ($$pre$i$i$i238|0)==(0|0);
        $778 = $phitmp$i$i$i239;
        break;
       }
      }
     } while(0);
     $467 = ($468|0)==(0|0);
     do {
      if ($467) {
       $779 = $768;
       label = 160;
      } else {
       $469 = ((($468)) + 12|0);
       $470 = HEAP32[$469>>2]|0;
       $471 = ((($468)) + 16|0);
       $472 = HEAP32[$471>>2]|0;
       $473 = ($470|0)==($472|0);
       if ($473) {
        $474 = HEAP32[$468>>2]|0;
        $475 = ((($474)) + 36|0);
        $476 = HEAP32[$475>>2]|0;
        $477 = (FUNCTION_TABLE_ii[$476 & 1023]($468)|0);
        $$0$i$i2$i$i242 = $477;
       } else {
        $478 = HEAP32[$470>>2]|0;
        $479 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($478)|0);
        $$0$i$i2$i$i242 = $479;
       }
       $480 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $481 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i242,$480)|0);
       if ($481) {
        HEAP32[$1>>2] = 0;
        $779 = 0;
        label = 160;
        break;
       } else {
        if ($778) {
         $780 = $768;$781 = $468;
         break;
        } else {
         $555 = $768;
         break L161;
        }
       }
      }
     } while(0);
     if ((label|0) == 160) {
      label = 0;
      if ($778) {
       $555 = $779;
       break;
      } else {
       $780 = $779;$781 = 0;
      }
     }
     $482 = HEAP32[$0>>2]|0;
     $483 = ((($482)) + 12|0);
     $484 = HEAP32[$483>>2]|0;
     $485 = ((($482)) + 16|0);
     $486 = HEAP32[$485>>2]|0;
     $487 = ($484|0)==($486|0);
     if ($487) {
      $488 = HEAP32[$482>>2]|0;
      $489 = ((($488)) + 36|0);
      $490 = HEAP32[$489>>2]|0;
      $491 = (FUNCTION_TABLE_ii[$490 & 1023]($482)|0);
      $$0$i$i248 = $491;
     } else {
      $492 = HEAP32[$484>>2]|0;
      $493 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($492)|0);
      $$0$i$i248 = $493;
     }
     $494 = HEAP32[$7>>2]|0;
     $495 = ((($494)) + 12|0);
     $496 = HEAP32[$495>>2]|0;
     $497 = (FUNCTION_TABLE_iiii[$496 & 1023]($7,2048,$$0$i$i248)|0);
     if ($497) {
      $498 = HEAP32[$9>>2]|0;
      $499 = HEAP32[$11>>2]|0;
      $500 = ($498|0)==($499|0);
      if ($500) {
       __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8,$9,$11);
       $$pre354 = HEAP32[$9>>2]|0;
       $502 = $$pre354;
      } else {
       $502 = $498;
      }
      $501 = ((($502)) + 4|0);
      HEAP32[$9>>2] = $501;
      HEAP32[$502>>2] = $$0$i$i248;
      $503 = (($$0126) + 1)|0;
      $$2128$ph = $503;
     } else {
      $504 = HEAP8[$46>>0]|0;
      $505 = ($504<<24>>24)<(0);
      $506 = HEAP32[$47>>2]|0;
      $507 = $504&255;
      $508 = $505 ? $506 : $507;
      $509 = ($508|0)!=(0);
      $510 = ($$0126|0)!=(0);
      $or$cond13 = $510 & $509;
      $511 = HEAP32[$18>>2]|0;
      $512 = ($$0$i$i248|0)==($511|0);
      $or$cond145 = $512 & $or$cond13;
      if (!($or$cond145)) {
       $555 = $780;
       break;
      }
      $513 = HEAP32[$14>>2]|0;
      $514 = HEAP32[$15>>2]|0;
      $515 = ($513|0)==($514|0);
      if ($515) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13,$14,$15);
       $$pre = HEAP32[$14>>2]|0;
       $517 = $$pre;
      } else {
       $517 = $513;
      }
      $516 = ((($517)) + 4|0);
      HEAP32[$14>>2] = $516;
      HEAP32[$517>>2] = $$0126;
      $$2128$ph = 0;
     }
     $518 = HEAP32[$0>>2]|0;
     $519 = ((($518)) + 12|0);
     $520 = HEAP32[$519>>2]|0;
     $521 = ((($518)) + 16|0);
     $522 = HEAP32[$521>>2]|0;
     $523 = ($520|0)==($522|0);
     if ($523) {
      $524 = HEAP32[$518>>2]|0;
      $525 = ((($524)) + 40|0);
      $526 = HEAP32[$525>>2]|0;
      (FUNCTION_TABLE_ii[$526 & 1023]($518)|0);
     } else {
      $527 = ((($520)) + 4|0);
      HEAP32[$519>>2] = $527;
      $528 = HEAP32[$520>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($528)|0);
     }
     $$0126 = $$2128$ph;$468 = $781;$768 = $780;
    }
    $529 = HEAP32[$13>>2]|0;
    $530 = HEAP32[$14>>2]|0;
    $531 = ($529|0)!=($530|0);
    $532 = ($$0126|0)!=(0);
    $or$cond15 = $532 & $531;
    if ($or$cond15) {
     $533 = HEAP32[$15>>2]|0;
     $534 = ($530|0)==($533|0);
     if ($534) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13,$14,$15);
      $$pre355 = HEAP32[$14>>2]|0;
      $536 = $$pre355;
     } else {
      $536 = $530;
     }
     $535 = ((($536)) + 4|0);
     HEAP32[$14>>2] = $535;
     HEAP32[$536>>2] = $$0126;
    }
    $537 = HEAP32[$24>>2]|0;
    $538 = ($537|0)>(0);
    L211: do {
     if ($538) {
      $539 = HEAP32[$0>>2]|0;
      $540 = ($539|0)==(0|0);
      do {
       if ($540) {
        $782 = 1;
       } else {
        $541 = ((($539)) + 12|0);
        $542 = HEAP32[$541>>2]|0;
        $543 = ((($539)) + 16|0);
        $544 = HEAP32[$543>>2]|0;
        $545 = ($542|0)==($544|0);
        if ($545) {
         $546 = HEAP32[$539>>2]|0;
         $547 = ((($546)) + 36|0);
         $548 = HEAP32[$547>>2]|0;
         $549 = (FUNCTION_TABLE_ii[$548 & 1023]($539)|0);
         $$0$i$i$i$i251 = $549;
        } else {
         $550 = HEAP32[$542>>2]|0;
         $551 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($550)|0);
         $$0$i$i$i$i251 = $551;
        }
        $552 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $553 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i251,$552)|0);
        if ($553) {
         HEAP32[$0>>2] = 0;
         $782 = 1;
         break;
        } else {
         $$pre$i$i$i253 = HEAP32[$0>>2]|0;
         $phitmp$i$i$i254 = ($$pre$i$i$i253|0)==(0|0);
         $782 = $phitmp$i$i$i254;
         break;
        }
       }
      } while(0);
      $554 = ($555|0)==(0|0);
      do {
       if ($554) {
        label = 195;
       } else {
        $556 = ((($555)) + 12|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = ((($555)) + 16|0);
        $559 = HEAP32[$558>>2]|0;
        $560 = ($557|0)==($559|0);
        if ($560) {
         $561 = HEAP32[$555>>2]|0;
         $562 = ((($561)) + 36|0);
         $563 = HEAP32[$562>>2]|0;
         $564 = (FUNCTION_TABLE_ii[$563 & 1023]($555)|0);
         $$0$i$i2$i$i257 = $564;
        } else {
         $565 = HEAP32[$557>>2]|0;
         $566 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($565)|0);
         $$0$i$i2$i$i257 = $566;
        }
        $567 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $568 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i257,$567)|0);
        if ($568) {
         HEAP32[$1>>2] = 0;
         label = 195;
         break;
        } else {
         if ($782) {
          $783 = $555;
          break;
         } else {
          label = 201;
          break L21;
         }
        }
       }
      } while(0);
      if ((label|0) == 195) {
       label = 0;
       if ($782) {
        label = 201;
        break L21;
       } else {
        $783 = 0;
       }
      }
      $569 = HEAP32[$0>>2]|0;
      $570 = ((($569)) + 12|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ((($569)) + 16|0);
      $573 = HEAP32[$572>>2]|0;
      $574 = ($571|0)==($573|0);
      if ($574) {
       $575 = HEAP32[$569>>2]|0;
       $576 = ((($575)) + 36|0);
       $577 = HEAP32[$576>>2]|0;
       $578 = (FUNCTION_TABLE_ii[$577 & 1023]($569)|0);
       $$0$i$i263 = $578;
      } else {
       $579 = HEAP32[$571>>2]|0;
       $580 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($579)|0);
       $$0$i$i263 = $580;
      }
      $581 = HEAP32[$17>>2]|0;
      $582 = ($$0$i$i263|0)==($581|0);
      if (!($582)) {
       label = 201;
       break L21;
      }
      $585 = HEAP32[$0>>2]|0;
      $586 = ((($585)) + 12|0);
      $587 = HEAP32[$586>>2]|0;
      $588 = ((($585)) + 16|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = ($587|0)==($589|0);
      if ($590) {
       $591 = HEAP32[$585>>2]|0;
       $592 = ((($591)) + 40|0);
       $593 = HEAP32[$592>>2]|0;
       (FUNCTION_TABLE_ii[$593 & 1023]($585)|0);
      } else {
       $594 = ((($587)) + 4|0);
       HEAP32[$586>>2] = $594;
       $595 = HEAP32[$587>>2]|0;
       (__ZNSt3__211char_traitsIwE11to_int_typeEw($595)|0);
      }
      $614 = $783;
      while(1) {
       $596 = HEAP32[$24>>2]|0;
       $597 = ($596|0)>(0);
       if (!($597)) {
        break L211;
       }
       $598 = HEAP32[$0>>2]|0;
       $599 = ($598|0)==(0|0);
       do {
        if ($599) {
         $784 = 1;
        } else {
         $600 = ((($598)) + 12|0);
         $601 = HEAP32[$600>>2]|0;
         $602 = ((($598)) + 16|0);
         $603 = HEAP32[$602>>2]|0;
         $604 = ($601|0)==($603|0);
         if ($604) {
          $605 = HEAP32[$598>>2]|0;
          $606 = ((($605)) + 36|0);
          $607 = HEAP32[$606>>2]|0;
          $608 = (FUNCTION_TABLE_ii[$607 & 1023]($598)|0);
          $$0$i$i$i$i266 = $608;
         } else {
          $609 = HEAP32[$601>>2]|0;
          $610 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($609)|0);
          $$0$i$i$i$i266 = $610;
         }
         $611 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $612 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i266,$611)|0);
         if ($612) {
          HEAP32[$0>>2] = 0;
          $784 = 1;
          break;
         } else {
          $$pre$i$i$i268 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i269 = ($$pre$i$i$i268|0)==(0|0);
          $784 = $phitmp$i$i$i269;
          break;
         }
        }
       } while(0);
       $613 = ($614|0)==(0|0);
       do {
        if ($613) {
         label = 220;
        } else {
         $615 = ((($614)) + 12|0);
         $616 = HEAP32[$615>>2]|0;
         $617 = ((($614)) + 16|0);
         $618 = HEAP32[$617>>2]|0;
         $619 = ($616|0)==($618|0);
         if ($619) {
          $620 = HEAP32[$614>>2]|0;
          $621 = ((($620)) + 36|0);
          $622 = HEAP32[$621>>2]|0;
          $623 = (FUNCTION_TABLE_ii[$622 & 1023]($614)|0);
          $$0$i$i2$i$i272 = $623;
         } else {
          $624 = HEAP32[$616>>2]|0;
          $625 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($624)|0);
          $$0$i$i2$i$i272 = $625;
         }
         $626 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $627 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i272,$626)|0);
         if ($627) {
          HEAP32[$1>>2] = 0;
          label = 220;
          break;
         } else {
          if ($784) {
           $785 = $614;
           break;
          } else {
           label = 226;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 220) {
        label = 0;
        if ($784) {
         label = 226;
         break L21;
        } else {
         $785 = 0;
        }
       }
       $628 = HEAP32[$0>>2]|0;
       $629 = ((($628)) + 12|0);
       $630 = HEAP32[$629>>2]|0;
       $631 = ((($628)) + 16|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($630|0)==($632|0);
       if ($633) {
        $634 = HEAP32[$628>>2]|0;
        $635 = ((($634)) + 36|0);
        $636 = HEAP32[$635>>2]|0;
        $637 = (FUNCTION_TABLE_ii[$636 & 1023]($628)|0);
        $$0$i$i278 = $637;
       } else {
        $638 = HEAP32[$630>>2]|0;
        $639 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($638)|0);
        $$0$i$i278 = $639;
       }
       $640 = HEAP32[$7>>2]|0;
       $641 = ((($640)) + 12|0);
       $642 = HEAP32[$641>>2]|0;
       $643 = (FUNCTION_TABLE_iiii[$642 & 1023]($7,2048,$$0$i$i278)|0);
       if (!($643)) {
        label = 226;
        break L21;
       }
       $646 = HEAP32[$9>>2]|0;
       $647 = HEAP32[$11>>2]|0;
       $648 = ($646|0)==($647|0);
       if ($648) {
        __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8,$9,$11);
       }
       $649 = HEAP32[$0>>2]|0;
       $650 = ((($649)) + 12|0);
       $651 = HEAP32[$650>>2]|0;
       $652 = ((($649)) + 16|0);
       $653 = HEAP32[$652>>2]|0;
       $654 = ($651|0)==($653|0);
       if ($654) {
        $655 = HEAP32[$649>>2]|0;
        $656 = ((($655)) + 36|0);
        $657 = HEAP32[$656>>2]|0;
        $658 = (FUNCTION_TABLE_ii[$657 & 1023]($649)|0);
        $$0$i$i280 = $658;
       } else {
        $659 = HEAP32[$651>>2]|0;
        $660 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($659)|0);
        $$0$i$i280 = $660;
       }
       $661 = HEAP32[$9>>2]|0;
       $662 = ((($661)) + 4|0);
       HEAP32[$9>>2] = $662;
       HEAP32[$661>>2] = $$0$i$i280;
       $663 = HEAP32[$24>>2]|0;
       $664 = (($663) + -1)|0;
       HEAP32[$24>>2] = $664;
       $665 = HEAP32[$0>>2]|0;
       $666 = ((($665)) + 12|0);
       $667 = HEAP32[$666>>2]|0;
       $668 = ((($665)) + 16|0);
       $669 = HEAP32[$668>>2]|0;
       $670 = ($667|0)==($669|0);
       if ($670) {
        $671 = HEAP32[$665>>2]|0;
        $672 = ((($671)) + 40|0);
        $673 = HEAP32[$672>>2]|0;
        (FUNCTION_TABLE_ii[$673 & 1023]($665)|0);
       } else {
        $674 = ((($667)) + 4|0);
        HEAP32[$666>>2] = $674;
        $675 = HEAP32[$667>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($675)|0);
       }
       $614 = $785;
      }
     }
    } while(0);
    $676 = HEAP32[$9>>2]|0;
    $677 = HEAP32[$8>>2]|0;
    $678 = ($676|0)==($677|0);
    if ($678) {
     label = 237;
     break L21;
    } else {
     $$1132 = $$0131;
    }
    break;
   }
   default: {
    $$1132 = $$0131;
   }
   }
  } while(0);
  L286: do {
   if ((label|0) == 46) {
    label = 0;
    $139 = $767;
    while(1) {
     $123 = HEAP32[$0>>2]|0;
     $124 = ($123|0)==(0|0);
     do {
      if ($124) {
       $769 = 1;
      } else {
       $125 = ((($123)) + 12|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = ((($123)) + 16|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = ($126|0)==($128|0);
       if ($129) {
        $130 = HEAP32[$123>>2]|0;
        $131 = ((($130)) + 36|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = (FUNCTION_TABLE_ii[$132 & 1023]($123)|0);
        $$0$i$i$i$i162 = $133;
       } else {
        $134 = HEAP32[$126>>2]|0;
        $135 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($134)|0);
        $$0$i$i$i$i162 = $135;
       }
       $136 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $137 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i162,$136)|0);
       if ($137) {
        HEAP32[$0>>2] = 0;
        $769 = 1;
        break;
       } else {
        $$pre$i$i$i164 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i165 = ($$pre$i$i$i164|0)==(0|0);
        $769 = $phitmp$i$i$i165;
        break;
       }
      }
     } while(0);
     $138 = ($139|0)==(0|0);
     do {
      if ($138) {
       label = 60;
      } else {
       $140 = ((($139)) + 12|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ((($139)) + 16|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($141|0)==($143|0);
       if ($144) {
        $145 = HEAP32[$139>>2]|0;
        $146 = ((($145)) + 36|0);
        $147 = HEAP32[$146>>2]|0;
        $148 = (FUNCTION_TABLE_ii[$147 & 1023]($139)|0);
        $$0$i$i2$i$i168 = $148;
       } else {
        $149 = HEAP32[$141>>2]|0;
        $150 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($149)|0);
        $$0$i$i2$i$i168 = $150;
       }
       $151 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $152 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i168,$151)|0);
       if ($152) {
        HEAP32[$1>>2] = 0;
        label = 60;
        break;
       } else {
        if ($769) {
         $770 = $139;
         break;
        } else {
         $$1132 = $$0131;
         break L286;
        }
       }
      }
     } while(0);
     if ((label|0) == 60) {
      label = 0;
      if ($769) {
       $$1132 = $$0131;
       break L286;
      } else {
       $770 = 0;
      }
     }
     $153 = HEAP32[$0>>2]|0;
     $154 = ((($153)) + 12|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($153)) + 16|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($155|0)==($157|0);
     if ($158) {
      $159 = HEAP32[$153>>2]|0;
      $160 = ((($159)) + 36|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = (FUNCTION_TABLE_ii[$161 & 1023]($153)|0);
      $$0$i$i174 = $162;
     } else {
      $163 = HEAP32[$155>>2]|0;
      $164 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($163)|0);
      $$0$i$i174 = $164;
     }
     $165 = HEAP32[$7>>2]|0;
     $166 = ((($165)) + 12|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = (FUNCTION_TABLE_iiii[$167 & 1023]($7,8192,$$0$i$i174)|0);
     if (!($168)) {
      $$1132 = $$0131;
      break L286;
     }
     $169 = HEAP32[$0>>2]|0;
     $170 = ((($169)) + 12|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = ((($169)) + 16|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($171|0)==($173|0);
     if ($174) {
      $175 = HEAP32[$169>>2]|0;
      $176 = ((($175)) + 40|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = (FUNCTION_TABLE_ii[$177 & 1023]($169)|0);
      $$0$i$i176 = $178;
     } else {
      $179 = ((($171)) + 4|0);
      HEAP32[$170>>2] = $179;
      $180 = HEAP32[$171>>2]|0;
      $181 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($180)|0);
      $$0$i$i176 = $181;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($23,$$0$i$i176);
     $139 = $770;
    }
   }
  } while(0);
  $681 = (($$0133) + 1)|0;
  $$0131 = $$1132;$$0133 = $681;
 }
 L322: do {
  if ((label|0) == 44) {
   $120 = HEAP32[$5>>2]|0;
   $121 = $120 | 4;
   HEAP32[$5>>2] = $121;
   $$10 = 0;
  }
  else if ((label|0) == 103) {
   $312 = HEAP32[$5>>2]|0;
   $313 = $312 | 4;
   HEAP32[$5>>2] = $313;
   $$10 = 0;
  }
  else if ((label|0) == 146) {
   $450 = HEAP32[$5>>2]|0;
   $451 = $450 | 4;
   HEAP32[$5>>2] = $451;
   $$10 = 0;
  }
  else if ((label|0) == 201) {
   $583 = HEAP32[$5>>2]|0;
   $584 = $583 | 4;
   HEAP32[$5>>2] = $584;
   $$10 = 0;
  }
  else if ((label|0) == 226) {
   $644 = HEAP32[$5>>2]|0;
   $645 = $644 | 4;
   HEAP32[$5>>2] = $645;
   $$10 = 0;
  }
  else if ((label|0) == 237) {
   $679 = HEAP32[$5>>2]|0;
   $680 = $679 | 4;
   HEAP32[$5>>2] = $680;
   $$10 = 0;
  }
  else if ((label|0) == 239) {
   $682 = ($$0131|0)==(0|0);
   L324: do {
    if (!($682)) {
     $683 = ((($$0131)) + 8|0);
     $684 = ((($683)) + 3|0);
     $685 = ((($$0131)) + 4|0);
     $$0 = 1;
     L326: while(1) {
      $686 = HEAP8[$684>>0]|0;
      $687 = ($686<<24>>24)<(0);
      if ($687) {
       $688 = HEAP32[$685>>2]|0;
       $691 = $688;
      } else {
       $689 = $686&255;
       $691 = $689;
      }
      $690 = ($$0>>>0)<($691>>>0);
      if (!($690)) {
       break L324;
      }
      $692 = HEAP32[$0>>2]|0;
      $693 = ($692|0)==(0|0);
      do {
       if ($693) {
        $786 = 1;
       } else {
        $694 = ((($692)) + 12|0);
        $695 = HEAP32[$694>>2]|0;
        $696 = ((($692)) + 16|0);
        $697 = HEAP32[$696>>2]|0;
        $698 = ($695|0)==($697|0);
        if ($698) {
         $699 = HEAP32[$692>>2]|0;
         $700 = ((($699)) + 36|0);
         $701 = HEAP32[$700>>2]|0;
         $702 = (FUNCTION_TABLE_ii[$701 & 1023]($692)|0);
         $$0$i$i$i$i207 = $702;
        } else {
         $703 = HEAP32[$695>>2]|0;
         $704 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($703)|0);
         $$0$i$i$i$i207 = $704;
        }
        $705 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $706 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i207,$705)|0);
        if ($706) {
         HEAP32[$0>>2] = 0;
         $786 = 1;
         break;
        } else {
         $$pre$i$i$i209 = HEAP32[$0>>2]|0;
         $phitmp$i$i$i210 = ($$pre$i$i$i209|0)==(0|0);
         $786 = $phitmp$i$i$i210;
         break;
        }
       }
      } while(0);
      $707 = HEAP32[$1>>2]|0;
      $708 = ($707|0)==(0|0);
      do {
       if ($708) {
        label = 258;
       } else {
        $709 = ((($707)) + 12|0);
        $710 = HEAP32[$709>>2]|0;
        $711 = ((($707)) + 16|0);
        $712 = HEAP32[$711>>2]|0;
        $713 = ($710|0)==($712|0);
        if ($713) {
         $714 = HEAP32[$707>>2]|0;
         $715 = ((($714)) + 36|0);
         $716 = HEAP32[$715>>2]|0;
         $717 = (FUNCTION_TABLE_ii[$716 & 1023]($707)|0);
         $$0$i$i2$i$i213 = $717;
        } else {
         $718 = HEAP32[$710>>2]|0;
         $719 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($718)|0);
         $$0$i$i2$i$i213 = $719;
        }
        $720 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $721 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i213,$720)|0);
        if ($721) {
         HEAP32[$1>>2] = 0;
         label = 258;
         break;
        } else {
         if ($786) {
          break;
         } else {
          break L326;
         }
        }
       }
      } while(0);
      if ((label|0) == 258) {
       label = 0;
       if ($786) {
        break;
       }
      }
      $722 = HEAP32[$0>>2]|0;
      $723 = ((($722)) + 12|0);
      $724 = HEAP32[$723>>2]|0;
      $725 = ((($722)) + 16|0);
      $726 = HEAP32[$725>>2]|0;
      $727 = ($724|0)==($726|0);
      if ($727) {
       $728 = HEAP32[$722>>2]|0;
       $729 = ((($728)) + 36|0);
       $730 = HEAP32[$729>>2]|0;
       $731 = (FUNCTION_TABLE_ii[$730 & 1023]($722)|0);
       $$0$i$i203 = $731;
      } else {
       $732 = HEAP32[$724>>2]|0;
       $733 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($732)|0);
       $$0$i$i203 = $733;
      }
      $734 = HEAP8[$684>>0]|0;
      $735 = ($734<<24>>24)<(0);
      if ($735) {
       $736 = HEAP32[$$0131>>2]|0;
       $738 = $736;
      } else {
       $738 = $$0131;
      }
      $737 = (($738) + ($$0<<2)|0);
      $739 = HEAP32[$737>>2]|0;
      $740 = ($$0$i$i203|0)==($739|0);
      if (!($740)) {
       break;
      }
      $743 = (($$0) + 1)|0;
      $744 = HEAP32[$0>>2]|0;
      $745 = ((($744)) + 12|0);
      $746 = HEAP32[$745>>2]|0;
      $747 = ((($744)) + 16|0);
      $748 = HEAP32[$747>>2]|0;
      $749 = ($746|0)==($748|0);
      if ($749) {
       $750 = HEAP32[$744>>2]|0;
       $751 = ((($750)) + 40|0);
       $752 = HEAP32[$751>>2]|0;
       (FUNCTION_TABLE_ii[$752 & 1023]($744)|0);
      } else {
       $753 = ((($746)) + 4|0);
       HEAP32[$745>>2] = $753;
       $754 = HEAP32[$746>>2]|0;
       (__ZNSt3__211char_traitsIwE11to_int_typeEw($754)|0);
      }
      $$0 = $743;
     }
     $741 = HEAP32[$5>>2]|0;
     $742 = $741 | 4;
     HEAP32[$5>>2] = $742;
     $$10 = 0;
     break L322;
    }
   } while(0);
   $755 = HEAP32[$13>>2]|0;
   $756 = HEAP32[$14>>2]|0;
   $757 = ($755|0)==($756|0);
   if ($757) {
    $$10 = 1;
   } else {
    HEAP32[$25>>2] = 0;
    __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($19,$755,$756,$25);
    $758 = HEAP32[$25>>2]|0;
    $759 = ($758|0)==(0);
    if ($759) {
     $$10 = 1;
     break;
    } else {
     $760 = HEAP32[$5>>2]|0;
     $761 = $760 | 4;
     HEAP32[$5>>2] = $761;
     $$10 = 0;
     break;
    }
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $762 = HEAP32[$13>>2]|0;
 HEAP32[$13>>2] = 0;
 $763 = ($762|0)==(0|0);
 if (!($763)) {
  $764 = ((($13)) + 4|0);
  $765 = HEAP32[$764>>2]|0;
  FUNCTION_TABLE_vi[$765 & 1023]($762);
 }
 STACKTOP = sp;return ($$10|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$034 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($0)) + 8|0);
 $6 = ((($5)) + 3|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 if ($8) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$5>>2]|0;
  $13 = $12 & 2147483647;
  $phitmp$i = (($13) + -1)|0;
  $38 = $11;$39 = $phitmp$i;
 } else {
  $9 = $7&255;
  $38 = $9;$39 = 1;
 }
 $14 = $2;
 $15 = $1;
 $16 = (($14) - ($15))|0;
 $17 = $16 >> 2;
 $18 = ($16|0)==(0);
 do {
  if (!($18)) {
   if ($8) {
    $19 = HEAP32[$0>>2]|0;
    $20 = ((($0)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $19;$25 = $21;
   } else {
    $22 = $7&255;
    $24 = $0;$25 = $22;
   }
   $23 = (($24) + ($25<<2)|0);
   $26 = (__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($1,$24,$23)|0);
   if ($26) {
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($3,$1,$2);
    $27 = ((($3)) + 8|0);
    $28 = ((($27)) + 3|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = ($29<<24>>24)<(0);
    $31 = HEAP32[$3>>2]|0;
    $32 = ((($3)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $29&255;
    $35 = $30 ? $31 : $3;
    $36 = $30 ? $33 : $34;
    (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($0,$35,$36)|0);
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
    break;
   }
   $37 = (($39) - ($38))|0;
   $40 = ($37>>>0)<($17>>>0);
   if ($40) {
    $41 = (($38) + ($17))|0;
    $42 = (($41) - ($39))|0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($0,$39,$42,$38,$38,0,0);
   }
   $43 = HEAP8[$6>>0]|0;
   $44 = ($43<<24>>24)<(0);
   if ($44) {
    $45 = HEAP32[$0>>2]|0;
    $47 = $45;
   } else {
    $47 = $0;
   }
   $46 = (($47) + ($38<<2)|0);
   $$0 = $46;$$034 = $1;
   while(1) {
    $48 = ($$034|0)==($2|0);
    if ($48) {
     break;
    }
    __ZNSt3__211char_traitsIwE6assignERwRKw($$0,$$034);
    $49 = ((($$0)) + 4|0);
    $50 = ((($$034)) + 4|0);
    $$0 = $49;$$034 = $50;
   }
   HEAP32[$4>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($$0,$4);
   $51 = (($38) + ($17))|0;
   $52 = HEAP8[$6>>0]|0;
   $53 = ($52<<24>>24)<(0);
   if ($53) {
    $54 = ((($0)) + 4|0);
    HEAP32[$54>>2] = $51;
    break;
   } else {
    $55 = $51&255;
    HEAP8[$6>>0] = $55;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)<=($0>>>0);
 $4 = ($0>>>0)<($2>>>0);
 $spec$select = $3 & $4;
 return ($spec$select|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $$1$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = $2;
 $5 = $1;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>(1073741807);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ($7>>>0)<(2);
 do {
  if ($9) {
   $10 = $7&255;
   $11 = ((($0)) + 8|0);
   $12 = ((($11)) + 3|0);
   HEAP8[$12>>0] = $10;
   $$1$ph = $0;
  } else {
   $13 = (($7) + 4)|0;
   $14 = $13 & -4;
   $15 = ($14>>>0)>(1073741823);
   if ($15) {
    _abort();
    // unreachable;
   } else {
    $16 = $14 << 2;
    $17 = (__Znwm($16)|0);
    HEAP32[$0>>2] = $17;
    $18 = $14 | -2147483648;
    $19 = ((($0)) + 8|0);
    HEAP32[$19>>2] = $18;
    $20 = ((($0)) + 4|0);
    HEAP32[$20>>2] = $7;
    $$1$ph = $17;
    break;
   }
  }
 } while(0);
 $$0 = $1;$$1 = $$1$ph;
 while(1) {
  $21 = ($$0|0)==($2|0);
  if ($21) {
   break;
  }
  __ZNSt3__211char_traitsIwE6assignERwRKw($$1,$$0);
  $22 = ((($$0)) + 4|0);
  $23 = ((($$1)) + 4|0);
  $$0 = $22;$$1 = $23;
 }
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$1,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i39 = 0, $$0$i$i$i42 = 0, $$0$i$i$i45 = 0, $$0$i$i$i49 = 0, $$0$i$i$i53 = 0, $$0$i$i$i59 = 0, $$0$i$i$i63 = 0, $$pre$phi$i$i57Z2D = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i40 = 0, $exitcond$i$i$i43 = 0, $exitcond$i$i$i46 = 0;
 var $exitcond$i$i$i50 = 0, $exitcond$i$i$i54 = 0, $exitcond$i$i$i60 = 0, $exitcond$i$i$i64 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $10 = sp + 148|0;
 $11 = sp + 144|0;
 $12 = sp + 155|0;
 $13 = sp + 154|0;
 $14 = sp + 140|0;
 $15 = sp + 136|0;
 $16 = sp + 132|0;
 $17 = sp + 128|0;
 $18 = sp + 124|0;
 $19 = sp + 120|0;
 $20 = sp + 153|0;
 $21 = sp + 152|0;
 $22 = sp + 116|0;
 $23 = sp + 112|0;
 $24 = sp + 108|0;
 $25 = sp + 104|0;
 $26 = sp + 100|0;
 $27 = sp + 88|0;
 $28 = sp + 76|0;
 $29 = sp + 64|0;
 $30 = sp + 52|0;
 $31 = sp + 48|0;
 $32 = sp + 36|0;
 $33 = sp + 24|0;
 $34 = sp + 12|0;
 $35 = sp;
 if ($0) {
  $36 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,71240)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_vii[$39 & 511]($26,$36);
  $40 = HEAP32[$26>>2]|0;
  HEAP8[$2>>0]=$40&255;HEAP8[$2+1>>0]=($40>>8)&255;HEAP8[$2+2>>0]=($40>>16)&255;HEAP8[$2+3>>0]=$40>>24;
  $41 = HEAP32[$36>>2]|0;
  $42 = ((($41)) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  FUNCTION_TABLE_vii[$43 & 511]($27,$36);
  $44 = ((($8)) + 8|0);
  $45 = ((($44)) + 3|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = ($46<<24>>24)<(0);
  if ($47) {
   $48 = HEAP32[$8>>2]|0;
   HEAP32[$24>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($48,$24);
   $49 = ((($8)) + 4|0);
   HEAP32[$49>>2] = 0;
  } else {
   HEAP32[$25>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($8,$25);
   HEAP8[$45>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($8,0);
  ;HEAP32[$8>>2]=HEAP32[$27>>2]|0;HEAP32[$8+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$27+8>>2]|0;
  $$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $50 = (($27) + ($$0$i$i$i<<2)|0);
   HEAP32[$50>>2] = 0;
   $51 = (($$0$i$i$i) + 1)|0;
   $$0$i$i$i = $51;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($27);
  $52 = HEAP32[$36>>2]|0;
  $53 = ((($52)) + 28|0);
  $54 = HEAP32[$53>>2]|0;
  FUNCTION_TABLE_vii[$54 & 511]($28,$36);
  $55 = ((($7)) + 8|0);
  $56 = ((($55)) + 3|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = ($57<<24>>24)<(0);
  if ($58) {
   $59 = HEAP32[$7>>2]|0;
   HEAP32[$22>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($59,$22);
   $60 = ((($7)) + 4|0);
   HEAP32[$60>>2] = 0;
  } else {
   HEAP32[$23>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$23);
   HEAP8[$56>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($7,0);
  ;HEAP32[$7>>2]=HEAP32[$28>>2]|0;HEAP32[$7+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$28+8>>2]|0;
  $$0$i$i$i39 = 0;
  while(1) {
   $exitcond$i$i$i40 = ($$0$i$i$i39|0)==(3);
   if ($exitcond$i$i$i40) {
    break;
   }
   $61 = (($28) + ($$0$i$i$i39<<2)|0);
   HEAP32[$61>>2] = 0;
   $62 = (($$0$i$i$i39) + 1)|0;
   $$0$i$i$i39 = $62;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($28);
  $63 = HEAP32[$36>>2]|0;
  $64 = ((($63)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (FUNCTION_TABLE_ii[$65 & 1023]($36)|0);
  HEAP32[$3>>2] = $66;
  $67 = HEAP32[$36>>2]|0;
  $68 = ((($67)) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (FUNCTION_TABLE_ii[$69 & 1023]($36)|0);
  HEAP32[$4>>2] = $70;
  $71 = HEAP32[$36>>2]|0;
  $72 = ((($71)) + 20|0);
  $73 = HEAP32[$72>>2]|0;
  FUNCTION_TABLE_vii[$73 & 511]($29,$36);
  $74 = ((($5)) + 11|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = ($75<<24>>24)<(0);
  if ($76) {
   $77 = HEAP32[$5>>2]|0;
   HEAP8[$20>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($77,$20);
   $78 = ((($5)) + 4|0);
   HEAP32[$78>>2] = 0;
   $$pre$phi$i$iZ2D = $5;
  } else {
   HEAP8[$21>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$21);
   HEAP8[$74>>0] = 0;
   $$pre$phi$i$iZ2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($5,0);
  ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$29>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$29+8>>2]|0;
  $$0$i$i$i42 = 0;
  while(1) {
   $exitcond$i$i$i43 = ($$0$i$i$i42|0)==(3);
   if ($exitcond$i$i$i43) {
    break;
   }
   $79 = (($29) + ($$0$i$i$i42<<2)|0);
   HEAP32[$79>>2] = 0;
   $80 = (($$0$i$i$i42) + 1)|0;
   $$0$i$i$i42 = $80;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($29);
  $81 = HEAP32[$36>>2]|0;
  $82 = ((($81)) + 24|0);
  $83 = HEAP32[$82>>2]|0;
  FUNCTION_TABLE_vii[$83 & 511]($30,$36);
  $84 = ((($6)) + 8|0);
  $85 = ((($84)) + 3|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = ($86<<24>>24)<(0);
  if ($87) {
   $88 = HEAP32[$6>>2]|0;
   HEAP32[$18>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($88,$18);
   $89 = ((($6)) + 4|0);
   HEAP32[$89>>2] = 0;
  } else {
   HEAP32[$19>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6,$19);
   HEAP8[$85>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($6,0);
  ;HEAP32[$6>>2]=HEAP32[$30>>2]|0;HEAP32[$6+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$30+8>>2]|0;
  $$0$i$i$i45 = 0;
  while(1) {
   $exitcond$i$i$i46 = ($$0$i$i$i45|0)==(3);
   if ($exitcond$i$i$i46) {
    break;
   }
   $90 = (($30) + ($$0$i$i$i45<<2)|0);
   HEAP32[$90>>2] = 0;
   $91 = (($$0$i$i$i45) + 1)|0;
   $$0$i$i$i45 = $91;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($30);
  $92 = HEAP32[$36>>2]|0;
  $93 = ((($92)) + 36|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (FUNCTION_TABLE_ii[$94 & 1023]($36)|0);
  $storemerge = $95;
 } else {
  $96 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,71232)|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($97)) + 44|0);
  $99 = HEAP32[$98>>2]|0;
  FUNCTION_TABLE_vii[$99 & 511]($31,$96);
  $100 = HEAP32[$31>>2]|0;
  HEAP8[$2>>0]=$100&255;HEAP8[$2+1>>0]=($100>>8)&255;HEAP8[$2+2>>0]=($100>>16)&255;HEAP8[$2+3>>0]=$100>>24;
  $101 = HEAP32[$96>>2]|0;
  $102 = ((($101)) + 32|0);
  $103 = HEAP32[$102>>2]|0;
  FUNCTION_TABLE_vii[$103 & 511]($32,$96);
  $104 = ((($8)) + 8|0);
  $105 = ((($104)) + 3|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = ($106<<24>>24)<(0);
  if ($107) {
   $108 = HEAP32[$8>>2]|0;
   HEAP32[$16>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($108,$16);
   $109 = ((($8)) + 4|0);
   HEAP32[$109>>2] = 0;
  } else {
   HEAP32[$17>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($8,$17);
   HEAP8[$105>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($8,0);
  ;HEAP32[$8>>2]=HEAP32[$32>>2]|0;HEAP32[$8+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$32+8>>2]|0;
  $$0$i$i$i49 = 0;
  while(1) {
   $exitcond$i$i$i50 = ($$0$i$i$i49|0)==(3);
   if ($exitcond$i$i$i50) {
    break;
   }
   $110 = (($32) + ($$0$i$i$i49<<2)|0);
   HEAP32[$110>>2] = 0;
   $111 = (($$0$i$i$i49) + 1)|0;
   $$0$i$i$i49 = $111;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($32);
  $112 = HEAP32[$96>>2]|0;
  $113 = ((($112)) + 28|0);
  $114 = HEAP32[$113>>2]|0;
  FUNCTION_TABLE_vii[$114 & 511]($33,$96);
  $115 = ((($7)) + 8|0);
  $116 = ((($115)) + 3|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = ($117<<24>>24)<(0);
  if ($118) {
   $119 = HEAP32[$7>>2]|0;
   HEAP32[$14>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($119,$14);
   $120 = ((($7)) + 4|0);
   HEAP32[$120>>2] = 0;
  } else {
   HEAP32[$15>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$15);
   HEAP8[$116>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($7,0);
  ;HEAP32[$7>>2]=HEAP32[$33>>2]|0;HEAP32[$7+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$33+8>>2]|0;
  $$0$i$i$i53 = 0;
  while(1) {
   $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
   if ($exitcond$i$i$i54) {
    break;
   }
   $121 = (($33) + ($$0$i$i$i53<<2)|0);
   HEAP32[$121>>2] = 0;
   $122 = (($$0$i$i$i53) + 1)|0;
   $$0$i$i$i53 = $122;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($33);
  $123 = HEAP32[$96>>2]|0;
  $124 = ((($123)) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (FUNCTION_TABLE_ii[$125 & 1023]($96)|0);
  HEAP32[$3>>2] = $126;
  $127 = HEAP32[$96>>2]|0;
  $128 = ((($127)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (FUNCTION_TABLE_ii[$129 & 1023]($96)|0);
  HEAP32[$4>>2] = $130;
  $131 = HEAP32[$96>>2]|0;
  $132 = ((($131)) + 20|0);
  $133 = HEAP32[$132>>2]|0;
  FUNCTION_TABLE_vii[$133 & 511]($34,$96);
  $134 = ((($5)) + 11|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = ($135<<24>>24)<(0);
  if ($136) {
   $137 = HEAP32[$5>>2]|0;
   HEAP8[$12>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($137,$12);
   $138 = ((($5)) + 4|0);
   HEAP32[$138>>2] = 0;
   $$pre$phi$i$i57Z2D = $5;
  } else {
   HEAP8[$13>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$13);
   HEAP8[$134>>0] = 0;
   $$pre$phi$i$i57Z2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($5,0);
  ;HEAP32[$$pre$phi$i$i57Z2D>>2]=HEAP32[$34>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+8>>2]=HEAP32[$34+8>>2]|0;
  $$0$i$i$i59 = 0;
  while(1) {
   $exitcond$i$i$i60 = ($$0$i$i$i59|0)==(3);
   if ($exitcond$i$i$i60) {
    break;
   }
   $139 = (($34) + ($$0$i$i$i59<<2)|0);
   HEAP32[$139>>2] = 0;
   $140 = (($$0$i$i$i59) + 1)|0;
   $$0$i$i$i59 = $140;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($34);
  $141 = HEAP32[$96>>2]|0;
  $142 = ((($141)) + 24|0);
  $143 = HEAP32[$142>>2]|0;
  FUNCTION_TABLE_vii[$143 & 511]($35,$96);
  $144 = ((($6)) + 8|0);
  $145 = ((($144)) + 3|0);
  $146 = HEAP8[$145>>0]|0;
  $147 = ($146<<24>>24)<(0);
  if ($147) {
   $148 = HEAP32[$6>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($148,$10);
   $149 = ((($6)) + 4|0);
   HEAP32[$149>>2] = 0;
  } else {
   HEAP32[$11>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6,$11);
   HEAP8[$145>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($6,0);
  ;HEAP32[$6>>2]=HEAP32[$35>>2]|0;HEAP32[$6+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$35+8>>2]|0;
  $$0$i$i$i63 = 0;
  while(1) {
   $exitcond$i$i$i64 = ($$0$i$i$i63|0)==(3);
   if ($exitcond$i$i$i64) {
    break;
   }
   $150 = (($35) + ($$0$i$i$i63<<2)|0);
   HEAP32[$150>>2] = 0;
   $151 = (($$0$i$i$i63) + 1)|0;
   $$0$i$i$i63 = $151;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($35);
  $152 = HEAP32[$96>>2]|0;
  $153 = ((($152)) + 36|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (FUNCTION_TABLE_ii[$154 & 1023]($96)|0);
  $storemerge = $155;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(518|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7;
 $9 = (($6) - ($8))|0;
 $10 = ($9>>>0)<(2147483647);
 $11 = $9 << 1;
 $12 = ($11|0)==(0);
 $spec$select = $12 ? 4 : $11;
 $13 = $10 ? $spec$select : -1;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) - ($8))|0;
 $16 = $15 >> 2;
 $spec$select35 = $5 ? $7 : 0;
 $17 = (_realloc($spec$select35,$13)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($5) {
  $19 = $17;
  HEAP32[$0>>2] = $19;
  $25 = $17;
 } else {
  $$pr = HEAP32[$0>>2]|0;
  $20 = $17;
  HEAP32[$0>>2] = $20;
  $21 = ($$pr|0)==(0|0);
  if ($21) {
   $25 = $17;
  } else {
   $22 = HEAP32[$3>>2]|0;
   FUNCTION_TABLE_vi[$22 & 1023]($$pr);
   $$pre = HEAP32[$0>>2]|0;
   $25 = $$pre;
  }
 }
 HEAP32[$3>>2] = (519);
 $23 = $13 >>> 2;
 $24 = (($25) + ($16<<2)|0);
 HEAP32[$1>>2] = $24;
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$2>>2] = $27;
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i41 = 0, $$0$i$i44 = 0, $$037 = 0, $$038 = 0, $$byval_copy = 0, $$sink75 = 0, $$sink76 = 0, $$sink77 = 0, $$sroa$053$0 = 0, $$sroa$061$0 = 0, $$sroa$070$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i42 = 0, $exitcond$i$i45 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $$byval_copy = sp + 404|0;
 $vararg_buffer1 = sp + 336|0;
 $vararg_buffer = sp + 328|0;
 $6 = sp + 224|0;
 $7 = sp + 400|0;
 $8 = sp + 112|0;
 $9 = sp + 396|0;
 $10 = sp + 412|0;
 $11 = sp + 409|0;
 $12 = sp + 408|0;
 $13 = sp + 384|0;
 $14 = sp + 372|0;
 $15 = sp + 360|0;
 $16 = sp + 356|0;
 $17 = sp;
 $18 = sp + 352|0;
 $19 = sp + 348|0;
 $20 = sp + 344|0;
 HEAP32[$7>>2] = $6;
 HEAPF64[$vararg_buffer>>3] = $5;
 $21 = (_snprintf($6,100,63669,$vararg_buffer)|0);
 $22 = ($21>>>0)>(99);
 if ($22) {
  $23 = (__ZNSt3__26__clocEv()|0);
  HEAPF64[$vararg_buffer1>>3] = $5;
  $24 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$23,63669,$vararg_buffer1)|0);
  $25 = HEAP32[$7>>2]|0;
  $26 = ($25|0)==(0|0);
  if ($26) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  $27 = $25;
  $28 = (_malloc($24)|0);
  $29 = $28;
  $30 = ($28|0)==(0|0);
  if ($30) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$0 = $28;$$038 = $24;$$sroa$061$0 = $29;$$sroa$070$0 = $27;
  }
 } else {
  $$0 = $8;$$038 = $21;$$sroa$061$0 = 0;$$sroa$070$0 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv($9,$3);
 $31 = (__ZNKSt3__26locale9use_facetERNS0_2idE($9,70992)|0);
 $32 = HEAP32[$7>>2]|0;
 $33 = (($32) + ($$038)|0);
 $34 = HEAP32[$31>>2]|0;
 $35 = ((($34)) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 (FUNCTION_TABLE_iiiii[$36 & 511]($31,$32,$33,$$0)|0);
 $37 = ($$038|0)==(0);
 if ($37) {
  $47 = 0;
 } else {
  $38 = HEAP32[$7>>2]|0;
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39<<24>>24)==(45);
  $47 = $40;
 }
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $41 = (($13) + ($$0$i$i<<2)|0);
  HEAP32[$41>>2] = 0;
  $42 = (($$0$i$i) + 1)|0;
  $$0$i$i = $42;
 }
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 $$0$i$i41 = 0;
 while(1) {
  $exitcond$i$i42 = ($$0$i$i41|0)==(3);
  if ($exitcond$i$i42) {
   break;
  }
  $43 = (($14) + ($$0$i$i41<<2)|0);
  HEAP32[$43>>2] = 0;
  $44 = (($$0$i$i41) + 1)|0;
  $$0$i$i41 = $44;
 }
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
 $$0$i$i44 = 0;
 while(1) {
  $exitcond$i$i45 = ($$0$i$i44|0)==(3);
  if ($exitcond$i$i45) {
   break;
  }
  $45 = (($15) + ($$0$i$i44<<2)|0);
  HEAP32[$45>>2] = 0;
  $46 = (($$0$i$i44) + 1)|0;
  $$0$i$i44 = $46;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($2,$47,$9,$10,$11,$12,$13,$14,$15,$16);
 $48 = HEAP32[$16>>2]|0;
 $49 = ($$038|0)>($48|0);
 if ($49) {
  $50 = (($$038) - ($48))|0;
  $51 = $50 << 1;
  $52 = ((($15)) + 11|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = ($53<<24>>24)<(0);
  $55 = ((($15)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $53&255;
  $58 = $54 ? $56 : $57;
  $59 = ((($14)) + 11|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = ($60<<24>>24)<(0);
  $62 = ((($14)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $60&255;
  $65 = $61 ? $63 : $64;
  $66 = (($48) + 1)|0;
  $67 = (($66) + ($51))|0;
  $$sink75 = $65;$$sink76 = $67;$$sink77 = $58;
 } else {
  $68 = ((($15)) + 11|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = ($69<<24>>24)<(0);
  $71 = ((($15)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $69&255;
  $74 = $70 ? $72 : $73;
  $75 = ((($14)) + 11|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = ($76<<24>>24)<(0);
  $78 = ((($14)) + 4|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $76&255;
  $81 = $77 ? $79 : $80;
  $82 = (($48) + 2)|0;
  $$sink75 = $81;$$sink76 = $82;$$sink77 = $74;
 }
 $83 = (($$sink76) + ($$sink77))|0;
 $84 = (($83) + ($$sink75))|0;
 $85 = ($84>>>0)>(100);
 if ($85) {
  $86 = (_malloc($84)|0);
  $87 = $86;
  $88 = ($86|0)==(0|0);
  if ($88) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$037 = $86;$$sroa$053$0 = $87;
  }
 } else {
  $$037 = $17;$$sroa$053$0 = 0;
 }
 $89 = ((($3)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($$0) + ($$038)|0);
 $92 = HEAP8[$11>>0]|0;
 $93 = HEAP8[$12>>0]|0;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($$037,$18,$19,$90,$$0,$91,$31,$47,$10,$92,$93,$13,$14,$15,$48);
 $94 = HEAP32[$1>>2]|0;
 HEAP32[$20>>2] = $94;
 $95 = HEAP32[$18>>2]|0;
 $96 = HEAP32[$19>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;
 $97 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$95,$96,$3,$4)|0);
 $98 = ($$sroa$053$0|0)==(0);
 if (!($98)) {
  $99 = $$sroa$053$0;
  _free($99);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
 __ZNSt3__26localeD2Ev($9);
 $100 = ($$sroa$061$0|0)==(0);
 if (!($100)) {
  $101 = $$sroa$061$0;
  _free($101);
 }
 $102 = ($$sroa$070$0|0)==(0);
 if (!($102)) {
  $103 = $$sroa$070$0;
  _free($103);
 }
 STACKTOP = sp;return ($97|0);
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i26 = 0, $$0$i$i29 = 0, $$byval_copy = 0, $$sink47 = 0, $$sink48 = 0, $$sink49 = 0, $$sroa$041$0 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i27 = 0, $exitcond$i$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 156|0;
 $6 = sp + 152|0;
 $7 = sp + 164|0;
 $8 = sp + 161|0;
 $9 = sp + 160|0;
 $10 = sp + 140|0;
 $11 = sp + 128|0;
 $12 = sp + 116|0;
 $13 = sp + 112|0;
 $14 = sp;
 $15 = sp + 108|0;
 $16 = sp + 104|0;
 $17 = sp + 100|0;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,70992)|0);
 $19 = ((($5)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($5)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $20&255;
 $25 = $21 ? $23 : $24;
 $26 = ($25|0)==(0);
 if ($26) {
  $41 = 0;
 } else {
  $27 = HEAP32[$5>>2]|0;
  $28 = $21 ? $27 : $5;
  $29 = HEAP8[$28>>0]|0;
  $30 = HEAP32[$18>>2]|0;
  $31 = ((($30)) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (FUNCTION_TABLE_iii[$32 & 511]($18,45)|0);
  $34 = ($29<<24>>24)==($33<<24>>24);
  $41 = $34;
 }
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $35 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i) + 1)|0;
  $$0$i$i = $36;
 }
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
 $$0$i$i26 = 0;
 while(1) {
  $exitcond$i$i27 = ($$0$i$i26|0)==(3);
  if ($exitcond$i$i27) {
   break;
  }
  $37 = (($11) + ($$0$i$i26<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i26) + 1)|0;
  $$0$i$i26 = $38;
 }
 ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
 $$0$i$i29 = 0;
 while(1) {
  $exitcond$i$i30 = ($$0$i$i29|0)==(3);
  if ($exitcond$i$i30) {
   break;
  }
  $39 = (($12) + ($$0$i$i29<<2)|0);
  HEAP32[$39>>2] = 0;
  $40 = (($$0$i$i29) + 1)|0;
  $$0$i$i29 = $40;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($2,$41,$6,$7,$8,$9,$10,$11,$12,$13);
 $42 = HEAP8[$19>>0]|0;
 $43 = ($42<<24>>24)<(0);
 $44 = HEAP32[$22>>2]|0;
 $45 = $42&255;
 $46 = $43 ? $44 : $45;
 $47 = HEAP32[$13>>2]|0;
 $48 = ($46|0)>($47|0);
 if ($48) {
  $49 = (($46) - ($47))|0;
  $50 = $49 << 1;
  $51 = ((($12)) + 11|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = ($52<<24>>24)<(0);
  $54 = ((($12)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $52&255;
  $57 = $53 ? $55 : $56;
  $58 = ((($11)) + 11|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = ((($11)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $59&255;
  $64 = $60 ? $62 : $63;
  $65 = (($47) + 1)|0;
  $66 = (($65) + ($50))|0;
  $$sink47 = $64;$$sink48 = $66;$$sink49 = $57;
 } else {
  $67 = ((($12)) + 11|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = ($68<<24>>24)<(0);
  $70 = ((($12)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $68&255;
  $73 = $69 ? $71 : $72;
  $74 = ((($11)) + 11|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = ($75<<24>>24)<(0);
  $77 = ((($11)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $75&255;
  $80 = $76 ? $78 : $79;
  $81 = (($47) + 2)|0;
  $$sink47 = $80;$$sink48 = $81;$$sink49 = $73;
 }
 $82 = (($$sink48) + ($$sink49))|0;
 $83 = (($82) + ($$sink47))|0;
 $84 = ($83>>>0)>(100);
 if ($84) {
  $85 = (_malloc($83)|0);
  $86 = $85;
  $87 = ($85|0)==(0|0);
  if ($87) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$0 = $85;$$sroa$041$0 = $86;
  }
 } else {
  $$0 = $14;$$sroa$041$0 = 0;
 }
 $88 = ((($3)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = HEAP32[$5>>2]|0;
 $91 = $43 ? $90 : $5;
 $92 = (($91) + ($46)|0);
 $93 = HEAP8[$8>>0]|0;
 $94 = HEAP8[$9>>0]|0;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($$0,$15,$16,$89,$91,$92,$18,$41,$7,$93,$94,$10,$11,$12,$47);
 $95 = HEAP32[$1>>2]|0;
 HEAP32[$17>>2] = $95;
 $96 = HEAP32[$15>>2]|0;
 $97 = HEAP32[$16>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;
 $98 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$0,$96,$97,$3,$4)|0);
 $99 = ($$sroa$041$0|0)==(0);
 if (!($99)) {
  $100 = $$sroa$041$0;
  _free($100);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__26localeD2Ev($6);
 STACKTOP = sp;return ($98|0);
}
function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i49 = 0, $$0$i$i$i55 = 0, $$0$i$i$i61 = 0, $$0$i$i$i67 = 0, $$0$i$i$i73 = 0, $$0$i$i$i79 = 0, $$0$i$i$i85 = 0, $$pre$phi$i$i47Z2D = 0, $$pre$phi$i$i53Z2D = 0, $$pre$phi$i$i59Z2D = 0, $$pre$phi$i$i65Z2D = 0, $$pre$phi$i$i71Z2D = 0, $$pre$phi$i$i77Z2D = 0, $$pre$phi$i$i83Z2D = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi88Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i50 = 0, $exitcond$i$i$i56 = 0, $exitcond$i$i$i62 = 0, $exitcond$i$i$i68 = 0, $exitcond$i$i$i74 = 0, $exitcond$i$i$i80 = 0, $exitcond$i$i$i86 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $10 = sp + 127|0;
 $11 = sp + 126|0;
 $12 = sp + 125|0;
 $13 = sp + 124|0;
 $14 = sp + 123|0;
 $15 = sp + 122|0;
 $16 = sp + 121|0;
 $17 = sp + 120|0;
 $18 = sp + 119|0;
 $19 = sp + 118|0;
 $20 = sp + 117|0;
 $21 = sp + 116|0;
 $22 = sp + 115|0;
 $23 = sp + 114|0;
 $24 = sp + 113|0;
 $25 = sp + 112|0;
 $26 = sp + 108|0;
 $27 = sp + 96|0;
 $28 = sp + 92|0;
 $29 = sp + 80|0;
 $30 = sp + 68|0;
 $31 = sp + 56|0;
 $32 = sp + 52|0;
 $33 = sp + 40|0;
 $34 = sp + 36|0;
 $35 = sp + 24|0;
 $36 = sp + 12|0;
 $37 = sp;
 if ($0) {
  $38 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,71224)|0);
  if ($1) {
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 44|0);
   $41 = HEAP32[$40>>2]|0;
   FUNCTION_TABLE_vii[$41 & 511]($26,$38);
   $42 = HEAP32[$26>>2]|0;
   HEAP8[$3>>0]=$42&255;HEAP8[$3+1>>0]=($42>>8)&255;HEAP8[$3+2>>0]=($42>>16)&255;HEAP8[$3+3>>0]=$42>>24;
   $43 = HEAP32[$38>>2]|0;
   $44 = ((($43)) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   FUNCTION_TABLE_vii[$45 & 511]($27,$38);
   $46 = ((($8)) + 11|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = ($47<<24>>24)<(0);
   if ($48) {
    $49 = HEAP32[$8>>2]|0;
    HEAP8[$24>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($49,$24);
    $50 = ((($8)) + 4|0);
    HEAP32[$50>>2] = 0;
    $$pre$phi$i$iZ2D = $8;
   } else {
    HEAP8[$25>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$25);
    HEAP8[$46>>0] = 0;
    $$pre$phi$i$iZ2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($8,0);
   ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$27>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$27+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $51 = (($27) + ($$0$i$i$i<<2)|0);
    HEAP32[$51>>2] = 0;
    $52 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $52;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
   $$pre$phiZ2D = $38;
  } else {
   $53 = HEAP32[$38>>2]|0;
   $54 = ((($53)) + 40|0);
   $55 = HEAP32[$54>>2]|0;
   FUNCTION_TABLE_vii[$55 & 511]($28,$38);
   $56 = HEAP32[$28>>2]|0;
   HEAP8[$3>>0]=$56&255;HEAP8[$3+1>>0]=($56>>8)&255;HEAP8[$3+2>>0]=($56>>16)&255;HEAP8[$3+3>>0]=$56>>24;
   $57 = HEAP32[$38>>2]|0;
   $58 = ((($57)) + 28|0);
   $59 = HEAP32[$58>>2]|0;
   FUNCTION_TABLE_vii[$59 & 511]($29,$38);
   $60 = ((($8)) + 11|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = ($61<<24>>24)<(0);
   if ($62) {
    $63 = HEAP32[$8>>2]|0;
    HEAP8[$22>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($63,$22);
    $64 = ((($8)) + 4|0);
    HEAP32[$64>>2] = 0;
    $$pre$phi$i$i47Z2D = $8;
   } else {
    HEAP8[$23>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$23);
    HEAP8[$60>>0] = 0;
    $$pre$phi$i$i47Z2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($8,0);
   ;HEAP32[$$pre$phi$i$i47Z2D>>2]=HEAP32[$29>>2]|0;HEAP32[$$pre$phi$i$i47Z2D+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$$pre$phi$i$i47Z2D+8>>2]=HEAP32[$29+8>>2]|0;
   $$0$i$i$i49 = 0;
   while(1) {
    $exitcond$i$i$i50 = ($$0$i$i$i49|0)==(3);
    if ($exitcond$i$i$i50) {
     break;
    }
    $65 = (($29) + ($$0$i$i$i49<<2)|0);
    HEAP32[$65>>2] = 0;
    $66 = (($$0$i$i$i49) + 1)|0;
    $$0$i$i$i49 = $66;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($29);
   $$pre$phiZ2D = $38;
  }
  $67 = HEAP32[$38>>2]|0;
  $68 = ((($67)) + 12|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (FUNCTION_TABLE_ii[$69 & 1023]($38)|0);
  HEAP8[$4>>0] = $70;
  $71 = HEAP32[$38>>2]|0;
  $72 = ((($71)) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (FUNCTION_TABLE_ii[$73 & 1023]($38)|0);
  HEAP8[$5>>0] = $74;
  $75 = HEAP32[$$pre$phiZ2D>>2]|0;
  $76 = ((($75)) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_vii[$77 & 511]($30,$38);
  $78 = ((($6)) + 11|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = ($79<<24>>24)<(0);
  if ($80) {
   $81 = HEAP32[$6>>2]|0;
   HEAP8[$20>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($81,$20);
   $82 = ((($6)) + 4|0);
   HEAP32[$82>>2] = 0;
   $$pre$phi$i$i53Z2D = $6;
  } else {
   HEAP8[$21>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$21);
   HEAP8[$78>>0] = 0;
   $$pre$phi$i$i53Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($6,0);
  ;HEAP32[$$pre$phi$i$i53Z2D>>2]=HEAP32[$30>>2]|0;HEAP32[$$pre$phi$i$i53Z2D+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$$pre$phi$i$i53Z2D+8>>2]=HEAP32[$30+8>>2]|0;
  $$0$i$i$i55 = 0;
  while(1) {
   $exitcond$i$i$i56 = ($$0$i$i$i55|0)==(3);
   if ($exitcond$i$i$i56) {
    break;
   }
   $83 = (($30) + ($$0$i$i$i55<<2)|0);
   HEAP32[$83>>2] = 0;
   $84 = (($$0$i$i$i55) + 1)|0;
   $$0$i$i$i55 = $84;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
  $85 = HEAP32[$$pre$phiZ2D>>2]|0;
  $86 = ((($85)) + 24|0);
  $87 = HEAP32[$86>>2]|0;
  FUNCTION_TABLE_vii[$87 & 511]($31,$38);
  $88 = ((($7)) + 11|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = ($89<<24>>24)<(0);
  if ($90) {
   $91 = HEAP32[$7>>2]|0;
   HEAP8[$18>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($91,$18);
   $92 = ((($7)) + 4|0);
   HEAP32[$92>>2] = 0;
   $$pre$phi$i$i59Z2D = $7;
  } else {
   HEAP8[$19>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$19);
   HEAP8[$88>>0] = 0;
   $$pre$phi$i$i59Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($7,0);
  ;HEAP32[$$pre$phi$i$i59Z2D>>2]=HEAP32[$31>>2]|0;HEAP32[$$pre$phi$i$i59Z2D+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$$pre$phi$i$i59Z2D+8>>2]=HEAP32[$31+8>>2]|0;
  $$0$i$i$i61 = 0;
  while(1) {
   $exitcond$i$i$i62 = ($$0$i$i$i61|0)==(3);
   if ($exitcond$i$i$i62) {
    break;
   }
   $93 = (($31) + ($$0$i$i$i61<<2)|0);
   HEAP32[$93>>2] = 0;
   $94 = (($$0$i$i$i61) + 1)|0;
   $$0$i$i$i61 = $94;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
  $95 = HEAP32[$38>>2]|0;
  $96 = ((($95)) + 36|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (FUNCTION_TABLE_ii[$97 & 1023]($38)|0);
  $storemerge = $98;
 } else {
  $99 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,71216)|0);
  if ($1) {
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 44|0);
   $102 = HEAP32[$101>>2]|0;
   FUNCTION_TABLE_vii[$102 & 511]($32,$99);
   $103 = HEAP32[$32>>2]|0;
   HEAP8[$3>>0]=$103&255;HEAP8[$3+1>>0]=($103>>8)&255;HEAP8[$3+2>>0]=($103>>16)&255;HEAP8[$3+3>>0]=$103>>24;
   $104 = HEAP32[$99>>2]|0;
   $105 = ((($104)) + 32|0);
   $106 = HEAP32[$105>>2]|0;
   FUNCTION_TABLE_vii[$106 & 511]($33,$99);
   $107 = ((($8)) + 11|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = ($108<<24>>24)<(0);
   if ($109) {
    $110 = HEAP32[$8>>2]|0;
    HEAP8[$16>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($110,$16);
    $111 = ((($8)) + 4|0);
    HEAP32[$111>>2] = 0;
    $$pre$phi$i$i65Z2D = $8;
   } else {
    HEAP8[$17>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$17);
    HEAP8[$107>>0] = 0;
    $$pre$phi$i$i65Z2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($8,0);
   ;HEAP32[$$pre$phi$i$i65Z2D>>2]=HEAP32[$33>>2]|0;HEAP32[$$pre$phi$i$i65Z2D+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$pre$phi$i$i65Z2D+8>>2]=HEAP32[$33+8>>2]|0;
   $$0$i$i$i67 = 0;
   while(1) {
    $exitcond$i$i$i68 = ($$0$i$i$i67|0)==(3);
    if ($exitcond$i$i$i68) {
     break;
    }
    $112 = (($33) + ($$0$i$i$i67<<2)|0);
    HEAP32[$112>>2] = 0;
    $113 = (($$0$i$i$i67) + 1)|0;
    $$0$i$i$i67 = $113;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
   $$pre$phi88Z2D = $99;
  } else {
   $114 = HEAP32[$99>>2]|0;
   $115 = ((($114)) + 40|0);
   $116 = HEAP32[$115>>2]|0;
   FUNCTION_TABLE_vii[$116 & 511]($34,$99);
   $117 = HEAP32[$34>>2]|0;
   HEAP8[$3>>0]=$117&255;HEAP8[$3+1>>0]=($117>>8)&255;HEAP8[$3+2>>0]=($117>>16)&255;HEAP8[$3+3>>0]=$117>>24;
   $118 = HEAP32[$99>>2]|0;
   $119 = ((($118)) + 28|0);
   $120 = HEAP32[$119>>2]|0;
   FUNCTION_TABLE_vii[$120 & 511]($35,$99);
   $121 = ((($8)) + 11|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = ($122<<24>>24)<(0);
   if ($123) {
    $124 = HEAP32[$8>>2]|0;
    HEAP8[$14>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($124,$14);
    $125 = ((($8)) + 4|0);
    HEAP32[$125>>2] = 0;
    $$pre$phi$i$i71Z2D = $8;
   } else {
    HEAP8[$15>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$15);
    HEAP8[$121>>0] = 0;
    $$pre$phi$i$i71Z2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($8,0);
   ;HEAP32[$$pre$phi$i$i71Z2D>>2]=HEAP32[$35>>2]|0;HEAP32[$$pre$phi$i$i71Z2D+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$$pre$phi$i$i71Z2D+8>>2]=HEAP32[$35+8>>2]|0;
   $$0$i$i$i73 = 0;
   while(1) {
    $exitcond$i$i$i74 = ($$0$i$i$i73|0)==(3);
    if ($exitcond$i$i$i74) {
     break;
    }
    $126 = (($35) + ($$0$i$i$i73<<2)|0);
    HEAP32[$126>>2] = 0;
    $127 = (($$0$i$i$i73) + 1)|0;
    $$0$i$i$i73 = $127;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35);
   $$pre$phi88Z2D = $99;
  }
  $128 = HEAP32[$99>>2]|0;
  $129 = ((($128)) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($99)|0);
  HEAP8[$4>>0] = $131;
  $132 = HEAP32[$99>>2]|0;
  $133 = ((($132)) + 16|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (FUNCTION_TABLE_ii[$134 & 1023]($99)|0);
  HEAP8[$5>>0] = $135;
  $136 = HEAP32[$$pre$phi88Z2D>>2]|0;
  $137 = ((($136)) + 20|0);
  $138 = HEAP32[$137>>2]|0;
  FUNCTION_TABLE_vii[$138 & 511]($36,$99);
  $139 = ((($6)) + 11|0);
  $140 = HEAP8[$139>>0]|0;
  $141 = ($140<<24>>24)<(0);
  if ($141) {
   $142 = HEAP32[$6>>2]|0;
   HEAP8[$12>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($142,$12);
   $143 = ((($6)) + 4|0);
   HEAP32[$143>>2] = 0;
   $$pre$phi$i$i77Z2D = $6;
  } else {
   HEAP8[$13>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$13);
   HEAP8[$139>>0] = 0;
   $$pre$phi$i$i77Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($6,0);
  ;HEAP32[$$pre$phi$i$i77Z2D>>2]=HEAP32[$36>>2]|0;HEAP32[$$pre$phi$i$i77Z2D+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$$pre$phi$i$i77Z2D+8>>2]=HEAP32[$36+8>>2]|0;
  $$0$i$i$i79 = 0;
  while(1) {
   $exitcond$i$i$i80 = ($$0$i$i$i79|0)==(3);
   if ($exitcond$i$i$i80) {
    break;
   }
   $144 = (($36) + ($$0$i$i$i79<<2)|0);
   HEAP32[$144>>2] = 0;
   $145 = (($$0$i$i$i79) + 1)|0;
   $$0$i$i$i79 = $145;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($36);
  $146 = HEAP32[$$pre$phi88Z2D>>2]|0;
  $147 = ((($146)) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  FUNCTION_TABLE_vii[$148 & 511]($37,$99);
  $149 = ((($7)) + 11|0);
  $150 = HEAP8[$149>>0]|0;
  $151 = ($150<<24>>24)<(0);
  if ($151) {
   $152 = HEAP32[$7>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($152,$10);
   $153 = ((($7)) + 4|0);
   HEAP32[$153>>2] = 0;
   $$pre$phi$i$i83Z2D = $7;
  } else {
   HEAP8[$11>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$11);
   HEAP8[$149>>0] = 0;
   $$pre$phi$i$i83Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($7,0);
  ;HEAP32[$$pre$phi$i$i83Z2D>>2]=HEAP32[$37>>2]|0;HEAP32[$$pre$phi$i$i83Z2D+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$$pre$phi$i$i83Z2D+8>>2]=HEAP32[$37+8>>2]|0;
  $$0$i$i$i85 = 0;
  while(1) {
   $exitcond$i$i$i86 = ($$0$i$i$i85|0)==(3);
   if ($exitcond$i$i$i86) {
    break;
   }
   $154 = (($37) + ($$0$i$i$i85<<2)|0);
   HEAP32[$154>>2] = 0;
   $155 = (($$0$i$i$i85) + 1)|0;
   $$0$i$i$i85 = $155;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($37);
  $156 = HEAP32[$99>>2]|0;
  $157 = ((($156)) + 36|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (FUNCTION_TABLE_ii[$158 & 1023]($99)|0);
  $storemerge = $159;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i106 = 0, $$0$i$i113 = 0, $$0$ph = 0, $$0101 = 0, $$0104 = 0, $$07$i$i = 0, $$093 = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1100 = 0, $$1102 = 0, $$194 = 0, $$196 = 0, $$2 = 0, $$2103 = 0, $$3 = 0;
 var $$pn = 0, $$pn$pn = 0, $$sroa$08$0$i = 0, $$sroa$08$0$i112 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond = 0, $or$cond = 0, $spec$select = 0, $spec$select142 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 $15 = ((($13)) + 11|0);
 $16 = ((($13)) + 4|0);
 $17 = ((($12)) + 11|0);
 $18 = ((($12)) + 4|0);
 $19 = $3 & 512;
 $20 = ($19|0)==(0);
 $21 = ((($6)) + 8|0);
 $22 = ($14|0)>(0);
 $23 = ((($11)) + 11|0);
 $24 = ((($11)) + 4|0);
 $$0104 = 0;$$097 = $4;
 while(1) {
  $exitcond = ($$0104|0)==(4);
  if ($exitcond) {
   break;
  }
  $31 = (($8) + ($$0104)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  L4: do {
   switch ($33|0) {
   case 0:  {
    $34 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $34;
    $$2 = $$097;
    break;
   }
   case 1:  {
    $35 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $35;
    $36 = HEAP32[$6>>2]|0;
    $37 = ((($36)) + 28|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iii[$38 & 511]($6,32)|0);
    $40 = HEAP32[$2>>2]|0;
    $41 = ((($40)) + 1|0);
    HEAP32[$2>>2] = $41;
    HEAP8[$40>>0] = $39;
    $$2 = $$097;
    break;
   }
   case 3:  {
    $42 = HEAP8[$15>>0]|0;
    $43 = ($42<<24>>24)<(0);
    $44 = HEAP32[$16>>2]|0;
    $45 = $42&255;
    $46 = $43 ? $44 : $45;
    $47 = ($46|0)==(0);
    if ($47) {
     $$2 = $$097;
    } else {
     $48 = HEAP32[$13>>2]|0;
     $49 = $43 ? $48 : $13;
     $50 = HEAP8[$49>>0]|0;
     $51 = HEAP32[$2>>2]|0;
     $52 = ((($51)) + 1|0);
     HEAP32[$2>>2] = $52;
     HEAP8[$51>>0] = $50;
     $$2 = $$097;
    }
    break;
   }
   case 2:  {
    $53 = HEAP8[$17>>0]|0;
    $54 = ($53<<24>>24)<(0);
    $55 = HEAP32[$18>>2]|0;
    $56 = $53&255;
    $57 = $54 ? $55 : $56;
    $58 = ($57|0)==(0);
    $or$cond = $20 | $58;
    if ($or$cond) {
     $$2 = $$097;
    } else {
     $59 = HEAP32[$12>>2]|0;
     $60 = $54 ? $59 : $12;
     $61 = (($60) + ($57)|0);
     $62 = HEAP32[$2>>2]|0;
     $$0$i$i113 = $62;$$sroa$08$0$i112 = $60;
     while(1) {
      $63 = ($$sroa$08$0$i112|0)==($61|0);
      if ($63) {
       break;
      }
      $64 = HEAP8[$$sroa$08$0$i112>>0]|0;
      HEAP8[$$0$i$i113>>0] = $64;
      $65 = ((($$sroa$08$0$i112)) + 1|0);
      $66 = ((($$0$i$i113)) + 1|0);
      $$0$i$i113 = $66;$$sroa$08$0$i112 = $65;
     }
     HEAP32[$2>>2] = $$0$i$i113;
     $$2 = $$097;
    }
    break;
   }
   case 4:  {
    $67 = HEAP32[$2>>2]|0;
    $68 = ((($$097)) + 1|0);
    $spec$select = $7 ? $68 : $$097;
    $$0101 = $spec$select;
    while(1) {
     $69 = ($$0101>>>0)<($5>>>0);
     if (!($69)) {
      break;
     }
     $70 = HEAP8[$$0101>>0]|0;
     $71 = ($70<<24>>24)>(-1);
     if (!($71)) {
      break;
     }
     $72 = $70 << 24 >> 24;
     $73 = HEAP32[$21>>2]|0;
     $74 = (($73) + ($72<<1)|0);
     $75 = HEAP16[$74>>1]|0;
     $76 = $75 & 2048;
     $77 = ($76<<16>>16)==(0);
     if ($77) {
      break;
     }
     $78 = ((($$0101)) + 1|0);
     $$0101 = $78;
    }
    if ($22) {
     $$099 = $14;$$1102 = $$0101;
     while(1) {
      $79 = ($$1102>>>0)>($spec$select>>>0);
      $80 = ($$099|0)>(0);
      $81 = $79 & $80;
      if (!($81)) {
       break;
      }
      $82 = ((($$1102)) + -1|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = HEAP32[$2>>2]|0;
      $85 = ((($84)) + 1|0);
      HEAP32[$2>>2] = $85;
      HEAP8[$84>>0] = $83;
      $86 = (($$099) + -1)|0;
      $$099 = $86;$$1102 = $82;
     }
     if ($80) {
      $87 = HEAP32[$6>>2]|0;
      $88 = ((($87)) + 28|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = (FUNCTION_TABLE_iii[$89 & 511]($6,48)|0);
      $94 = $90;
     } else {
      $94 = 0;
     }
     $$1100 = $$099;
     while(1) {
      $91 = ($$1100|0)>(0);
      $92 = HEAP32[$2>>2]|0;
      $93 = ((($92)) + 1|0);
      HEAP32[$2>>2] = $93;
      if (!($91)) {
       break;
      }
      HEAP8[$92>>0] = $94;
      $95 = (($$1100) + -1)|0;
      $$1100 = $95;
     }
     HEAP8[$92>>0] = $9;
     $$2103 = $$1102;
    } else {
     $$2103 = $$0101;
    }
    $96 = ($$2103|0)==($spec$select|0);
    L36: do {
     if ($96) {
      $97 = HEAP32[$6>>2]|0;
      $98 = ((($97)) + 28|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (FUNCTION_TABLE_iii[$99 & 511]($6,48)|0);
      $101 = HEAP32[$2>>2]|0;
      $102 = ((($101)) + 1|0);
      HEAP32[$2>>2] = $102;
      HEAP8[$101>>0] = $100;
     } else {
      $103 = HEAP8[$23>>0]|0;
      $104 = ($103<<24>>24)<(0);
      $105 = HEAP32[$24>>2]|0;
      $106 = $103&255;
      $107 = $104 ? $105 : $106;
      $108 = ($107|0)==(0);
      if ($108) {
       $$0$ph = -1;
      } else {
       $109 = HEAP32[$11>>2]|0;
       $110 = $104 ? $109 : $11;
       $111 = HEAP8[$110>>0]|0;
       $112 = $111 << 24 >> 24;
       $$0$ph = $112;
      }
      $$0 = $$0$ph;$$093 = 0;$$095 = 0;$$3 = $$2103;
      while(1) {
       $113 = ($$3|0)==($spec$select|0);
       if ($113) {
        break L36;
       }
       $114 = ($$095|0)==($$0|0);
       if ($114) {
        $115 = HEAP32[$2>>2]|0;
        $116 = ((($115)) + 1|0);
        HEAP32[$2>>2] = $116;
        HEAP8[$115>>0] = $10;
        $117 = (($$093) + 1)|0;
        $118 = HEAP8[$23>>0]|0;
        $119 = ($118<<24>>24)<(0);
        $120 = HEAP32[$24>>2]|0;
        $121 = $118&255;
        $122 = $119 ? $120 : $121;
        $123 = ($117>>>0)<($122>>>0);
        if ($123) {
         $124 = HEAP32[$11>>2]|0;
         $125 = $119 ? $124 : $11;
         $126 = (($125) + ($117)|0);
         $127 = HEAP8[$126>>0]|0;
         $128 = ($127<<24>>24)==(127);
         $129 = $127 << 24 >> 24;
         $spec$select142 = $128 ? -1 : $129;
         $$1 = $spec$select142;$$194 = $117;$$196 = 0;
        } else {
         $$1 = $$095;$$194 = $117;$$196 = 0;
        }
       } else {
        $$1 = $$0;$$194 = $$093;$$196 = $$095;
       }
       $130 = ((($$3)) + -1|0);
       $131 = HEAP8[$130>>0]|0;
       $132 = HEAP32[$2>>2]|0;
       $133 = ((($132)) + 1|0);
       HEAP32[$2>>2] = $133;
       HEAP8[$132>>0] = $131;
       $134 = (($$196) + 1)|0;
       $$0 = $$1;$$093 = $$194;$$095 = $134;$$3 = $130;
      }
     }
    } while(0);
    $135 = HEAP32[$2>>2]|0;
    $136 = ($67|0)==($135|0);
    if ($136) {
     $$2 = $spec$select;
    } else {
     $$0$i$i106 = $135;$$07$i$i = $67;
     while(1) {
      $137 = ((($$0$i$i106)) + -1|0);
      $138 = ($$07$i$i>>>0)<($137>>>0);
      if (!($138)) {
       $$2 = $spec$select;
       break L4;
      }
      $139 = HEAP8[$$07$i$i>>0]|0;
      $140 = HEAP8[$137>>0]|0;
      HEAP8[$$07$i$i>>0] = $140;
      HEAP8[$137>>0] = $139;
      $141 = ((($$07$i$i)) + 1|0);
      $$0$i$i106 = $137;$$07$i$i = $141;
     }
    }
    break;
   }
   default: {
    $$2 = $$097;
   }
   }
  } while(0);
  $142 = (($$0104) + 1)|0;
  $$0104 = $142;$$097 = $$2;
 }
 $25 = HEAP8[$15>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$16>>2]|0;
 $28 = $25&255;
 $29 = $26 ? $27 : $28;
 $30 = ($29>>>0)>(1);
 if ($30) {
  $143 = HEAP32[$13>>2]|0;
  $$pn = $26 ? $143 : $13;
  $144 = (($$pn) + ($29)|0);
  $145 = HEAP32[$2>>2]|0;
  $$0$i$i = $145;$$pn$pn = $$pn;
  while(1) {
   $$sroa$08$0$i = ((($$pn$pn)) + 1|0);
   $146 = ($$sroa$08$0$i|0)==($144|0);
   if ($146) {
    break;
   }
   $147 = HEAP8[$$sroa$08$0$i>>0]|0;
   HEAP8[$$0$i$i>>0] = $147;
   $148 = ((($$0$i$i)) + 1|0);
   $$0$i$i = $148;$$pn$pn = $$sroa$08$0$i;
  }
  HEAP32[$2>>2] = $$0$i$i;
 }
 $149 = $3 & 176;
 $trunc = $149&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $150 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $150;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$1>>2] = $0;
 }
 }
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i39 = 0, $$0$i$i41 = 0, $$037 = 0, $$038 = 0, $$byval_copy = 0, $$sink72 = 0, $$sink73 = 0, $$sink74 = 0, $$sroa$050$0 = 0, $$sroa$058$0 = 0, $$sroa$067$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i40 = 0, $exitcond$i$i42 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1008|0);
 $$byval_copy = sp + 988|0;
 $vararg_buffer1 = sp + 912|0;
 $vararg_buffer = sp + 904|0;
 $6 = sp + 800|0;
 $7 = sp + 984|0;
 $8 = sp + 400|0;
 $9 = sp + 980|0;
 $10 = sp + 992|0;
 $11 = sp + 976|0;
 $12 = sp + 972|0;
 $13 = sp + 960|0;
 $14 = sp + 948|0;
 $15 = sp + 936|0;
 $16 = sp + 932|0;
 $17 = sp;
 $18 = sp + 928|0;
 $19 = sp + 924|0;
 $20 = sp + 920|0;
 HEAP32[$7>>2] = $6;
 HEAPF64[$vararg_buffer>>3] = $5;
 $21 = (_snprintf($6,100,63669,$vararg_buffer)|0);
 $22 = ($21>>>0)>(99);
 if ($22) {
  $23 = (__ZNSt3__26__clocEv()|0);
  HEAPF64[$vararg_buffer1>>3] = $5;
  $24 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$23,63669,$vararg_buffer1)|0);
  $25 = HEAP32[$7>>2]|0;
  $26 = ($25|0)==(0|0);
  if ($26) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  $27 = $25;
  $28 = $24 << 2;
  $29 = (_malloc($28)|0);
  $30 = $29;
  $31 = ($29|0)==(0|0);
  if ($31) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$0 = $29;$$038 = $24;$$sroa$058$0 = $30;$$sroa$067$0 = $27;
  }
 } else {
  $$0 = $8;$$038 = $21;$$sroa$058$0 = 0;$$sroa$067$0 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv($9,$3);
 $32 = (__ZNKSt3__26locale9use_facetERNS0_2idE($9,71024)|0);
 $33 = HEAP32[$7>>2]|0;
 $34 = (($33) + ($$038)|0);
 $35 = HEAP32[$32>>2]|0;
 $36 = ((($35)) + 48|0);
 $37 = HEAP32[$36>>2]|0;
 (FUNCTION_TABLE_iiiii[$37 & 511]($32,$33,$34,$$0)|0);
 $38 = ($$038|0)==(0);
 if ($38) {
  $48 = 0;
 } else {
  $39 = HEAP32[$7>>2]|0;
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40<<24>>24)==(45);
  $48 = $41;
 }
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $42 = (($13) + ($$0$i$i<<2)|0);
  HEAP32[$42>>2] = 0;
  $43 = (($$0$i$i) + 1)|0;
  $$0$i$i = $43;
 }
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 $$0$i$i39 = 0;
 while(1) {
  $exitcond$i$i40 = ($$0$i$i39|0)==(3);
  if ($exitcond$i$i40) {
   break;
  }
  $44 = (($14) + ($$0$i$i39<<2)|0);
  HEAP32[$44>>2] = 0;
  $45 = (($$0$i$i39) + 1)|0;
  $$0$i$i39 = $45;
 }
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
 $$0$i$i41 = 0;
 while(1) {
  $exitcond$i$i42 = ($$0$i$i41|0)==(3);
  if ($exitcond$i$i42) {
   break;
  }
  $46 = (($15) + ($$0$i$i41<<2)|0);
  HEAP32[$46>>2] = 0;
  $47 = (($$0$i$i41) + 1)|0;
  $$0$i$i41 = $47;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($2,$48,$9,$10,$11,$12,$13,$14,$15,$16);
 $49 = HEAP32[$16>>2]|0;
 $50 = ($$038|0)>($49|0);
 if ($50) {
  $51 = (($$038) - ($49))|0;
  $52 = $51 << 1;
  $53 = ((($15)) + 8|0);
  $54 = ((($53)) + 3|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = ($55<<24>>24)<(0);
  $57 = ((($15)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $55&255;
  $60 = $56 ? $58 : $59;
  $61 = ((($14)) + 8|0);
  $62 = ((($61)) + 3|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = ($63<<24>>24)<(0);
  $65 = ((($14)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $63&255;
  $68 = $64 ? $66 : $67;
  $69 = (($49) + 1)|0;
  $70 = (($69) + ($52))|0;
  $$sink72 = $68;$$sink73 = $70;$$sink74 = $60;
 } else {
  $71 = ((($15)) + 8|0);
  $72 = ((($71)) + 3|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = ($73<<24>>24)<(0);
  $75 = ((($15)) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $73&255;
  $78 = $74 ? $76 : $77;
  $79 = ((($14)) + 8|0);
  $80 = ((($79)) + 3|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = ($81<<24>>24)<(0);
  $83 = ((($14)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $81&255;
  $86 = $82 ? $84 : $85;
  $87 = (($49) + 2)|0;
  $$sink72 = $86;$$sink73 = $87;$$sink74 = $78;
 }
 $88 = (($$sink73) + ($$sink74))|0;
 $89 = (($88) + ($$sink72))|0;
 $90 = ($89>>>0)>(100);
 if ($90) {
  $91 = $89 << 2;
  $92 = (_malloc($91)|0);
  $93 = $92;
  $94 = ($92|0)==(0|0);
  if ($94) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$037 = $92;$$sroa$050$0 = $93;
  }
 } else {
  $$037 = $17;$$sroa$050$0 = 0;
 }
 $95 = ((($3)) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($$0) + ($$038<<2)|0);
 $98 = HEAP32[$11>>2]|0;
 $99 = HEAP32[$12>>2]|0;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($$037,$18,$19,$96,$$0,$97,$32,$48,$10,$98,$99,$13,$14,$15,$49);
 $100 = HEAP32[$1>>2]|0;
 HEAP32[$20>>2] = $100;
 $101 = HEAP32[$18>>2]|0;
 $102 = HEAP32[$19>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;
 $103 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$101,$102,$3,$4)|0);
 $104 = ($$sroa$050$0|0)==(0);
 if (!($104)) {
  $105 = $$sroa$050$0;
  _free($105);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
 __ZNSt3__26localeD2Ev($9);
 $106 = ($$sroa$058$0|0)==(0);
 if (!($106)) {
  $107 = $$sroa$058$0;
  _free($107);
 }
 $108 = ($$sroa$067$0|0)==(0);
 if (!($108)) {
  $109 = $$sroa$067$0;
  _free($109);
 }
 STACKTOP = sp;return ($103|0);
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i26 = 0, $$0$i$i28 = 0, $$byval_copy = 0, $$sink46 = 0, $$sink47 = 0, $$sink48 = 0, $$sroa$040$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i27 = 0, $exitcond$i$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $$byval_copy = sp + 464|0;
 $6 = sp + 460|0;
 $7 = sp + 468|0;
 $8 = sp + 456|0;
 $9 = sp + 452|0;
 $10 = sp + 440|0;
 $11 = sp + 428|0;
 $12 = sp + 416|0;
 $13 = sp + 412|0;
 $14 = sp;
 $15 = sp + 408|0;
 $16 = sp + 404|0;
 $17 = sp + 400|0;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,71024)|0);
 $19 = ((($5)) + 8|0);
 $20 = ((($19)) + 3|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)<(0);
 $23 = ((($5)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $21&255;
 $26 = $22 ? $24 : $25;
 $27 = ($26|0)==(0);
 if ($27) {
  $42 = 0;
 } else {
  $28 = HEAP32[$5>>2]|0;
  $29 = $22 ? $28 : $5;
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$18>>2]|0;
  $32 = ((($31)) + 44|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (FUNCTION_TABLE_iii[$33 & 511]($18,45)|0);
  $35 = ($30|0)==($34|0);
  $42 = $35;
 }
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $36 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$36>>2] = 0;
  $37 = (($$0$i$i) + 1)|0;
  $$0$i$i = $37;
 }
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
 $$0$i$i26 = 0;
 while(1) {
  $exitcond$i$i27 = ($$0$i$i26|0)==(3);
  if ($exitcond$i$i27) {
   break;
  }
  $38 = (($11) + ($$0$i$i26<<2)|0);
  HEAP32[$38>>2] = 0;
  $39 = (($$0$i$i26) + 1)|0;
  $$0$i$i26 = $39;
 }
 ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
 $$0$i$i28 = 0;
 while(1) {
  $exitcond$i$i29 = ($$0$i$i28|0)==(3);
  if ($exitcond$i$i29) {
   break;
  }
  $40 = (($12) + ($$0$i$i28<<2)|0);
  HEAP32[$40>>2] = 0;
  $41 = (($$0$i$i28) + 1)|0;
  $$0$i$i28 = $41;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($2,$42,$6,$7,$8,$9,$10,$11,$12,$13);
 $43 = HEAP8[$20>>0]|0;
 $44 = ($43<<24>>24)<(0);
 $45 = HEAP32[$23>>2]|0;
 $46 = $43&255;
 $47 = $44 ? $45 : $46;
 $48 = HEAP32[$13>>2]|0;
 $49 = ($47|0)>($48|0);
 if ($49) {
  $50 = (($47) - ($48))|0;
  $51 = $50 << 1;
  $52 = ((($12)) + 8|0);
  $53 = ((($52)) + 3|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = ($54<<24>>24)<(0);
  $56 = ((($12)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $54&255;
  $59 = $55 ? $57 : $58;
  $60 = ((($11)) + 8|0);
  $61 = ((($60)) + 3|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = ($62<<24>>24)<(0);
  $64 = ((($11)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $62&255;
  $67 = $63 ? $65 : $66;
  $68 = (($48) + 1)|0;
  $69 = (($68) + ($51))|0;
  $$sink46 = $67;$$sink47 = $69;$$sink48 = $59;
 } else {
  $70 = ((($12)) + 8|0);
  $71 = ((($70)) + 3|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = ($72<<24>>24)<(0);
  $74 = ((($12)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $72&255;
  $77 = $73 ? $75 : $76;
  $78 = ((($11)) + 8|0);
  $79 = ((($78)) + 3|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = ($80<<24>>24)<(0);
  $82 = ((($11)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $80&255;
  $85 = $81 ? $83 : $84;
  $86 = (($48) + 2)|0;
  $$sink46 = $85;$$sink47 = $86;$$sink48 = $77;
 }
 $87 = (($$sink47) + ($$sink48))|0;
 $88 = (($87) + ($$sink46))|0;
 $89 = ($88>>>0)>(100);
 if ($89) {
  $90 = $88 << 2;
  $91 = (_malloc($90)|0);
  $92 = $91;
  $93 = ($91|0)==(0|0);
  if ($93) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$0 = $91;$$sroa$040$0 = $92;
  }
 } else {
  $$0 = $14;$$sroa$040$0 = 0;
 }
 $94 = ((($3)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = HEAP32[$5>>2]|0;
 $97 = $44 ? $96 : $5;
 $98 = (($97) + ($47<<2)|0);
 $99 = HEAP32[$8>>2]|0;
 $100 = HEAP32[$9>>2]|0;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($$0,$15,$16,$95,$97,$98,$18,$42,$7,$99,$100,$10,$11,$12,$48);
 $101 = HEAP32[$1>>2]|0;
 HEAP32[$17>>2] = $101;
 $102 = HEAP32[$15>>2]|0;
 $103 = HEAP32[$16>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;
 $104 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$0,$102,$103,$3,$4)|0);
 $105 = ($$sroa$040$0|0)==(0);
 if (!($105)) {
  $106 = $$sroa$040$0;
  _free($106);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__26localeD2Ev($6);
 STACKTOP = sp;return ($104|0);
}
function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$i57 = 0, $$0$i$i$i61 = 0, $$0$i$i$i67 = 0, $$0$i$i$i71 = 0, $$pre$phi$i$i65Z2D = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, $exitcond$i$i$i58 = 0, $exitcond$i$i$i62 = 0, $exitcond$i$i$i68 = 0, $exitcond$i$i$i72 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $10 = sp + 156|0;
 $11 = sp + 152|0;
 $12 = sp + 163|0;
 $13 = sp + 162|0;
 $14 = sp + 148|0;
 $15 = sp + 144|0;
 $16 = sp + 140|0;
 $17 = sp + 136|0;
 $18 = sp + 132|0;
 $19 = sp + 128|0;
 $20 = sp + 161|0;
 $21 = sp + 160|0;
 $22 = sp + 124|0;
 $23 = sp + 120|0;
 $24 = sp + 116|0;
 $25 = sp + 112|0;
 $26 = sp + 108|0;
 $27 = sp + 96|0;
 $28 = sp + 92|0;
 $29 = sp + 80|0;
 $30 = sp + 68|0;
 $31 = sp + 56|0;
 $32 = sp + 52|0;
 $33 = sp + 40|0;
 $34 = sp + 36|0;
 $35 = sp + 24|0;
 $36 = sp + 12|0;
 $37 = sp;
 if ($0) {
  $38 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,71240)|0);
  if ($1) {
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 44|0);
   $41 = HEAP32[$40>>2]|0;
   FUNCTION_TABLE_vii[$41 & 511]($26,$38);
   $42 = HEAP32[$26>>2]|0;
   HEAP8[$3>>0]=$42&255;HEAP8[$3+1>>0]=($42>>8)&255;HEAP8[$3+2>>0]=($42>>16)&255;HEAP8[$3+3>>0]=$42>>24;
   $43 = HEAP32[$38>>2]|0;
   $44 = ((($43)) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   FUNCTION_TABLE_vii[$45 & 511]($27,$38);
   $46 = ((($8)) + 8|0);
   $47 = ((($46)) + 3|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48<<24>>24)<(0);
   if ($49) {
    $50 = HEAP32[$8>>2]|0;
    HEAP32[$24>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($50,$24);
    $51 = ((($8)) + 4|0);
    HEAP32[$51>>2] = 0;
   } else {
    HEAP32[$25>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$25);
    HEAP8[$47>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($8,0);
   ;HEAP32[$8>>2]=HEAP32[$27>>2]|0;HEAP32[$8+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$27+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $52 = (($27) + ($$0$i$i$i<<2)|0);
    HEAP32[$52>>2] = 0;
    $53 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $53;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($27);
  } else {
   $54 = HEAP32[$38>>2]|0;
   $55 = ((($54)) + 40|0);
   $56 = HEAP32[$55>>2]|0;
   FUNCTION_TABLE_vii[$56 & 511]($28,$38);
   $57 = HEAP32[$28>>2]|0;
   HEAP8[$3>>0]=$57&255;HEAP8[$3+1>>0]=($57>>8)&255;HEAP8[$3+2>>0]=($57>>16)&255;HEAP8[$3+3>>0]=$57>>24;
   $58 = HEAP32[$38>>2]|0;
   $59 = ((($58)) + 28|0);
   $60 = HEAP32[$59>>2]|0;
   FUNCTION_TABLE_vii[$60 & 511]($29,$38);
   $61 = ((($8)) + 8|0);
   $62 = ((($61)) + 3|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = ($63<<24>>24)<(0);
   if ($64) {
    $65 = HEAP32[$8>>2]|0;
    HEAP32[$22>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($65,$22);
    $66 = ((($8)) + 4|0);
    HEAP32[$66>>2] = 0;
   } else {
    HEAP32[$23>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$23);
    HEAP8[$62>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($8,0);
   ;HEAP32[$8>>2]=HEAP32[$29>>2]|0;HEAP32[$8+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$29+8>>2]|0;
   $$0$i$i$i47 = 0;
   while(1) {
    $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
    if ($exitcond$i$i$i48) {
     break;
    }
    $67 = (($29) + ($$0$i$i$i47<<2)|0);
    HEAP32[$67>>2] = 0;
    $68 = (($$0$i$i$i47) + 1)|0;
    $$0$i$i$i47 = $68;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($29);
  }
  $69 = HEAP32[$38>>2]|0;
  $70 = ((($69)) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (FUNCTION_TABLE_ii[$71 & 1023]($38)|0);
  HEAP32[$4>>2] = $72;
  $73 = HEAP32[$38>>2]|0;
  $74 = ((($73)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (FUNCTION_TABLE_ii[$75 & 1023]($38)|0);
  HEAP32[$5>>2] = $76;
  $77 = HEAP32[$38>>2]|0;
  $78 = ((($77)) + 20|0);
  $79 = HEAP32[$78>>2]|0;
  FUNCTION_TABLE_vii[$79 & 511]($30,$38);
  $80 = ((($6)) + 11|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = ($81<<24>>24)<(0);
  if ($82) {
   $83 = HEAP32[$6>>2]|0;
   HEAP8[$20>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($83,$20);
   $84 = ((($6)) + 4|0);
   HEAP32[$84>>2] = 0;
   $$pre$phi$i$iZ2D = $6;
  } else {
   HEAP8[$21>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$21);
   HEAP8[$80>>0] = 0;
   $$pre$phi$i$iZ2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($6,0);
  ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$30>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$30+8>>2]|0;
  $$0$i$i$i50 = 0;
  while(1) {
   $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
   if ($exitcond$i$i$i51) {
    break;
   }
   $85 = (($30) + ($$0$i$i$i50<<2)|0);
   HEAP32[$85>>2] = 0;
   $86 = (($$0$i$i$i50) + 1)|0;
   $$0$i$i$i50 = $86;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
  $87 = HEAP32[$38>>2]|0;
  $88 = ((($87)) + 24|0);
  $89 = HEAP32[$88>>2]|0;
  FUNCTION_TABLE_vii[$89 & 511]($31,$38);
  $90 = ((($7)) + 8|0);
  $91 = ((($90)) + 3|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = ($92<<24>>24)<(0);
  if ($93) {
   $94 = HEAP32[$7>>2]|0;
   HEAP32[$18>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($94,$18);
   $95 = ((($7)) + 4|0);
   HEAP32[$95>>2] = 0;
  } else {
   HEAP32[$19>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$19);
   HEAP8[$91>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($7,0);
  ;HEAP32[$7>>2]=HEAP32[$31>>2]|0;HEAP32[$7+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$31+8>>2]|0;
  $$0$i$i$i53 = 0;
  while(1) {
   $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
   if ($exitcond$i$i$i54) {
    break;
   }
   $96 = (($31) + ($$0$i$i$i53<<2)|0);
   HEAP32[$96>>2] = 0;
   $97 = (($$0$i$i$i53) + 1)|0;
   $$0$i$i$i53 = $97;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($31);
  $98 = HEAP32[$38>>2]|0;
  $99 = ((($98)) + 36|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (FUNCTION_TABLE_ii[$100 & 1023]($38)|0);
  $storemerge = $101;
 } else {
  $102 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,71232)|0);
  if ($1) {
   $103 = HEAP32[$102>>2]|0;
   $104 = ((($103)) + 44|0);
   $105 = HEAP32[$104>>2]|0;
   FUNCTION_TABLE_vii[$105 & 511]($32,$102);
   $106 = HEAP32[$32>>2]|0;
   HEAP8[$3>>0]=$106&255;HEAP8[$3+1>>0]=($106>>8)&255;HEAP8[$3+2>>0]=($106>>16)&255;HEAP8[$3+3>>0]=$106>>24;
   $107 = HEAP32[$102>>2]|0;
   $108 = ((($107)) + 32|0);
   $109 = HEAP32[$108>>2]|0;
   FUNCTION_TABLE_vii[$109 & 511]($33,$102);
   $110 = ((($8)) + 8|0);
   $111 = ((($110)) + 3|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = ($112<<24>>24)<(0);
   if ($113) {
    $114 = HEAP32[$8>>2]|0;
    HEAP32[$16>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($114,$16);
    $115 = ((($8)) + 4|0);
    HEAP32[$115>>2] = 0;
   } else {
    HEAP32[$17>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$17);
    HEAP8[$111>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($8,0);
   ;HEAP32[$8>>2]=HEAP32[$33>>2]|0;HEAP32[$8+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$33+8>>2]|0;
   $$0$i$i$i57 = 0;
   while(1) {
    $exitcond$i$i$i58 = ($$0$i$i$i57|0)==(3);
    if ($exitcond$i$i$i58) {
     break;
    }
    $116 = (($33) + ($$0$i$i$i57<<2)|0);
    HEAP32[$116>>2] = 0;
    $117 = (($$0$i$i$i57) + 1)|0;
    $$0$i$i$i57 = $117;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($33);
  } else {
   $118 = HEAP32[$102>>2]|0;
   $119 = ((($118)) + 40|0);
   $120 = HEAP32[$119>>2]|0;
   FUNCTION_TABLE_vii[$120 & 511]($34,$102);
   $121 = HEAP32[$34>>2]|0;
   HEAP8[$3>>0]=$121&255;HEAP8[$3+1>>0]=($121>>8)&255;HEAP8[$3+2>>0]=($121>>16)&255;HEAP8[$3+3>>0]=$121>>24;
   $122 = HEAP32[$102>>2]|0;
   $123 = ((($122)) + 28|0);
   $124 = HEAP32[$123>>2]|0;
   FUNCTION_TABLE_vii[$124 & 511]($35,$102);
   $125 = ((($8)) + 8|0);
   $126 = ((($125)) + 3|0);
   $127 = HEAP8[$126>>0]|0;
   $128 = ($127<<24>>24)<(0);
   if ($128) {
    $129 = HEAP32[$8>>2]|0;
    HEAP32[$14>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($129,$14);
    $130 = ((($8)) + 4|0);
    HEAP32[$130>>2] = 0;
   } else {
    HEAP32[$15>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$15);
    HEAP8[$126>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($8,0);
   ;HEAP32[$8>>2]=HEAP32[$35>>2]|0;HEAP32[$8+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$35+8>>2]|0;
   $$0$i$i$i61 = 0;
   while(1) {
    $exitcond$i$i$i62 = ($$0$i$i$i61|0)==(3);
    if ($exitcond$i$i$i62) {
     break;
    }
    $131 = (($35) + ($$0$i$i$i61<<2)|0);
    HEAP32[$131>>2] = 0;
    $132 = (($$0$i$i$i61) + 1)|0;
    $$0$i$i$i61 = $132;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($35);
  }
  $133 = HEAP32[$102>>2]|0;
  $134 = ((($133)) + 12|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (FUNCTION_TABLE_ii[$135 & 1023]($102)|0);
  HEAP32[$4>>2] = $136;
  $137 = HEAP32[$102>>2]|0;
  $138 = ((($137)) + 16|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (FUNCTION_TABLE_ii[$139 & 1023]($102)|0);
  HEAP32[$5>>2] = $140;
  $141 = HEAP32[$102>>2]|0;
  $142 = ((($141)) + 20|0);
  $143 = HEAP32[$142>>2]|0;
  FUNCTION_TABLE_vii[$143 & 511]($36,$102);
  $144 = ((($6)) + 11|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = ($145<<24>>24)<(0);
  if ($146) {
   $147 = HEAP32[$6>>2]|0;
   HEAP8[$12>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($147,$12);
   $148 = ((($6)) + 4|0);
   HEAP32[$148>>2] = 0;
   $$pre$phi$i$i65Z2D = $6;
  } else {
   HEAP8[$13>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$13);
   HEAP8[$144>>0] = 0;
   $$pre$phi$i$i65Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($6,0);
  ;HEAP32[$$pre$phi$i$i65Z2D>>2]=HEAP32[$36>>2]|0;HEAP32[$$pre$phi$i$i65Z2D+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$$pre$phi$i$i65Z2D+8>>2]=HEAP32[$36+8>>2]|0;
  $$0$i$i$i67 = 0;
  while(1) {
   $exitcond$i$i$i68 = ($$0$i$i$i67|0)==(3);
   if ($exitcond$i$i$i68) {
    break;
   }
   $149 = (($36) + ($$0$i$i$i67<<2)|0);
   HEAP32[$149>>2] = 0;
   $150 = (($$0$i$i$i67) + 1)|0;
   $$0$i$i$i67 = $150;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($36);
  $151 = HEAP32[$102>>2]|0;
  $152 = ((($151)) + 24|0);
  $153 = HEAP32[$152>>2]|0;
  FUNCTION_TABLE_vii[$153 & 511]($37,$102);
  $154 = ((($7)) + 8|0);
  $155 = ((($154)) + 3|0);
  $156 = HEAP8[$155>>0]|0;
  $157 = ($156<<24>>24)<(0);
  if ($157) {
   $158 = HEAP32[$7>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($158,$10);
   $159 = ((($7)) + 4|0);
   HEAP32[$159>>2] = 0;
  } else {
   HEAP32[$11>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$11);
   HEAP8[$155>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($7,0);
  ;HEAP32[$7>>2]=HEAP32[$37>>2]|0;HEAP32[$7+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$37+8>>2]|0;
  $$0$i$i$i71 = 0;
  while(1) {
   $exitcond$i$i$i72 = ($$0$i$i$i71|0)==(3);
   if ($exitcond$i$i$i72) {
    break;
   }
   $160 = (($37) + ($$0$i$i$i71<<2)|0);
   HEAP32[$160>>2] = 0;
   $161 = (($$0$i$i$i71) + 1)|0;
   $$0$i$i$i71 = $161;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($37);
  $162 = HEAP32[$102>>2]|0;
  $163 = ((($162)) + 36|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (FUNCTION_TABLE_ii[$164 & 1023]($102)|0);
  $storemerge = $165;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i108 = 0, $$0$i$i112 = 0, $$0$ph = 0, $$0101 = 0, $$0103 = 0, $$0106 = 0, $$07$i$i = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1102 = 0, $$1104 = 0, $$196 = 0, $$198 = 0, $$2 = 0, $$2105 = 0, $$3 = 0;
 var $$pre136 = 0, $$promoted = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, $scevgep$i = 0, $scevgep$i113 = 0, $spec$select = 0, $spec$select139 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 $15 = ((($13)) + 8|0);
 $16 = ((($15)) + 3|0);
 $17 = ((($13)) + 4|0);
 $18 = ((($12)) + 8|0);
 $19 = ((($18)) + 3|0);
 $20 = ((($12)) + 4|0);
 $21 = $3 & 512;
 $22 = ($21|0)==(0);
 $23 = ($14|0)>(0);
 $24 = ((($11)) + 11|0);
 $25 = ((($11)) + 4|0);
 $$0106 = 0;$$099 = $4;
 while(1) {
  $exitcond = ($$0106|0)==(4);
  if ($exitcond) {
   break;
  }
  $32 = (($8) + ($$0106)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 << 24 >> 24;
  L4: do {
   switch ($34|0) {
   case 0:  {
    $35 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $35;
    $$2 = $$099;
    break;
   }
   case 1:  {
    $36 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $36;
    $37 = HEAP32[$6>>2]|0;
    $38 = ((($37)) + 44|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_iii[$39 & 511]($6,32)|0);
    $41 = HEAP32[$2>>2]|0;
    $42 = ((($41)) + 4|0);
    HEAP32[$2>>2] = $42;
    HEAP32[$41>>2] = $40;
    $$2 = $$099;
    break;
   }
   case 3:  {
    $43 = HEAP8[$16>>0]|0;
    $44 = ($43<<24>>24)<(0);
    $45 = HEAP32[$17>>2]|0;
    $46 = $43&255;
    $47 = $44 ? $45 : $46;
    $48 = ($47|0)==(0);
    if ($48) {
     $$2 = $$099;
    } else {
     $49 = HEAP32[$13>>2]|0;
     $50 = $44 ? $49 : $13;
     $51 = HEAP32[$50>>2]|0;
     $52 = HEAP32[$2>>2]|0;
     $53 = ((($52)) + 4|0);
     HEAP32[$2>>2] = $53;
     HEAP32[$52>>2] = $51;
     $$2 = $$099;
    }
    break;
   }
   case 2:  {
    $54 = HEAP8[$19>>0]|0;
    $55 = ($54<<24>>24)<(0);
    $56 = HEAP32[$20>>2]|0;
    $57 = $54&255;
    $58 = $55 ? $56 : $57;
    $59 = ($58|0)==(0);
    $or$cond = $22 | $59;
    if ($or$cond) {
     $$2 = $$099;
    } else {
     $60 = HEAP32[$12>>2]|0;
     $61 = $55 ? $60 : $12;
     $62 = (($61) + ($58<<2)|0);
     $63 = HEAP32[$2>>2]|0;
     $$0$i$i112 = $63;$65 = $61;
     while(1) {
      $64 = ($65|0)==($62|0);
      if ($64) {
       break;
      }
      $66 = HEAP32[$65>>2]|0;
      HEAP32[$$0$i$i112>>2] = $66;
      $67 = ((($65)) + 4|0);
      $68 = ((($$0$i$i112)) + 4|0);
      $$0$i$i112 = $68;$65 = $67;
     }
     $scevgep$i113 = (($63) + ($58<<2)|0);
     HEAP32[$2>>2] = $scevgep$i113;
     $$2 = $$099;
    }
    break;
   }
   case 4:  {
    $69 = HEAP32[$2>>2]|0;
    $70 = ((($$099)) + 4|0);
    $spec$select = $7 ? $70 : $$099;
    $$0103 = $spec$select;
    while(1) {
     $71 = ($$0103>>>0)<($5>>>0);
     if (!($71)) {
      break;
     }
     $72 = HEAP32[$$0103>>2]|0;
     $73 = HEAP32[$6>>2]|0;
     $74 = ((($73)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (FUNCTION_TABLE_iiii[$75 & 1023]($6,2048,$72)|0);
     if (!($76)) {
      break;
     }
     $77 = ((($$0103)) + 4|0);
     $$0103 = $77;
    }
    if ($23) {
     $$0101 = $14;$$1104 = $$0103;
     while(1) {
      $78 = ($$1104>>>0)>($spec$select>>>0);
      $79 = ($$0101|0)>(0);
      $80 = $78 & $79;
      if (!($80)) {
       break;
      }
      $81 = ((($$1104)) + -4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = HEAP32[$2>>2]|0;
      $84 = ((($83)) + 4|0);
      HEAP32[$2>>2] = $84;
      HEAP32[$83>>2] = $82;
      $85 = (($$0101) + -1)|0;
      $$0101 = $85;$$1104 = $81;
     }
     if ($79) {
      $86 = HEAP32[$6>>2]|0;
      $87 = ((($86)) + 44|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_iii[$88 & 511]($6,48)|0);
      $93 = $89;
     } else {
      $93 = 0;
     }
     $$promoted = HEAP32[$2>>2]|0;
     $$1102 = $$0101;$92 = $$promoted;
     while(1) {
      $90 = ($$1102|0)>(0);
      $91 = ((($92)) + 4|0);
      if (!($90)) {
       break;
      }
      HEAP32[$92>>2] = $93;
      $94 = (($$1102) + -1)|0;
      $$1102 = $94;$92 = $91;
     }
     HEAP32[$2>>2] = $91;
     HEAP32[$92>>2] = $9;
     $$2105 = $$1104;
    } else {
     $$2105 = $$0103;
    }
    $95 = ($$2105|0)==($spec$select|0);
    if ($95) {
     $96 = HEAP32[$6>>2]|0;
     $97 = ((($96)) + 44|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (FUNCTION_TABLE_iii[$98 & 511]($6,48)|0);
     $100 = HEAP32[$2>>2]|0;
     $101 = ((($100)) + 4|0);
     HEAP32[$2>>2] = $101;
     HEAP32[$100>>2] = $99;
     $135 = $101;
    } else {
     $102 = HEAP8[$24>>0]|0;
     $103 = ($102<<24>>24)<(0);
     $104 = HEAP32[$25>>2]|0;
     $105 = $102&255;
     $106 = $103 ? $104 : $105;
     $107 = ($106|0)==(0);
     if ($107) {
      $$0$ph = -1;
     } else {
      $108 = HEAP32[$11>>2]|0;
      $109 = $103 ? $108 : $11;
      $110 = HEAP8[$109>>0]|0;
      $111 = $110 << 24 >> 24;
      $$0$ph = $111;
     }
     $$0 = $$0$ph;$$095 = 0;$$097 = 0;$$3 = $$2105;
     while(1) {
      $112 = ($$3|0)==($spec$select|0);
      if ($112) {
       break;
      }
      $113 = ($$097|0)==($$0|0);
      $114 = HEAP32[$2>>2]|0;
      if ($113) {
       $115 = ((($114)) + 4|0);
       HEAP32[$2>>2] = $115;
       HEAP32[$114>>2] = $10;
       $116 = (($$095) + 1)|0;
       $117 = HEAP8[$24>>0]|0;
       $118 = ($117<<24>>24)<(0);
       $119 = HEAP32[$25>>2]|0;
       $120 = $117&255;
       $121 = $118 ? $119 : $120;
       $122 = ($116>>>0)<($121>>>0);
       if ($122) {
        $123 = HEAP32[$11>>2]|0;
        $124 = $118 ? $123 : $11;
        $125 = (($124) + ($116)|0);
        $126 = HEAP8[$125>>0]|0;
        $127 = ($126<<24>>24)==(127);
        $128 = $126 << 24 >> 24;
        $spec$select139 = $127 ? -1 : $128;
        $$1 = $spec$select139;$$196 = $116;$$198 = 0;$132 = $115;
       } else {
        $$1 = $$097;$$196 = $116;$$198 = 0;$132 = $115;
       }
      } else {
       $$1 = $$0;$$196 = $$095;$$198 = $$097;$132 = $114;
      }
      $129 = ((($$3)) + -4|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ((($132)) + 4|0);
      HEAP32[$2>>2] = $131;
      HEAP32[$132>>2] = $130;
      $133 = (($$198) + 1)|0;
      $$0 = $$1;$$095 = $$196;$$097 = $133;$$3 = $129;
     }
     $$pre136 = HEAP32[$2>>2]|0;
     $135 = $$pre136;
    }
    $134 = ($69|0)==($135|0);
    if ($134) {
     $$2 = $spec$select;
    } else {
     $$0$i$i108 = $135;$$07$i$i = $69;
     while(1) {
      $136 = ((($$0$i$i108)) + -4|0);
      $137 = ($$07$i$i>>>0)<($136>>>0);
      if (!($137)) {
       $$2 = $spec$select;
       break L4;
      }
      $138 = HEAP32[$$07$i$i>>2]|0;
      $139 = HEAP32[$136>>2]|0;
      HEAP32[$$07$i$i>>2] = $139;
      HEAP32[$136>>2] = $138;
      $140 = ((($$07$i$i)) + 4|0);
      $$0$i$i108 = $136;$$07$i$i = $140;
     }
    }
    break;
   }
   default: {
    $$2 = $$099;
   }
   }
  } while(0);
  $141 = (($$0106) + 1)|0;
  $$0106 = $141;$$099 = $$2;
 }
 $26 = HEAP8[$16>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$17>>2]|0;
 $29 = $26&255;
 $30 = $27 ? $28 : $29;
 $31 = ($30>>>0)>(1);
 if ($31) {
  $142 = HEAP32[$13>>2]|0;
  $143 = ((($142)) + 4|0);
  $144 = $27 ? $143 : $17;
  $145 = $27 ? $142 : $13;
  $146 = (($145) + ($30<<2)|0);
  $147 = HEAP32[$2>>2]|0;
  $148 = $144;
  $149 = $146;
  $150 = (($149) - ($148))|0;
  $$0$i$i = $147;$152 = $144;
  while(1) {
   $151 = ($152|0)==($146|0);
   if ($151) {
    break;
   }
   $153 = HEAP32[$152>>2]|0;
   HEAP32[$$0$i$i>>2] = $153;
   $154 = ((($152)) + 4|0);
   $155 = ((($$0$i$i)) + 4|0);
   $$0$i$i = $155;$152 = $154;
  }
  $156 = $150 >>> 2;
  $scevgep$i = (($147) + ($156<<2)|0);
  HEAP32[$2>>2] = $scevgep$i;
 }
 $157 = $3 & 176;
 $trunc = $157&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $158 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $158;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$1>>2] = $0;
 }
 }
 return;
}
function __ZNSt3__28messagesIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28messagesIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $10 = ($8|0)!=((-1)|0);
 $11 = $10&1;
 $spec$select = $9 >>> $11;
 return ($spec$select|0);
}
function __ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i17 = 0, $$0$i22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $exitcond$i$i18 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 $9 = ((($5)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 $12 = HEAP32[$5>>2]|0;
 $13 = ((($5)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $10&255;
 $16 = $11 ? $12 : $5;
 $17 = $11 ? $14 : $15;
 $18 = (($16) + ($17)|0);
 $$0$i22 = $16;
 while(1) {
  $19 = ($$0$i22>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = HEAP8[$$0$i22>>0]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($6,$20);
  $21 = ((($$0$i22)) + 1|0);
  $$0$i22 = $21;
 }
 $22 = ($2|0)==(-1);
 $23 = $2 << 1;
 $24 = $23;
 $25 = $22 ? (-1) : $24;
 $26 = ((($6)) + 11|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)<(0);
 $29 = HEAP32[$6>>2]|0;
 $30 = $28 ? $29 : $6;
 $31 = (_catgets($25,$3,$4,$30)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i17 = 0;
 while(1) {
  $exitcond$i$i18 = ($$0$i$i17|0)==(3);
  if ($exitcond$i$i18) {
   break;
  }
  $32 = (($0) + ($$0$i$i17<<2)|0);
  HEAP32[$32>>2] = 0;
  $33 = (($$0$i$i17) + 1)|0;
  $$0$i$i17 = $33;
 }
 $34 = (_strlen($31)|0);
 $35 = (($30) + ($34)|0);
 $$0$i = $30;
 while(1) {
  $36 = ($$0$i>>>0)<($35>>>0);
  if (!($36)) {
   break;
  }
  $37 = HEAP8[$$0$i>>0]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0,$37);
  $38 = ((($$0$i)) + 1|0);
  $$0$i = $38;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 STACKTOP = sp;return;
}
function __ZNKSt3__28messagesIcE8do_closeEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28messagesIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28messagesIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $10 = ($8|0)!=((-1)|0);
 $11 = $10&1;
 $spec$select = $9 >>> $11;
 return ($spec$select|0);
}
function __ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i18 = 0, $$0$i21 = 0, $$016$i = 0, $$017$i = 0, $$019$i = 0, $$020$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $exitcond$i$i = 0, $exitcond$i$i19 = 0, $or$cond$i = 0, $or$cond$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 216|0;
 $7 = sp + 128|0;
 $8 = sp + 212|0;
 $9 = sp + 208|0;
 $10 = sp + 200|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = sp + 176|0;
 $15 = sp + 168|0;
 $16 = sp + 160|0;
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($14) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($15)) + 4|0);
 HEAP32[$19>>2] = 0;
 HEAP32[$15>>2] = (55928);
 $20 = ((($5)) + 8|0);
 $21 = ((($20)) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)<(0);
 $24 = HEAP32[$5>>2]|0;
 $25 = ((($5)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $22&255;
 $28 = $23 ? $24 : $5;
 $29 = $23 ? $26 : $27;
 $30 = (($28) + ($29<<2)|0);
 $31 = ((($7)) + 32|0);
 $$016$i = $28;$$017$i = 0;
 while(1) {
  $32 = ($$016$i>>>0)<($30>>>0);
  $33 = ($$017$i|0)!=(2);
  $34 = $33 & $32;
  if (!($34)) {
   break;
  }
  HEAP32[$9>>2] = $$016$i;
  $35 = HEAP32[$15>>2]|0;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 511]($15,$6,$$016$i,$30,$9,$7,$31,$8)|0);
  $39 = ($38|0)==(2);
  $40 = HEAP32[$9>>2]|0;
  $41 = ($40|0)==($$016$i|0);
  $or$cond$i20 = $39 | $41;
  if ($or$cond$i20) {
   label = 8;
   break;
  }
  $$0$i21 = $7;
  while(1) {
   $42 = HEAP32[$8>>2]|0;
   $43 = ($$0$i21>>>0)<($42>>>0);
   if (!($43)) {
    break;
   }
   $45 = HEAP8[$$0$i21>>0]|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($14,$45);
   $46 = ((($$0$i21)) + 1|0);
   $$0$i21 = $46;
  }
  $44 = HEAP32[$9>>2]|0;
  $$016$i = $44;$$017$i = $38;
 }
 if ((label|0) == 8) {
  __ZNSt3__221__throw_runtime_errorEPKc(0);
  // unreachable;
 }
 __ZNSt3__26locale5facetD2Ev($15);
 $47 = ($2|0)==(-1);
 $48 = $2 << 1;
 $49 = $48;
 $50 = $47 ? (-1) : $49;
 $51 = ((($14)) + 11|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = ($52<<24>>24)<(0);
 $54 = HEAP32[$14>>2]|0;
 $55 = $53 ? $54 : $14;
 $56 = (_catgets($50,$3,$4,$55)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i18 = 0;
 while(1) {
  $exitcond$i$i19 = ($$0$i$i18|0)==(3);
  if ($exitcond$i$i19) {
   break;
  }
  $57 = (($0) + ($$0$i$i18<<2)|0);
  HEAP32[$57>>2] = 0;
  $58 = (($$0$i$i18) + 1)|0;
  $$0$i$i18 = $58;
 }
 $59 = ((($16)) + 4|0);
 HEAP32[$59>>2] = 0;
 HEAP32[$16>>2] = (55976);
 $60 = (_strlen($56)|0);
 $61 = (($55) + ($60)|0);
 $62 = $61;
 $63 = ((($11)) + 128|0);
 $$019$i = $55;$$020$i = 0;
 while(1) {
  $64 = ($$019$i>>>0)<($61>>>0);
  $65 = ($$020$i|0)!=(2);
  $66 = $65 & $64;
  if (!($66)) {
   label = 23;
   break;
  }
  HEAP32[$13>>2] = $$019$i;
  $67 = HEAP32[$16>>2]|0;
  $68 = ((($67)) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $$019$i;
  $71 = (($62) - ($70))|0;
  $72 = ($71|0)>(32);
  $73 = ((($$019$i)) + 32|0);
  $74 = $72 ? $73 : $61;
  $75 = (FUNCTION_TABLE_iiiiiiiii[$69 & 511]($16,$10,$$019$i,$74,$13,$11,$63,$12)|0);
  $76 = ($75|0)==(2);
  $77 = HEAP32[$13>>2]|0;
  $78 = ($77|0)==($$019$i|0);
  $or$cond$i = $76 | $78;
  if ($or$cond$i) {
   label = 19;
   break;
  }
  $$0$i = $11;
  while(1) {
   $79 = HEAP32[$12>>2]|0;
   $80 = ($$0$i>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $82 = HEAP32[$$0$i>>2]|0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($0,$82);
   $83 = ((($$0$i)) + 4|0);
   $$0$i = $83;
  }
  $81 = HEAP32[$13>>2]|0;
  $$019$i = $81;$$020$i = $75;
 }
 if ((label|0) == 19) {
  __ZNSt3__221__throw_runtime_errorEPKc(0);
  // unreachable;
 }
 else if ((label|0) == 23) {
  __ZNSt3__26locale5facetD2Ev($16);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__28messagesIwE8do_closeEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__217__widen_from_utf8ILm32EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($2,$3,$4,1114111,0)|0);
 return ($5|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$091 = 0, $$185 = 0, $$185$ph = 0, $$589 = 0, $$off = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 $$pre = $1;
 if ($6) {
  $$185$ph = $0;
 } else {
  $7 = $0;
  $8 = (($$pre) - ($7))|0;
  $9 = ($8|0)>(2);
  if ($9) {
   $10 = HEAP8[$0>>0]|0;
   $11 = ($10<<24>>24)==(-17);
   if ($11) {
    $12 = ((($0)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(-69);
    if ($14) {
     $15 = ((($0)) + 2|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(-65);
     $18 = ((($0)) + 3|0);
     $spec$select = $17 ? $18 : $0;
     $$185$ph = $spec$select;
    } else {
     $$185$ph = $0;
    }
   } else {
    $$185$ph = $0;
   }
  } else {
   $$185$ph = $0;
  }
 }
 $$091 = 0;$$185 = $$185$ph;
 L7: while(1) {
  $19 = ($$185>>>0)<($1>>>0);
  $20 = ($$091>>>0)<($2>>>0);
  $or$cond = $20 & $19;
  if (!($or$cond)) {
   break;
  }
  $21 = HEAP8[$$185>>0]|0;
  $22 = $21&255;
  $23 = ($21<<24>>24)>(-1);
  do {
   if ($23) {
    $24 = ($22>>>0)>($3>>>0);
    if ($24) {
     break L7;
    }
    $25 = ((($$185)) + 1|0);
    $$589 = $25;
   } else {
    $26 = ($21&255)<(194);
    if ($26) {
     break L7;
    }
    $27 = ($21&255)<(224);
    if ($27) {
     $28 = $$185;
     $29 = (($$pre) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      break L7;
     }
     $31 = ((($$185)) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $33 & 192;
     $35 = ($34|0)==(128);
     if (!($35)) {
      break L7;
     }
     $36 = $22 << 6;
     $37 = $36 & 1984;
     $38 = $33 & 63;
     $39 = $38 | $37;
     $40 = ($39>>>0)>($3>>>0);
     if ($40) {
      break L7;
     }
     $41 = ((($$185)) + 2|0);
     $$589 = $41;
     break;
    }
    $42 = ($21&255)<(240);
    if ($42) {
     $43 = $$185;
     $44 = (($$pre) - ($43))|0;
     $45 = ($44|0)<(3);
     if ($45) {
      break L7;
     }
     $46 = ((($$185)) + 1|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ((($$185)) + 2|0);
     $49 = HEAP8[$48>>0]|0;
     switch ($21<<24>>24) {
     case -32:  {
      $50 = $47 & -32;
      $51 = ($50<<24>>24)==(-96);
      if (!($51)) {
       break L7;
      }
      break;
     }
     case -19:  {
      $52 = $47 & -32;
      $53 = ($52<<24>>24)==(-128);
      if (!($53)) {
       break L7;
      }
      break;
     }
     default: {
      $54 = $47 & -64;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       break L7;
      }
     }
     }
     $56 = $49&255;
     $57 = $56 & 192;
     $58 = ($57|0)==(128);
     if (!($58)) {
      break L7;
     }
     $59 = $22 << 12;
     $60 = $59 & 61440;
     $61 = $47 & 63;
     $62 = $61&255;
     $63 = $62 << 6;
     $64 = $63 | $60;
     $65 = $56 & 63;
     $66 = $64 | $65;
     $67 = ($66>>>0)>($3>>>0);
     $68 = ((($$185)) + 3|0);
     if ($67) {
      break L7;
     } else {
      $$589 = $68;
      break;
     }
    }
    $69 = ($21&255)<(245);
    if (!($69)) {
     break L7;
    }
    $70 = $$185;
    $71 = (($$pre) - ($70))|0;
    $72 = ($71|0)<(4);
    if ($72) {
     break L7;
    }
    $73 = ((($$185)) + 1|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = ((($$185)) + 2|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ((($$185)) + 3|0);
    $78 = HEAP8[$77>>0]|0;
    switch ($21<<24>>24) {
    case -16:  {
     $$off = (($74) + 112)<<24>>24;
     $79 = ($$off&255)<(48);
     if (!($79)) {
      break L7;
     }
     break;
    }
    case -12:  {
     $80 = $74 & -16;
     $81 = ($80<<24>>24)==(-128);
     if (!($81)) {
      break L7;
     }
     break;
    }
    default: {
     $82 = $74 & -64;
     $83 = ($82<<24>>24)==(-128);
     if (!($83)) {
      break L7;
     }
    }
    }
    $84 = $76&255;
    $85 = $84 & 192;
    $86 = ($85|0)==(128);
    if (!($86)) {
     break L7;
    }
    $87 = $78&255;
    $88 = $87 & 192;
    $89 = ($88|0)==(128);
    if (!($89)) {
     break L7;
    }
    $90 = $22 << 18;
    $91 = $90 & 1835008;
    $92 = $74 & 63;
    $93 = $92&255;
    $94 = $93 << 12;
    $95 = $94 | $91;
    $96 = $84 << 6;
    $97 = $96 & 4032;
    $98 = $95 | $97;
    $99 = $87 & 63;
    $100 = $98 | $99;
    $101 = ($100>>>0)>($3>>>0);
    $102 = ((($$185)) + 4|0);
    if ($101) {
     break L7;
    } else {
     $$589 = $102;
    }
   }
  } while(0);
  $103 = (($$091) + 1)|0;
  $$091 = $103;$$185 = $$589;
 }
 $104 = $$185;
 $105 = $0;
 $106 = (($104) - ($105))|0;
 return ($106|0);
}
function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$9 = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink107 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 4;
 $9 = ($8|0)==(0);
 if ($9) {
  $$pre = $1;
  $$pre$phiZ2D = $$pre;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = $1;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  $14 = ($13|0)>(2);
  if ($14) {
   $15 = HEAP8[$10>>0]|0;
   $16 = ($15<<24>>24)==(-17);
   if ($16) {
    $17 = ((($10)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(-69);
    if ($19) {
     $20 = ((($10)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(-65);
     if ($22) {
      $23 = ((($10)) + 3|0);
      HEAP32[$2>>2] = $23;
      $$pre$phiZ2D = $11;
     } else {
      $$pre$phiZ2D = $11;
     }
    } else {
     $$pre$phiZ2D = $11;
    }
   } else {
    $$pre$phiZ2D = $11;
   }
  } else {
   $$pre$phiZ2D = $11;
  }
 }
 L9: while(1) {
  $24 = HEAP32[$2>>2]|0;
  $25 = ($24>>>0)<($1>>>0);
  if (!($25)) {
   $$9 = 0;
   break;
  }
  $26 = HEAP32[$5>>2]|0;
  $27 = ($26>>>0)<($4>>>0);
  if (!($27)) {
   $$9 = 1;
   break;
  }
  $28 = HEAP8[$24>>0]|0;
  $29 = $28&255;
  $30 = ($28<<24>>24)>(-1);
  do {
   if ($30) {
    $31 = ($29>>>0)>($6>>>0);
    if ($31) {
     $$9 = 2;
     break L9;
    } else {
     $$sink = $29;$$sink107 = 1;
    }
   } else {
    $32 = ($28&255)<(194);
    if ($32) {
     $$9 = 2;
     break L9;
    }
    $33 = ($28&255)<(224);
    if ($33) {
     $34 = $24;
     $35 = (($$pre$phiZ2D) - ($34))|0;
     $36 = ($35|0)<(2);
     if ($36) {
      $$9 = 1;
      break L9;
     }
     $37 = ((($24)) + 1|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = $39 & 192;
     $41 = ($40|0)==(128);
     if (!($41)) {
      $$9 = 2;
      break L9;
     }
     $42 = $29 << 6;
     $43 = $42 & 1984;
     $44 = $39 & 63;
     $45 = $44 | $43;
     $46 = ($45>>>0)>($6>>>0);
     if ($46) {
      $$9 = 2;
      break L9;
     } else {
      $$sink = $45;$$sink107 = 2;
      break;
     }
    }
    $47 = ($28&255)<(240);
    if ($47) {
     $48 = $24;
     $49 = (($$pre$phiZ2D) - ($48))|0;
     $50 = ($49|0)<(3);
     if ($50) {
      $$9 = 1;
      break L9;
     }
     $51 = ((($24)) + 1|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = ((($24)) + 2|0);
     $54 = HEAP8[$53>>0]|0;
     switch ($28<<24>>24) {
     case -32:  {
      $55 = $52 & -32;
      $56 = ($55<<24>>24)==(-96);
      if (!($56)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     case -19:  {
      $57 = $52 & -32;
      $58 = ($57<<24>>24)==(-128);
      if (!($58)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     default: {
      $59 = $52 & -64;
      $60 = ($59<<24>>24)==(-128);
      if (!($60)) {
       $$9 = 2;
       break L9;
      }
     }
     }
     $61 = $54&255;
     $62 = $61 & 192;
     $63 = ($62|0)==(128);
     if (!($63)) {
      $$9 = 2;
      break L9;
     }
     $64 = $29 << 12;
     $65 = $64 & 61440;
     $66 = $52 & 63;
     $67 = $66&255;
     $68 = $67 << 6;
     $69 = $68 | $65;
     $70 = $61 & 63;
     $71 = $69 | $70;
     $72 = ($71>>>0)>($6>>>0);
     if ($72) {
      $$9 = 2;
      break L9;
     } else {
      $$sink = $71;$$sink107 = 3;
      break;
     }
    }
    $73 = ($28&255)<(245);
    if (!($73)) {
     $$9 = 2;
     break L9;
    }
    $74 = $24;
    $75 = (($$pre$phiZ2D) - ($74))|0;
    $76 = ($75|0)<(4);
    if ($76) {
     $$9 = 1;
     break L9;
    }
    $77 = ((($24)) + 1|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ((($24)) + 2|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ((($24)) + 3|0);
    $82 = HEAP8[$81>>0]|0;
    switch ($28<<24>>24) {
    case -16:  {
     $$off = (($78) + 112)<<24>>24;
     $83 = ($$off&255)<(48);
     if (!($83)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    case -12:  {
     $84 = $78 & -16;
     $85 = ($84<<24>>24)==(-128);
     if (!($85)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    default: {
     $86 = $78 & -64;
     $87 = ($86<<24>>24)==(-128);
     if (!($87)) {
      $$9 = 2;
      break L9;
     }
    }
    }
    $88 = $80&255;
    $89 = $88 & 192;
    $90 = ($89|0)==(128);
    if (!($90)) {
     $$9 = 2;
     break L9;
    }
    $91 = $82&255;
    $92 = $91 & 192;
    $93 = ($92|0)==(128);
    if (!($93)) {
     $$9 = 2;
     break L9;
    }
    $94 = $29 << 18;
    $95 = $94 & 1835008;
    $96 = $78 & 63;
    $97 = $96&255;
    $98 = $97 << 12;
    $99 = $98 | $95;
    $100 = $88 << 6;
    $101 = $100 & 4032;
    $102 = $99 | $101;
    $103 = $91 & 63;
    $104 = $102 | $103;
    $105 = ($104>>>0)>($6>>>0);
    if ($105) {
     $$9 = 2;
     break L9;
    } else {
     $$sink = $104;$$sink107 = 4;
    }
   }
  } while(0);
  HEAP32[$26>>2] = $$sink;
  $106 = (($24) + ($$sink107)|0);
  HEAP32[$2>>2] = $106;
  $107 = HEAP32[$5>>2]|0;
  $108 = ((($107)) + 4|0);
  HEAP32[$5>>2] = $108;
 }
 return ($$9|0);
}
function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$2 = 0, $$pre = 0, $$pre49 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 $$pre49 = $4;
 if ($9) {
  label = 4;
 } else {
  $10 = $3;
  $11 = (($$pre49) - ($10))|0;
  $12 = ($11|0)<(3);
  if ($12) {
   $$2 = 1;
  } else {
   $13 = ((($3)) + 1|0);
   HEAP32[$5>>2] = $13;
   HEAP8[$3>>0] = -17;
   $14 = HEAP32[$5>>2]|0;
   $15 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $15;
   HEAP8[$14>>0] = -69;
   $16 = HEAP32[$5>>2]|0;
   $17 = ((($16)) + 1|0);
   HEAP32[$5>>2] = $17;
   HEAP8[$16>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$2>>2]|0;
   $19 = $$pre;
   while(1) {
    $18 = ($19>>>0)<($1>>>0);
    if (!($18)) {
     $$2 = 0;
     break L4;
    }
    $20 = HEAP32[$19>>2]|0;
    $21 = $20 & -2048;
    $22 = ($21|0)==(55296);
    $23 = ($20>>>0)>($6>>>0);
    $or$cond = $23 | $22;
    if ($or$cond) {
     $$2 = 2;
     break L4;
    }
    $24 = ($20>>>0)<(128);
    do {
     if ($24) {
      $25 = HEAP32[$5>>2]|0;
      $26 = $25;
      $27 = (($$pre49) - ($26))|0;
      $28 = ($27|0)<(1);
      if ($28) {
       $$2 = 1;
       break L4;
      }
      $29 = $20&255;
      $30 = ((($25)) + 1|0);
      HEAP32[$5>>2] = $30;
      HEAP8[$25>>0] = $29;
     } else {
      $31 = ($20>>>0)<(2048);
      if ($31) {
       $32 = HEAP32[$5>>2]|0;
       $33 = $32;
       $34 = (($$pre49) - ($33))|0;
       $35 = ($34|0)<(2);
       if ($35) {
        $$2 = 1;
        break L4;
       }
       $36 = $20 >>> 6;
       $37 = $36 | 192;
       $38 = $37&255;
       $39 = ((($32)) + 1|0);
       HEAP32[$5>>2] = $39;
       HEAP8[$32>>0] = $38;
       $40 = $20 & 63;
       $41 = $40 | 128;
       $42 = $41&255;
       $43 = HEAP32[$5>>2]|0;
       $44 = ((($43)) + 1|0);
       HEAP32[$5>>2] = $44;
       HEAP8[$43>>0] = $42;
       break;
      }
      $45 = ($20>>>0)<(65536);
      $46 = HEAP32[$5>>2]|0;
      $47 = $46;
      $48 = (($$pre49) - ($47))|0;
      if ($45) {
       $49 = ($48|0)<(3);
       if ($49) {
        $$2 = 1;
        break L4;
       }
       $50 = $20 >>> 12;
       $51 = $50 | 224;
       $52 = $51&255;
       $53 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $53;
       HEAP8[$46>>0] = $52;
       $54 = $20 >>> 6;
       $55 = $54 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$5>>2]|0;
       $59 = ((($58)) + 1|0);
       HEAP32[$5>>2] = $59;
       HEAP8[$58>>0] = $57;
       $60 = $20 & 63;
       $61 = $60 | 128;
       $62 = $61&255;
       $63 = HEAP32[$5>>2]|0;
       $64 = ((($63)) + 1|0);
       HEAP32[$5>>2] = $64;
       HEAP8[$63>>0] = $62;
       break;
      } else {
       $65 = ($48|0)<(4);
       if ($65) {
        $$2 = 1;
        break L4;
       }
       $66 = $20 >>> 18;
       $67 = $66 | 240;
       $68 = $67&255;
       $69 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $69;
       HEAP8[$46>>0] = $68;
       $70 = $20 >>> 12;
       $71 = $70 & 63;
       $72 = $71 | 128;
       $73 = $72&255;
       $74 = HEAP32[$5>>2]|0;
       $75 = ((($74)) + 1|0);
       HEAP32[$5>>2] = $75;
       HEAP8[$74>>0] = $73;
       $76 = $20 >>> 6;
       $77 = $76 & 63;
       $78 = $77 | 128;
       $79 = $78&255;
       $80 = HEAP32[$5>>2]|0;
       $81 = ((($80)) + 1|0);
       HEAP32[$5>>2] = $81;
       HEAP8[$80>>0] = $79;
       $82 = $20 & 63;
       $83 = $82 | 128;
       $84 = $83&255;
       $85 = HEAP32[$5>>2]|0;
       $86 = ((($85)) + 1|0);
       HEAP32[$5>>2] = $86;
       HEAP8[$85>>0] = $84;
       break;
      }
     }
    } while(0);
    $87 = HEAP32[$2>>2]|0;
    $88 = ((($87)) + 4|0);
    HEAP32[$2>>2] = $88;
    $19 = $88;
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__216__narrow_to_utf8ILm32EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 HEAP32[$7>>2] = $5;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 HEAP32[$7>>2] = $5;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sroa$speculated = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = $2;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<($4>>>0);
 $$sroa$speculated = $8 ? $7 : $4;
 return ($$sroa$speculated|0);
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$069 = 0, $$070 = 0, $$070$lcssa = 0, $$077 = 0, $$079 = 0, $$171 = 0, $$173 = 0, $$178 = 0, $$2 = 0, $$2$lcssa = 0, $$375$ph = 0, $$476 = 0, $$5$ph85 = 0, $$pre = 0, $$pre113 = 0, $$pre114 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = sp + 8|0;
 $$070 = $2;
 while(1) {
  $10 = ($$070|0)==($3|0);
  if ($10) {
   $$070$lcssa = $3;
   break;
  }
  $11 = HEAP32[$$070>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $$070$lcssa = $$070;
   break;
  }
  $13 = ((($$070)) + 4|0);
  $$070 = $13;
 }
 HEAP32[$7>>2] = $5;
 HEAP32[$4>>2] = $2;
 $14 = $6;
 $15 = ((($0)) + 8|0);
 $$077 = $2;$$079 = $5;$$171 = $$070$lcssa;
 L6: while(1) {
  $16 = ($$077|0)==($3|0);
  $17 = ($$079|0)==($6|0);
  $or$cond = $17 | $16;
  if ($or$cond) {
   $75 = $$077;
   label = 36;
   break;
  }
  $18 = $1;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $8;
  $25 = $24;
  HEAP32[$25>>2] = $20;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $23;
  $28 = $$171;
  $29 = $$077;
  $30 = (($28) - ($29))|0;
  $31 = $30 >> 2;
  $32 = $$079;
  $33 = (($14) - ($32))|0;
  $34 = HEAP32[$15>>2]|0;
  $35 = (___uselocale($34)|0);
  $36 = (_wcsnrtombs($$079,$4,$31,$33,$1)|0);
  $37 = ($35|0)==(0|0);
  if (!($37)) {
   (___uselocale($35)|0);
  }
  switch ($36|0) {
  case -1:  {
   label = 10;
   break L6;
   break;
  }
  case 0:  {
   $$375$ph = 1;
   label = 33;
   break L6;
   break;
  }
  default: {
  }
  }
  $50 = HEAP32[$7>>2]|0;
  $51 = (($50) + ($36)|0);
  HEAP32[$7>>2] = $51;
  $52 = ($51|0)==($6|0);
  if ($52) {
   label = 34;
   break;
  }
  $53 = ($$171|0)==($3|0);
  if ($53) {
   $$pre = HEAP32[$4>>2]|0;
   $$5$ph85 = $3;$77 = $51;$78 = $$pre;
  } else {
   $54 = HEAP32[$15>>2]|0;
   $55 = (___uselocale($54)|0);
   $56 = (_wcrtomb($9,0,$1)|0);
   $57 = ($55|0)==(0|0);
   if (!($57)) {
    (___uselocale($55)|0);
   }
   $58 = ($56|0)==(-1);
   if ($58) {
    $$173 = 2;
    label = 32;
    break;
   }
   $59 = HEAP32[$7>>2]|0;
   $60 = (($14) - ($59))|0;
   $61 = ($56>>>0)>($60>>>0);
   if ($61) {
    $$173 = 1;
    label = 32;
    break;
   }
   $$0 = $9;$$069 = $56;
   while(1) {
    $62 = ($$069|0)==(0);
    if ($62) {
     break;
    }
    $65 = ((($$0)) + 1|0);
    $66 = HEAP8[$$0>>0]|0;
    $67 = HEAP32[$7>>2]|0;
    $68 = ((($67)) + 1|0);
    HEAP32[$7>>2] = $68;
    HEAP8[$67>>0] = $66;
    $69 = (($$069) + -1)|0;
    $$0 = $65;$$069 = $69;
   }
   $63 = HEAP32[$4>>2]|0;
   $64 = ((($63)) + 4|0);
   HEAP32[$4>>2] = $64;
   $$2 = $64;
   while(1) {
    $70 = ($$2|0)==($3|0);
    if ($70) {
     $$2$lcssa = $3;
     break;
    }
    $71 = HEAP32[$$2>>2]|0;
    $72 = ($71|0)==(0);
    if ($72) {
     $$2$lcssa = $$2;
     break;
    }
    $73 = ((($$2)) + 4|0);
    $$2 = $73;
   }
   $$pre113 = HEAP32[$7>>2]|0;
   $$5$ph85 = $$2$lcssa;$77 = $$pre113;$78 = $64;
  }
  $$077 = $78;$$079 = $77;$$171 = $$5$ph85;
 }
 if ((label|0) == 10) {
  HEAP32[$7>>2] = $$079;
  $$178 = $$077;$43 = $$079;
  while(1) {
   $38 = HEAP32[$4>>2]|0;
   $39 = ($$178|0)==($38|0);
   if ($39) {
    break;
   }
   $40 = HEAP32[$$178>>2]|0;
   $41 = HEAP32[$15>>2]|0;
   $42 = (___uselocale($41)|0);
   $44 = (_wcrtomb($43,$40,$8)|0);
   $45 = ($42|0)==(0|0);
   if (!($45)) {
    (___uselocale($42)|0);
   }
   $46 = ($44|0)==(-1);
   if ($46) {
    break;
   }
   $47 = HEAP32[$7>>2]|0;
   $48 = (($47) + ($44)|0);
   HEAP32[$7>>2] = $48;
   $49 = ((($$178)) + 4|0);
   $$178 = $49;$43 = $48;
  }
  HEAP32[$4>>2] = $$178;
  $$375$ph = 2;
  label = 33;
 }
 else if ((label|0) == 32) {
  $$375$ph = $$173;
  label = 33;
 }
 else if ((label|0) == 34) {
  $$pre114 = HEAP32[$4>>2]|0;
  $75 = $$pre114;
  label = 36;
 }
 if ((label|0) == 33) {
  $$476 = $$375$ph;
 }
 else if ((label|0) == 36) {
  $74 = ($75|0)!=($3|0);
  $76 = $74&1;
  $$476 = $76;
 }
 STACKTOP = sp;return ($$476|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$070 = 0, $$070$lcssa = 0, $$074 = 0, $$077 = 0, $$1 = 0, $$172$ph = 0, $$175 = 0, $$2 = 0, $$2$lcssa = 0, $$273 = 0, $$4$ph = 0, $$pre = 0, $$pre110 = 0, $$pre111 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $$070 = $2;
 while(1) {
  $9 = ($$070|0)==($3|0);
  if ($9) {
   $$070$lcssa = $3;
   break;
  }
  $10 = HEAP8[$$070>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $$070$lcssa = $$070;
   break;
  }
  $12 = ((($$070)) + 1|0);
  $$070 = $12;
 }
 HEAP32[$7>>2] = $5;
 HEAP32[$4>>2] = $2;
 $13 = $6;
 $14 = ((($0)) + 8|0);
 $$074 = $2;$$077 = $5;$$1 = $$070$lcssa;
 while(1) {
  $15 = ($$074|0)==($3|0);
  $16 = ($$077|0)==($6|0);
  $or$cond = $16 | $15;
  if ($or$cond) {
   $70 = $$074;
   label = 33;
   break;
  }
  $17 = $1;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = $8;
  $24 = $23;
  HEAP32[$24>>2] = $19;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $22;
  $27 = $$1;
  $28 = $$074;
  $29 = (($27) - ($28))|0;
  $30 = $$077;
  $31 = (($13) - ($30))|0;
  $32 = $31 >> 2;
  $33 = HEAP32[$14>>2]|0;
  $34 = (___uselocale($33)|0);
  $35 = (_mbsnrtowcs($$077,$4,$29,$32,$1)|0);
  $36 = ($34|0)==(0|0);
  if (!($36)) {
   (___uselocale($34)|0);
  }
  $37 = ($35|0)==(-1);
  if ($37) {
   label = 10;
   break;
  }
  $52 = HEAP32[$7>>2]|0;
  $53 = (($52) + ($35<<2)|0);
  HEAP32[$7>>2] = $53;
  $54 = ($53|0)==($6|0);
  if ($54) {
   label = 30;
   break;
  }
  $55 = ($$1|0)==($3|0);
  $$pre = HEAP32[$4>>2]|0;
  if ($55) {
   $$4$ph = $3;$72 = $53;$73 = $$pre;
  } else {
   $56 = HEAP32[$14>>2]|0;
   $57 = (___uselocale($56)|0);
   $58 = (_mbrtowc($53,$$pre,1,$1)|0);
   $59 = ($57|0)==(0|0);
   if (!($59)) {
    (___uselocale($57)|0);
   }
   $60 = ($58|0)==(0);
   if (!($60)) {
    $$172$ph = 2;
    label = 29;
    break;
   }
   $61 = HEAP32[$7>>2]|0;
   $62 = ((($61)) + 4|0);
   HEAP32[$7>>2] = $62;
   $63 = HEAP32[$4>>2]|0;
   $64 = ((($63)) + 1|0);
   HEAP32[$4>>2] = $64;
   $$2 = $64;
   while(1) {
    $65 = ($$2|0)==($3|0);
    if ($65) {
     $$2$lcssa = $3;
     break;
    }
    $66 = HEAP8[$$2>>0]|0;
    $67 = ($66<<24>>24)==(0);
    if ($67) {
     $$2$lcssa = $$2;
     break;
    }
    $68 = ((($$2)) + 1|0);
    $$2 = $68;
   }
   $$pre110 = HEAP32[$7>>2]|0;
   $$4$ph = $$2$lcssa;$72 = $$pre110;$73 = $64;
  }
  $$074 = $73;$$077 = $72;$$1 = $$4$ph;
 }
 do {
  if ((label|0) == 10) {
   $38 = $$1;
   $$175 = $$074;$storemerge = $$077;
   L29: while(1) {
    HEAP32[$7>>2] = $storemerge;
    $39 = HEAP32[$4>>2]|0;
    $40 = ($$175|0)==($39|0);
    if ($40) {
     label = 19;
     break;
    }
    $41 = $$175;
    $42 = (($38) - ($41))|0;
    $43 = HEAP32[$14>>2]|0;
    $44 = (___uselocale($43)|0);
    $45 = (_mbrtowc($storemerge,$$175,$42,$8)|0);
    $46 = ($44|0)==(0|0);
    if (!($46)) {
     (___uselocale($44)|0);
    }
    switch ($45|0) {
    case -1:  {
     label = 15;
     break L29;
     break;
    }
    case -2:  {
     label = 16;
     break L29;
     break;
    }
    case 0:  {
     $$sink = 1;
     break;
    }
    default: {
     $$sink = $45;
    }
    }
    $47 = (($$175) + ($$sink)|0);
    $48 = HEAP32[$7>>2]|0;
    $49 = ((($48)) + 4|0);
    $$175 = $47;$storemerge = $49;
   }
   if ((label|0) == 15) {
    HEAP32[$4>>2] = $$175;
    $$172$ph = 2;
    label = 29;
    break;
   }
   else if ((label|0) == 16) {
    HEAP32[$4>>2] = $$175;
    $$172$ph = 1;
    label = 29;
    break;
   }
   else if ((label|0) == 19) {
    HEAP32[$4>>2] = $$175;
    $50 = ($$175|0)!=($3|0);
    $51 = $50&1;
    $$172$ph = $51;
    label = 29;
    break;
   }
  }
  else if ((label|0) == 30) {
   $$pre111 = HEAP32[$4>>2]|0;
   $70 = $$pre111;
   label = 33;
  }
 } while(0);
 if ((label|0) == 29) {
  $$273 = $$172$ph;
 }
 else if ((label|0) == 33) {
  $69 = ($70|0)!=($3|0);
  $71 = $69&1;
  $$273 = $71;
 }
 STACKTOP = sp;return ($$273|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$4>>2] = $2;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (___uselocale($7)|0);
 $9 = (_wcrtomb($5,0,$1)|0);
 $10 = ($8|0)==(0|0);
 if (!($10)) {
  (___uselocale($8)|0);
 }
 $11 = (($9) + 1)|0;
 $12 = ($11>>>0)<(2);
 L4: do {
  if ($12) {
   $$019 = 2;
  } else {
   $13 = (($9) + -1)|0;
   $14 = HEAP32[$4>>2]|0;
   $15 = $3;
   $16 = (($15) - ($14))|0;
   $17 = ($13>>>0)>($16>>>0);
   if ($17) {
    $$019 = 1;
   } else {
    $$0 = $5;$$018 = $13;
    while(1) {
     $18 = ($$018|0)==(0);
     if ($18) {
      $$019 = 0;
      break L4;
     }
     $19 = ((($$0)) + 1|0);
     $20 = HEAP8[$$0>>0]|0;
     $21 = HEAP32[$4>>2]|0;
     $22 = ((($21)) + 1|0);
     HEAP32[$4>>2] = $22;
     HEAP8[$21>>0] = $20;
     $23 = (($$018) + -1)|0;
     $$0 = $19;$$018 = $23;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$019|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (___uselocale($2)|0);
 $4 = (_mbtowc(0,0,4)|0);
 $5 = ($3|0)==(0|0);
 if (!($5)) {
  (___uselocale($3)|0);
 }
 $6 = ($4|0)==(0);
 if ($6) {
  $7 = HEAP32[$1>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 1;
  } else {
   $9 = (___uselocale($7)|0);
   $10 = (___ctype_get_mb_cur_max()|0);
   $11 = ($9|0)==(0|0);
   if (!($11)) {
    (___uselocale($9)|0);
   }
   $12 = ($10|0)==(1);
   $spec$select = $12&1;
   return ($spec$select|0);
  }
 } else {
  $$0 = -1;
 }
 return ($$0|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$029 = 0, $$030 = 0, $$034 = 0, $$131 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = ((($0)) + 8|0);
 $$029 = 0;$$030 = 0;$$034 = $2;
 L1: while(1) {
  $7 = ($$029>>>0)>=($4>>>0);
  $8 = ($$034|0)==($3|0);
  $or$cond = $8 | $7;
  if ($or$cond) {
   break;
  }
  $9 = $$034;
  $10 = (($5) - ($9))|0;
  $11 = HEAP32[$6>>2]|0;
  $12 = (___uselocale($11)|0);
  $13 = (_mbrlen($$034,$10,$1)|0);
  $14 = ($12|0)==(0|0);
  if (!($14)) {
   (___uselocale($12)|0);
  }
  switch ($13|0) {
  case -2: case -1:  {
   break L1;
   break;
  }
  case 0:  {
   $$sink = 1;
   break;
  }
  default: {
   $$sink = $13;
  }
  }
  $15 = (($$034) + ($$sink)|0);
  $$131 = (($$sink) + ($$030))|0;
  $16 = (($$029) + 1)|0;
  $$029 = $16;$$030 = $$131;$$034 = $15;
 }
 return ($$030|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $7 = 1;
 } else {
  $4 = (___uselocale($2)|0);
  $5 = (___ctype_get_mb_cur_max()|0);
  $6 = ($4|0)==(0|0);
  if ($6) {
   $7 = $5;
  } else {
   (___uselocale($4)|0);
   $7 = $5;
  }
 }
 return ($7|0);
}
function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (56024);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZNSt3__26__clocEv()|0);
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  _freelocale($5);
 }
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($2,$3,$4,1114111,0)|0);
 return ($5|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0100 = 0, $$194 = 0, $$194$ph = 0, $$2102 = 0, $$598 = 0, $$off = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond110 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 $$pre = $1;
 if ($6) {
  $$194$ph = $0;
 } else {
  $7 = $0;
  $8 = (($$pre) - ($7))|0;
  $9 = ($8|0)>(2);
  if ($9) {
   $10 = HEAP8[$0>>0]|0;
   $11 = ($10<<24>>24)==(-17);
   if ($11) {
    $12 = ((($0)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(-69);
    if ($14) {
     $15 = ((($0)) + 2|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(-65);
     $18 = ((($0)) + 3|0);
     $spec$select = $17 ? $18 : $0;
     $$194$ph = $spec$select;
    } else {
     $$194$ph = $0;
    }
   } else {
    $$194$ph = $0;
   }
  } else {
   $$194$ph = $0;
  }
 }
 $$0100 = 0;$$194 = $$194$ph;
 L7: while(1) {
  $19 = ($$194>>>0)<($1>>>0);
  $20 = ($$0100>>>0)<($2>>>0);
  $or$cond = $20 & $19;
  if (!($or$cond)) {
   break;
  }
  $21 = HEAP8[$$194>>0]|0;
  $22 = $21&255;
  $23 = ($22>>>0)>($3>>>0);
  if ($23) {
   break;
  }
  $24 = ($21<<24>>24)>(-1);
  do {
   if ($24) {
    $25 = ((($$194)) + 1|0);
    $$2102 = $$0100;$$598 = $25;
   } else {
    $26 = ($21&255)<(194);
    if ($26) {
     break L7;
    }
    $27 = ($21&255)<(224);
    if ($27) {
     $28 = $$194;
     $29 = (($$pre) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      break L7;
     }
     $31 = ((($$194)) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $33 & 192;
     $35 = ($34|0)==(128);
     if (!($35)) {
      break L7;
     }
     $36 = $22 << 6;
     $37 = $36 & 1984;
     $38 = $33 & 63;
     $39 = $38 | $37;
     $40 = ($39>>>0)>($3>>>0);
     $41 = ((($$194)) + 2|0);
     if ($40) {
      break L7;
     } else {
      $$2102 = $$0100;$$598 = $41;
      break;
     }
    }
    $42 = ($21&255)<(240);
    if ($42) {
     $43 = $$194;
     $44 = (($$pre) - ($43))|0;
     $45 = ($44|0)<(3);
     if ($45) {
      break L7;
     }
     $46 = ((($$194)) + 1|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ((($$194)) + 2|0);
     $49 = HEAP8[$48>>0]|0;
     switch ($21<<24>>24) {
     case -32:  {
      $50 = $47 & -32;
      $51 = ($50<<24>>24)==(-96);
      if (!($51)) {
       break L7;
      }
      break;
     }
     case -19:  {
      $52 = $47 & -32;
      $53 = ($52<<24>>24)==(-128);
      if (!($53)) {
       break L7;
      }
      break;
     }
     default: {
      $54 = $47 & -64;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       break L7;
      }
     }
     }
     $56 = $49&255;
     $57 = $56 & 192;
     $58 = ($57|0)==(128);
     if (!($58)) {
      break L7;
     }
     $59 = $22 << 12;
     $60 = $59 & 61440;
     $61 = $47 & 63;
     $62 = $61&255;
     $63 = $62 << 6;
     $64 = $63 | $60;
     $65 = $56 & 63;
     $66 = $64 | $65;
     $67 = ($66>>>0)>($3>>>0);
     $68 = ((($$194)) + 3|0);
     if ($67) {
      break L7;
     } else {
      $$2102 = $$0100;$$598 = $68;
      break;
     }
    }
    $69 = ($21&255)<(245);
    if (!($69)) {
     break L7;
    }
    $70 = $$194;
    $71 = (($$pre) - ($70))|0;
    $72 = ($71|0)<(4);
    $73 = (($2) - ($$0100))|0;
    $74 = ($73>>>0)<(2);
    $or$cond110 = $74 | $72;
    if ($or$cond110) {
     break L7;
    }
    $75 = ((($$194)) + 1|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ((($$194)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ((($$194)) + 3|0);
    $80 = HEAP8[$79>>0]|0;
    switch ($21<<24>>24) {
    case -16:  {
     $$off = (($76) + 112)<<24>>24;
     $81 = ($$off&255)<(48);
     if (!($81)) {
      break L7;
     }
     break;
    }
    case -12:  {
     $82 = $76 & -16;
     $83 = ($82<<24>>24)==(-128);
     if (!($83)) {
      break L7;
     }
     break;
    }
    default: {
     $84 = $76 & -64;
     $85 = ($84<<24>>24)==(-128);
     if (!($85)) {
      break L7;
     }
    }
    }
    $86 = $78&255;
    $87 = $86 & 192;
    $88 = ($87|0)==(128);
    if (!($88)) {
     break L7;
    }
    $89 = $80&255;
    $90 = $89 & 192;
    $91 = ($90|0)==(128);
    if (!($91)) {
     break L7;
    }
    $92 = $22 << 18;
    $93 = $92 & 1835008;
    $94 = $76 & 63;
    $95 = $94&255;
    $96 = $95 << 12;
    $97 = $96 | $93;
    $98 = $86 << 6;
    $99 = $98 & 4032;
    $100 = $97 | $99;
    $101 = $89 & 63;
    $102 = $100 | $101;
    $103 = ($102>>>0)>($3>>>0);
    $104 = (($$0100) + 1)|0;
    $105 = ((($$194)) + 4|0);
    if ($103) {
     break L7;
    } else {
     $$2102 = $104;$$598 = $105;
    }
   }
  } while(0);
  $106 = (($$2102) + 1)|0;
  $$0100 = $106;$$194 = $$598;
 }
 $107 = $$194;
 $108 = $0;
 $109 = (($107) - ($108))|0;
 return ($109|0);
}
function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$8 = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 4;
 $9 = ($8|0)==(0);
 if ($9) {
  $$pre = $1;
  $$pre$phiZ2D = $$pre;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = $1;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  $14 = ($13|0)>(2);
  if ($14) {
   $15 = HEAP8[$10>>0]|0;
   $16 = ($15<<24>>24)==(-17);
   if ($16) {
    $17 = ((($10)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(-69);
    if ($19) {
     $20 = ((($10)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(-65);
     if ($22) {
      $23 = ((($10)) + 3|0);
      HEAP32[$2>>2] = $23;
      $$pre$phiZ2D = $11;
     } else {
      $$pre$phiZ2D = $11;
     }
    } else {
     $$pre$phiZ2D = $11;
    }
   } else {
    $$pre$phiZ2D = $11;
   }
  } else {
   $$pre$phiZ2D = $11;
  }
 }
 $24 = $4;
 L9: while(1) {
  $25 = HEAP32[$2>>2]|0;
  $26 = ($25>>>0)<($1>>>0);
  if (!($26)) {
   $$8 = 0;
   break;
  }
  $27 = HEAP32[$5>>2]|0;
  $28 = ($27>>>0)<($4>>>0);
  if (!($28)) {
   $$8 = 1;
   break;
  }
  $29 = HEAP8[$25>>0]|0;
  $30 = $29&255;
  $31 = ($30>>>0)>($6>>>0);
  if ($31) {
   $$8 = 2;
   break;
  }
  $32 = ($29<<24>>24)>(-1);
  do {
   if ($32) {
    $33 = $29&255;
    HEAP16[$27>>1] = $33;
    $34 = ((($25)) + 1|0);
    $$sink = $34;
   } else {
    $35 = ($29&255)<(194);
    if ($35) {
     $$8 = 2;
     break L9;
    }
    $36 = ($29&255)<(224);
    if ($36) {
     $37 = $25;
     $38 = (($$pre$phiZ2D) - ($37))|0;
     $39 = ($38|0)<(2);
     if ($39) {
      $$8 = 1;
      break L9;
     }
     $40 = ((($25)) + 1|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41&255;
     $43 = $42 & 192;
     $44 = ($43|0)==(128);
     if (!($44)) {
      $$8 = 2;
      break L9;
     }
     $45 = $30 << 6;
     $46 = $45 & 1984;
     $47 = $42 & 63;
     $48 = $47 | $46;
     $49 = ($48>>>0)>($6>>>0);
     if ($49) {
      $$8 = 2;
      break L9;
     }
     $50 = $48&65535;
     HEAP16[$27>>1] = $50;
     $51 = ((($25)) + 2|0);
     $$sink = $51;
     break;
    }
    $52 = ($29&255)<(240);
    if ($52) {
     $53 = $25;
     $54 = (($$pre$phiZ2D) - ($53))|0;
     $55 = ($54|0)<(3);
     if ($55) {
      $$8 = 1;
      break L9;
     }
     $56 = ((($25)) + 1|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = ((($25)) + 2|0);
     $59 = HEAP8[$58>>0]|0;
     switch ($29<<24>>24) {
     case -32:  {
      $60 = $57 & -32;
      $61 = ($60<<24>>24)==(-96);
      if (!($61)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     case -19:  {
      $62 = $57 & -32;
      $63 = ($62<<24>>24)==(-128);
      if (!($63)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     default: {
      $64 = $57 & -64;
      $65 = ($64<<24>>24)==(-128);
      if (!($65)) {
       $$8 = 2;
       break L9;
      }
     }
     }
     $66 = $59&255;
     $67 = $66 & 192;
     $68 = ($67|0)==(128);
     if (!($68)) {
      $$8 = 2;
      break L9;
     }
     $69 = $30 << 12;
     $70 = $57 & 63;
     $71 = $70&255;
     $72 = $71 << 6;
     $73 = $72 | $69;
     $74 = $66 & 63;
     $75 = $73 | $74;
     $76 = $75 & 65535;
     $77 = ($76>>>0)>($6>>>0);
     if ($77) {
      $$8 = 2;
      break L9;
     }
     $78 = $75&65535;
     HEAP16[$27>>1] = $78;
     $79 = ((($25)) + 3|0);
     $$sink = $79;
     break;
    }
    $80 = ($29&255)<(245);
    if (!($80)) {
     $$8 = 2;
     break L9;
    }
    $81 = $25;
    $82 = (($$pre$phiZ2D) - ($81))|0;
    $83 = ($82|0)<(4);
    if ($83) {
     $$8 = 1;
     break L9;
    }
    $84 = ((($25)) + 1|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = ((($25)) + 2|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = ((($25)) + 3|0);
    $89 = HEAP8[$88>>0]|0;
    switch ($29<<24>>24) {
    case -16:  {
     $$off = (($85) + 112)<<24>>24;
     $90 = ($$off&255)<(48);
     if (!($90)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    case -12:  {
     $91 = $85 & -16;
     $92 = ($91<<24>>24)==(-128);
     if (!($92)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    default: {
     $93 = $85 & -64;
     $94 = ($93<<24>>24)==(-128);
     if (!($94)) {
      $$8 = 2;
      break L9;
     }
    }
    }
    $95 = $87&255;
    $96 = $95 & 192;
    $97 = ($96|0)==(128);
    if (!($97)) {
     $$8 = 2;
     break L9;
    }
    $98 = $89&255;
    $99 = $98 & 192;
    $100 = ($99|0)==(128);
    if (!($100)) {
     $$8 = 2;
     break L9;
    }
    $101 = $27;
    $102 = (($24) - ($101))|0;
    $103 = ($102|0)<(4);
    if ($103) {
     $$8 = 1;
     break L9;
    }
    $104 = $30 & 7;
    $105 = $104 << 18;
    $106 = $85&255;
    $107 = $106 << 12;
    $108 = $107 & 258048;
    $109 = $108 | $105;
    $110 = $95 << 6;
    $111 = $110 & 4032;
    $112 = $109 | $111;
    $113 = $98 & 63;
    $114 = $112 | $113;
    $115 = ($114>>>0)>($6>>>0);
    if ($115) {
     $$8 = 2;
     break L9;
    }
    $116 = $104 << 2;
    $117 = $106 >>> 4;
    $118 = $117 & 3;
    $119 = $118 | $116;
    $120 = $119 << 6;
    $121 = (($120) + 16320)|0;
    $122 = $106 << 2;
    $123 = $122 & 60;
    $124 = $95 >>> 4;
    $125 = $124 & 3;
    $126 = $123 | $125;
    $127 = $126 | $121;
    $128 = $127 | 55296;
    $129 = $128&65535;
    HEAP16[$27>>1] = $129;
    $130 = $110 & 960;
    $131 = $113 | $130;
    $132 = $131 | 56320;
    $133 = $132&65535;
    $134 = ((($27)) + 2|0);
    HEAP32[$5>>2] = $134;
    HEAP16[$134>>1] = $133;
    $135 = HEAP32[$2>>2]|0;
    $136 = ((($135)) + 4|0);
    $$sink = $136;
   }
  } while(0);
  HEAP32[$2>>2] = $$sink;
  $137 = HEAP32[$5>>2]|0;
  $138 = ((($137)) + 2|0);
  HEAP32[$5>>2] = $138;
 }
 return ($$8|0);
}
function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$4 = 0, $$pre = 0, $$pre80 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 $$pre80 = $4;
 if ($9) {
  label = 4;
 } else {
  $10 = $3;
  $11 = (($$pre80) - ($10))|0;
  $12 = ($11|0)<(3);
  if ($12) {
   $$4 = 1;
  } else {
   $13 = ((($3)) + 1|0);
   HEAP32[$5>>2] = $13;
   HEAP8[$3>>0] = -17;
   $14 = HEAP32[$5>>2]|0;
   $15 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $15;
   HEAP8[$14>>0] = -69;
   $16 = HEAP32[$5>>2]|0;
   $17 = ((($16)) + 1|0);
   HEAP32[$5>>2] = $17;
   HEAP8[$16>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $18 = $1;
   $$pre = HEAP32[$2>>2]|0;
   $20 = $$pre;
   while(1) {
    $19 = ($20>>>0)<($1>>>0);
    if (!($19)) {
     $$4 = 0;
     break L4;
    }
    $21 = HEAP16[$20>>1]|0;
    $22 = $21&65535;
    $23 = ($22>>>0)>($6>>>0);
    if ($23) {
     $$4 = 2;
     break L4;
    }
    $24 = ($21&65535)<(128);
    do {
     if ($24) {
      $25 = HEAP32[$5>>2]|0;
      $26 = $25;
      $27 = (($$pre80) - ($26))|0;
      $28 = ($27|0)<(1);
      if ($28) {
       $$4 = 1;
       break L4;
      }
      $29 = $21&255;
      $30 = ((($25)) + 1|0);
      HEAP32[$5>>2] = $30;
      HEAP8[$25>>0] = $29;
     } else {
      $31 = ($21&65535)<(2048);
      if ($31) {
       $32 = HEAP32[$5>>2]|0;
       $33 = $32;
       $34 = (($$pre80) - ($33))|0;
       $35 = ($34|0)<(2);
       if ($35) {
        $$4 = 1;
        break L4;
       }
       $36 = $22 >>> 6;
       $37 = $36 | 192;
       $38 = $37&255;
       $39 = ((($32)) + 1|0);
       HEAP32[$5>>2] = $39;
       HEAP8[$32>>0] = $38;
       $40 = $22 & 63;
       $41 = $40 | 128;
       $42 = $41&255;
       $43 = HEAP32[$5>>2]|0;
       $44 = ((($43)) + 1|0);
       HEAP32[$5>>2] = $44;
       HEAP8[$43>>0] = $42;
       break;
      }
      $45 = ($21&65535)<(55296);
      if ($45) {
       $46 = HEAP32[$5>>2]|0;
       $47 = $46;
       $48 = (($$pre80) - ($47))|0;
       $49 = ($48|0)<(3);
       if ($49) {
        $$4 = 1;
        break L4;
       }
       $50 = $22 >>> 12;
       $51 = $50 | 224;
       $52 = $51&255;
       $53 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $53;
       HEAP8[$46>>0] = $52;
       $54 = $22 >>> 6;
       $55 = $54 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$5>>2]|0;
       $59 = ((($58)) + 1|0);
       HEAP32[$5>>2] = $59;
       HEAP8[$58>>0] = $57;
       $60 = $22 & 63;
       $61 = $60 | 128;
       $62 = $61&255;
       $63 = HEAP32[$5>>2]|0;
       $64 = ((($63)) + 1|0);
       HEAP32[$5>>2] = $64;
       HEAP8[$63>>0] = $62;
       break;
      }
      $65 = ($21&65535)<(56320);
      if (!($65)) {
       $116 = ($21&65535)<(57344);
       if ($116) {
        $$4 = 2;
        break L4;
       }
       $117 = HEAP32[$5>>2]|0;
       $118 = $117;
       $119 = (($$pre80) - ($118))|0;
       $120 = ($119|0)<(3);
       if ($120) {
        $$4 = 1;
        break L4;
       }
       $121 = $22 >>> 12;
       $122 = $121 | 224;
       $123 = $122&255;
       $124 = ((($117)) + 1|0);
       HEAP32[$5>>2] = $124;
       HEAP8[$117>>0] = $123;
       $125 = $22 >>> 6;
       $126 = $125 & 63;
       $127 = $126 | 128;
       $128 = $127&255;
       $129 = HEAP32[$5>>2]|0;
       $130 = ((($129)) + 1|0);
       HEAP32[$5>>2] = $130;
       HEAP8[$129>>0] = $128;
       $131 = $22 & 63;
       $132 = $131 | 128;
       $133 = $132&255;
       $134 = HEAP32[$5>>2]|0;
       $135 = ((($134)) + 1|0);
       HEAP32[$5>>2] = $135;
       HEAP8[$134>>0] = $133;
       break;
      }
      $66 = $20;
      $67 = (($18) - ($66))|0;
      $68 = ($67|0)<(4);
      if ($68) {
       $$4 = 1;
       break L4;
      }
      $69 = ((($20)) + 2|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70&65535;
      $72 = $71 & 64512;
      $73 = ($72|0)==(56320);
      if (!($73)) {
       $$4 = 2;
       break L4;
      }
      $74 = HEAP32[$5>>2]|0;
      $75 = (($$pre80) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$4 = 1;
       break L4;
      }
      $77 = $22 & 960;
      $78 = $77 << 10;
      $79 = (($78) + 65536)|0;
      $80 = $22 << 10;
      $81 = $80 & 64512;
      $82 = $79 | $81;
      $83 = $71 & 1023;
      $84 = $82 | $83;
      $85 = ($84>>>0)>($6>>>0);
      if ($85) {
       $$4 = 2;
       break L4;
      }
      HEAP32[$2>>2] = $69;
      $86 = $77 >>> 6;
      $87 = (($86) + 1)|0;
      $88 = $87 >>> 2;
      $89 = $88 | 240;
      $90 = $89&255;
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + 1|0);
      HEAP32[$5>>2] = $92;
      HEAP8[$91>>0] = $90;
      $93 = $87 << 4;
      $94 = $93 & 48;
      $95 = $22 >>> 2;
      $96 = $95 & 15;
      $97 = $96 | $94;
      $98 = $97 | 128;
      $99 = $98&255;
      $100 = HEAP32[$5>>2]|0;
      $101 = ((($100)) + 1|0);
      HEAP32[$5>>2] = $101;
      HEAP8[$100>>0] = $99;
      $102 = $22 << 4;
      $103 = $102 & 48;
      $104 = $71 >>> 6;
      $105 = $104 & 15;
      $106 = $103 | $105;
      $107 = $106 | 128;
      $108 = $107&255;
      $109 = HEAP32[$5>>2]|0;
      $110 = ((($109)) + 1|0);
      HEAP32[$5>>2] = $110;
      HEAP8[$109>>0] = $108;
      $111 = $71 & 63;
      $112 = $111 | 128;
      $113 = $112&255;
      $114 = HEAP32[$5>>2]|0;
      $115 = ((($114)) + 1|0);
      HEAP32[$5>>2] = $115;
      HEAP8[$114>>0] = $113;
     }
    } while(0);
    $136 = HEAP32[$2>>2]|0;
    $137 = ((($136)) + 2|0);
    HEAP32[$2>>2] = $137;
    $20 = $137;
   }
  }
 } while(0);
 return ($$4|0);
}
function __ZNSt3__26locale5__impD2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (56072);
 $1 = ((($0)) + 8|0);
 $2 = ((($0)) + 12|0);
 $$0 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = (($3) - ($4))|0;
  $6 = $5 >> 2;
  $7 = ($$0>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $9 = $4;
  $10 = (($9) + ($$0<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = ((($11)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + -1)|0;
   HEAP32[$13>>2] = $15;
   $16 = ($14|0)==(0);
   if ($16) {
    $17 = HEAP32[$11>>2]|0;
    $18 = ((($17)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vi[$19 & 1023]($11);
   }
  }
  $20 = (($$0) + 1)|0;
  $$0 = $20;
 }
 $8 = ((($0)) + 144|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__26locale5__impD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if (!($2)) {
   $3 = $1;
   $4 = ((($0)) + 4|0);
   HEAP32[$4>>2] = $3;
   $5 = ((($0)) + 16|0);
   $6 = ($1|0)==($5|0);
   if ($6) {
    $7 = ((($0)) + 128|0);
    HEAP8[$7>>0] = 0;
    break;
   } else {
    __ZdlPv($1);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__25ctypeIcED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (56092);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 12|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   __ZdaPv($2);
  }
 }
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__25ctypeIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__25ctypeIcE10do_toupperEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1<<24>>24)>(-1);
 if ($2) {
  $3 = $1&255;
  $4 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6&255;
  $8 = $7;
 } else {
  $8 = $1;
 }
 return ($8|0);
}
function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP8[$$0>>0]|0;
  $5 = ($4<<24>>24)>(-1);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $7 = HEAP8[$$0>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = (($6) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $4;
  }
  HEAP8[$$0>>0] = $12;
  $13 = ((($$0)) + 1|0);
  $$0 = $13;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1<<24>>24)>(-1);
 if ($2) {
  $3 = $1 << 24 >> 24;
  $4 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6&255;
  $8 = $7;
 } else {
  $8 = $1;
 }
 return ($8|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP8[$$0>>0]|0;
  $5 = ($4<<24>>24)>(-1);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $7 = HEAP8[$$0>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = (($6) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $4;
  }
  HEAP8[$$0>>0] = $12;
  $13 = ((($$0)) + 1|0);
  $$0 = $13;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($1|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$07 = $1;
 while(1) {
  $4 = ($$07|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP8[$$07>>0]|0;
  HEAP8[$$0>>0] = $5;
  $6 = ((($$07)) + 1|0);
  $7 = ((($$0)) + 1|0);
  $$0 = $7;$$07 = $6;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEcc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1<<24>>24)>(-1);
 $$ = $3 ? $1 : $2;
 return ($$|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$09 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $4;$$09 = $1;
 while(1) {
  $5 = ($$09|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = HEAP8[$$09>>0]|0;
  $7 = ($6<<24>>24)>(-1);
  $$ = $7 ? $6 : $3;
  HEAP8[$$0>>0] = $$;
  $8 = ((($$09)) + 1|0);
  $9 = ((($$0)) + 1|0);
  $$0 = $9;$$09 = $8;
 }
 return ($2|0);
}
function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ctype_tolower_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ctype_toupper_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__25ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ctype_b_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__28numpunctIcED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (56144);
 $1 = ((($0)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28numpunctIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP8[$1>>0]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 9|0);
 $2 = HEAP8[$1>>0]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIcE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$2);
 return;
}
function __ZNKSt3__28numpunctIcE11do_truenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc(64246)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,64246,$2);
 return;
}
function __ZNKSt3__28numpunctIcE12do_falsenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc(64240)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,64240,$2);
 return;
}
function __ZNSt3__28numpunctIwED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (56184);
 $1 = ((($0)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28numpunctIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIwE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$2);
 return;
}
function __ZNKSt3__28numpunctIwE11do_truenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZNSt3__211char_traitsIwE6lengthEPKw(56240)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($0,56240,$2);
 return;
}
function __ZNKSt3__28numpunctIwE12do_falsenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZNSt3__211char_traitsIwE6lengthEPKw(56216)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($0,56216,$2);
 return;
}
function __ZNSt3__26locale5facetD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__25ctypeIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__25ctypeIwE5do_isEtw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)<(128);
 if ($3) {
  $4 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $5 = (($4) + ($2<<1)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 & $1;
  $8 = ($7<<16>>16)!=(0);
  $9 = $8;
 } else {
  $9 = 0;
 }
 return ($9|0);
}
function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$08 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$08 = $1;
 while(1) {
  $4 = ($$08|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP32[$$08>>2]|0;
  $6 = ($5>>>0)<(128);
  if ($6) {
   $7 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $8 = HEAP32[$$08>>2]|0;
   $9 = (($7) + ($8<<1)|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10&65535;
   $13 = $11;
  } else {
   $13 = 0;
  }
  $12 = $13&65535;
  HEAP16[$$0>>1] = $12;
  $14 = ((($$08)) + 4|0);
  $15 = ((($$0)) + 2|0);
  $$0 = $15;$$08 = $14;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $2;
 while(1) {
  $4 = ($$0|0)==($3|0);
  if ($4) {
   $$0$lcssa = $3;
   break;
  }
  $5 = HEAP32[$$0>>2]|0;
  $6 = ($5>>>0)<(128);
  if ($6) {
   $7 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $8 = HEAP32[$$0>>2]|0;
   $9 = (($7) + ($8<<1)|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10 & $1;
   $12 = ($11<<16>>16)==(0);
   if (!($12)) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $13 = ((($$0)) + 4|0);
  $$0 = $13;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $2;
 while(1) {
  $4 = ($$0|0)==($3|0);
  if ($4) {
   $$0$lcssa = $3;
   break;
  }
  $5 = HEAP32[$$0>>2]|0;
  $6 = ($5>>>0)<(128);
  if (!($6)) {
   $$0$lcssa = $$0;
   break;
  }
  $7 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $8 = HEAP32[$$0>>2]|0;
  $9 = (($7) + ($8<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 & $1;
  $12 = ($11<<16>>16)==(0);
  if ($12) {
   $$0$lcssa = $$0;
   break;
  }
  $13 = ((($$0)) + 4|0);
  $$0 = $13;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(128);
 if ($2) {
  $3 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $4 = (($3) + ($1<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = $1;
 }
 return ($6|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $5 = ($4>>>0)<(128);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $7 = HEAP32[$$0>>2]|0;
   $8 = (($6) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $4;
  }
  HEAP32[$$0>>2] = $10;
  $11 = ((($$0)) + 4|0);
  $$0 = $11;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(128);
 if ($2) {
  $3 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $4 = (($3) + ($1<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = $1;
 }
 return ($6|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $5 = ($4>>>0)<(128);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $7 = HEAP32[$$0>>2]|0;
   $8 = (($6) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $4;
  }
  HEAP32[$$0>>2] = $10;
  $11 = ((($$0)) + 4|0);
  $$0 = $11;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 24 >> 24;
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$07 = $1;
 while(1) {
  $4 = ($$07|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP8[$$07>>0]|0;
  $6 = $5 << 24 >> 24;
  HEAP32[$$0>>2] = $6;
  $7 = ((($$07)) + 1|0);
  $8 = ((($$0)) + 4|0);
  $$0 = $8;$$07 = $7;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEwc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)<(128);
 $4 = $1&255;
 $$0 = $3 ? $4 : $2;
 return ($$0|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1;
 $6 = $2;
 $7 = (($6) - ($5))|0;
 $8 = $7 >>> 2;
 $$0 = $4;$$09 = $1;
 while(1) {
  $9 = ($$09|0)==($2|0);
  if ($9) {
   break;
  }
  $10 = HEAP32[$$09>>2]|0;
  $11 = ($10>>>0)<(128);
  $12 = $10&255;
  $storemerge = $11 ? $12 : $3;
  HEAP8[$$0>>0] = $storemerge;
  $13 = ((($$09)) + 4|0);
  $14 = ((($$0)) + 1|0);
  $$0 = $14;$$09 = $13;
 }
 $scevgep = (($1) + ($8<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__time_get_c_storageIcEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (56500);
 return;
}
function __ZNSt3__220__time_get_c_storageIwEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (56536);
 return;
}
function __ZNSt3__25ctypeIcEC2EPKtbm($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2&1;
 $5 = (($3) + -1)|0;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$0>>2] = (56092);
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($0)) + 12|0);
 HEAP8[$8>>0] = $4;
 $9 = ($1|0)==(0|0);
 if ($9) {
  $10 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  HEAP32[$7>>2] = $10;
 }
 return;
}
function __ZNSt3__26locale5__impC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (56072);
 $4 = ((($0)) + 8|0);
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em($4,28);
 $5 = ((($0)) + 144|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
 $6 = (__ZNSt3__211char_traitsIcE6lengthEPKc(62185)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($5,62185,$6);
 $7 = HEAP32[$4>>2]|0;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = $7;
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($0,68816);
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($0,68824);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($0,68832);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($0,68848);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($0,68856);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($0,68864);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($0,68880);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($0,68888);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($0,68896);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($0,68920);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,68952);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,68960);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,68968);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,68976);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($0,68984);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($0,68992);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($0,69000);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($0,69008);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,69016);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,69024);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,69032);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,69040);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,69048);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,69064);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,69080);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,69096);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($0,69112);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($0,69120);
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 128|0);
 HEAP8[$4>>0] = 0;
 $5 = ($1|0)==(0);
 if (!($5)) {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm($0,$1);
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0,$1);
 }
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(68820)>>2] = 0;
 HEAP32[17204] = (53928);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(70976)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(68828)>>2] = 0;
 HEAP32[17206] = (53960);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(70984)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcEC2EPKtbm(68832,0,0,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(70992)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(68852)>>2] = 0;
 HEAP32[17212] = (56288);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71024)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(68860)>>2] = 0;
 HEAP32[17214] = (56356);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71296)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Em(68864,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71304)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(68884)>>2] = 0;
 HEAP32[17220] = (56404);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71312)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(68892)>>2] = 0;
 HEAP32[17222] = (56452);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71320)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcEC2Em(68896,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71008)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwEC2Em(68920,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71032)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(68956)>>2] = 0;
 HEAP32[17238] = (53992);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71016)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(68964)>>2] = 0;
 HEAP32[17240] = (54056);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71040)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(68972)>>2] = 0;
 HEAP32[17242] = (54120);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71048)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(68980)>>2] = 0;
 HEAP32[17244] = (54172);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71056)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(68988)>>2] = 0;
 HEAP32[17246] = (55528);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71216)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(68996)>>2] = 0;
 HEAP32[17248] = (55584);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71224)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(69004)>>2] = 0;
 HEAP32[17250] = (55640);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71232)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(69012)>>2] = 0;
 HEAP32[17252] = (55696);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71240)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(69020)>>2] = 0;
 HEAP32[17254] = (55752);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71248)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(69028)>>2] = 0;
 HEAP32[17256] = (55780);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71256)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(69036)>>2] = 0;
 HEAP32[17258] = (55808);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71264)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(69044)>>2] = 0;
 HEAP32[17260] = (55836);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71272)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(69052)>>2] = 0;
 HEAP32[17262] = (56268);
 __ZNSt3__220__time_get_c_storageIcEC2Ev((69056));
 HEAP32[17262] = (54224);
 HEAP32[(69056)>>2] = (54272);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71124)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(69068)>>2] = 0;
 HEAP32[17266] = (56268);
 __ZNSt3__220__time_get_c_storageIwEC2Ev((69072));
 HEAP32[17266] = (54308);
 HEAP32[(69072)>>2] = (54356);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71192)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(69084)>>2] = 0;
 HEAP32[17270] = (56268);
 $0 = (__ZNSt3__26__clocEv()|0);
 HEAP32[(69088)>>2] = $0;
 HEAP32[17270] = (55480);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71200)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(69100)>>2] = 0;
 HEAP32[17274] = (56268);
 $0 = (__ZNSt3__26__clocEv()|0);
 HEAP32[(69104)>>2] = $0;
 HEAP32[17274] = (55504);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71208)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(69116)>>2] = 0;
 HEAP32[17278] = (55864);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71280)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(69124)>>2] = 0;
 HEAP32[17280] = (55896);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(71288)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($0)) + 8|0);
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$6>>2]|0;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = ($11>>>0)>($2>>>0);
 if ($12) {
  $13 = $9;
  $$pre$phiZ2D = $6;$16 = $13;
 } else {
  $14 = (($2) + 1)|0;
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($6,$14);
  $$pre = HEAP32[$6>>2]|0;
  $$pre$phiZ2D = $6;$16 = $$pre;
 }
 $15 = (($16) + ($2<<2)|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = ((($17)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + -1)|0;
  HEAP32[$19>>2] = $21;
  $22 = ($20|0)==(0);
  if ($22) {
   $23 = HEAP32[$17>>2]|0;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   FUNCTION_TABLE_vi[$25 & 1023]($17);
  }
 }
 $26 = HEAP32[$$pre$phiZ2D>>2]|0;
 $27 = (($26) + ($2<<2)|0);
 HEAP32[$27>>2] = $1;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($1>>>0);
 $8 = $4;
 if ($7) {
  $9 = (($1) - ($6))|0;
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($0,$9);
 } else {
  $10 = ($6>>>0)>($1>>>0);
  if ($10) {
   $11 = (($8) + ($1<<2)|0);
   HEAP32[$2>>2] = $11;
  }
 }
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)<($1>>>0);
 do {
  if ($9) {
   $10 = HEAP32[$0>>2]|0;
   $11 = (($6) - ($10))|0;
   $12 = $11 >> 2;
   $13 = (($12) + ($1))|0;
   $14 = (__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($0)|0);
   $15 = ($14>>>0)<($13>>>0);
   if ($15) {
    __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
    // unreachable;
   } else {
    $16 = ((($0)) + 16|0);
    $17 = HEAP32[$3>>2]|0;
    $18 = HEAP32[$0>>2]|0;
    $19 = (($17) - ($18))|0;
    $20 = $19 >> 2;
    $21 = $14 >>> 1;
    $22 = ($20>>>0)<($21>>>0);
    $23 = $19 >> 1;
    $24 = ($23>>>0)<($13>>>0);
    $$sroa$speculated$i = $24 ? $13 : $23;
    $spec$select$i = $22 ? $$sroa$speculated$i : $14;
    $25 = HEAP32[$5>>2]|0;
    $26 = (($25) - ($18))|0;
    $27 = $26 >> 2;
    __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($2,$spec$select$i,$27,$16);
    __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($2,$1);
    __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$2);
    __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($2);
    break;
   }
  } else {
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0,$1);
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $$pre = HEAP32[$2>>2]|0;
 $$0 = $1;$3 = $$pre;
 while(1) {
  HEAP32[$3>>2] = 0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 4|0);
  HEAP32[$2>>2] = $5;
  $6 = (($$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$0 = $6;$3 = $5;
  }
 }
 return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $13 = 0;
  } else {
   $7 = ((($3)) + 112|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(0);
   $10 = ($1>>>0)<(29);
   $or$cond$i$i = $10 & $9;
   if ($or$cond$i$i) {
    HEAP8[$7>>0] = 1;
    $13 = $3;
    break;
   } else {
    $11 = $1 << 2;
    $12 = (__Znwm($11)|0);
    $13 = $12;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $13;
 $14 = (($13) + ($2<<2)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($0)) + 4|0);
 HEAP32[$16>>2] = $14;
 $17 = (($13) + ($1<<2)|0);
 HEAP32[$4>>2] = $17;
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $$pre = HEAP32[$2>>2]|0;
 $$0 = $1;$3 = $$pre;
 while(1) {
  HEAP32[$3>>2] = 0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 4|0);
  HEAP32[$2>>2] = $5;
  $6 = (($$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$0 = $6;$3 = $5;
  }
 }
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
  $$pre = HEAP32[$5>>2]|0;
  $$pre$phiZ2D = $5;$15 = $$pre;
 } else {
  $13 = $11;
  $$pre$phiZ2D = $5;$15 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $15;
 HEAP32[$$pre$phiZ2D>>2] = $14;
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$3>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = ((($0)) + 8|0);
 $20 = ((($1)) + 12|0);
 $21 = HEAP32[$19>>2]|0;
 $22 = HEAP32[$20>>2]|0;
 HEAP32[$19>>2] = $22;
 HEAP32[$20>>2] = $21;
 $23 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$1>>2] = $23;
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($0) {
 $0 = $0|0;
 var $$pre$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $$pre$i$i$i = HEAP32[$3>>2]|0;
 $5 = $$pre$i$i$i;
 while(1) {
  $4 = ($5|0)==($2|0);
  if ($4) {
   break;
  }
  $6 = ((($5)) + -4|0);
  HEAP32[$3>>2] = $6;
  $5 = $6;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = ((($0)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($7|0)==($10|0);
   if ($11) {
    $12 = ((($10)) + 112|0);
    HEAP8[$12>>0] = 0;
    break;
   } else {
    __ZdlPv($7);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__28numpunctIwEC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (56184);
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 46;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 44;
 $6 = ((($0)) + 16|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 return;
}
function __ZNSt3__28numpunctIcEC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (56144);
 $4 = ((($0)) + 8|0);
 HEAP8[$4>>0] = 46;
 $5 = ((($0)) + 9|0);
 HEAP8[$5>>0] = 44;
 $6 = ((($0)) + 12|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 return;
}
function __ZNSt3__27codecvtIwc11__mbstate_tEC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (56024);
 $4 = ((($0)) + 8|0);
 $5 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$4>>2] = $5;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ((($0)) + 128|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 $7 = ($1>>>0)<(29);
 $or$cond$i$i = $7 & $6;
 if ($or$cond$i$i) {
  $8 = ((($0)) + 16|0);
  HEAP8[$4>>0] = 1;
  $$0$i$i$in = $8;
 } else {
  $9 = $1 << 2;
  $10 = (__Znwm($9)|0);
  $$0$i$i$in = $10;
 }
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $$0$i$i$in;
 HEAP32[$0>>2] = $$0$i$i$in;
 $12 = (($$0$i$i$in) + ($1<<2)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__26locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[69128]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(69128)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   (__ZNSt3__26locale5__imp12make_classicEv()|0);
   HEAP32[17833] = 71328;
  }
 }
 $4 = HEAP32[17833]|0;
 return ($4|0);
}
function __ZNSt3__26locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[17832] = 69136;
 return (71328|0);
}
function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impC2Em(69136,1);
 return;
}
function __ZNSt3__26locale5__imp11make_globalEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__26locale7classicEv()|0);
 __ZNSt3__26localeC2ERKS0_(71336,$0);
 return (71336|0);
}
function __ZNSt3__26localeC2ERKS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 return;
}
function __ZNSt3__26locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[69296]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(69296)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   (__ZNSt3__26locale5__imp11make_globalEv()|0);
   HEAP32[17835] = 71336;
  }
 }
 $4 = HEAP32[17835]|0;
 return ($4|0);
}
function __ZNSt3__26localeC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__26locale8__globalEv()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 return;
}
function __ZNSt3__214__shared_countD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__211__call_onceERVmPvPFvS2_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((71344|0))|0);
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(1);
  if (!($4)) {
   break;
  }
  (_pthread_cond_wait((71372|0),(71344|0))|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$0>>2] = 1;
  (_pthread_mutex_unlock((71344|0))|0);
  FUNCTION_TABLE_vi[$2 & 1023]($1);
  (_pthread_mutex_lock((71344|0))|0);
  HEAP32[$0>>2] = -1;
  (_pthread_mutex_unlock((71344|0))|0);
  (_pthread_cond_broadcast((71372|0))|0);
 } else {
  (_pthread_mutex_unlock((71344|0))|0);
 }
 return;
}
function __ZSt17__throw_bad_allocv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __Znwm($0) {
 $0 = $0|0;
 var $$lcssa = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $spec$store$select = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($spec$store$select)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$lcssa = $2;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$4 & 1023]();
 }
 return ($$lcssa|0);
}
function __Znam($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm($0)|0);
 return ($1|0);
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZdaPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwm($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4)|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (56656);
 $2 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringC2EPKc($2,$1);
 return;
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,$5,$7);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($2>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($2>>>0)<(11);
 if ($5) {
  $6 = $2&255;
  $7 = ((($0)) + 11|0);
  HEAP8[$7>>0] = $6;
  $$0 = $0;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwm($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $2;
  $$0 = $10;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$0,$1,$2)|0);
 $14 = (($$0) + ($2)|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($1>>>0)<(11);
 if ($5) {
  $6 = $1&255;
  $7 = ((($0)) + 11|0);
  HEAP8[$7>>0] = $6;
  $$0 = $0;
 } else {
  $8 = (($1) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwm($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $1;
  $$0 = $10;
 }
 (__ZNSt3__211char_traitsIcE6assignEPcmc($$0,$1,$2)|0);
 $14 = (($$0) + ($1)|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE6assignEPcmc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if (!($3)) {
  $4 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($2)|0);
  $5 = $4&255;
  _memset(($0|0),($5|0),($1|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $11 = $phitmp$i;
 } else {
  $11 = 10;
 }
 $10 = ($11>>>0)<($2>>>0);
 do {
  if ($10) {
   if ($6) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $5&255;
    $23 = $21;
   }
   $22 = (($2) - ($11))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0,$11,$22,$23,0,$23,$2,$1);
  } else {
   if ($6) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcm($13,$1,$2)|0);
   $14 = (($13) + ($2)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
   $15 = HEAP8[$4>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$4>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memmove(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (-18 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $25 = $14;
 } else {
  $25 = $0;
 }
 $15 = ($1>>>0)<(2147483623);
 if ($15) {
  $16 = (($2) + ($1))|0;
  $17 = $1 << 1;
  $18 = ($16>>>0)<($17>>>0);
  $$sroa$speculated = $18 ? $17 : $16;
  $19 = ($$sroa$speculated>>>0)<(11);
  $20 = (($$sroa$speculated) + 16)|0;
  $21 = $20 & -16;
  $phitmp = $19 ? 11 : $21;
  $22 = $phitmp;
 } else {
  $22 = -17;
 }
 $23 = (__Znwm($22)|0);
 $24 = ($4|0)==(0);
 if (!($24)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($23,$25,$4)|0);
 }
 $26 = ($6|0)==(0);
 if (!($26)) {
  $27 = (($23) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($27,$7,$6)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($23) + ($4)|0);
  $32 = (($31) + ($6)|0);
  $33 = (($25) + ($4)|0);
  $34 = (($33) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($32,$34,$29)|0);
 }
 $35 = ($1|0)==(10);
 if (!($35)) {
  __ZdlPv($25);
 }
 HEAP32[$0>>2] = $23;
 $36 = $22 | -2147483648;
 $37 = ((($0)) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = (($28) + ($6))|0;
 $39 = ((($0)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = (($23) + ($38)|0);
 HEAP8[$8>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($40,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017$off042 = 0, $$01938 = 0, $$020355154 = 0, $$02036 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp$i = 0, $phitmp$i22 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(4294967279);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;$18 = $phitmp$i;
 } else {
  $11 = $4&255;
  $13 = $11;$18 = 10;
 }
 $12 = ($13>>>0)>($1>>>0);
 $$sroa$speculated = $12 ? $13 : $1;
 $14 = ($$sroa$speculated>>>0)<(11);
 $15 = (($$sroa$speculated) + 16)|0;
 $16 = $15 & -16;
 $phitmp$i22 = (($16) + -1)|0;
 $spec$select$i = $14 ? 10 : $phitmp$i22;
 $17 = ($spec$select$i|0)==($18|0);
 do {
  if (!($17)) {
   do {
    if ($14) {
     $22 = HEAP32[$0>>2]|0;
     if ($5) {
      $$017$off042 = 0;$$01938 = $22;$$02036 = $0;
      label = 13;
     } else {
      $23 = $4&255;
      $24 = (($23) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($0,$22,$24)|0);
      __ZdlPv($22);
      label = 16;
     }
    } else {
     $19 = (($spec$select$i) + 1)|0;
     $20 = (__Znwm($19)|0);
     if ($5) {
      $21 = HEAP32[$0>>2]|0;
      $$017$off042 = 1;$$01938 = $21;$$02036 = $20;
      label = 13;
      break;
     } else {
      $25 = $4&255;
      $26 = (($25) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($20,$0,$26)|0);
      $$pre = ((($0)) + 4|0);
      $$020355154 = $20;$$pre$phi57Z2D = $19;$$pre$phiZ2D = $$pre;
      label = 15;
      break;
     }
    }
   } while(0);
   if ((label|0) == 13) {
    $27 = ((($0)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$02036,$$01938,$29)|0);
    __ZdlPv($$01938);
    if ($$017$off042) {
     $$pre56 = (($spec$select$i) + 1)|0;
     $$020355154 = $$02036;$$pre$phi57Z2D = $$pre56;$$pre$phiZ2D = $27;
     label = 15;
    } else {
     label = 16;
    }
   }
   if ((label|0) == 15) {
    $30 = $$pre$phi57Z2D | -2147483648;
    $31 = ((($0)) + 8|0);
    HEAP32[$31>>2] = $30;
    HEAP32[$$pre$phiZ2D>>2] = $13;
    HEAP32[$0>>2] = $$020355154;
    break;
   }
   else if ((label|0) == 16) {
    $32 = $13&255;
    HEAP8[$3>>0] = $32;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 1|0;
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = ($12>>>0)<($1>>>0);
 do {
  if ($11) {
   $13 = (($1) - ($12))|0;
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($0,$13,$2)|0);
  } else {
   if ($7) {
    $14 = HEAP32[$0>>2]|0;
    $15 = (($14) + ($1)|0);
    HEAP8[$3>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($15,$3);
    $16 = ((($0)) + 4|0);
    HEAP32[$16>>2] = $1;
    break;
   } else {
    $17 = (($0) + ($1)|0);
    HEAP8[$4>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($17,$4);
    $18 = $1&255;
    HEAP8[$5>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0);
 if (!($4)) {
  $5 = ((($0)) + 11|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)<(0);
  if ($7) {
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & 2147483647;
   $phitmp$i = (($10) + -1)|0;
   $11 = ((($0)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $15 = $12;$16 = $phitmp$i;
  } else {
   $13 = $6&255;
   $15 = $13;$16 = 10;
  }
  $14 = (($16) - ($15))|0;
  $17 = ($14>>>0)<($1>>>0);
  if ($17) {
   $18 = (($15) + ($1))|0;
   $19 = (($18) - ($16))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0,$16,$19,$15,$15,0,0);
   $$pre = HEAP8[$5>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $6;
  }
  $20 = ($21<<24>>24)<(0);
  if ($20) {
   $22 = HEAP32[$0>>2]|0;
   $24 = $22;
  } else {
   $24 = $0;
  }
  $23 = (($24) + ($15)|0);
  (__ZNSt3__211char_traitsIcE6assignEPcmc($23,$1,$2)|0);
  $25 = (($15) + ($1))|0;
  $26 = HEAP8[$5>>0]|0;
  $27 = ($26<<24>>24)<(0);
  if ($27) {
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $25;
  } else {
   $29 = $25&255;
   HEAP8[$5>>0] = $29;
  }
  $30 = (($24) + ($25)|0);
  HEAP8[$3>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($30,$3);
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (-17 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $23 = $12;
 } else {
  $23 = $0;
 }
 $13 = ($1>>>0)<(2147483623);
 if ($13) {
  $14 = (($2) + ($1))|0;
  $15 = $1 << 1;
  $16 = ($14>>>0)<($15>>>0);
  $$sroa$speculated = $16 ? $15 : $14;
  $17 = ($$sroa$speculated>>>0)<(11);
  $18 = (($$sroa$speculated) + 16)|0;
  $19 = $18 & -16;
  $phitmp = $17 ? 11 : $19;
  $20 = $phitmp;
 } else {
  $20 = -17;
 }
 $21 = (__Znwm($20)|0);
 $22 = ($4|0)==(0);
 if (!($22)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($21,$23,$4)|0);
 }
 $24 = (($3) - ($5))|0;
 $25 = (($24) - ($4))|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (($21) + ($4)|0);
  $28 = (($27) + ($6)|0);
  $29 = (($23) + ($4)|0);
  $30 = (($29) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($28,$30,$25)|0);
 }
 $31 = ($1|0)==(10);
 if (!($31)) {
  __ZdlPv($23);
 }
 HEAP32[$0>>2] = $21;
 $32 = $20 | -2147483648;
 $33 = ((($0)) + 8|0);
 HEAP32[$33>>2] = $32;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;$15 = $phitmp$i;
 } else {
  $12 = $5&255;
  $14 = $12;$15 = 10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($2>>>0);
 if ($16) {
  $27 = (($14) + ($2))|0;
  $28 = (($27) - ($15))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0,$15,$28,$14,$14,0,$2,$1);
 } else {
  $17 = ($2|0)==(0);
  if (!($17)) {
   if ($6) {
    $18 = HEAP32[$0>>2]|0;
    $20 = $18;
   } else {
    $20 = $0;
   }
   $19 = (($20) + ($14)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcm($19,$1,$2)|0);
   $21 = (($14) + ($2))|0;
   $22 = HEAP8[$4>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $21;
   } else {
    $25 = $21&255;
    HEAP8[$4>>0] = $25;
   }
   $26 = (($20) + ($21)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($26,$3);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 1|0;
 $3 = sp;
 HEAP8[$2>>0] = $1;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 2147483647;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$018 = $13;$$019 = $11;
 } else {
  $7 = $5&255;
  $$018 = $7;$$019 = 10;
 }
 $14 = ($$018|0)==($$019|0);
 if ($14) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0,$$019,1,$$019,$$019,0,0);
  $15 = HEAP8[$4>>0]|0;
  $16 = ($15<<24>>24)<(0);
  if ($16) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($6) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $17 = (($$018) + 1)|0;
  $18 = $17&255;
  HEAP8[$4>>0] = $18;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $19 = HEAP32[$0>>2]|0;
  $20 = (($$018) + 1)|0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $$0 = (($$pn) + ($$018)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$2);
 $22 = ((($$0)) + 1|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($22,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($2>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($2>>>0)<(2);
 do {
  if ($5) {
   $6 = $2&255;
   $7 = ((($0)) + 8|0);
   $8 = ((($7)) + 3|0);
   HEAP8[$8>>0] = $6;
   $$0 = $0;
  } else {
   $9 = (($2) + 4)|0;
   $10 = $9 & -4;
   $11 = ($10>>>0)>(1073741823);
   if ($11) {
    _abort();
    // unreachable;
   } else {
    $12 = $10 << 2;
    $13 = (__Znwm($12)|0);
    HEAP32[$0>>2] = $13;
    $14 = $10 | -2147483648;
    $15 = ((($0)) + 8|0);
    HEAP32[$15>>2] = $14;
    $16 = ((($0)) + 4|0);
    HEAP32[$16>>2] = $2;
    $$0 = $13;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE4copyEPwPKwm($$0,$1,$2)|0);
 $17 = (($$0) + ($2<<2)|0);
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($17,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($1>>>0)<(2);
 do {
  if ($5) {
   $6 = $1&255;
   $7 = ((($0)) + 8|0);
   $8 = ((($7)) + 3|0);
   HEAP8[$8>>0] = $6;
   $$0 = $0;
  } else {
   $9 = (($1) + 4)|0;
   $10 = $9 & -4;
   $11 = ($10>>>0)>(1073741823);
   if ($11) {
    _abort();
    // unreachable;
   } else {
    $12 = $10 << 2;
    $13 = (__Znwm($12)|0);
    HEAP32[$0>>2] = $13;
    $14 = $10 | -2147483648;
    $15 = ((($0)) + 8|0);
    HEAP32[$15>>2] = $14;
    $16 = ((($0)) + 4|0);
    HEAP32[$16>>2] = $1;
    $$0 = $13;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE6assignEPwmw($$0,$1,$2)|0);
 $17 = (($$0) + ($1<<2)|0);
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($17,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIwE6assignEPwmw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemset($0,$2,$1)|0);
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = ((($1)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  __ZdlPv($5);
 }
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = HEAP32[$4>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $11 = $phitmp$i;
 } else {
  $11 = 1;
 }
 $10 = ($11>>>0)<($2>>>0);
 do {
  if ($10) {
   if ($7) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $6&255;
    $23 = $21;
   }
   $22 = (($2) - ($11))|0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($0,$11,$22,$23,0,$23,$2,$1);
  } else {
   if ($7) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIwE4moveEPwPKwm($13,$1,$2)|0);
   $14 = (($13) + ($2<<2)|0);
   HEAP32[$3>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($14,$3);
   $15 = HEAP8[$5>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$5>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIwE4moveEPwPKwm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemmove($0,$1,$2)|0);
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (1073741806 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 8|0);
 $12 = ((($11)) + 3|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = HEAP32[$0>>2]|0;
  $29 = $15;
 } else {
  $29 = $0;
 }
 $16 = ($1>>>0)<(536870887);
 if ($16) {
  $17 = (($2) + ($1))|0;
  $18 = $1 << 1;
  $19 = ($17>>>0)<($18>>>0);
  $$sroa$speculated = $19 ? $18 : $17;
  $20 = ($$sroa$speculated>>>0)<(2);
  $21 = (($$sroa$speculated) + 4)|0;
  $22 = $21 & -4;
  $23 = $20 ? 2 : $22;
  $24 = ($23>>>0)>(1073741823);
  if ($24) {
   _abort();
   // unreachable;
  } else {
   $26 = $23;
  }
 } else {
  $26 = 1073741807;
 }
 $25 = $26 << 2;
 $27 = (__Znwm($25)|0);
 $28 = ($4|0)==(0);
 if (!($28)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($27,$29,$4)|0);
 }
 $30 = ($6|0)==(0);
 if (!($30)) {
  $31 = (($27) + ($4<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($31,$7,$6)|0);
 }
 $32 = (($3) - ($5))|0;
 $33 = (($32) - ($4))|0;
 $34 = ($33|0)==(0);
 if (!($34)) {
  $35 = (($29) + ($4<<2)|0);
  $36 = (($35) + ($5<<2)|0);
  $37 = (($27) + ($4<<2)|0);
  $38 = (($37) + ($6<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($38,$36,$33)|0);
 }
 $39 = ($1|0)==(1);
 if (!($39)) {
  __ZdlPv($29);
 }
 HEAP32[$0>>2] = $27;
 $40 = $26 | -2147483648;
 HEAP32[$11>>2] = $40;
 $41 = (($32) + ($6))|0;
 $42 = ((($0)) + 4|0);
 HEAP32[$42>>2] = $41;
 $43 = (($27) + ($41<<2)|0);
 HEAP32[$8>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($43,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017$off042 = 0, $$01938 = 0, $$020355154 = 0, $$02036 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, $phitmp$i22 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(1073741807);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 8|0);
 $4 = ((($3)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;$18 = $phitmp$i;
 } else {
  $11 = $5&255;
  $13 = $11;$18 = 1;
 }
 $12 = ($13>>>0)>($1>>>0);
 $$sroa$speculated = $12 ? $13 : $1;
 $14 = ($$sroa$speculated>>>0)<(2);
 $15 = (($$sroa$speculated) + 4)|0;
 $16 = $15 & -4;
 $phitmp$i22 = (($16) + -1)|0;
 $spec$select$i = $14 ? 1 : $phitmp$i22;
 $17 = ($spec$select$i|0)==($18|0);
 do {
  if (!($17)) {
   do {
    if ($14) {
     $24 = HEAP32[$0>>2]|0;
     if ($6) {
      $$017$off042 = 0;$$01938 = $24;$$02036 = $0;
      label = 15;
     } else {
      $25 = $5&255;
      $26 = (($25) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwm($0,$24,$26)|0);
      __ZdlPv($24);
      label = 18;
     }
    } else {
     $19 = (($spec$select$i) + 1)|0;
     $20 = ($19>>>0)>(1073741823);
     if ($20) {
      _abort();
      // unreachable;
     }
     $21 = $19 << 2;
     $22 = (__Znwm($21)|0);
     if ($6) {
      $23 = HEAP32[$0>>2]|0;
      $$017$off042 = 1;$$01938 = $23;$$02036 = $22;
      label = 15;
      break;
     } else {
      $27 = $5&255;
      $28 = (($27) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwm($22,$0,$28)|0);
      $$pre = ((($0)) + 4|0);
      $$020355154 = $22;$$pre$phi57Z2D = $19;$$pre$phiZ2D = $$pre;
      label = 17;
      break;
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $29 = ((($0)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 1)|0;
    (__ZNSt3__211char_traitsIwE4copyEPwPKwm($$02036,$$01938,$31)|0);
    __ZdlPv($$01938);
    if ($$017$off042) {
     $$pre56 = (($spec$select$i) + 1)|0;
     $$020355154 = $$02036;$$pre$phi57Z2D = $$pre56;$$pre$phiZ2D = $29;
     label = 17;
    } else {
     label = 18;
    }
   }
   if ((label|0) == 17) {
    $32 = $$pre$phi57Z2D | -2147483648;
    HEAP32[$3>>2] = $32;
    HEAP32[$$pre$phiZ2D>>2] = $13;
    HEAP32[$0>>2] = $$020355154;
    break;
   }
   else if ((label|0) == 18) {
    $33 = $13&255;
    HEAP8[$4>>0] = $33;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIwE6lengthEPKw($1)|0);
 $3 = (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (1073741807 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = ((($9)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $27 = $13;
 } else {
  $27 = $0;
 }
 $14 = ($1>>>0)<(536870887);
 if ($14) {
  $15 = (($2) + ($1))|0;
  $16 = $1 << 1;
  $17 = ($15>>>0)<($16>>>0);
  $$sroa$speculated = $17 ? $16 : $15;
  $18 = ($$sroa$speculated>>>0)<(2);
  $19 = (($$sroa$speculated) + 4)|0;
  $20 = $19 & -4;
  $21 = $18 ? 2 : $20;
  $22 = ($21>>>0)>(1073741823);
  if ($22) {
   _abort();
   // unreachable;
  } else {
   $24 = $21;
  }
 } else {
  $24 = 1073741807;
 }
 $23 = $24 << 2;
 $25 = (__Znwm($23)|0);
 $26 = ($4|0)==(0);
 if (!($26)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($25,$27,$4)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($27) + ($4<<2)|0);
  $32 = (($31) + ($5<<2)|0);
  $33 = (($25) + ($4<<2)|0);
  $34 = (($33) + ($6<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($34,$32,$29)|0);
 }
 $35 = ($1|0)==(1);
 if (!($35)) {
  __ZdlPv($27);
 }
 HEAP32[$0>>2] = $25;
 $36 = $24 | -2147483648;
 HEAP32[$9>>2] = $36;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = HEAP32[$4>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;$15 = $phitmp$i;
 } else {
  $12 = $6&255;
  $14 = $12;$15 = 1;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($2>>>0);
 if ($16) {
  $27 = (($14) + ($2))|0;
  $28 = (($27) - ($15))|0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($0,$15,$28,$14,$14,0,$2,$1);
 } else {
  $17 = ($2|0)==(0);
  if (!($17)) {
   if ($7) {
    $18 = HEAP32[$0>>2]|0;
    $20 = $18;
   } else {
    $20 = $0;
   }
   $19 = (($20) + ($14<<2)|0);
   (__ZNSt3__211char_traitsIwE4copyEPwPKwm($19,$1,$2)|0);
   $21 = (($14) + ($2))|0;
   $22 = HEAP8[$5>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $21;
   } else {
    $25 = $21&255;
    HEAP8[$5>>0] = $25;
   }
   $26 = (($20) + ($21<<2)|0);
   HEAP32[$3>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($26,$3);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $1;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $9 = HEAP32[$4>>2]|0;
  $10 = $9 & 2147483647;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$018 = $13;$$019 = $11;
 } else {
  $8 = $6&255;
  $$018 = $8;$$019 = 1;
 }
 $14 = ($$018|0)==($$019|0);
 if ($14) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($0,$$019,1,$$019,$$019,0,0);
  $15 = HEAP8[$5>>0]|0;
  $16 = ($15<<24>>24)<(0);
  if ($16) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($7) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $17 = (($$018) + 1)|0;
  $18 = $17&255;
  HEAP8[$5>>0] = $18;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $19 = HEAP32[$0>>2]|0;
  $20 = (($$018) + 1)|0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $$0 = (($$pn) + ($$018<<2)|0);
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0,$2);
 $22 = ((($$0)) + 4|0);
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($22,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__29to_stringEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv($2);
 __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_($0,$2,$1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($$0$i$i) + 1)|0;
  $$0$i$i = $2;
 }
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = $phitmp$i;
 } else {
  $9 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($0,$9,0);
 return;
}
function __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$017 = 0, $$2 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $21 = $7;
 } else {
  $8 = $4&255;
  $21 = $8;
 }
 $$017 = $21;$10 = $4;
 while(1) {
  $9 = ($10<<24>>24)<(0);
  if ($9) {
   $11 = HEAP32[$1>>2]|0;
   $13 = $11;
  } else {
   $13 = $1;
  }
  $12 = (($$017) + 1)|0;
  HEAP32[$vararg_buffer>>2] = $2;
  $14 = (_snprintf($13,$12,64318,$vararg_buffer)|0);
  $15 = ($14|0)>(-1);
  if ($15) {
   $16 = ($14>>>0)>($$017>>>0);
   if ($16) {
    $$2 = $14;
   } else {
    break;
   }
  } else {
   $17 = $$017 << 1;
   $18 = $17 | 1;
   $$2 = $18;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($1,$$2,0);
  $$pre = HEAP8[$3>>0]|0;
  $$017 = $$2;$10 = $$pre;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($1,$14,0);
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $19 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$19>>2] = 0;
  $20 = (($$0$i$i) + 1)|0;
  $$0$i$i = $20;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZSt18uncaught_exceptionv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZSt19uncaught_exceptionsv()|0);
 $1 = ($0|0)>(0);
 return ($1|0);
}
function __ZSt19uncaught_exceptionsv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_uncaught_exception()|0);
 $1 = $0&1;
 return ($1|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    HEAP32[$vararg_buffer7>>2] = 64457;
    _abort_message(64407,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[12994]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 1023](51976,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 1023]($30)|0);
    HEAP32[$vararg_buffer>>2] = 64457;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(64321,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 64457;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(64366,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(64445,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((71420|0),(520|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[17856]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(64596,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[13125]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,52000,51984,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 511]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    if (!($12)) {
     $13 = ((($1)) + 20|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==($2|0);
     if (!($15)) {
      $18 = ((($1)) + 32|0);
      HEAP32[$18>>2] = $3;
      HEAP32[$13>>2] = $2;
      $19 = ((($1)) + 40|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($20) + 1)|0;
      HEAP32[$19>>2] = $21;
      $22 = ((($1)) + 36|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       $25 = ((($1)) + 24|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(2);
       if ($27) {
        $28 = ((($1)) + 54|0);
        HEAP8[$28>>0] = 1;
       }
      }
      $29 = ((($1)) + 44|0);
      HEAP32[$29>>2] = 4;
      break;
     }
    }
    $16 = ($3|0)==(1);
    if ($16) {
     $17 = ((($1)) + 32|0);
     HEAP32[$17>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $18 & $17;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $28 = $4;
   } else {
    $28 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $27 = ($28|0)==(1);
   $or$cond22 = $26 & $27;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, $spec$select = 0, $spec$select33 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 511]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $spec$select = $26 ? $8 : 0;
   $$0 = $spec$select;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 511]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $spec$select33 = $or$cond28 ? $38 : 0;
    $$0 = $spec$select33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 511]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $44 = ((($0)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 24|0);
    $48 = HEAP32[$47>>2]|0;
    FUNCTION_TABLE_viiiii[$48 & 511]($45,$1,$2,$3,$4);
    break;
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($0)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($26)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     FUNCTION_TABLE_viiiiii[$28 & 511]($25,$1,$2,$2,1,$4);
     $29 = HEAP8[$23>>0]|0;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $$037$off038 = 0;
      label = 11;
     } else {
      $31 = HEAP8[$22>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if ($32) {
       $$037$off038 = 1;
       label = 11;
      } else {
       label = 15;
      }
     }
     do {
      if ((label|0) == 11) {
       HEAP32[$13>>2] = $2;
       $33 = ((($1)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($1)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($1)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($1)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($$037$off038) {
          label = 15;
          break;
         } else {
          $43 = 4;
          break;
         }
        }
       }
       if ($$037$off038) {
        label = 15;
       } else {
        $43 = 4;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      $43 = 3;
     }
     HEAP32[$19>>2] = $43;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 511]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((71424|0),(521|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(64645,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[17856]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(64695,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = ((($2)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($17);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$0 & 1023]();
 _abort_message(64748,$vararg_buffer);
 // unreachable;
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[14141]|0;
 $1 = (($0) + 0)|0;
 HEAP32[14141] = $1;
 $2 = $0;
 return ($2|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (56656);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0)|0);
 if ($1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_529($2)|0);
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + -1)|0;
  HEAP32[$4>>2] = $6;
  $7 = (($5) + -1)|0;
  $8 = ($7|0)<(0);
  if ($8) {
   __ZdlPv($3);
  }
 }
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_529($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -12|0);
 return ($1|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $5;
 $6 = (__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,0)|0);
 if ($6) {
  $$4 = 1;
 } else {
  $7 = ($1|0)==(0|0);
  if ($7) {
   $$4 = 0;
  } else {
   $8 = (___dynamic_cast($1,52000,52088,0)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$4 = 0;
   } else {
    $10 = ((($8)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 ^ -1;
    $15 = $11 & $14;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = ((($0)) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($8)) + 12|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($18,$20,0)|0);
     if ($21) {
      $$4 = 1;
     } else {
      $22 = HEAP32[$17>>2]|0;
      $23 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($22,52120,0)|0);
      if ($23) {
       $$4 = 1;
      } else {
       $24 = HEAP32[$17>>2]|0;
       $25 = ($24|0)==(0|0);
       if ($25) {
        $$4 = 0;
       } else {
        $26 = (___dynamic_cast($24,52000,51984,0)|0);
        $27 = ($26|0)==(0|0);
        if ($27) {
         $$4 = 0;
        } else {
         $28 = HEAP32[$19>>2]|0;
         $29 = ($28|0)==(0|0);
         if ($29) {
          $$4 = 0;
         } else {
          $30 = (___dynamic_cast($28,52000,51984,0)|0);
          $31 = ($30|0)==(0|0);
          if ($31) {
           $$4 = 0;
          } else {
           $32 = ((($3)) + 4|0);
           dest=$32; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
           HEAP32[$3>>2] = $30;
           $33 = ((($3)) + 8|0);
           HEAP32[$33>>2] = $26;
           $34 = ((($3)) + 12|0);
           HEAP32[$34>>2] = -1;
           $35 = ((($3)) + 48|0);
           HEAP32[$35>>2] = 1;
           $36 = HEAP32[$30>>2]|0;
           $37 = ((($36)) + 28|0);
           $38 = HEAP32[$37>>2]|0;
           $39 = HEAP32[$2>>2]|0;
           FUNCTION_TABLE_viiii[$38 & 511]($30,$3,$39,1);
           $40 = ((($3)) + 24|0);
           $41 = HEAP32[$40>>2]|0;
           $42 = ($41|0)==(1);
           if ($42) {
            $43 = ((($3)) + 16|0);
            $44 = HEAP32[$43>>2]|0;
            HEAP32[$2>>2] = $44;
            $$0 = 1;
           } else {
            $$0 = 0;
           }
           $$4 = $$0;
          }
         }
        }
       }
      }
     }
    } else {
     $$4 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($3) {
  $$0 = 1;
 } else {
  $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($1,52128,0)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function __ZN10__cxxabiv116__enum_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($1)) + 53|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 16|0);
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($0)) + 16|0) + ($15<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$11>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($13,$1,$2,$3,$4,$5);
  $17 = ($15|0)>(1);
  L4: do {
   if ($17) {
    $18 = ((($0)) + 24|0);
    $19 = ((($1)) + 24|0);
    $20 = ((($0)) + 8|0);
    $21 = ((($1)) + 54|0);
    $$0 = $18;
    while(1) {
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if (!($23)) {
      break L4;
     }
     $24 = HEAP8[$9>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $31 = HEAP8[$11>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if (!($32)) {
       $33 = HEAP32[$20>>2]|0;
       $34 = $33 & 1;
       $35 = ($34|0)==(0);
       if ($35) {
        break L4;
       }
      }
     } else {
      $26 = HEAP32[$19>>2]|0;
      $27 = ($26|0)==(1);
      if ($27) {
       break L4;
      }
      $28 = HEAP32[$20>>2]|0;
      $29 = $28 & 2;
      $30 = ($29|0)==(0);
      if ($30) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$11>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $36 = ((($$0)) + 8|0);
     $37 = ($36>>>0)<($16>>>0);
     if ($37) {
      $$0 = $36;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $10;
  HEAP8[$11>>0] = $12;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 L1: do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $56 = ((($0)) + 16|0);
    $57 = ((($0)) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (((($0)) + 16|0) + ($58<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($56,$1,$2,$3,$4);
    $60 = ((($0)) + 24|0);
    $61 = ($58|0)>(1);
    if (!($61)) {
     break;
    }
    $62 = ((($0)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 2;
    $65 = ($64|0)==(0);
    if ($65) {
     $66 = ((($1)) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(1);
     if (!($68)) {
      $74 = $63 & 1;
      $75 = ($74|0)==(0);
      if ($75) {
       $86 = ((($1)) + 54|0);
       $$2 = $60;
       while(1) {
        $87 = HEAP8[$86>>0]|0;
        $88 = ($87<<24>>24)==(0);
        if (!($88)) {
         break L1;
        }
        $89 = HEAP32[$66>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $91 = ((($$2)) + 8|0);
        $92 = ($91>>>0)<($59>>>0);
        if ($92) {
         $$2 = $91;
        } else {
         break L1;
        }
       }
      }
      $76 = ((($1)) + 24|0);
      $77 = ((($1)) + 54|0);
      $$1 = $60;
      while(1) {
       $78 = HEAP8[$77>>0]|0;
       $79 = ($78<<24>>24)==(0);
       if (!($79)) {
        break L1;
       }
       $80 = HEAP32[$66>>2]|0;
       $81 = ($80|0)==(1);
       if ($81) {
        $82 = HEAP32[$76>>2]|0;
        $83 = ($82|0)==(1);
        if ($83) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $84 = ((($$1)) + 8|0);
       $85 = ($84>>>0)<($59>>>0);
       if ($85) {
        $$1 = $84;
       } else {
        break L1;
       }
      }
     }
    }
    $69 = ((($1)) + 54|0);
    $$0 = $60;
    while(1) {
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(0);
     if (!($71)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $72 = ((($$0)) + 8|0);
     $73 = ($72>>>0)<($59>>>0);
     if ($73) {
      $$0 = $72;
     } else {
      break L1;
     }
    }
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($0)) + 16|0);
     $23 = ((($0)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($0)) + 16|0) + ($24<<3)|0);
     $26 = ((($1)) + 52|0);
     $27 = ((($1)) + 53|0);
     $28 = ((($1)) + 54|0);
     $29 = ((($0)) + 8|0);
     $30 = ((($1)) + 24|0);
     $$081$off0 = 0;$$084 = $22;$$085$off0 = 0;
     L32: while(1) {
      $31 = ($$084>>>0)<($25>>>0);
      if (!($31)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      HEAP8[$26>>0] = 0;
      HEAP8[$27>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $32 = HEAP8[$28>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if (!($33)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      $34 = HEAP8[$27>>0]|0;
      $35 = ($34<<24>>24)==(0);
      do {
       if ($35) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $36 = HEAP8[$26>>0]|0;
        $37 = ($36<<24>>24)==(0);
        if ($37) {
         $43 = HEAP32[$29>>2]|0;
         $44 = $43 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$283$off0 = 1;
          label = 18;
          break L32;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $38 = HEAP32[$30>>2]|0;
        $39 = ($38|0)==(1);
        if ($39) {
         label = 23;
         break L32;
        }
        $40 = HEAP32[$29>>2]|0;
        $41 = $40 & 2;
        $42 = ($41|0)==(0);
        if ($42) {
         label = 23;
         break L32;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $46 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $46;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 18) {
       if (!($$085$off0)) {
        HEAP32[$13>>2] = $2;
        $47 = ((($1)) + 40|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($48) + 1)|0;
        HEAP32[$47>>2] = $49;
        $50 = ((($1)) + 36|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ($51|0)==(1);
        if ($52) {
         $53 = HEAP32[$30>>2]|0;
         $54 = ($53|0)==(2);
         if ($54) {
          HEAP8[$28>>0] = 1;
          if ($$283$off0) {
           label = 23;
           break;
          } else {
           $55 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 23;
       } else {
        $55 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $55 = 3;
     }
     HEAP32[$19>>2] = $55;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)==(0);
 $19 = $18 ? 2 : $3;
 FUNCTION_TABLE_viiii[$15 & 511]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)==(0);
 $21 = $20 ? 2 : $4;
 FUNCTION_TABLE_viiiiii[$17 & 511]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)==(0);
 $20 = $19 ? 2 : $3;
 FUNCTION_TABLE_viiiii[$16 & 511]($13,$1,$17,$20,$4);
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $$0 = 0;
 } else {
  HEAP8[$0>>0] = 1;
  $$0 = 1;
 }
 return ($$0|0);
}
function ___cxa_guard_release($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[17857]|0;
 $1 = (($0) + 0)|0;
 HEAP32[17857] = $1;
 $2 = $0;
 return ($2|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 1023]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $3 = 0;
 } else {
  $2 = (___dynamic_cast($0,52000,52088,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $phitmp1 = $phitmp&1;
  $3 = $phitmp1;
 }
 return ($3|0);
}
function runPostSets() {
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0(((high|0) < 0 ? -1 : 0) | 0);
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _pthread_cond_broadcast(x) {
    x = x | 0;
    return 0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&511]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&255](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0() {
 ; nullFunc_i(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function __emval_new__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return __emval_new(p0|0,p1|0,p2|0,p3|0)|0;
}
function b5(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(5);return 0;
}
function b6(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(6);return 0;
}
function b7(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(7);return 0;
}
function b8(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(9);return 0;
}
function b10(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(10);return 0;
}
function b11() {
 ; nullFunc_v(11);
}
function b12(p0) {
 p0 = p0|0; nullFunc_vi(12);
}
function b13(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(13);
}
function b14(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(14);
}
function b15(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(15);
}
function b16(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(16);
}
function b17(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(17);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__Z17mad_header_createv,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,__Z16mad_frame_createv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__Z17mad_stream_createv
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,__Z14mad_pcm_createv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__Z16mad_synth_createv,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,__ZN10emscripten8internal12operator_newI7DecoderJEEEPT_DpOT0_,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN10emscripten8internal15raw_constructorI11mad_timer_tJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_ii = [b1,b1,b1,b1,___stdio_close,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b1,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b1,b1,b1,b1,b1,b1
,b1,b1,b1,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b1,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNSt3__211__stdoutbufIwE4syncEv
,b1,b1,b1,b1,__ZNSt3__211__stdoutbufIcE4syncEv,b1,b1,b1,b1,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,b1,b1,b1,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b1,b1,b1,b1,b1,b1,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv
,b1,b1,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b1,b1,b1,b1,b1,b1,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,b1,b1,b1,b1,b1,b1,b1,b1,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,b1,b1,b1,b1
,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,b1,b1,b1,b1,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,b1,b1,b1,b1,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,b1,b1,b1,b1,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,b1,b1,b1,b1,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,b1,b1,b1,b1,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,b1
,b1,b1,b1,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,b1,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,b1,b1,b1,b1,b1,b1,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,b1,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,b1,b1,b1,b1,b1,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,b1,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,b1,b1,b1,b1,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,b1,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,__ZNKSt11logic_error4whatEv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNSt3__24endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,__ZN10emscripten8internal13getActualTypeI10mad_headerEEPKvPT_,b1,__ZN10emscripten8internal13getActualTypeI9MadHeaderEEPKvPT_,b1,b1,__ZN10emscripten8internal7InvokerIP9MadHeaderJEE6invokeEPFS3_vE,__ZNK9MadHeader8getLayerEv,b1,b1,b1,__ZNK9MadHeader17getMode_extensionEv
,b1,b1,b1,__ZNK9MadHeader7getModeEv,b1,b1,b1,__ZNK9MadHeader11getEmphasisEv,b1,b1,b1,__ZNK9MadHeader10getBitrateEv,b1,b1,b1,__ZNK9MadHeader13getSamplerateEv,b1,b1,b1,__ZNK9MadHeader12getCrc_checkEv,b1,b1,b1,__ZNK9MadHeader13getCrc_targetEv,b1,__ZNK9MadHeader8getFlagsEv,b1,__ZNK9MadHeader15getPrivate_bitsEv,b1,b1
,b1,b1,b1,b1,__ZN10emscripten8internal13getActualTypeI9mad_frameEEPKvPT_,b1,__ZN10emscripten8internal13getActualTypeI8MadFrameEEPKvPT_,b1,b1,__ZN10emscripten8internal7InvokerIP8MadFrameJEE6invokeEPFS3_vE,__ZNK8MadFrame10getOptionsEv,b1,b1,b1,__ZNK8MadFrame6headerEv,b1,b1,b1,b1,b1,b1,b1,b1,__ZN10emscripten8internal13getActualTypeI10mad_bitptrEEPKvPT_,b1,__ZN10emscripten8internal13getActualTypeI10mad_streamEEPKvPT_,b1,__ZN10emscripten8internal13getActualTypeI9MadStreamEEPKvPT_,b1,b1
,__ZN10emscripten8internal7InvokerIP9MadStreamJEE6invokeEPFS3_vE,__ZNK9MadStream7getSyncEv,b1,b1,b1,__ZNK9MadStream11getFreeRateEv,b1,b1,b1,__ZNK9MadStream10getOptionsEv,b1,__ZNK9MadStream8getErrorEv,b1,b1,b1,__ZNK9MadStream8getMdLenEv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_mad_stream_sync,__ZN10emscripten8internal13getActualTypeI7mad_pcmEEPKvPT_,b1,__ZN10emscripten8internal13getActualTypeI6MadPCMEEPKvPT_
,b1,b1,__ZN10emscripten8internal7InvokerIP6MadPCMJEE6invokeEPFS3_vE,__ZNK6MadPCM13getSamplerateEv,b1,b1,b1,__ZNK6MadPCM11getChannelsEv,b1,b1,b1,__ZNK6MadPCM9getLengthEv,b1,b1,b1,b1,b1,__ZN10emscripten8internal13getActualTypeI9mad_synthEEPKvPT_,b1,__ZN10emscripten8internal13getActualTypeI8MadSynthEEPKvPT_,b1,b1,__ZN10emscripten8internal7InvokerIP8MadSynthJEE6invokeEPFS3_vE,__ZNK8MadSynth8getPhaseEv,b1,b1,b1,__ZNK8MadSynth3pcmEv,b1,b1
,b1,__ZN10emscripten8internal13getActualTypeI7DecoderEEPKvPT_,b1,b1,__ZN10emscripten8internal7InvokerIP7DecoderJEE6invokeEPFS3_vE,b1,b1,__ZNK7Decoder7hasMoreEv,b1,b1,b1,b1,b1,__ZN10emscripten4baseI10mad_headerE14convertPointerI9MadHeaderS1_EEPT0_PT_,__ZN10emscripten4baseI10mad_headerE14convertPointerIS1_9MadHeaderEEPT0_PT_,b1,__ZN10emscripten4baseI9mad_frameE14convertPointerI8MadFrameS1_EEPT0_PT_,__ZN10emscripten4baseI9mad_frameE14convertPointerIS1_8MadFrameEEPT0_PT_,b1,b1,b1,b1,b1,b1,b1,__ZN10emscripten4baseI10mad_streamE14convertPointerI9MadStreamS1_EEPT0_PT_,__ZN10emscripten4baseI10mad_streamE14convertPointerIS1_9MadStreamEEPT0_PT_,b1,b1,b1
,__ZN10emscripten4baseI7mad_pcmE14convertPointerI6MadPCMS1_EEPT0_PT_,__ZN10emscripten4baseI7mad_pcmE14convertPointerIS1_6MadPCMEEPT0_PT_,b1,b1,__ZN10emscripten4baseI9mad_synthE14convertPointerI8MadSynthS1_EEPT0_PT_,__ZN10emscripten4baseI9mad_synthE14convertPointerIS1_8MadSynthEEPT0_PT_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2,_mad_layer_I,_mad_layer_II,_mad_layer_III,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b2,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b2,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,__ZNSt3__211__stdoutbufIwE8overflowEj,b2,b2,b2,b2,__ZNSt3__211__stdoutbufIcE8overflowEi,b2,b2,b2,b2,__ZNSt3__210__stdinbufIwE9pbackfailEj,b2,b2,b2,b2,__ZNSt3__210__stdinbufIcE9pbackfailEi,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNKSt3__25ctypeIcE10do_toupperEc,b2,__ZNKSt3__25ctypeIcE10do_tolowerEc,b2,__ZNKSt3__25ctypeIcE8do_widenEc
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNKSt3__25ctypeIwE10do_toupperEw,b2,__ZNKSt3__25ctypeIwE10do_tolowerEw,b2,__ZNKSt3__25ctypeIwE8do_widenEc,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF9mad_layervEE3getIS2_EES3_RKS5_RKT_,b2,b2
,b2,__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFivEE3getIS2_EEiRKS4_RKT_,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF8mad_modevEE3getIS2_EES3_RKS5_RKT_,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF12mad_emphasisvEE3getIS2_EES3_RKS5_RKT_,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFmvEE3getIS2_EEmRKS4_RKT_,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFjvEE3getIS2_EEjRKS4_RKT_,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKFtvEE3getIS2_EEtRKS4_RKT_,b2,b2,b2,b2,b2,b2,b2,b2
,b2,__ZN10emscripten8internal12GetterPolicyIM9MadHeaderKF11mad_timer_tvEE3getIS2_EEPS3_RKS5_RKT_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM8MadFrameKFivEE3getIS2_EEiRKS4_RKT_,b2,b2,__ZN10emscripten8internal13MethodInvokerIM8MadFrameKFPK9MadHeadervES5_PKS2_JEE6invokeERKS7_S9_,b2,__ZN10emscripten8internal13MethodInvokerIM8MadFrameKFNS_3valEvES3_PKS2_JEE6invokeERKS5_S7_,b2,__ZN8MadFrame6decodeEP10mad_stream,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM9MadStreamKFivEE3getIS2_EEiRKS4_RKT_,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM9MadStreamKFmvEE3getIS2_EEmRKS4_RKT_,b2,b2,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM9MadStreamKF9mad_errorvEE3getIS2_EES3_RKS5_RKT_,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM9MadStreamKFjvEE3getIS2_EEjRKS4_RKT_,b2,b2,__ZN10emscripten8internal13MethodInvokerIM9MadStreamFNS_3valEvES3_PS2_JEE6invokeERKS5_S6_,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM6MadPCMKFjvEE3getIS2_EEjRKS4_RKT_,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM6MadPCMKFtvEE3getIS2_EEtRKS4_RKT_,b2,b2,b2,b2,__ZN10emscripten8internal13MethodInvokerIM6MadPCMKFNS_3valEvES3_PKS2_JEE6invokeERKS5_S7_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal12GetterPolicyIM8MadSynthKFjvEE3getIS2_EEjRKS4_RKT_,b2,b2,__ZN10emscripten8internal13MethodInvokerIM8MadSynthKFPK6MadPCMvES5_PKS2_JEE6invokeERKS7_S9_,b2
,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal13MethodInvokerIM7DecoderKFbvEbPKS2_JEE6invokeERKS4_S6_,__ZN7Decoder10framesLeftEj,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal12MemberAccessI11mad_timer_tlE7getWireIS2_EElRKMS2_lRKT_,b2,__ZN10emscripten8internal12MemberAccessI11mad_timer_tmE7getWireIS2_EEmRKMS2_mRKT_,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal7InvokerIiJP10mad_streamEE6invokeEPFiS3_ES3_
,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,b3,b3,b3,b3,___stdio_write,___stdio_seek,___stdout_write,___stdio_read,_sn_write,b3,b3,b3,b3,b3,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl,b3,b3,b3,b3,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl,b3,b3,b3,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl,b3,b3,b3,b3
,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl,b3,b3,b3,b3,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl,b3,b3,b3,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,__ZNSt3__211__stdoutbufIwE6xsputnEPKwl,b3,b3,b3,b3,__ZNSt3__211__stdoutbufIcE6xsputnEPKcl,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__27collateIcE7do_hashEPKcS3_,b3,b3,b3,b3,__ZNKSt3__27collateIwE7do_hashEPKwS3_,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b3,b3,b3,b3,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,b3,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,b3
,b3,__ZNKSt3__25ctypeIcE9do_narrowEcc,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__25ctypeIwE5do_isEtw,b3,b3,b3,b3,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,b3,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,b3,b3,__ZNKSt3__25ctypeIwE9do_narrowEwc
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal13MethodInvokerIM8MadFrameFiP10mad_streamEiPS2_JS4_EE6invokeERKS6_S7_S4_,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal13MethodInvokerIM7DecoderFjjEjPS2_JjEE6invokeERKS4_S5_j,b3,__ZN10emscripten8internal13MethodInvokerIM7DecoderFNS_3valEjES3_PS2_JjEE6invokeERKS5_S6_j,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,_do_read,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,b4,b4,b4,b4,b4,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__emval_new__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_iiiiid = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,b6,b6,b6,b6,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b6,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm
,b6,b6,b6,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b6,b6,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b6,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b6,b6,b6,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b6,b6,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m,b6,b6,b6,b6,b6,b6,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b6,b6,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,b6,b6,b6,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b6,b6,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m,b6,b6,b6,b6,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b6,b6,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_iiiiiid = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b7,b7,b7,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b8,b8,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b8,b8,b8,b8,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b8
,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b8,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b8,b8,b8,b8,b8,b8,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b8,b8,b8,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b9,b9,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b9,b9,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iiiiiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b10,b10,b10,b10,b10,b10,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_v = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZL25default_terminate_handlerv,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_vi = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__211__stdoutbufIwED0Ev,b12,b12
,b12,b12,__ZNSt3__211__stdoutbufIcED0Ev,b12,b12,b12,b12,__ZNSt3__210__stdinbufIwED0Ev,b12,b12,b12,b12,__ZNSt3__210__stdinbufIcED0Ev,b12,b12,b12,b12,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,b12,b12,b12,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,b12,b12,b12,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b12,b12,b12,b12
,b12,b12,b12,b12,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b12,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b12,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,b12,b12,b12,b12,b12,b12
,b12,b12,b12,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,b12,b12,b12
,b12,b12,b12,b12,b12,b12,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b12,b12,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b12,b12,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b12,b12,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b12,b12,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,b12,b12,b12,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,b12
,b12,b12,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILm32EED0Ev,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__217__widen_from_utf8ILm32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,b12,b12,b12,b12,b12
,b12,b12,b12,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,b12,b12,b12,b12,b12,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,b12,b12,b12,b12,b12,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,b12,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b12,b12,b12,b12,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b12,b12
,b12,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b12,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b12,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b12,__ZN10__cxxabiv116__enum_type_infoD0Ev,b12,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b12,b12,b12,b12,b12,b12,b12,b12,__ZN10emscripten8internal14raw_destructorI10mad_headerEEvPT_,b12,__ZN10emscripten8internal14raw_destructorI9MadHeaderEEvPT_,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,_mad_header_init,b12,__ZN10emscripten8internal14raw_destructorI9mad_frameEEvPT_,b12,__ZN10emscripten8internal14raw_destructorI8MadFrameEEvPT_,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_mad_frame_init,_mad_frame_finish,b12,__ZN10emscripten8internal14raw_destructorI10mad_bitptrEEvPT_,b12,__ZN10emscripten8internal14raw_destructorI10mad_streamEEvPT_,b12,__ZN10emscripten8internal14raw_destructorI9MadStreamEEvPT_,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_mad_stream_init,_mad_stream_finish,b12,b12,b12,__ZN10emscripten8internal14raw_destructorI7mad_pcmEEvPT_,b12
,__ZN10emscripten8internal14raw_destructorI6MadPCMEEvPT_,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_mad_synth_init,b12,b12,__ZN10emscripten8internal14raw_destructorI9mad_synthEEvPT_,b12,__ZN10emscripten8internal14raw_destructorI8MadSynthEEvPT_,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,__ZN10emscripten8internal14raw_destructorI7DecoderEEvPT_,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN10emscripten8internal14raw_destructorI11mad_timer_tEEvPT_,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__212__do_nothingEPv,_free,b12,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_vii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,b13
,b13,b13,b13,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,b13,b13,b13,b13,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,b13,b13,b13,b13,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv
,b13,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,b13,b13,b13,b13,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,b13,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,b13,b13,b13,b13,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,b13,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,b13,b13,b13,b13,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv
,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,b13,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__28messagesIcE8do_closeEl,b13,b13,b13
,b13,__ZNKSt3__28messagesIwE8do_closeEl,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,b13,b13,b13,b13,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN9MadHeader8setLayerE9mad_layer,b13,b13,b13
,__ZN9MadHeader17setMode_extensionEi,b13,b13,b13,__ZN9MadHeader7setModeE8mad_mode,b13,b13,b13,__ZN9MadHeader11setEmphasisE12mad_emphasis,b13,b13,b13,__ZN9MadHeader10setBitrateEm,b13,b13,b13,__ZN9MadHeader13setSamplerateEj,b13,b13,b13,__ZN9MadHeader12setCrc_checkEt,b13,b13,b13,__ZN9MadHeader13setCrc_targetEm,b13,__ZN9MadHeader8setFlagsEi,b13,__ZN9MadHeader15setPrivate_bitsEi,__ZNK9MadHeader11getDurationEv
,__ZN9MadHeader11setDurationE11mad_timer_t,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN8MadFrame10setOptionsEi,b13,b13,b13,b13,__ZNK8MadFrame11getSbsampleEv,b13,__ZNK8MadFrame10getOverlapEv,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,__ZN9MadStream7setSyncEi,b13,b13,b13,__ZN9MadStream11setFreeRateEm,b13,b13,b13,__ZN9MadStream10setOptionsEi,b13,__ZN9MadStream8setErrorE9mad_error,b13,b13,b13,__ZN9MadStream8setMdLenEj,b13,b13,__ZN9MadStream8mainDataEv,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,__ZN6MadPCM13setSamplerateEj,b13,b13,b13,__ZN6MadPCM11setChannelsEt,b13,b13,b13,__ZN6MadPCM9setLengthEt,__ZNK6MadPCM7samplesEv,b13,b13,_mad_synth_frame,b13,b13,b13,b13,b13,b13,b13,__ZN8MadSynth8setPhaseEj,b13,b13,b13,b13,__ZN8MadSynth5frameEPK9mad_frame
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN10emscripten8internal7InvokerIvJP10mad_headerEE6invokeEPFvS3_ES3_,b13,b13,b13,b13,b13,b13,b13,b13,__ZN10emscripten8internal7InvokerIvJP9mad_frameEE6invokeEPFvS3_ES3_,b13,b13,__ZN10emscripten8internal7InvokerIvJP10mad_streamEE6invokeEPFvS3_ES3_,b13,b13
,b13,b13,__ZN10emscripten8internal7InvokerIvJP9mad_synthEE6invokeEPFvS3_ES3_];
var FUNCTION_TABLE_viii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv9mad_layerEE3setIS2_EEvRKS5_RT_S3_,b14
,b14,b14,__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFviEE3setIS2_EEvRKS4_RT_i,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv8mad_modeEE3setIS2_EEvRKS5_RT_S3_,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv12mad_emphasisEE3setIS2_EEvRKS5_RT_S3_,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFvmEE3setIS2_EEvRKS4_RT_m,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFvjEE3setIS2_EEvRKS4_RT_j,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFvtEE3setIS2_EEvRKS4_RT_t,b14,b14,b14,b14,b14,b14,b14
,b14,b14,__ZN10emscripten8internal12SetterPolicyIM9MadHeaderFv11mad_timer_tEE3setIS2_EEvRKS5_RT_PS3_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM8MadFrameFviEE3setIS2_EEvRKS4_RT_i,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM9MadStreamFviEE3setIS2_EEvRKS4_RT_i,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM9MadStreamFvmEE3setIS2_EEvRKS4_RT_m,b14,b14,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM9MadStreamFv9mad_errorEE3setIS2_EEvRKS5_RT_S3_,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM9MadStreamFvjEE3setIS2_EEvRKS4_RT_j,b14,b14,__ZN9MadStream9setBufferElm,b14,b14,b14,_mad_stream_buffer,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM6MadPCMFvjEE3setIS2_EEvRKS4_RT_j,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM6MadPCMFvtEE3setIS2_EEvRKS4_RT_t,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN10emscripten8internal12SetterPolicyIM8MadSynthFvjEE3setIS2_EEvRKS4_RT_j,b14,b14,b14
,__ZN10emscripten8internal13MethodInvokerIM8MadSynthFvPK9mad_frameEvPS2_JS5_EE6invokeERKS7_S8_S5_,b14,b14,b14,b14,__ZN7Decoder11addFragmentElj,b14,b14,b14,b14,b14,__ZN7Decoder6decodeEj,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN10emscripten8internal12MemberAccessI11mad_timer_tlE7setWireIS2_EEvRKMS2_lRT_l,b14,__ZN10emscripten8internal12MemberAccessI11mad_timer_tmE7setWireIS2_EEvRKMS2_mRT_m,b14,b14,b14,b14,b14,b14
,b14,b14,b14,__ZN10emscripten8internal7InvokerIvJP9mad_synthPK9mad_frameEE6invokeEPFvS3_S6_ES3_S6_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_viiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__27collateIcE12do_transformEPKcS3_,b15,b15,b15,b15,__ZNKSt3__27collateIwE12do_transformEPKwS3_,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b15,b15,b15
,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,_synth_full,_synth_half,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN10emscripten8internal13MethodInvokerIM9MadStreamFvlmEvPS2_JlmEE6invokeERKS4_S5_lm,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,__ZN10emscripten8internal13MethodInvokerIM7DecoderFvljEvPS2_JljEE6invokeERKS4_S5_lj,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN10emscripten8internal7InvokerIvJP10mad_streamPKhmEE6invokeEPFvS3_S5_mES3_S5_m,b15
,b15,b15,b15];
var FUNCTION_TABLE_viiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b16,b16,b16,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16];
var FUNCTION_TABLE_viiiiii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b17,b17,b17,b17
,__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b17,b17,b17,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17];

  return { __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, __GLOBAL__sub_I_wrapper_cpp: __GLOBAL__sub_I_wrapper_cpp, __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_cond_broadcast: _pthread_cond_broadcast, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, runPostSets: runPostSets, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__I_000101 = asm["__GLOBAL__I_000101"]; asm["__GLOBAL__I_000101"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__I_000101.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"]; asm["__GLOBAL__sub_I_iostream_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_wrapper_cpp = asm["__GLOBAL__sub_I_wrapper_cpp"]; asm["__GLOBAL__sub_I_wrapper_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_wrapper_cpp.apply(null, arguments);
};

var real___ZSt18uncaught_exceptionv = asm["__ZSt18uncaught_exceptionv"]; asm["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt18uncaught_exceptionv.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Ashr.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var __GLOBAL__sub_I_wrapper_cpp = Module["__GLOBAL__sub_I_wrapper_cpp"] = asm["__GLOBAL__sub_I_wrapper_cpp"];
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = asm["__ZSt18uncaught_exceptionv"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



//# sourceMappingURL=wrapper.js.map